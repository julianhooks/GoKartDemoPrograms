
Nucleo-L432KC-TBW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800bf18  0800bf18  0000cf18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d4  0800c3d4  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d4  0800c3d4  0000d3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3dc  0800c3dc  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3dc  0800c3dc  0000d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c3e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001dc  0800c5c0  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800c5c0  0000e604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ac7  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  00022cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00025520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee4  00000000  00000000  00026848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023945  00000000  00000000  0002772c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149ff  00000000  00000000  0004b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5ce  00000000  00000000  0005fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  0013e084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001447dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800befc 	.word	0x0800befc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800befc 	.word	0x0800befc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_write>:
float speed_accumu = 0.0;

float wheel_diameter = 0.27;

// uart print to serial terminal for debugging purpose
int _write(int file, char *ptr, int len){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <_write+0x28>)
 8001038:	f005 ff14 	bl	8006e64 <HAL_UART_Transmit>
	return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200003b4 	.word	0x200003b4

0800104c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fd48 	bl	8003af0 <HAL_CAN_GetRxMessage>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8001066:	f000 fcb1 	bl	80019cc <Error_Handler>
  }

  // 0x100 is the can device id of the main controller
  if ((RxHeader.StdId == 0x100))
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001072:	d109      	bne.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
  {
	  // first compute the brake percentage then the pressure needed
	  throttle_desired = CAN_RxData[2];
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800107c:	601a      	str	r2, [r3, #0]
	  motor_direction = CAN_RxData[3];
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	461a      	mov	r2, r3
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001086:	601a      	str	r2, [r3, #0]
  }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000478 	.word	0x20000478
 8001094:	20000454 	.word	0x20000454
 8001098:	2000047c 	.word	0x2000047c
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_TIM_PeriodElapsedCallback>:
{
	int raw = HAL_ADC_GetValue(&hadc1);
	throttleVoltage = (raw * 3.3f) / 4095.0f;
}*/
int throttlePWM;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	// 100Hz = 10ms send out speed control ppm to vesc
	if (htim == &htim6){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a7d      	ldr	r2, [pc, #500]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d12c      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x6a>
	  if (motor_direction == 1){
 80010b0:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d109      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x2c>
		  TIM1->CCR1 = throttle_desired/2 + 150;
 80010b8:	4b7b      	ldr	r3, [pc, #492]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0fda      	lsrs	r2, r3, #31
 80010be:	4413      	add	r3, r2
 80010c0:	105b      	asrs	r3, r3, #1
 80010c2:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 80010c6:	4b79      	ldr	r3, [pc, #484]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ca:	e009      	b.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x40>
	  } else{
		  TIM1->CCR1 = -throttle_desired/2 + 150;
 80010cc:	4b76      	ldr	r3, [pc, #472]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0fda      	lsrs	r2, r3, #31
 80010d2:	4413      	add	r3, r2
 80010d4:	105b      	asrs	r3, r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 80010dc:	4b73      	ldr	r3, [pc, #460]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
	  }

	  //with throttle, max is 3v, min is 0 -- scale this to 1000 - 2000 for PWM.

	  throttlePWM = (int)(100 + (throttleVoltage * 100 / 3));
 80010e0:	4b73      	ldr	r3, [pc, #460]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80012b4 <HAL_TIM_PeriodElapsedCallback+0x214>
 80010ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ee:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80010f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80012b4 <HAL_TIM_PeriodElapsedCallback+0x214>
 80010fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 2a90 	vmov	r2, s15
 8001106:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001108:	601a      	str	r2, [r3, #0]
	  // send out speed control ppm
  }

  // 1000Hz = 1ms read speed sensor for speed measurement
  if (htim == &htim7){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a6b      	ldr	r2, [pc, #428]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d11c      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0xac>
	  speed_sensor_val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f003 fade 	bl	80046d8 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b67      	ldr	r3, [pc, #412]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001122:	601a      	str	r2, [r3, #0]

	  // we have a new magnet passing through
	  if(speed_sensor_val != speed_sensor_pre){
 8001124:	4b66      	ldr	r3, [pc, #408]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d00d      	beq.n	800114c <HAL_TIM_PeriodElapsedCallback+0xac>
		  speed_accumu += 18.0; // 10 magnets (360/10/2 = 18 degrees per switch)
 8001130:	4b65      	ldr	r3, [pc, #404]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800113a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113e:	4b62      	ldr	r3, [pc, #392]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
		  speed_sensor_pre = speed_sensor_val;
 8001144:	4b5e      	ldr	r3, [pc, #376]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5e      	ldr	r2, [pc, #376]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800114a:	6013      	str	r3, [r2, #0]
	  }
  }

  // 5Hz = 200ms compute speed using sliding window and send out info
  if (htim == &htim16){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f040 8096 	bne.w	8001282 <HAL_TIM_PeriodElapsedCallback+0x1e2>
	  speed_window5 = speed_window4;
 8001156:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a5e      	ldr	r2, [pc, #376]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800115c:	6013      	str	r3, [r2, #0]
	  speed_window4 = speed_window3;
 800115e:	4b5e      	ldr	r3, [pc, #376]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a5b      	ldr	r2, [pc, #364]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001164:	6013      	str	r3, [r2, #0]
	  speed_window3 = speed_window2;
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a5b      	ldr	r2, [pc, #364]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800116c:	6013      	str	r3, [r2, #0]
	  speed_window2 = speed_window1;
 800116e:	4b5c      	ldr	r3, [pc, #368]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a5a      	ldr	r2, [pc, #360]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001174:	6013      	str	r3, [r2, #0]
	  speed_window1 = speed_accumu / 360.0 * wheel_diameter * 3.14 / 0.1;
 8001176:	4b54      	ldr	r3, [pc, #336]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e4 	bl	8000548 <__aeabi_f2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	4b57      	ldr	r3, [pc, #348]	@ (80012e4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001186:	f7ff fb61 	bl	800084c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4614      	mov	r4, r2
 8001190:	461d      	mov	r5, r3
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff fa28 	bl	80005f8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	a337      	add	r3, pc, #220	@ (adr r3, 8001290 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	a335      	add	r3, pc, #212	@ (adr r3, 8001298 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fb40 	bl	800084c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fd08 	bl	8000be8 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a41      	ldr	r2, [pc, #260]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011dc:	6013      	str	r3, [r2, #0]

	  speed_accumu = 0.0;
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
	  speed_measured = (speed_window1 + speed_window2 + speed_window3 + speed_window4 + speed_window5) / 5.0;
 80011e6:	4b3e      	ldr	r3, [pc, #248]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001200:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120a:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001214:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800121e:	edc3 7a00 	vstr	s15, [r3]

	  // send out measured speed to can bus
	  CAN_TxData[0] = (int)(speed_measured * 10.0);
 8001222:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f98e 	bl	8000548 <__aeabi_f2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001232:	f7ff f9e1 	bl	80005f8 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc8b 	bl	8000b58 <__aeabi_d2iz>
 8001242:	4603      	mov	r3, r0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001248:	701a      	strb	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData, &TxMailbox);
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800124c:	4a29      	ldr	r2, [pc, #164]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800124e:	492b      	ldr	r1, [pc, #172]	@ (80012fc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001250:	482b      	ldr	r0, [pc, #172]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001252:	f002 fb7d 	bl	8003950 <HAL_CAN_AddTxMessage>

	  printf("throttle desired: %d \r\n", throttle_desired);
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4829      	ldr	r0, [pc, #164]	@ (8001304 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800125e:	f007 f9f7 	bl	8008650 <iprintf>
	  printf("motor direction: %d \r\n", motor_direction);
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4827      	ldr	r0, [pc, #156]	@ (8001308 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800126a:	f007 f9f1 	bl	8008650 <iprintf>
	  printf("speed measured %.2f m/s \r\n", speed_measured);
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f968 	bl	8000548 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4823      	ldr	r0, [pc, #140]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800127e:	f007 f9e7 	bl	8008650 <iprintf>
  }
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	51eb851f 	.word	0x51eb851f
 8001294:	40091eb8 	.word	0x40091eb8
 8001298:	9999999a 	.word	0x9999999a
 800129c:	3fb99999 	.word	0x3fb99999
 80012a0:	200002d0 	.word	0x200002d0
 80012a4:	20000000 	.word	0x20000000
 80012a8:	2000047c 	.word	0x2000047c
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	20000484 	.word	0x20000484
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	200004ac 	.word	0x200004ac
 80012bc:	2000031c 	.word	0x2000031c
 80012c0:	20000488 	.word	0x20000488
 80012c4:	2000048c 	.word	0x2000048c
 80012c8:	200004a8 	.word	0x200004a8
 80012cc:	20000368 	.word	0x20000368
 80012d0:	2000049c 	.word	0x2000049c
 80012d4:	200004a0 	.word	0x200004a0
 80012d8:	20000498 	.word	0x20000498
 80012dc:	20000494 	.word	0x20000494
 80012e0:	20000490 	.word	0x20000490
 80012e4:	40768000 	.word	0x40768000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	200004a4 	.word	0x200004a4
 80012f0:	40240000 	.word	0x40240000
 80012f4:	20000474 	.word	0x20000474
 80012f8:	20000470 	.word	0x20000470
 80012fc:	2000043c 	.word	0x2000043c
 8001300:	2000025c 	.word	0x2000025c
 8001304:	0800bf18 	.word	0x0800bf18
 8001308:	0800bf30 	.word	0x0800bf30
 800130c:	0800bf48 	.word	0x0800bf48

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f000 fe91 	bl	800203a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f84c 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fafe 	bl	800191c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001320:	f000 facc 	bl	80018bc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001324:	f000 f90c 	bl	8001540 <MX_CAN1_Init>
  MX_TIM6_Init();
 8001328:	f000 fa2a 	bl	8001780 <MX_TIM6_Init>
  MX_TIM1_Init();
 800132c:	f000 f976 	bl	800161c <MX_TIM1_Init>
  MX_TIM7_Init();
 8001330:	f000 fa60 	bl	80017f4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001334:	f000 fa98 	bl	8001868 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001338:	f000 f89e 	bl	8001478 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	4816      	ldr	r0, [pc, #88]	@ (8001398 <main+0x88>)
 8001340:	f004 fcac 	bl	8005c9c <HAL_TIM_PWM_Start>
  while (1)
  {
	  //current_duty_cycle = TIM1->CCR1;

	  //read throttle
	  HAL_ADC_Start(&hadc1);
 8001344:	4815      	ldr	r0, [pc, #84]	@ (800139c <main+0x8c>)
 8001346:	f001 fa45 	bl	80027d4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800134a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800134e:	4813      	ldr	r0, [pc, #76]	@ (800139c <main+0x8c>)
 8001350:	f001 fad6 	bl	8002900 <HAL_ADC_PollForConversion>
	  throttleRaw = HAL_ADC_GetValue(&hadc1);
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <main+0x8c>)
 8001356:	f001 fb62 	bl	8002a1e <HAL_ADC_GetValue>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <main+0x90>)
 8001360:	601a      	str	r2, [r3, #0]
	  throttleVoltage = (throttleRaw * 3.3f) / 4095.0f;
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <main+0x90>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80013a4 <main+0x94>
 8001372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001376:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80013a8 <main+0x98>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <main+0x9c>)
 8001380:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc1);
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <main+0x8c>)
 8001386:	f001 fa88 	bl	800289a <HAL_ADC_Stop>

	  //output pwm signal
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, throttlePWM); // duty_value from 0 to ARR
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <main+0xa0>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <main+0x88>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_ADC_Start(&hadc1);
 8001394:	bf00      	nop
 8001396:	e7d5      	b.n	8001344 <main+0x34>
 8001398:	20000284 	.word	0x20000284
 800139c:	200001f8 	.word	0x200001f8
 80013a0:	20000480 	.word	0x20000480
 80013a4:	40533333 	.word	0x40533333
 80013a8:	457ff000 	.word	0x457ff000
 80013ac:	20000484 	.word	0x20000484
 80013b0:	200004ac 	.word	0x200004ac

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	@ 0x58
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2244      	movs	r2, #68	@ 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 f9bb 	bl	800873e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013da:	f003 f9cb 	bl	8004774 <HAL_PWREx_ControlVoltageScaling>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e4:	f000 faf2 	bl	80019cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013e8:	f003 f9a6 	bl	8004738 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <SystemClock_Config+0xc0>)
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <SystemClock_Config+0xc0>)
 80013f4:	f023 0318 	bic.w	r3, r3, #24
 80013f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013fc:	2314      	movs	r3, #20
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800140c:	2360      	movs	r3, #96	@ 0x60
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001414:	2301      	movs	r3, #1
 8001416:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 800141c:	2320      	movs	r3, #32
 800141e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001420:	2307      	movs	r3, #7
 8001422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4618      	mov	r0, r3
 8001432:	f003 f9f5 	bl	8004820 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800143c:	f000 fac6 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2303      	movs	r3, #3
 8001446:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	2103      	movs	r1, #3
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fdf5 	bl	8005048 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001464:	f000 fab2 	bl	80019cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001468:	f004 fa08 	bl	800587c <HAL_RCCEx_EnableMSIPLLMode>
}
 800146c:	bf00      	nop
 800146e:	3758      	adds	r7, #88	@ 0x58
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <MX_ADC1_Init+0xbc>)
 8001490:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <MX_ADC1_Init+0xc0>)
 8001492:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_ADC1_Init+0xbc>)
 8001496:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 800149a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149c:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <MX_ADC1_Init+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014b0:	2204      	movs	r2, #4
 80014b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f0:	4810      	ldr	r0, [pc, #64]	@ (8001534 <MX_ADC1_Init+0xbc>)
 80014f2:	f001 f82d 	bl	8002550 <HAL_ADC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80014fc:	f000 fa66 	bl	80019cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_ADC1_Init+0xc4>)
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001504:	2306      	movs	r3, #6
 8001506:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800150c:	237f      	movs	r3, #127	@ 0x7f
 800150e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001510:	2304      	movs	r3, #4
 8001512:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_ADC1_Init+0xbc>)
 800151e:	f001 fa8b 	bl	8002a38 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001528:	f000 fa50 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200001f8 	.word	0x200001f8
 8001538:	50040000 	.word	0x50040000
 800153c:	25b00200 	.word	0x25b00200

08001540 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.DLC = 4;
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <MX_CAN1_Init+0xd0>)
 8001548:	2204      	movs	r2, #4
 800154a:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <MX_CAN1_Init+0xd0>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <MX_CAN1_Init+0xd0>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <MX_CAN1_Init+0xd0>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x101;
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <MX_CAN1_Init+0xd0>)
 8001560:	f240 1201 	movw	r2, #257	@ 0x101
 8001564:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <MX_CAN1_Init+0xd0>)
 8001568:	2200      	movs	r2, #0
 800156a:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <MX_CAN1_Init+0xd4>)
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <MX_CAN1_Init+0xd8>)
 8001570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <MX_CAN1_Init+0xd4>)
 8001574:	2210      	movs	r2, #16
 8001576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <MX_CAN1_Init+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800157e:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <MX_CAN1_Init+0xd4>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001584:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <MX_CAN1_Init+0xd4>)
 8001586:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800158a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_CAN1_Init+0xd4>)
 800158e:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8001592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_CAN1_Init+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <MX_CAN1_Init+0xd4>)
 800159c:	2201      	movs	r2, #1
 800159e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015b8:	4816      	ldr	r0, [pc, #88]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015ba:	f001 ffc0 	bl	800353e <HAL_CAN_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_CAN1_Init+0x88>
  {
    Error_Handler();
 80015c4:	f000 fa02 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80015cc:	230a      	movs	r3, #10
 80015ce:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80015ec:	2314      	movs	r3, #20
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015f6:	f002 f89d 	bl	8003734 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <MX_CAN1_Init+0xd4>)
 80015fc:	f002 f964 	bl	80038c8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001600:	2102      	movs	r1, #2
 8001602:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_CAN1_Init+0xd4>)
 8001604:	f002 fb96 	bl	8003d34 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000043c 	.word	0x2000043c
 8001614:	2000025c 	.word	0x2000025c
 8001618:	40006400 	.word	0x40006400

0800161c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09a      	sub	sp, #104	@ 0x68
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	222c      	movs	r2, #44	@ 0x2c
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f007 f871 	bl	800873e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165c:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800165e:	4a47      	ldr	r2, [pc, #284]	@ (800177c <MX_TIM1_Init+0x160>)
 8001660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001664:	f240 227f 	movw	r2, #639	@ 0x27f
 8001668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001670:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001672:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b3f      	ldr	r3, [pc, #252]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167e:	4b3e      	ldr	r3, [pc, #248]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b3c      	ldr	r3, [pc, #240]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800168a:	483b      	ldr	r0, [pc, #236]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800168c:	f004 f9f8 	bl	8005a80 <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001696:	f000 f999 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016a4:	4619      	mov	r1, r3
 80016a6:	4834      	ldr	r0, [pc, #208]	@ (8001778 <MX_TIM1_Init+0x15c>)
 80016a8:	f004 fdf2 	bl	8006290 <HAL_TIM_ConfigClockSource>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80016b2:	f000 f98b 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b6:	4830      	ldr	r0, [pc, #192]	@ (8001778 <MX_TIM1_Init+0x15c>)
 80016b8:	f004 fa8e 	bl	8005bd8 <HAL_TIM_PWM_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80016c2:	f000 f983 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4827      	ldr	r0, [pc, #156]	@ (8001778 <MX_TIM1_Init+0x15c>)
 80016da:	f005 fa79 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80016e4:	f000 f972 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	@ 0x60
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80016ec:	2364      	movs	r3, #100	@ 0x64
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	481a      	ldr	r0, [pc, #104]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800170e:	f004 fcab 	bl	8006068 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001718:	f000 f958 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800173e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001752:	f005 faa3 	bl	8006c9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800175c:	f000 f936 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001760:	2100      	movs	r1, #0
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_TIM1_Init+0x15c>)
 8001764:	f004 fa9a 	bl	8005c9c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <MX_TIM1_Init+0x15c>)
 800176a:	f000 fa8b 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3768      	adds	r7, #104	@ 0x68
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000284 	.word	0x20000284
 800177c:	40012c00 	.word	0x40012c00

08001780 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_TIM6_Init+0x6c>)
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <MX_TIM6_Init+0x70>)
 8001794:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <MX_TIM6_Init+0x6c>)
 8001798:	220f      	movs	r2, #15
 800179a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_TIM6_Init+0x6c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_TIM6_Init+0x6c>)
 80017a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <MX_TIM6_Init+0x6c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017b0:	480e      	ldr	r0, [pc, #56]	@ (80017ec <MX_TIM6_Init+0x6c>)
 80017b2:	f004 f965 	bl	8005a80 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017bc:	f000 f906 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	@ (80017ec <MX_TIM6_Init+0x6c>)
 80017ce:	f005 f9ff 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017d8:	f000 f8f8 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <MX_TIM6_Init+0x6c>)
 80017de:	f004 f9a7 	bl	8005b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002d0 	.word	0x200002d0
 80017f0:	40001000 	.word	0x40001000

080017f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001806:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <MX_TIM7_Init+0x70>)
 8001808:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16-1;
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_TIM7_Init+0x6c>)
 800180c:	220f      	movs	r2, #15
 800180e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001818:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800181c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001824:	480e      	ldr	r0, [pc, #56]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001826:	f004 f92b 	bl	8005a80 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001830:	f000 f8cc 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001842:	f005 f9c5 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800184c:	f000 f8be 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_TIM7_Init+0x6c>)
 8001852:	f004 f96d 	bl	8005b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000031c 	.word	0x2000031c
 8001864:	40001400 	.word	0x40001400

08001868 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <MX_TIM16_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160-1;
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 8001874:	229f      	movs	r2, #159	@ 0x9f
 8001876:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 8001880:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001884:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001898:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 800189a:	f004 f8f1 	bl	8005a80 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018a4:	f000 f892 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 80018aa:	f004 f941 	bl	8005b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000368 	.word	0x20000368
 80018b8:	40014400 	.word	0x40014400

080018bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018c2:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <MX_USART2_UART_Init+0x5c>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 8001900:	f005 fa62 	bl	8006dc8 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800190a:	f000 f85f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003b4 	.word	0x200003b4
 8001918:	40004400 	.word	0x40004400

0800191c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_GPIO_Init+0xa8>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2108      	movs	r1, #8
 800197e:	4812      	ldr	r0, [pc, #72]	@ (80019c8 <MX_GPIO_Init+0xac>)
 8001980:	f002 fec2 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199a:	f002 fd33 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800199e:	2308      	movs	r3, #8
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <MX_GPIO_Init+0xac>)
 80019b6:	f002 fd25 	bl	8004404 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <Error_Handler+0x8>

080019d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09e      	sub	sp, #120	@ 0x78
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2254      	movs	r2, #84	@ 0x54
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 fe7c 	bl	800873e <memset>
  if(hadc->Instance==ADC1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ae0 <HAL_ADC_MspInit+0xc0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d143      	bne.n	8001ad8 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001a64:	2310      	movs	r3, #16
 8001a66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fd06 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001a8a:	f7ff ff9f 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001a94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_ADC_MspInit+0xc4>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f002 fc96 	bl	8004404 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ad8:	bf00      	nop
 8001ada:	3778      	adds	r7, #120	@ 0x78
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	50040000 	.word	0x50040000
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a20      	ldr	r2, [pc, #128]	@ (8001b88 <HAL_CAN_MspInit+0xa0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d139      	bne.n	8001b7e <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_CAN_MspInit+0xa4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f002 fc53 	bl	8004404 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2014      	movs	r0, #20
 8001b64:	f002 fc17 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f002 fc30 	bl	80043ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2015      	movs	r0, #21
 8001b74:	f002 fc0f 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b78:	2015      	movs	r0, #21
 8001b7a:	f002 fc28 	bl	80043ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40006400 	.word	0x40006400
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a34      	ldr	r2, [pc, #208]	@ (8001c70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d114      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	4a33      	ldr	r2, [pc, #204]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2019      	movs	r0, #25
 8001bc0:	f002 fbe9 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bc4:	2019      	movs	r0, #25
 8001bc6:	f002 fc02 	bl	80043ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bca:	e04c      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <HAL_TIM_Base_MspInit+0xe8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d114      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd6:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	4a26      	ldr	r2, [pc, #152]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2036      	movs	r0, #54	@ 0x36
 8001bf4:	f002 fbcf 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf8:	2036      	movs	r0, #54	@ 0x36
 8001bfa:	f002 fbe8 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e032      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <HAL_TIM_Base_MspInit+0xec>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d114      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2037      	movs	r0, #55	@ 0x37
 8001c28:	f002 fbb5 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c2c:	2037      	movs	r0, #55	@ 0x37
 8001c2e:	f002 fbce 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 8001c32:	e018      	b.n	8001c66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_TIM_Base_MspInit+0xf0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d113      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_TIM_Base_MspInit+0xe4>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2019      	movs	r0, #25
 8001c5c:	f002 fb9b 	bl	8004396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c60:	2019      	movs	r0, #25
 8001c62:	f002 fbb4 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	40001400 	.word	0x40001400
 8001c80:	40014400 	.word	0x40014400

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11d      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cde:	f002 fb91 	bl	8004404 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b09e      	sub	sp, #120	@ 0x78
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2254      	movs	r2, #84	@ 0x54
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 fd12 	bl	800873e <memset>
  if(huart->Instance==USART2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <HAL_UART_MspInit+0xa8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d136      	bne.n	8001d92 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fbad 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d3c:	f7ff fe46 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5c:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_UART_MspInit+0xac>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d70:	230c      	movs	r3, #12
 8001d72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d80:	2307      	movs	r3, #7
 8001d82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8e:	f002 fb39 	bl	8004404 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d92:	bf00      	nop
 8001d94:	3778      	adds	r7, #120	@ 0x78
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40004400 	.word	0x40004400
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 f973 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <CAN1_RX0_IRQHandler+0x10>)
 8001e0a:	f001 ffb9 	bl	8003d80 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000025c 	.word	0x2000025c

08001e18 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <CAN1_RX1_IRQHandler+0x10>)
 8001e1e:	f001 ffaf 	bl	8003d80 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000025c 	.word	0x2000025c

08001e2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e32:	f004 f811 	bl	8005e58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001e38:	f004 f80e 	bl	8005e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000284 	.word	0x20000284
 8001e44:	20000368 	.word	0x20000368

08001e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <TIM6_DAC_IRQHandler+0x10>)
 8001e4e:	f004 f803 	bl	8005e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200002d0 	.word	0x200002d0

08001e5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <TIM7_IRQHandler+0x10>)
 8001e62:	f003 fff9 	bl	8005e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000031c 	.word	0x2000031c

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e8a:	f006 fcab 	bl	80087e4 <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
	return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eb2:	bf00      	nop
 8001eb4:	e7fd      	b.n	8001eb2 <_exit+0x12>

08001eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00a      	b.n	8001ede <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	4601      	mov	r1, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60ba      	str	r2, [r7, #8]
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf0      	blt.n	8001ec8 <_read+0x12>
	}

return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_isatty>:

int _isatty(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f006 fc2c 	bl	80087e4 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20010000 	.word	0x20010000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200004b0 	.word	0x200004b0
 8001fc0:	20000608 	.word	0x20000608

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	@ (8002028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <LoopForever+0xe>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	@ (8002034 <LoopForever+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f006 fbeb 	bl	80087f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201a:	f7ff f979 	bl	8001310 <main>

0800201e <LoopForever>:

LoopForever:
    b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002020:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800202c:	0800c3e4 	.word	0x0800c3e4
  ldr r2, =_sbss
 8002030:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002034:	20000604 	.word	0x20000604

08002038 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC1_IRQHandler>

0800203a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f002 f99b 	bl	8004380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f80e 	bl	800206c <HAL_InitTick>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	e001      	b.n	8002060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205c:	f7ff fcbc 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002060:	79fb      	ldrb	r3, [r7, #7]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_InitTick+0x6c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d023      	beq.n	80020c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_InitTick+0x70>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_InitTick+0x6c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f002 f9a7 	bl	80043ea <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d809      	bhi.n	80020bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f002 f971 	bl	8004396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <HAL_InitTick+0x74>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e007      	b.n	80020cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e004      	b.n	80020cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e001      	b.n	80020cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000008 	.word	0x20000008
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	200004b4 	.word	0x200004b4

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200004b4 	.word	0x200004b4

08002124 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3360      	adds	r3, #96	@ 0x60
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <LL_ADC_SetOffset+0x44>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	03fff000 	.word	0x03fff000

080021d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3360      	adds	r3, #96	@ 0x60
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3360      	adds	r3, #96	@ 0x60
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3330      	adds	r3, #48	@ 0x30
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	4413      	add	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	211f      	movs	r1, #31
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	f003 011f 	and.w	r1, r3, #31
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	431a      	orrs	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3314      	adds	r3, #20
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0e5b      	lsrs	r3, r3, #25
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0d1b      	lsrs	r3, r3, #20
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2107      	movs	r1, #7
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0d1b      	lsrs	r3, r3, #20
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	431a      	orrs	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0318 	and.w	r3, r3, #24
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002330:	40d9      	lsrs	r1, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	400b      	ands	r3, r1
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	431a      	orrs	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	0007ffff 	.word	0x0007ffff

08002354 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002364:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6093      	str	r3, [r2, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800238c:	d101      	bne.n	8002392 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002428:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800242c:	f043 0202 	orr.w	r2, r3, #2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <LL_ADC_IsEnabled+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_ADC_IsEnabled+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d101      	bne.n	800247e <LL_ADC_IsDisableOngoing+0x18>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_IsDisableOngoing+0x1a>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800249c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d101      	bne.n	80024f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002512:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b08      	cmp	r3, #8
 800253c:	d101      	bne.n	8002542 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e126      	b.n	80027b8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fa51 	bl	8001a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fef1 	bl	8002378 <LL_ADC_IsDeepPowerDownEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fed7 	bl	8002354 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff0c 	bl	80023c8 <LL_ADC_IsInternalRegulatorEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fef0 	bl	80023a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c0:	4b7f      	ldr	r3, [pc, #508]	@ (80027c0 <HAL_ADC_Init+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	4a7f      	ldr	r2, [pc, #508]	@ (80027c4 <HAL_ADC_Init+0x274>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d4:	e002      	b.n	80025dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff feee 	bl	80023c8 <LL_ADC_IsInternalRegulatorEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	f043 0210 	orr.w	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff62 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 8002618:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 80bf 	bne.w	80027a6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80bb 	bne.w	80027a6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002638:	f043 0202 	orr.w	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fefb 	bl	8002440 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002650:	485d      	ldr	r0, [pc, #372]	@ (80027c8 <HAL_ADC_Init+0x278>)
 8002652:	f7ff fef5 	bl	8002440 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	485a      	ldr	r0, [pc, #360]	@ (80027cc <HAL_ADC_Init+0x27c>)
 8002664:	f7ff fd5e 	bl	8002124 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7e5b      	ldrb	r3, [r3, #25]
 800266c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002672:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002678:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800267e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d106      	bne.n	80026a4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	3b01      	subs	r3, #1
 800269c:	045b      	lsls	r3, r3, #17
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <HAL_ADC_Init+0x280>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	69b9      	ldr	r1, [r7, #24]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff26 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 80026de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d13d      	bne.n	8002762 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13a      	bne.n	8002762 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800271c:	2b01      	cmp	r3, #1
 800271e:	d118      	bne.n	8002752 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002742:	430a      	orrs	r2, r1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	e007      	b.n	8002762 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10c      	bne.n	8002784 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	f023 010f 	bic.w	r1, r3, #15
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	631a      	str	r2, [r3, #48]	@ 0x30
 8002782:	e007      	b.n	8002794 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020f 	bic.w	r2, r2, #15
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002798:	f023 0303 	bic.w	r3, r3, #3
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80027a4:	e007      	b.n	80027b6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000008 	.word	0x20000008
 80027c4:	053e2d63 	.word	0x053e2d63
 80027c8:	50040000 	.word	0x50040000
 80027cc:	50040300 	.word	0x50040300
 80027d0:	fff0c007 	.word	0xfff0c007

080027d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fe7b 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d14f      	bne.n	800288c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Start+0x26>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e04b      	b.n	8002892 <HAL_ADC_Start+0xbe>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fdb6 	bl	8003374 <ADC_Enable>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d137      	bne.n	8002882 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002816:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002832:	d106      	bne.n	8002842 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f023 0206 	bic.w	r2, r3, #6
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002840:	e002      	b.n	8002848 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	221c      	movs	r2, #28
 800284e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800286e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe06 	bl	800248c <LL_ADC_REG_StartConversion>
 8002880:	e006      	b.n	8002890 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800288a:	e001      	b.n	8002890 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800288c:	2302      	movs	r3, #2
 800288e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_Stop+0x16>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e023      	b.n	80028f8 <HAL_ADC_Stop+0x5e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028b8:	2103      	movs	r1, #3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fc9e 	bl	80031fc <ADC_ConversionStop>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d111      	bne.n	80028ee <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fdd8 	bl	8003480 <ADC_Disable>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d102      	bne.n	8002918 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002912:	2308      	movs	r3, #8
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e010      	b.n	800293a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002936:	2304      	movs	r3, #4
 8002938:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800293a:	f7ff fbe7 	bl	800210c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002940:	e021      	b.n	8002986 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d01d      	beq.n	8002986 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800294a:	f7ff fbdf 	bl	800210c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <HAL_ADC_PollForConversion+0x60>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d112      	bne.n	8002986 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e047      	b.n	8002a16 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0d6      	beq.n	8002942 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc46 	bl	8002236 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01c      	beq.n	80029ea <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e5b      	ldrb	r3, [r3, #25]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d118      	bne.n	80029ea <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d111      	bne.n	80029ea <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d104      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2208      	movs	r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e008      	b.n	8002a14 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	220c      	movs	r2, #12
 8002a12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0b6      	sub	sp, #216	@ 0xd8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x22>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e3bb      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x79a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fd38 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 83a0 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d824      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d81b      	bhi.n	8002ac6 <HAL_ADC_ConfigChannel+0x8e>
 8002a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <HAL_ADC_ConfigChannel+0x5c>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002aad 	.word	0x08002aad
 8002a9c:	08002ab5 	.word	0x08002ab5
 8002aa0:	08002abd 	.word	0x08002abd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aaa:	e010      	b.n	8002ace <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002aac:	2312      	movs	r3, #18
 8002aae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ab2:	e00c      	b.n	8002ace <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ab4:	2318      	movs	r3, #24
 8002ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aba:	e008      	b.n	8002ace <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002acc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002adc:	f7ff fbbe 	bl	800225c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fcf9 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 8002aea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd19 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 8002af8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 81a4 	bne.w	8002e4e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 819f 	bne.w	8002e4e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f7ff fbc9 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00a      	beq.n	8002b5a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b54:	f7ff fb1a 	bl	800218c <LL_ADC_SetOffset>
 8002b58:	e179      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fb37 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x14e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fb2c 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	e01e      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x18c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb21 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ba4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e004      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1a4>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	e018      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x1d6>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002bf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e004      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d106      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff faf0 	bl	8002200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fad4 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x214>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fac9 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	f003 021f 	and.w	r2, r3, #31
 8002c4a:	e01e      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x252>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fabe 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e004      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x26a>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	e018      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x29c>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fa8d 	bl	8002200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fa71 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x2da>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fa66 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	e01e      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x318>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fa5b 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x330>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	e014      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x35a>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e004      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa2e 	bl	8002200 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2103      	movs	r1, #3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa12 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x398>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fa07 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	e017      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x3c8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f9fc 	bl	80021d4 <LL_ADC_GetOffsetChannel>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e003      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x3e0>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	e011      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x404>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e28:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2103      	movs	r1, #3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f9d9 	bl	8002200 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff faf4 	bl	8002440 <LL_ADC_IsEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 8140 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f7ff fa4d 	bl	800230c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a8f      	ldr	r2, [pc, #572]	@ (80030b4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	f040 8131 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x46e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	bf94      	ite	ls
 8002e9e:	2301      	movls	r3, #1
 8002ea0:	2300      	movhi	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e019      	b.n	8002eda <HAL_ADC_ConfigChannel+0x4a2>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d079      	beq.n	8002fd2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x4c2>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef8:	e015      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x4ee>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f0a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x50e>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	e017      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x53e>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x564>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	e018      	b.n	8002fce <HAL_ADC_ConfigChannel+0x596>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e003      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	e081      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x5b6>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	069b      	lsls	r3, r3, #26
 8002fe8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fec:	e015      	b.n	800301a <HAL_ADC_ConfigChannel+0x5e2>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	069b      	lsls	r3, r3, #26
 8003016:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_ConfigChannel+0x602>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	3301      	adds	r3, #1
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	e017      	b.n	800306a <HAL_ADC_ConfigChannel+0x632>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	61bb      	str	r3, [r7, #24]
  return result;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e003      	b.n	800305e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	ea42 0103 	orr.w	r1, r2, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x65e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	3301      	adds	r3, #1
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	3b1e      	subs	r3, #30
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003094:	e01e      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x69c>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	60fb      	str	r3, [r7, #12]
  return result;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e006      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x688>
 80030b2:	bf00      	nop
 80030b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 021f 	and.w	r2, r3, #31
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1e      	subs	r3, #30
 80030ce:	051b      	lsls	r3, r3, #20
 80030d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030da:	4619      	mov	r1, r3
 80030dc:	f7ff f8ea 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b3d      	ldr	r3, [pc, #244]	@ (80031dc <HAL_ADC_ConfigChannel+0x7a4>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d06c      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ec:	483c      	ldr	r0, [pc, #240]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80030ee:	f7ff f83f 	bl	8002170 <LL_ADC_GetCommonPathInternalCh>
 80030f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	@ (80031e4 <HAL_ADC_ConfigChannel+0x7ac>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d127      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d121      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	@ (80031e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d157      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800311a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800311e:	4619      	mov	r1, r3
 8003120:	482f      	ldr	r0, [pc, #188]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003122:	f7ff f812 	bl	800214a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_ADC_ConfigChannel+0x7b4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	4a30      	ldr	r2, [pc, #192]	@ (80031f0 <HAL_ADC_ConfigChannel+0x7b8>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003140:	e002      	b.n	8003148 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800314e:	e03a      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d113      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800315a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800315e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1f      	ldr	r2, [pc, #124]	@ (80031e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d12a      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003174:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003178:	4619      	mov	r1, r3
 800317a:	4819      	ldr	r0, [pc, #100]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7a8>)
 800317c:	f7fe ffe5 	bl	800214a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003180:	e021      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d11c      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800318c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d116      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a12      	ldr	r2, [pc, #72]	@ (80031e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031aa:	4619      	mov	r1, r3
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80031ae:	f7fe ffcc 	bl	800214a <LL_ADC_SetCommonPathInternalCh>
 80031b2:	e008      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	37d8      	adds	r7, #216	@ 0xd8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	80080000 	.word	0x80080000
 80031e0:	50040300 	.word	0x50040300
 80031e4:	c7520000 	.word	0xc7520000
 80031e8:	50040000 	.word	0x50040000
 80031ec:	20000008 	.word	0x20000008
 80031f0:	053e2d63 	.word	0x053e2d63
 80031f4:	cb840000 	.word	0xcb840000
 80031f8:	80000001 	.word	0x80000001

080031fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f962 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 8003218:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f983 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 8003224:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8098 	beq.w	8003364 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02a      	beq.n	8003298 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7e5b      	ldrb	r3, [r3, #25]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d126      	bne.n	8003298 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7e1b      	ldrb	r3, [r3, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d122      	bne.n	8003298 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003256:	e014      	b.n	8003282 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4a45      	ldr	r2, [pc, #276]	@ (8003370 <ADC_ConversionStop+0x174>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d90d      	bls.n	800327c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f043 0210 	orr.w	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e074      	b.n	8003366 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d1e3      	bne.n	8003258 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2240      	movs	r2, #64	@ 0x40
 8003296:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d014      	beq.n	80032c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f91a 	bl	80024dc <LL_ADC_REG_IsConversionOngoing>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f8d7 	bl	8002466 <LL_ADC_IsDisableOngoing>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f8f6 	bl	80024b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d014      	beq.n	80032f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f929 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f8bf 	bl	8002466 <LL_ADC_IsDisableOngoing>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f905 	bl	8002502 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d005      	beq.n	800330a <ADC_ConversionStop+0x10e>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d105      	bne.n	8003310 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003304:	230c      	movs	r3, #12
 8003306:	617b      	str	r3, [r7, #20]
        break;
 8003308:	e005      	b.n	8003316 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800330a:	2308      	movs	r3, #8
 800330c:	617b      	str	r3, [r7, #20]
        break;
 800330e:	e002      	b.n	8003316 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003310:	2304      	movs	r3, #4
 8003312:	617b      	str	r3, [r7, #20]
        break;
 8003314:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003316:	f7fe fef9 	bl	800210c <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800331c:	e01b      	b.n	8003356 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800331e:	f7fe fef5 	bl	800210c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b05      	cmp	r3, #5
 800332a:	d914      	bls.n	8003356 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1dc      	bne.n	800331e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	a33fffff 	.word	0xa33fffff

08003374 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f85b 	bl	8002440 <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d169      	bne.n	8003464 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	4b36      	ldr	r3, [pc, #216]	@ (8003470 <ADC_Enable+0xfc>)
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e055      	b.n	8003466 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f816 	bl	80023f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033c4:	482b      	ldr	r0, [pc, #172]	@ (8003474 <ADC_Enable+0x100>)
 80033c6:	f7fe fed3 	bl	8002170 <LL_ADC_GetCommonPathInternalCh>
 80033ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033d4:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <ADC_Enable+0x104>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	4a28      	ldr	r2, [pc, #160]	@ (800347c <ADC_Enable+0x108>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ee:	e002      	b.n	80033f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f9      	bne.n	80033f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fe86 	bl	800210c <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003402:	e028      	b.n	8003456 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f819 	bl	8002440 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ffe9 	bl	80023f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800341e:	f7fe fe75 	bl	800210c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d914      	bls.n	8003456 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d00d      	beq.n	8003456 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	f043 0210 	orr.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d1cf      	bne.n	8003404 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	8000003f 	.word	0x8000003f
 8003474:	50040300 	.word	0x50040300
 8003478:	20000008 	.word	0x20000008
 800347c:	053e2d63 	.word	0x053e2d63

08003480 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ffea 	bl	8002466 <LL_ADC_IsDisableOngoing>
 8003492:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe ffd1 	bl	8002440 <LL_ADC_IsEnabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d047      	beq.n	8003534 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d144      	bne.n	8003534 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030d 	and.w	r3, r3, #13
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10c      	bne.n	80034d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe ffab 	bl	8002418 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2203      	movs	r2, #3
 80034c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ca:	f7fe fe1f 	bl	800210c <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034d0:	e029      	b.n	8003526 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	f043 0210 	orr.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e023      	b.n	8003536 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ee:	f7fe fe0d 	bl	800210c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d914      	bls.n	8003526 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e007      	b.n	8003536 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1dc      	bne.n	80034ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0ed      	b.n	800372c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fe fac3 	bl	8001ae8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003572:	f7fe fdcb 	bl	800210c <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003578:	e012      	b.n	80035a0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800357a:	f7fe fdc7 	bl	800210c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b0a      	cmp	r3, #10
 8003586:	d90b      	bls.n	80035a0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2205      	movs	r2, #5
 8003598:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0c5      	b.n	800372c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0e5      	beq.n	800357a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0202 	bic.w	r2, r2, #2
 80035bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035be:	f7fe fda5 	bl	800210c <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c4:	e012      	b.n	80035ec <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c6:	f7fe fda1 	bl	800210c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b0a      	cmp	r3, #10
 80035d2:	d90b      	bls.n	80035ec <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2205      	movs	r2, #5
 80035e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e09f      	b.n	800372c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e007      	b.n	8003624 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e5b      	ldrb	r3, [r3, #25]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d108      	bne.n	800363e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e007      	b.n	800364e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7e9b      	ldrb	r3, [r3, #26]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d108      	bne.n	8003668 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0220 	orr.w	r2, r2, #32
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e007      	b.n	8003678 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0220 	bic.w	r2, r2, #32
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7edb      	ldrb	r3, [r3, #27]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0210 	bic.w	r2, r2, #16
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e007      	b.n	80036a2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0210 	orr.w	r2, r2, #16
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7f1b      	ldrb	r3, [r3, #28]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0208 	orr.w	r2, r2, #8
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0208 	bic.w	r2, r2, #8
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7f5b      	ldrb	r3, [r3, #29]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0204 	orr.w	r2, r2, #4
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e007      	b.n	80036f6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0204 	bic.w	r2, r2, #4
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	ea42 0103 	orr.w	r1, r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d003      	beq.n	800375a <HAL_CAN_ConfigFilter+0x26>
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b02      	cmp	r3, #2
 8003756:	f040 80aa 	bne.w	80038ae <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2201      	movs	r2, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	401a      	ands	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d123      	bne.n	80037dc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3248      	adds	r2, #72	@ 0x48
 80037bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037d2:	6979      	ldr	r1, [r7, #20]
 80037d4:	3348      	adds	r3, #72	@ 0x48
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d122      	bne.n	800382a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003804:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3248      	adds	r2, #72	@ 0x48
 800380a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800381e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003820:	6979      	ldr	r1, [r7, #20]
 8003822:	3348      	adds	r3, #72	@ 0x48
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	401a      	ands	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003844:	e007      	b.n	8003856 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	431a      	orrs	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43db      	mvns	r3, r3
 8003868:	401a      	ands	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003870:	e007      	b.n	8003882 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	431a      	orrs	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	431a      	orrs	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038a0:	f023 0201 	bic.w	r2, r3, #1
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e006      	b.n	80038bc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d12e      	bne.n	800393a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038f4:	f7fe fc0a 	bl	800210c <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038fa:	e012      	b.n	8003922 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038fc:	f7fe fc06 	bl	800210c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b0a      	cmp	r3, #10
 8003908:	d90b      	bls.n	8003922 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e012      	b.n	8003948 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e5      	bne.n	80038fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e006      	b.n	8003948 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	@ 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003964:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800396e:	7ffb      	ldrb	r3, [r7, #31]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d003      	beq.n	800397c <HAL_CAN_AddTxMessage+0x2c>
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b02      	cmp	r3, #2
 8003978:	f040 80ad 	bne.w	8003ad6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8095 	beq.w	8003ac6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	6809      	ldr	r1, [r1, #0]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3318      	adds	r3, #24
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	440b      	add	r3, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e00f      	b.n	80039f4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3318      	adds	r3, #24
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	440b      	add	r3, r1
 80039f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3318      	adds	r3, #24
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	440b      	add	r3, r1
 8003a04:	3304      	adds	r3, #4
 8003a06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	7d1b      	ldrb	r3, [r3, #20]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d111      	bne.n	8003a34 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3318      	adds	r3, #24
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6811      	ldr	r1, [r2, #0]
 8003a24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	3304      	adds	r3, #4
 8003a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3307      	adds	r3, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	061a      	lsls	r2, r3, #24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3306      	adds	r3, #6
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3305      	adds	r3, #5
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	3204      	adds	r2, #4
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	4610      	mov	r0, r2
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	ea43 0200 	orr.w	r2, r3, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3303      	adds	r3, #3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	061a      	lsls	r2, r3, #24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3302      	adds	r3, #2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3301      	adds	r3, #1
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	4313      	orrs	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	ea43 0200 	orr.w	r2, r3, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	4413      	add	r3, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6811      	ldr	r1, [r2, #0]
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3318      	adds	r3, #24
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	440b      	add	r3, r1
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e00e      	b.n	8003ae4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e006      	b.n	8003ae4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3724      	adds	r7, #36	@ 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <HAL_CAN_GetRxMessage+0x24>
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 8103 	bne.w	8003d1a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0f7      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e8      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	331b      	adds	r3, #27
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0204 	and.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	331b      	adds	r3, #27
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0d5b      	lsrs	r3, r3, #21
 8003b84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	331b      	adds	r3, #27
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	331b      	adds	r3, #27
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0202 	and.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	e00b      	b.n	8003bf4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	331b      	adds	r3, #27
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	331b      	adds	r3, #27
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	331b      	adds	r3, #27
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0a1a      	lsrs	r2, r3, #8
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0c1a      	lsrs	r2, r3, #16
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0e1a      	lsrs	r2, r3, #24
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3303      	adds	r3, #3
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0a1a      	lsrs	r2, r3, #8
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3305      	adds	r3, #5
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0c1a      	lsrs	r2, r3, #16
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3306      	adds	r3, #6
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e1a      	lsrs	r2, r3, #24
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3307      	adds	r3, #7
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	e007      	b.n	8003d16 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e006      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d44:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <HAL_CAN_ActivateNotification+0x1e>
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d109      	bne.n	8003d66 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6959      	ldr	r1, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e006      	b.n	8003d74 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	@ 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d07c      	beq.n	8003ec0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d023      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f983 	bl	80040ee <HAL_CAN_TxMailbox0CompleteCallback>
 8003de8:	e016      	b.n	8003e18 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfc:	e00c      	b.n	8003e18 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e10:	e002      	b.n	8003e18 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f989 	bl	800412a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d024      	beq.n	8003e6c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f963 	bl	8004102 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e3c:	e016      	b.n	8003e6c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e50:	e00c      	b.n	8003e6c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e64:	e002      	b.n	8003e6c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f969 	bl	800413e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d024      	beq.n	8003ec0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f943 	bl	8004116 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e90:	e016      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea4:	e00c      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	e002      	b.n	8003ec0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f949 	bl	8004152 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2208      	movs	r2, #8
 8003efe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f930 	bl	8004166 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f894 	bl	800104c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00c      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2210      	movs	r2, #16
 8003f46:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f912 	bl	800418e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8f9 	bl	800417a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d006      	beq.n	8003faa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8fc 	bl	80041a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8f5 	bl	80041b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07b      	beq.n	80040ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d072      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403a:	2b00      	cmp	r3, #0
 800403c:	d043      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03e      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800404e:	2b60      	cmp	r3, #96	@ 0x60
 8004050:	d02b      	beq.n	80040aa <HAL_CAN_IRQHandler+0x32a>
 8004052:	2b60      	cmp	r3, #96	@ 0x60
 8004054:	d82e      	bhi.n	80040b4 <HAL_CAN_IRQHandler+0x334>
 8004056:	2b50      	cmp	r3, #80	@ 0x50
 8004058:	d022      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x320>
 800405a:	2b50      	cmp	r3, #80	@ 0x50
 800405c:	d82a      	bhi.n	80040b4 <HAL_CAN_IRQHandler+0x334>
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d019      	beq.n	8004096 <HAL_CAN_IRQHandler+0x316>
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d826      	bhi.n	80040b4 <HAL_CAN_IRQHandler+0x334>
 8004066:	2b30      	cmp	r3, #48	@ 0x30
 8004068:	d010      	beq.n	800408c <HAL_CAN_IRQHandler+0x30c>
 800406a:	2b30      	cmp	r3, #48	@ 0x30
 800406c:	d822      	bhi.n	80040b4 <HAL_CAN_IRQHandler+0x334>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d002      	beq.n	8004078 <HAL_CAN_IRQHandler+0x2f8>
 8004072:	2b20      	cmp	r3, #32
 8004074:	d005      	beq.n	8004082 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004076:	e01d      	b.n	80040b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004080:	e019      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	f043 0310 	orr.w	r3, r3, #16
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800408a:	e014      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	f043 0320 	orr.w	r3, r3, #32
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004094:	e00f      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800409e:	e00a      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040a8:	e005      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040b2:	e000      	b.n	80040b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80040b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f872 	bl	80041ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040e6:	bf00      	nop
 80040e8:	3728      	adds	r7, #40	@ 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4907      	ldr	r1, [pc, #28]	@ (800427c <__NVIC_EnableIRQ+0x38>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100

08004280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	6039      	str	r1, [r7, #0]
 800428a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004290:	2b00      	cmp	r3, #0
 8004292:	db0a      	blt.n	80042aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	490c      	ldr	r1, [pc, #48]	@ (80042cc <__NVIC_SetPriority+0x4c>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a8:	e00a      	b.n	80042c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4908      	ldr	r1, [pc, #32]	@ (80042d0 <__NVIC_SetPriority+0x50>)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3b04      	subs	r3, #4
 80042b8:	0112      	lsls	r2, r2, #4
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	440b      	add	r3, r1
 80042be:	761a      	strb	r2, [r3, #24]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	bf28      	it	cs
 80042f2:	2304      	movcs	r3, #4
 80042f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d902      	bls.n	8004304 <NVIC_EncodePriority+0x30>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3b03      	subs	r3, #3
 8004302:	e000      	b.n	8004306 <NVIC_EncodePriority+0x32>
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	401a      	ands	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43d9      	mvns	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	4313      	orrs	r3, r2
         );
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	@ 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800434c:	d301      	bcc.n	8004352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434e:	2301      	movs	r3, #1
 8004350:	e00f      	b.n	8004372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <SysTick_Config+0x40>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800435a:	210f      	movs	r1, #15
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f7ff ff8e 	bl	8004280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <SysTick_Config+0x40>)
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <SysTick_Config+0x40>)
 800436c:	2207      	movs	r2, #7
 800436e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	e000e010 	.word	0xe000e010

08004380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff29 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043a8:	f7ff ff3e 	bl	8004228 <__NVIC_GetPriorityGrouping>
 80043ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff ff8e 	bl	80042d4 <NVIC_EncodePriority>
 80043b8:	4602      	mov	r2, r0
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff5d 	bl	8004280 <__NVIC_SetPriority>
}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff31 	bl	8004244 <__NVIC_EnableIRQ>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ffa2 	bl	800433c <SysTick_Config>
 80043f8:	4603      	mov	r3, r0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	e148      	b.n	80046a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 813a 	beq.w	80046a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x40>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d123      	bne.n	8004536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	6939      	ldr	r1, [r7, #16]
 8004532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8094 	beq.w	80046a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004578:	4b52      	ldr	r3, [pc, #328]	@ (80046c4 <HAL_GPIO_Init+0x2c0>)
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	4a51      	ldr	r2, [pc, #324]	@ (80046c4 <HAL_GPIO_Init+0x2c0>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6613      	str	r3, [r2, #96]	@ 0x60
 8004584:	4b4f      	ldr	r3, [pc, #316]	@ (80046c4 <HAL_GPIO_Init+0x2c0>)
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004590:	4a4d      	ldr	r2, [pc, #308]	@ (80046c8 <HAL_GPIO_Init+0x2c4>)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	3302      	adds	r3, #2
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	220f      	movs	r2, #15
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045ba:	d00d      	beq.n	80045d8 <HAL_GPIO_Init+0x1d4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a43      	ldr	r2, [pc, #268]	@ (80046cc <HAL_GPIO_Init+0x2c8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <HAL_GPIO_Init+0x1d0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a42      	ldr	r2, [pc, #264]	@ (80046d0 <HAL_GPIO_Init+0x2cc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_GPIO_Init+0x1cc>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e004      	b.n	80045da <HAL_GPIO_Init+0x1d6>
 80045d0:	2307      	movs	r3, #7
 80045d2:	e002      	b.n	80045da <HAL_GPIO_Init+0x1d6>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_GPIO_Init+0x1d6>
 80045d8:	2300      	movs	r3, #0
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	f002 0203 	and.w	r2, r2, #3
 80045e0:	0092      	lsls	r2, r2, #2
 80045e2:	4093      	lsls	r3, r2
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045ea:	4937      	ldr	r1, [pc, #220]	@ (80046c8 <HAL_GPIO_Init+0x2c4>)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	3302      	adds	r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f8:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800461c:	4a2d      	ldr	r2, [pc, #180]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004622:	4b2c      	ldr	r3, [pc, #176]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004646:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800464c:	4b21      	ldr	r3, [pc, #132]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004670:	4a18      	ldr	r2, [pc, #96]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004676:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	43db      	mvns	r3, r3
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800469a:	4a0e      	ldr	r2, [pc, #56]	@ (80046d4 <HAL_GPIO_Init+0x2d0>)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f aeaf 	bne.w	8004414 <HAL_GPIO_Init+0x10>
  }
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40010000 	.word	0x40010000
 80046cc:	48000400 	.word	0x48000400
 80046d0:	48000800 	.word	0x48000800
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e001      	b.n	80046fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004718:	787b      	ldrb	r3, [r7, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004724:	e002      	b.n	800472c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a04      	ldr	r2, [pc, #16]	@ (8004754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <HAL_PWREx_GetVoltageRange+0x18>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000

08004774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004782:	d130      	bne.n	80047e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004784:	4b23      	ldr	r3, [pc, #140]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d038      	beq.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004792:	4b20      	ldr	r3, [pc, #128]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800479c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2232      	movs	r2, #50	@ 0x32
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	0c9b      	lsrs	r3, r3, #18
 80047b4:	3301      	adds	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b8:	e002      	b.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b01      	subs	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c0:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047cc:	d102      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f2      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e0:	d110      	bne.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d007      	beq.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047f4:	4b07      	ldr	r3, [pc, #28]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047fc:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004802:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40007000 	.word	0x40007000
 8004818:	20000008 	.word	0x20000008
 800481c:	431bde83 	.word	0x431bde83

08004820 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f000 bc02 	b.w	8005038 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004834:	4b96      	ldr	r3, [pc, #600]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800483e:	4b94      	ldr	r3, [pc, #592]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80e4 	beq.w	8004a1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_RCC_OscConfig+0x4c>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	f040 808b 	bne.w	800497a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b01      	cmp	r3, #1
 8004868:	f040 8087 	bne.w	800497a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800486c:	4b88      	ldr	r3, [pc, #544]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_OscConfig+0x64>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e3d9      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	4b81      	ldr	r3, [pc, #516]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <HAL_RCC_OscConfig+0x7e>
 8004894:	4b7e      	ldr	r3, [pc, #504]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489c:	e005      	b.n	80048aa <HAL_RCC_OscConfig+0x8a>
 800489e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d223      	bcs.n	80048f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fd8c 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e3ba      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c2:	4b73      	ldr	r3, [pc, #460]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a72      	ldr	r2, [pc, #456]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b70      	ldr	r3, [pc, #448]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	496d      	ldr	r1, [pc, #436]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	4968      	ldr	r1, [pc, #416]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	e025      	b.n	8004942 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f6:	4b66      	ldr	r3, [pc, #408]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a65      	ldr	r2, [pc, #404]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4960      	ldr	r1, [pc, #384]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004914:	4b5e      	ldr	r3, [pc, #376]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	495b      	ldr	r1, [pc, #364]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fd4c 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e37a      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004942:	f000 fc81 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8004946:	4602      	mov	r2, r0
 8004948:	4b51      	ldr	r3, [pc, #324]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	4950      	ldr	r1, [pc, #320]	@ (8004a94 <HAL_RCC_OscConfig+0x274>)
 8004954:	5ccb      	ldrb	r3, [r1, r3]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a98 <HAL_RCC_OscConfig+0x278>)
 8004960:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004962:	4b4e      	ldr	r3, [pc, #312]	@ (8004a9c <HAL_RCC_OscConfig+0x27c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fb80 	bl	800206c <HAL_InitTick>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d052      	beq.n	8004a1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	e35e      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d032      	beq.n	80049e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004982:	4b43      	ldr	r3, [pc, #268]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a42      	ldr	r2, [pc, #264]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800498e:	f7fd fbbd 	bl	800210c <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004996:	f7fd fbb9 	bl	800210c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e347      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a8:	4b39      	ldr	r3, [pc, #228]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b4:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a35      	ldr	r2, [pc, #212]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049ba:	f043 0308 	orr.w	r3, r3, #8
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	4b33      	ldr	r3, [pc, #204]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4930      	ldr	r1, [pc, #192]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	492b      	ldr	r1, [pc, #172]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
 80049e6:	e01a      	b.n	8004a1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049e8:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a28      	ldr	r2, [pc, #160]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f4:	f7fd fb8a 	bl	800210c <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049fc:	f7fd fb86 	bl	800210c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e314      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1dc>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d073      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_OscConfig+0x21c>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d10e      	bne.n	8004a54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d063      	beq.n	8004b10 <HAL_RCC_OscConfig+0x2f0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d15f      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e2f1      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x24c>
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e025      	b.n	8004ab8 <HAL_RCC_OscConfig+0x298>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a74:	d114      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x280>
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a05      	ldr	r2, [pc, #20]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b03      	ldr	r3, [pc, #12]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a02      	ldr	r2, [pc, #8]	@ (8004a90 <HAL_RCC_OscConfig+0x270>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e013      	b.n	8004ab8 <HAL_RCC_OscConfig+0x298>
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800bf64 	.word	0x0800bf64
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	2000000c 	.word	0x2000000c
 8004aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a9f      	ldr	r2, [pc, #636]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b9d      	ldr	r3, [pc, #628]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a9c      	ldr	r2, [pc, #624]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fb24 	bl	800210c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fb20 	bl	800210c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e2ae      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	4b92      	ldr	r3, [pc, #584]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x2a8>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fb10 	bl	800210c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fd fb0c 	bl	800210c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e29a      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b02:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2d0>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d060      	beq.n	8004be0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_OscConfig+0x310>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d119      	bne.n	8004b5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d116      	bne.n	8004b5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_OscConfig+0x328>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e277      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b76      	ldr	r3, [pc, #472]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	4973      	ldr	r1, [pc, #460]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b5c:	e040      	b.n	8004be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d023      	beq.n	8004bae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b66:	4b6f      	ldr	r3, [pc, #444]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b72:	f7fd facb 	bl	800210c <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7a:	f7fd fac7 	bl	800210c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e255      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8c:	4b65      	ldr	r3, [pc, #404]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b62      	ldr	r3, [pc, #392]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	495f      	ldr	r1, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
 8004bac:	e018      	b.n	8004be0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bae:	4b5d      	ldr	r3, [pc, #372]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fd faa7 	bl	800210c <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fd faa3 	bl	800210c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e231      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd4:	4b53      	ldr	r3, [pc, #332]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d03c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fd fa82 	bl	800210c <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0c:	f7fd fa7e 	bl	800210c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e20c      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1e:	4b41      	ldr	r3, [pc, #260]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ef      	beq.n	8004c0c <HAL_RCC_OscConfig+0x3ec>
 8004c2c:	e01b      	b.n	8004c66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c34:	4a3b      	ldr	r2, [pc, #236]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fa65 	bl	800210c <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c46:	f7fd fa61 	bl	800210c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1ef      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c58:	4b32      	ldr	r3, [pc, #200]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ef      	bne.n	8004c46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80a6 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c78:	4b2a      	ldr	r3, [pc, #168]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10d      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4a26      	ldr	r2, [pc, #152]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c90:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca0:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <HAL_RCC_OscConfig+0x508>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d118      	bne.n	8004cde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cac:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <HAL_RCC_OscConfig+0x508>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_RCC_OscConfig+0x508>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fa28 	bl	800210c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fd fa24 	bl	800210c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e1b2      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd2:	4b15      	ldr	r3, [pc, #84]	@ (8004d28 <HAL_RCC_OscConfig+0x508>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4d8>
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cec:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf6:	e029      	b.n	8004d4c <HAL_RCC_OscConfig+0x52c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d115      	bne.n	8004d2c <HAL_RCC_OscConfig+0x50c>
 8004d00:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d10:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a03      	ldr	r2, [pc, #12]	@ (8004d24 <HAL_RCC_OscConfig+0x504>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d20:	e014      	b.n	8004d4c <HAL_RCC_OscConfig+0x52c>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	4b9a      	ldr	r3, [pc, #616]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a99      	ldr	r2, [pc, #612]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d3c:	4b96      	ldr	r3, [pc, #600]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a95      	ldr	r2, [pc, #596]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d016      	beq.n	8004d82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd f9da 	bl	800210c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd f9d6 	bl	800210c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e162      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d72:	4b89      	ldr	r3, [pc, #548]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ed      	beq.n	8004d5c <HAL_RCC_OscConfig+0x53c>
 8004d80:	e015      	b.n	8004dae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd f9c3 	bl	800210c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd f9bf 	bl	800210c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e14b      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	4b7d      	ldr	r3, [pc, #500]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ed      	bne.n	8004d8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db4:	4b78      	ldr	r3, [pc, #480]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a77      	ldr	r2, [pc, #476]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd4:	4b70      	ldr	r3, [pc, #448]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dda:	4a6f      	ldr	r2, [pc, #444]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fd f992 	bl	800210c <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dec:	f7fd f98e 	bl	800210c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e11c      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	4b66      	ldr	r3, [pc, #408]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ef      	beq.n	8004dec <HAL_RCC_OscConfig+0x5cc>
 8004e0c:	e01b      	b.n	8004e46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e0e:	4b62      	ldr	r3, [pc, #392]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e14:	4a60      	ldr	r2, [pc, #384]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd f975 	bl	800210c <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e26:	f7fd f971 	bl	800210c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0ff      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	4b57      	ldr	r3, [pc, #348]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ef      	bne.n	8004e26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80f3 	beq.w	8005036 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	f040 80c9 	bne.w	8004fec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f003 0203 	and.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d12c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d123      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d113      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d109      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d06b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d062      	beq.n	8004f94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ece:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0ac      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ede:	4b2e      	ldr	r3, [pc, #184]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eea:	f7fd f90f 	bl	800210c <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef2:	f7fd f90b 	bl	800210c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e099      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f04:	4b24      	ldr	r3, [pc, #144]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f10:	4b21      	ldr	r3, [pc, #132]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	4b21      	ldr	r3, [pc, #132]	@ (8004f9c <HAL_RCC_OscConfig+0x77c>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0112      	lsls	r2, r2, #4
 8004f24:	4311      	orrs	r1, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f2a:	0212      	lsls	r2, r2, #8
 8004f2c:	4311      	orrs	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f32:	0852      	lsrs	r2, r2, #1
 8004f34:	3a01      	subs	r2, #1
 8004f36:	0552      	lsls	r2, r2, #21
 8004f38:	4311      	orrs	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f3e:	0852      	lsrs	r2, r2, #1
 8004f40:	3a01      	subs	r2, #1
 8004f42:	0652      	lsls	r2, r2, #25
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f4a:	06d2      	lsls	r2, r2, #27
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	4912      	ldr	r1, [pc, #72]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f54:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0f      	ldr	r2, [pc, #60]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f60:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a0c      	ldr	r2, [pc, #48]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f6c:	f7fd f8ce 	bl	800210c <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fd f8ca 	bl	800210c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e058      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f86:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <HAL_RCC_OscConfig+0x778>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f92:	e050      	b.n	8005036 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e04f      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4b27      	ldr	r3, [pc, #156]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d144      	bne.n	8005036 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fac:	4b24      	ldr	r3, [pc, #144]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a23      	ldr	r2, [pc, #140]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fb8:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fc4:	f7fd f8a2 	bl	800210c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd f89e 	bl	800210c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e02c      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	4b18      	ldr	r3, [pc, #96]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x7ac>
 8004fea:	e024      	b.n	8005036 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d01f      	beq.n	8005032 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b13      	ldr	r3, [pc, #76]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a12      	ldr	r2, [pc, #72]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8004ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fd f885 	bl	800210c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005006:	f7fd f881 	bl	800210c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e00f      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005018:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005024:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4905      	ldr	r1, [pc, #20]	@ (8005040 <HAL_RCC_OscConfig+0x820>)
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_OscConfig+0x824>)
 800502c:	4013      	ands	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
 8005030:	e001      	b.n	8005036 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000
 8005044:	feeefffc 	.word	0xfeeefffc

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0e7      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b75      	ldr	r3, [pc, #468]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b72      	ldr	r3, [pc, #456]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 0207 	bic.w	r2, r3, #7
 8005072:	4970      	ldr	r1, [pc, #448]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b6e      	ldr	r3, [pc, #440]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0cf      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	4b66      	ldr	r3, [pc, #408]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d908      	bls.n	80050ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a8:	4b63      	ldr	r3, [pc, #396]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4960      	ldr	r1, [pc, #384]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04c      	beq.n	8005160 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d121      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0a6      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	4b54      	ldr	r3, [pc, #336]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e09a      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e08e      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510e:	4b4a      	ldr	r3, [pc, #296]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e086      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b46      	ldr	r3, [pc, #280]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4943      	ldr	r1, [pc, #268]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fc ffec 	bl	800210c <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fc ffe8 	bl	800210c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e06e      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	429a      	cmp	r2, r3
 800517a:	d208      	bcs.n	800518e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b2e      	ldr	r3, [pc, #184]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	492b      	ldr	r1, [pc, #172]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d210      	bcs.n	80051be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 0207 	bic.w	r2, r3, #7
 80051a4:	4923      	ldr	r1, [pc, #140]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ac:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e036      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	4918      	ldr	r1, [pc, #96]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e8:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4910      	ldr	r1, [pc, #64]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051fc:	f000 f824 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	490b      	ldr	r1, [pc, #44]	@ (800523c <HAL_RCC_ClockConfig+0x1f4>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 800521a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800521c:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_ClockConfig+0x1fc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fc ff23 	bl	800206c <HAL_InitTick>
 8005226:	4603      	mov	r3, r0
 8005228:	72fb      	strb	r3, [r7, #11]

  return status;
 800522a:	7afb      	ldrb	r3, [r7, #11]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40022000 	.word	0x40022000
 8005238:	40021000 	.word	0x40021000
 800523c:	0800bf64 	.word	0x0800bf64
 8005240:	20000008 	.word	0x20000008
 8005244:	2000000c 	.word	0x2000000c

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	@ 0x24
 800524c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005256:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005260:	4b3b      	ldr	r3, [pc, #236]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x34>
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d121      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11e      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800527c:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d107      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005288:	4b31      	ldr	r3, [pc, #196]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e005      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005298:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d102      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052c0:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e004      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052cc:	4b23      	ldr	r3, [pc, #140]	@ (800535c <HAL_RCC_GetSysClockFreq+0x114>)
 80052ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b0c      	cmp	r3, #12
 80052d4:	d134      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0xa6>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d003      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0xac>
 80052ec:	e005      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x110>)
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	e005      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052f4:	4b19      	ldr	r3, [pc, #100]	@ (800535c <HAL_RCC_GetSysClockFreq+0x114>)
 80052f6:	617b      	str	r3, [r7, #20]
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	617b      	str	r3, [r7, #20]
      break;
 80052fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	3301      	adds	r3, #1
 800530c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	fb03 f202 	mul.w	r2, r3, r2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	0e5b      	lsrs	r3, r3, #25
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	3301      	adds	r3, #1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005340:	69bb      	ldr	r3, [r7, #24]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3724      	adds	r7, #36	@ 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000
 8005354:	0800bf7c 	.word	0x0800bf7c
 8005358:	00f42400 	.word	0x00f42400
 800535c:	007a1200 	.word	0x007a1200

08005360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	@ (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000008 	.word	0x20000008

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b06      	ldr	r3, [pc, #24]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4904      	ldr	r1, [pc, #16]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	0800bf74 	.word	0x0800bf74

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053a8:	f7ff ffda 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0adb      	lsrs	r3, r3, #11
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4904      	ldr	r1, [pc, #16]	@ (80053cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0800bf74 	.word	0x0800bf74

080053d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053e8:	f7ff f9b6 	bl	8004758 <HAL_PWREx_GetVoltageRange>
 80053ec:	6178      	str	r0, [r7, #20]
 80053ee:	e014      	b.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f0:	4b25      	ldr	r3, [pc, #148]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f4:	4a24      	ldr	r2, [pc, #144]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005408:	f7ff f9a6 	bl	8004758 <HAL_PWREx_GetVoltageRange>
 800540c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4b1e      	ldr	r3, [pc, #120]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	d10b      	bne.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b80      	cmp	r3, #128	@ 0x80
 8005426:	d919      	bls.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2ba0      	cmp	r3, #160	@ 0xa0
 800542c:	d902      	bls.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800542e:	2302      	movs	r3, #2
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e013      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005434:	2301      	movs	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e010      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	d902      	bls.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005440:	2303      	movs	r3, #3
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e00a      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d102      	bne.n	8005452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800544c:	2302      	movs	r3, #2
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e004      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b70      	cmp	r3, #112	@ 0x70
 8005456:	d101      	bne.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005458:	2301      	movs	r3, #1
 800545a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 0207 	bic.w	r2, r3, #7
 8005464:	4909      	ldr	r1, [pc, #36]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d001      	beq.n	800547e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	40022000 	.word	0x40022000

08005490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005498:	2300      	movs	r3, #0
 800549a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800549c:	2300      	movs	r3, #0
 800549e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d031      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054b4:	d01a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054ba:	d814      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054c4:	d10f      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054c6:	4b5d      	ldr	r3, [pc, #372]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4a5c      	ldr	r2, [pc, #368]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d2:	e00c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f9de 	bl	800589c <RCCEx_PLLSAI1_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	74fb      	strb	r3, [r7, #19]
      break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f4:	4b51      	ldr	r3, [pc, #324]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	494e      	ldr	r1, [pc, #312]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800550a:	e001      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 809e 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551e:	2300      	movs	r3, #0
 8005520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005522:	4b46      	ldr	r3, [pc, #280]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005538:	4b40      	ldr	r3, [pc, #256]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553c:	4a3f      	ldr	r2, [pc, #252]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005542:	6593      	str	r3, [r2, #88]	@ 0x58
 8005544:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005550:	2301      	movs	r3, #1
 8005552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005554:	4b3a      	ldr	r3, [pc, #232]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a39      	ldr	r2, [pc, #228]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800555a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005560:	f7fc fdd4 	bl	800210c <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005566:	e009      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005568:	f7fc fdd0 	bl	800210c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d902      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	74fb      	strb	r3, [r7, #19]
        break;
 800557a:	e005      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800557c:	4b30      	ldr	r3, [pc, #192]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0ef      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d15a      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800558e:	4b2b      	ldr	r3, [pc, #172]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d019      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055aa:	4b24      	ldr	r3, [pc, #144]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b6:	4b21      	ldr	r3, [pc, #132]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055bc:	4a1f      	ldr	r2, [pc, #124]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c6:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055cc:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d6:	4a19      	ldr	r2, [pc, #100]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fc fd90 	bl	800210c <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	e00b      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fc fd8c 	bl	800210c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d902      	bls.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	74fb      	strb	r3, [r7, #19]
            break;
 8005606:	e006      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005608:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ec      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562a:	4904      	ldr	r1, [pc, #16]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005632:	e009      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	74bb      	strb	r3, [r7, #18]
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005648:	7c7b      	ldrb	r3, [r7, #17]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4b8a      	ldr	r3, [pc, #552]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005652:	4a89      	ldr	r2, [pc, #548]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005658:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005666:	4b84      	ldr	r3, [pc, #528]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566c:	f023 0203 	bic.w	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4980      	ldr	r1, [pc, #512]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005688:	4b7b      	ldr	r3, [pc, #492]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	f023 020c 	bic.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4978      	ldr	r1, [pc, #480]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056aa:	4b73      	ldr	r3, [pc, #460]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	496f      	ldr	r1, [pc, #444]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056da:	4967      	ldr	r1, [pc, #412]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056ee:	4b62      	ldr	r3, [pc, #392]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	495e      	ldr	r1, [pc, #376]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005710:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4956      	ldr	r1, [pc, #344]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005732:	4b51      	ldr	r3, [pc, #324]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	494d      	ldr	r1, [pc, #308]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d028      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005754:	4b48      	ldr	r3, [pc, #288]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	4945      	ldr	r1, [pc, #276]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005772:	d106      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005774:	4b40      	ldr	r3, [pc, #256]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4a3f      	ldr	r2, [pc, #252]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800577a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577e:	60d3      	str	r3, [r2, #12]
 8005780:	e011      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800578a:	d10c      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f882 	bl	800589c <RCCEx_PLLSAI1_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d028      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b2:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c0:	492d      	ldr	r1, [pc, #180]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d2:	4b29      	ldr	r3, [pc, #164]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a28      	ldr	r2, [pc, #160]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057dc:	60d3      	str	r3, [r2, #12]
 80057de:	e011      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f853 	bl	800589c <RCCEx_PLLSAI1_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01c      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005810:	4b19      	ldr	r3, [pc, #100]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581e:	4916      	ldr	r1, [pc, #88]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800582e:	d10c      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f830 	bl	800589c <RCCEx_PLLSAI1_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005864:	4904      	ldr	r1, [pc, #16]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800586c:	7cbb      	ldrb	r3, [r7, #18]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000

0800587c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a04      	ldr	r2, [pc, #16]	@ (8005898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005886:	f043 0304 	orr.w	r3, r3, #4
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000

0800589c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058aa:	4b74      	ldr	r3, [pc, #464]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d018      	beq.n	80058e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058b6:	4b71      	ldr	r3, [pc, #452]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0203 	and.w	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d10d      	bne.n	80058e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
       ||
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058ce:	4b6b      	ldr	r3, [pc, #428]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	091b      	lsrs	r3, r3, #4
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
       ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d047      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e044      	b.n	8005972 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d018      	beq.n	8005922 <RCCEx_PLLSAI1_Config+0x86>
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d825      	bhi.n	8005940 <RCCEx_PLLSAI1_Config+0xa4>
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d002      	beq.n	80058fe <RCCEx_PLLSAI1_Config+0x62>
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d009      	beq.n	8005910 <RCCEx_PLLSAI1_Config+0x74>
 80058fc:	e020      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058fe:	4b5f      	ldr	r3, [pc, #380]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d11d      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590e:	e01a      	b.n	8005946 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005910:	4b5a      	ldr	r3, [pc, #360]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d116      	bne.n	800594a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005920:	e013      	b.n	800594a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005922:	4b56      	ldr	r3, [pc, #344]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800592e:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800593e:	e006      	b.n	800594e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      break;
 8005944:	e004      	b.n	8005950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800594e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005956:	4b49      	ldr	r3, [pc, #292]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6819      	ldr	r1, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	430b      	orrs	r3, r1
 800596c:	4943      	ldr	r1, [pc, #268]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800596e:	4313      	orrs	r3, r2
 8005970:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d17c      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005978:	4b40      	ldr	r3, [pc, #256]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800597e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005984:	f7fc fbc2 	bl	800210c <HAL_GetTick>
 8005988:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800598a:	e009      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800598c:	f7fc fbbe 	bl	800210c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d902      	bls.n	80059a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	73fb      	strb	r3, [r7, #15]
        break;
 800599e:	e005      	b.n	80059ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059a0:	4b36      	ldr	r3, [pc, #216]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ef      	bne.n	800598c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d15f      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d110      	bne.n	80059da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b8:	4b30      	ldr	r3, [pc, #192]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80059c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6892      	ldr	r2, [r2, #8]
 80059c8:	0211      	lsls	r1, r2, #8
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68d2      	ldr	r2, [r2, #12]
 80059ce:	06d2      	lsls	r2, r2, #27
 80059d0:	430a      	orrs	r2, r1
 80059d2:	492a      	ldr	r1, [pc, #168]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	610b      	str	r3, [r1, #16]
 80059d8:	e027      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d112      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e0:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80059e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6892      	ldr	r2, [r2, #8]
 80059f0:	0211      	lsls	r1, r2, #8
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6912      	ldr	r2, [r2, #16]
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	3a01      	subs	r2, #1
 80059fa:	0552      	lsls	r2, r2, #21
 80059fc:	430a      	orrs	r2, r1
 80059fe:	491f      	ldr	r1, [pc, #124]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]
 8005a04:	e011      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a06:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6892      	ldr	r2, [r2, #8]
 8005a16:	0211      	lsls	r1, r2, #8
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6952      	ldr	r2, [r2, #20]
 8005a1c:	0852      	lsrs	r2, r2, #1
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	0652      	lsls	r2, r2, #25
 8005a22:	430a      	orrs	r2, r1
 8005a24:	4915      	ldr	r1, [pc, #84]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a2a:	4b14      	ldr	r3, [pc, #80]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a13      	ldr	r2, [pc, #76]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a36:	f7fc fb69 	bl	800210c <HAL_GetTick>
 8005a3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a3c:	e009      	b.n	8005a52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a3e:	f7fc fb65 	bl	800210c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d902      	bls.n	8005a52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a50:	e005      	b.n	8005a5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a52:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ef      	beq.n	8005a3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4903      	ldr	r1, [pc, #12]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000

08005a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e049      	b.n	8005b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc f872 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 fcd8 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e03b      	b.n	8005bc0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIM_Base_Start_IT+0x4e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d004      	beq.n	8005b7e <HAL_TIM_Base_Start_IT+0x4e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d115      	bne.n	8005baa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d015      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x8c>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b96:	d011      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	e008      	b.n	8005bbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e000      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	00010007 	.word	0x00010007

08005bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e049      	b.n	8005c7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f841 	bl	8005c86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f000 fc2c 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_TIM_PWM_Start+0x24>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e03c      	b.n	8005d3a <HAL_TIM_PWM_Start+0x9e>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d109      	bne.n	8005cda <HAL_TIM_PWM_Start+0x3e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e02f      	b.n	8005d3a <HAL_TIM_PWM_Start+0x9e>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d109      	bne.n	8005cf4 <HAL_TIM_PWM_Start+0x58>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e022      	b.n	8005d3a <HAL_TIM_PWM_Start+0x9e>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d109      	bne.n	8005d0e <HAL_TIM_PWM_Start+0x72>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	e015      	b.n	8005d3a <HAL_TIM_PWM_Start+0x9e>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start+0x8c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e008      	b.n	8005d3a <HAL_TIM_PWM_Start+0x9e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	bf14      	ite	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	2300      	moveq	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e07e      	b.n	8005e40 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Start+0xb6>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d50:	e023      	b.n	8005d9a <HAL_TIM_PWM_Start+0xfe>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_PWM_Start+0xc6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d60:	e01b      	b.n	8005d9a <HAL_TIM_PWM_Start+0xfe>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_PWM_Start+0xd6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d70:	e013      	b.n	8005d9a <HAL_TIM_PWM_Start+0xfe>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	d104      	bne.n	8005d82 <HAL_TIM_PWM_Start+0xe6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d80:	e00b      	b.n	8005d9a <HAL_TIM_PWM_Start+0xfe>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d104      	bne.n	8005d92 <HAL_TIM_PWM_Start+0xf6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d90:	e003      	b.n	8005d9a <HAL_TIM_PWM_Start+0xfe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 feee 	bl	8006b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a26      	ldr	r2, [pc, #152]	@ (8005e48 <HAL_TIM_PWM_Start+0x1ac>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x12a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a25      	ldr	r2, [pc, #148]	@ (8005e4c <HAL_TIM_PWM_Start+0x1b0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x12a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a23      	ldr	r2, [pc, #140]	@ (8005e50 <HAL_TIM_PWM_Start+0x1b4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_PWM_Start+0x12e>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_PWM_Start+0x130>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <HAL_TIM_PWM_Start+0x1ac>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_TIM_PWM_Start+0x162>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df2:	d004      	beq.n	8005dfe <HAL_TIM_PWM_Start+0x162>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a14      	ldr	r2, [pc, #80]	@ (8005e4c <HAL_TIM_PWM_Start+0x1b0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d115      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_TIM_PWM_Start+0x1b8>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b06      	cmp	r3, #6
 8005e0e:	d015      	beq.n	8005e3c <HAL_TIM_PWM_Start+0x1a0>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e16:	d011      	beq.n	8005e3c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	e008      	b.n	8005e3c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0201 	orr.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	00010007 	.word	0x00010007

08005e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d020      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0202 	mvn.w	r2, #2
 8005e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fac7 	bl	8006436 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fab9 	bl	8006422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 faca 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0204 	mvn.w	r2, #4
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 faa1 	bl	8006436 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa93 	bl	8006422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 faa4 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0208 	mvn.w	r2, #8
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa7b 	bl	8006436 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa6d 	bl	8006422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa7e 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0210 	mvn.w	r2, #16
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2208      	movs	r2, #8
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa55 	bl	8006436 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa47 	bl	8006422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa58 	bl	800644a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0201 	mvn.w	r2, #1
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb f86e 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fed7 	bl	8006da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00c      	beq.n	8006016 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fecf 	bl	8006db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa12 	bl	800645e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0220 	mvn.w	r2, #32
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fe97 	bl	8006d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006082:	2302      	movs	r3, #2
 8006084:	e0ff      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b14      	cmp	r3, #20
 8006092:	f200 80f0 	bhi.w	8006276 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	08006277 	.word	0x08006277
 80060a4:	08006277 	.word	0x08006277
 80060a8:	08006277 	.word	0x08006277
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006277 	.word	0x08006277
 80060b4:	08006277 	.word	0x08006277
 80060b8:	08006277 	.word	0x08006277
 80060bc:	08006173 	.word	0x08006173
 80060c0:	08006277 	.word	0x08006277
 80060c4:	08006277 	.word	0x08006277
 80060c8:	08006277 	.word	0x08006277
 80060cc:	080061b3 	.word	0x080061b3
 80060d0:	08006277 	.word	0x08006277
 80060d4:	08006277 	.word	0x08006277
 80060d8:	08006277 	.word	0x08006277
 80060dc:	080061f5 	.word	0x080061f5
 80060e0:	08006277 	.word	0x08006277
 80060e4:	08006277 	.word	0x08006277
 80060e8:	08006277 	.word	0x08006277
 80060ec:	08006235 	.word	0x08006235
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa2c 	bl	8006554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
      break;
 800612e:	e0a5      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fa88 	bl	800664c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e084      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fae1 	bl	8006740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0204 	bic.w	r2, r2, #4
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	61da      	str	r2, [r3, #28]
      break;
 80061b0:	e064      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fb39 	bl	8006830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	021a      	lsls	r2, r3, #8
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
      break;
 80061f2:	e043      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb76 	bl	80068ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006232:	e023      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fbae 	bl	800699c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006274:	e002      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
      break;
 800627a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b6      	b.n	800641a <HAL_TIM_ConfigClockSource+0x18a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e8:	d03e      	beq.n	8006368 <HAL_TIM_ConfigClockSource+0xd8>
 80062ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ee:	f200 8087 	bhi.w	8006400 <HAL_TIM_ConfigClockSource+0x170>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f6:	f000 8086 	beq.w	8006406 <HAL_TIM_ConfigClockSource+0x176>
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fe:	d87f      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006300:	2b70      	cmp	r3, #112	@ 0x70
 8006302:	d01a      	beq.n	800633a <HAL_TIM_ConfigClockSource+0xaa>
 8006304:	2b70      	cmp	r3, #112	@ 0x70
 8006306:	d87b      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006308:	2b60      	cmp	r3, #96	@ 0x60
 800630a:	d050      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x11e>
 800630c:	2b60      	cmp	r3, #96	@ 0x60
 800630e:	d877      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006310:	2b50      	cmp	r3, #80	@ 0x50
 8006312:	d03c      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xfe>
 8006314:	2b50      	cmp	r3, #80	@ 0x50
 8006316:	d873      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d058      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x13e>
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d86f      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006320:	2b30      	cmp	r3, #48	@ 0x30
 8006322:	d064      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x15e>
 8006324:	2b30      	cmp	r3, #48	@ 0x30
 8006326:	d86b      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d060      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x15e>
 800632c:	2b20      	cmp	r3, #32
 800632e:	d867      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d05c      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x15e>
 8006334:	2b10      	cmp	r3, #16
 8006336:	d05a      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x15e>
 8006338:	e062      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800634a:	f000 fbfb 	bl	8006b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800635c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	609a      	str	r2, [r3, #8]
      break;
 8006366:	e04f      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006378:	f000 fbe4 	bl	8006b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800638a:	609a      	str	r2, [r3, #8]
      break;
 800638c:	e03c      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fb58 	bl	8006a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2150      	movs	r1, #80	@ 0x50
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fbb1 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80063ac:	e02c      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 fb77 	bl	8006aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2160      	movs	r1, #96	@ 0x60
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fba1 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80063cc:	e01c      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063da:	461a      	mov	r2, r3
 80063dc:	f000 fb38 	bl	8006a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2140      	movs	r1, #64	@ 0x40
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fb91 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80063ec:	e00c      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f000 fb88 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80063fe:	e003      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
      break;
 8006404:	e000      	b.n	8006408 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a30      	ldr	r2, [pc, #192]	@ (8006548 <TIM_Base_SetConfig+0xd4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x20>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a27      	ldr	r2, [pc, #156]	@ (8006548 <TIM_Base_SetConfig+0xd4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0x52>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0x52>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a24      	ldr	r2, [pc, #144]	@ (800654c <TIM_Base_SetConfig+0xd8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0x52>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a23      	ldr	r2, [pc, #140]	@ (8006550 <TIM_Base_SetConfig+0xdc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a12      	ldr	r2, [pc, #72]	@ (8006548 <TIM_Base_SetConfig+0xd4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0xa0>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a11      	ldr	r2, [pc, #68]	@ (800654c <TIM_Base_SetConfig+0xd8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0xa0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a10      	ldr	r2, [pc, #64]	@ (8006550 <TIM_Base_SetConfig+0xdc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d103      	bne.n	800651c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]
  }
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400

08006554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f023 0201 	bic.w	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 0302 	bic.w	r3, r3, #2
 80065a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a24      	ldr	r2, [pc, #144]	@ (8006640 <TIM_OC1_SetConfig+0xec>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_OC1_SetConfig+0x70>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a23      	ldr	r2, [pc, #140]	@ (8006644 <TIM_OC1_SetConfig+0xf0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC1_SetConfig+0x70>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a22      	ldr	r2, [pc, #136]	@ (8006648 <TIM_OC1_SetConfig+0xf4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10c      	bne.n	80065de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0308 	bic.w	r3, r3, #8
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <TIM_OC1_SetConfig+0xec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_OC1_SetConfig+0xa2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <TIM_OC1_SetConfig+0xf0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_OC1_SetConfig+0xa2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <TIM_OC1_SetConfig+0xf4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d111      	bne.n	800661a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400

0800664c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0210 	bic.w	r2, r3, #16
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0320 	bic.w	r3, r3, #32
 800669a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a22      	ldr	r2, [pc, #136]	@ (8006734 <TIM_OC2_SetConfig+0xe8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10d      	bne.n	80066cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a19      	ldr	r2, [pc, #100]	@ (8006734 <TIM_OC2_SetConfig+0xe8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_OC2_SetConfig+0x98>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a18      	ldr	r2, [pc, #96]	@ (8006738 <TIM_OC2_SetConfig+0xec>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC2_SetConfig+0x98>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a17      	ldr	r2, [pc, #92]	@ (800673c <TIM_OC2_SetConfig+0xf0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d113      	bne.n	800670c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400

08006740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800678c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a21      	ldr	r2, [pc, #132]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10d      	bne.n	80067be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d007      	beq.n	80067d6 <TIM_OC3_SetConfig+0x96>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <TIM_OC3_SetConfig+0xe8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_OC3_SetConfig+0x96>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a16      	ldr	r2, [pc, #88]	@ (800682c <TIM_OC3_SetConfig+0xec>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d113      	bne.n	80067fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	621a      	str	r2, [r3, #32]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400

08006830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a14      	ldr	r2, [pc, #80]	@ (80068e0 <TIM_OC4_SetConfig+0xb0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_OC4_SetConfig+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a13      	ldr	r2, [pc, #76]	@ (80068e4 <TIM_OC4_SetConfig+0xb4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC4_SetConfig+0x74>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <TIM_OC4_SetConfig+0xb8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d109      	bne.n	80068b8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40012c00 	.word	0x40012c00
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400

080068ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a13      	ldr	r2, [pc, #76]	@ (8006990 <TIM_OC5_SetConfig+0xa4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <TIM_OC5_SetConfig+0x6a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a12      	ldr	r2, [pc, #72]	@ (8006994 <TIM_OC5_SetConfig+0xa8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC5_SetConfig+0x6a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <TIM_OC5_SetConfig+0xac>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d109      	bne.n	800696a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400

0800699c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	051b      	lsls	r3, r3, #20
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <TIM_OC6_SetConfig+0xa8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_OC6_SetConfig+0x6c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a13      	ldr	r2, [pc, #76]	@ (8006a48 <TIM_OC6_SetConfig+0xac>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_OC6_SetConfig+0x6c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a12      	ldr	r2, [pc, #72]	@ (8006a4c <TIM_OC6_SetConfig+0xb0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d109      	bne.n	8006a1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	029b      	lsls	r3, r3, #10
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400

08006a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0201 	bic.w	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 030a 	bic.w	r3, r3, #10
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	f023 0210 	bic.w	r2, r3, #16
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b085      	sub	sp, #20
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f043 0307 	orr.w	r3, r3, #7
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	2201      	movs	r2, #1
 8006b98:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1a      	ldr	r2, [r3, #32]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	401a      	ands	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e04f      	b.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a14      	ldr	r2, [pc, #80]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c50:	d004      	beq.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10c      	bne.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40014000 	.word	0x40014000

08006c9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e060      	b.n	8006d7a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a14      	ldr	r2, [pc, #80]	@ (8006d88 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d115      	bne.n	8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	051b      	lsls	r3, r3, #20
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00

08006d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e040      	b.n	8006e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fa ff82 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2224      	movs	r2, #36	@ 0x24
 8006df4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0201 	bic.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fade 	bl	80073d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f8af 	bl	8006f78 <UART_SetConfig>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e01b      	b.n	8006e5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb5d 	bl	8007514 <UART_CheckIdleState>
 8006e5a:	4603      	mov	r3, r0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	@ 0x28
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d177      	bne.n	8006f6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_UART_Transmit+0x24>
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e070      	b.n	8006f6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2221      	movs	r2, #33	@ 0x21
 8006e98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e9a:	f7fb f937 	bl	800210c <HAL_GetTick>
 8006e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb8:	d108      	bne.n	8006ecc <HAL_UART_Transmit+0x68>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	e003      	b.n	8006ed4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ed4:	e02f      	b.n	8006f36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	2180      	movs	r1, #128	@ 0x80
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fbbf 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e03b      	b.n	8006f6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10b      	bne.n	8006f14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	881a      	ldrh	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	3302      	adds	r3, #2
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e007      	b.n	8006f24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3301      	adds	r3, #1
 8006f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1c9      	bne.n	8006ed6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2140      	movs	r1, #64	@ 0x40
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fb89 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e005      	b.n	8006f6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e000      	b.n	8006f6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3720      	adds	r7, #32
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f7c:	b08a      	sub	sp, #40	@ 0x28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4bb4      	ldr	r3, [pc, #720]	@ (8007278 <UART_SetConfig+0x300>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4aa9      	ldr	r2, [pc, #676]	@ (800727c <UART_SetConfig+0x304>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4aa0      	ldr	r2, [pc, #640]	@ (8007280 <UART_SetConfig+0x308>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d126      	bne.n	8007050 <UART_SetConfig+0xd8>
 8007002:	4ba0      	ldr	r3, [pc, #640]	@ (8007284 <UART_SetConfig+0x30c>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d81b      	bhi.n	8007048 <UART_SetConfig+0xd0>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <UART_SetConfig+0xa0>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007029 	.word	0x08007029
 800701c:	08007039 	.word	0x08007039
 8007020:	08007031 	.word	0x08007031
 8007024:	08007041 	.word	0x08007041
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702e:	e080      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007030:	2302      	movs	r3, #2
 8007032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007036:	e07c      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703e:	e078      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007046:	e074      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704e:	e070      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a8c      	ldr	r2, [pc, #560]	@ (8007288 <UART_SetConfig+0x310>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d138      	bne.n	80070cc <UART_SetConfig+0x154>
 800705a:	4b8a      	ldr	r3, [pc, #552]	@ (8007284 <UART_SetConfig+0x30c>)
 800705c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d82d      	bhi.n	80070c4 <UART_SetConfig+0x14c>
 8007068:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <UART_SetConfig+0xf8>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070c5 	.word	0x080070c5
 8007078:	080070c5 	.word	0x080070c5
 800707c:	080070c5 	.word	0x080070c5
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080070c5 	.word	0x080070c5
 8007088:	080070c5 	.word	0x080070c5
 800708c:	080070c5 	.word	0x080070c5
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070c5 	.word	0x080070c5
 8007098:	080070c5 	.word	0x080070c5
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070aa:	e042      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b2:	e03e      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e03a      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e036      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e032      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6a      	ldr	r2, [pc, #424]	@ (800727c <UART_SetConfig+0x304>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d12a      	bne.n	800712c <UART_SetConfig+0x1b4>
 80070d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007284 <UART_SetConfig+0x30c>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070e4:	d01a      	beq.n	800711c <UART_SetConfig+0x1a4>
 80070e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070ea:	d81b      	bhi.n	8007124 <UART_SetConfig+0x1ac>
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f0:	d00c      	beq.n	800710c <UART_SetConfig+0x194>
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f6:	d815      	bhi.n	8007124 <UART_SetConfig+0x1ac>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <UART_SetConfig+0x18c>
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x19c>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x1ac>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710a:	e012      	b.n	8007132 <UART_SetConfig+0x1ba>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007112:	e00e      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711a:	e00a      	b.n	8007132 <UART_SetConfig+0x1ba>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007122:	e006      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712a:	e002      	b.n	8007132 <UART_SetConfig+0x1ba>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a51      	ldr	r2, [pc, #324]	@ (800727c <UART_SetConfig+0x304>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d17a      	bne.n	8007232 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800713c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007140:	2b08      	cmp	r3, #8
 8007142:	d824      	bhi.n	800718e <UART_SetConfig+0x216>
 8007144:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0x1d4>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007171 	.word	0x08007171
 8007150:	0800718f 	.word	0x0800718f
 8007154:	08007179 	.word	0x08007179
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800717f 	.word	0x0800717f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800718f 	.word	0x0800718f
 800716c:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fe f902 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007174:	61f8      	str	r0, [r7, #28]
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b44      	ldr	r3, [pc, #272]	@ (800728c <UART_SetConfig+0x314>)
 800717a:	61fb      	str	r3, [r7, #28]
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fe f863 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8007182:	61f8      	str	r0, [r7, #28]
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	61fb      	str	r3, [r7, #28]
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8107 	beq.w	80073b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4413      	add	r3, r2
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d305      	bcc.n	80071be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d903      	bls.n	80071c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071c4:	e0f4      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	461c      	mov	r4, r3
 80071cc:	4615      	mov	r5, r2
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	022b      	lsls	r3, r5, #8
 80071d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071dc:	0222      	lsls	r2, r4, #8
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6849      	ldr	r1, [r1, #4]
 80071e2:	0849      	lsrs	r1, r1, #1
 80071e4:	2000      	movs	r0, #0
 80071e6:	4688      	mov	r8, r1
 80071e8:	4681      	mov	r9, r0
 80071ea:	eb12 0a08 	adds.w	sl, r2, r8
 80071ee:	eb43 0b09 	adc.w	fp, r3, r9
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007200:	4650      	mov	r0, sl
 8007202:	4659      	mov	r1, fp
 8007204:	f7f9 fd40 	bl	8000c88 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4613      	mov	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007216:	d308      	bcc.n	800722a <UART_SetConfig+0x2b2>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800721e:	d204      	bcs.n	800722a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	e0c2      	b.n	80073b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007230:	e0be      	b.n	80073b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800723a:	d16a      	bne.n	8007312 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800723c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007240:	2b08      	cmp	r3, #8
 8007242:	d834      	bhi.n	80072ae <UART_SetConfig+0x336>
 8007244:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <UART_SetConfig+0x2d4>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007271 	.word	0x08007271
 8007250:	08007291 	.word	0x08007291
 8007254:	08007299 	.word	0x08007299
 8007258:	080072af 	.word	0x080072af
 800725c:	0800729f 	.word	0x0800729f
 8007260:	080072af 	.word	0x080072af
 8007264:	080072af 	.word	0x080072af
 8007268:	080072af 	.word	0x080072af
 800726c:	080072a7 	.word	0x080072a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fe f882 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007274:	61f8      	str	r0, [r7, #28]
        break;
 8007276:	e020      	b.n	80072ba <UART_SetConfig+0x342>
 8007278:	efff69f3 	.word	0xefff69f3
 800727c:	40008000 	.word	0x40008000
 8007280:	40013800 	.word	0x40013800
 8007284:	40021000 	.word	0x40021000
 8007288:	40004400 	.word	0x40004400
 800728c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7fe f888 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8007294:	61f8      	str	r0, [r7, #28]
        break;
 8007296:	e010      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007298:	4b4c      	ldr	r3, [pc, #304]	@ (80073cc <UART_SetConfig+0x454>)
 800729a:	61fb      	str	r3, [r7, #28]
        break;
 800729c:	e00d      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729e:	f7fd ffd3 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80072a2:	61f8      	str	r0, [r7, #28]
        break;
 80072a4:	e009      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072aa:	61fb      	str	r3, [r7, #28]
        break;
 80072ac:	e005      	b.n	80072ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d077      	beq.n	80073b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	005a      	lsls	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b0f      	cmp	r3, #15
 80072da:	d916      	bls.n	800730a <UART_SetConfig+0x392>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e2:	d212      	bcs.n	800730a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f023 030f 	bic.w	r3, r3, #15
 80072ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	8afb      	ldrh	r3, [r7, #22]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	8afa      	ldrh	r2, [r7, #22]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e052      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007310:	e04e      	b.n	80073b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007312:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007316:	2b08      	cmp	r3, #8
 8007318:	d827      	bhi.n	800736a <UART_SetConfig+0x3f2>
 800731a:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <UART_SetConfig+0x3a8>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007345 	.word	0x08007345
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007355 	.word	0x08007355
 800732c:	0800736b 	.word	0x0800736b
 8007330:	0800735b 	.word	0x0800735b
 8007334:	0800736b 	.word	0x0800736b
 8007338:	0800736b 	.word	0x0800736b
 800733c:	0800736b 	.word	0x0800736b
 8007340:	08007363 	.word	0x08007363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007344:	f7fe f818 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007348:	61f8      	str	r0, [r7, #28]
        break;
 800734a:	e014      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800734c:	f7fe f82a 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8007350:	61f8      	str	r0, [r7, #28]
        break;
 8007352:	e010      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <UART_SetConfig+0x454>)
 8007356:	61fb      	str	r3, [r7, #28]
        break;
 8007358:	e00d      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fd ff75 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 800735e:	61f8      	str	r0, [r7, #28]
        break;
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007366:	61fb      	str	r3, [r7, #28]
        break;
 8007368:	e005      	b.n	8007376 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007374:	bf00      	nop
    }

    if (pclk != 0U)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d019      	beq.n	80073b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	085a      	lsrs	r2, r3, #1
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d909      	bls.n	80073aa <UART_SetConfig+0x432>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800739c:	d205      	bcs.n	80073aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	e002      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3728      	adds	r7, #40	@ 0x28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ca:	bf00      	nop
 80073cc:	00f42400 	.word	0x00f42400

080073d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01a      	beq.n	80074e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ce:	d10a      	bne.n	80074e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b098      	sub	sp, #96	@ 0x60
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007524:	f7fa fdf2 	bl	800210c <HAL_GetTick>
 8007528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d12e      	bne.n	8007596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007540:	2200      	movs	r2, #0
 8007542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f88c 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d021      	beq.n	8007596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007566:	653b      	str	r3, [r7, #80]	@ 0x50
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e062      	b.n	800765c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d149      	bne.n	8007638 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f856 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03c      	beq.n	8007638 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	623b      	str	r3, [r7, #32]
   return(result);
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80075de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007610:	61fa      	str	r2, [r7, #28]
 8007612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	69b9      	ldr	r1, [r7, #24]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	617b      	str	r3, [r7, #20]
   return(result);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e5      	bne.n	80075f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e011      	b.n	800765c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3758      	adds	r7, #88	@ 0x58
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007674:	e04f      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d04b      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767e:	f7fa fd45 	bl	800210c <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	429a      	cmp	r2, r3
 800768c:	d302      	bcc.n	8007694 <UART_WaitOnFlagUntilTimeout+0x30>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e04e      	b.n	8007736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d037      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b80      	cmp	r3, #128	@ 0x80
 80076aa:	d034      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b40      	cmp	r3, #64	@ 0x40
 80076b0:	d031      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d110      	bne.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2208      	movs	r2, #8
 80076c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f838 	bl	800773e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2208      	movs	r2, #8
 80076d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e029      	b.n	8007736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f0:	d111      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f81e 	bl	800773e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e00f      	b.n	8007736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4013      	ands	r3, r2
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	bf0c      	ite	eq
 8007726:	2301      	moveq	r3, #1
 8007728:	2300      	movne	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d0a0      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b095      	sub	sp, #84	@ 0x54
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800775a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007764:	643b      	str	r3, [r7, #64]	@ 0x40
 8007766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800776a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	61fb      	str	r3, [r7, #28]
   return(result);
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f023 0301 	bic.w	r3, r3, #1
 800778e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800779a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800779e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e5      	bne.n	8007778 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d118      	bne.n	80077e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f023 0310 	bic.w	r3, r3, #16
 80077c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	613b      	str	r3, [r7, #16]
   return(result);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077fa:	bf00      	nop
 80077fc:	3754      	adds	r7, #84	@ 0x54
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <__cvt>:
 8007806:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800780a:	ec57 6b10 	vmov	r6, r7, d0
 800780e:	2f00      	cmp	r7, #0
 8007810:	460c      	mov	r4, r1
 8007812:	4619      	mov	r1, r3
 8007814:	463b      	mov	r3, r7
 8007816:	bfbb      	ittet	lt
 8007818:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800781c:	461f      	movlt	r7, r3
 800781e:	2300      	movge	r3, #0
 8007820:	232d      	movlt	r3, #45	@ 0x2d
 8007822:	700b      	strb	r3, [r1, #0]
 8007824:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007826:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800782a:	4691      	mov	r9, r2
 800782c:	f023 0820 	bic.w	r8, r3, #32
 8007830:	bfbc      	itt	lt
 8007832:	4632      	movlt	r2, r6
 8007834:	4616      	movlt	r6, r2
 8007836:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800783a:	d005      	beq.n	8007848 <__cvt+0x42>
 800783c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007840:	d100      	bne.n	8007844 <__cvt+0x3e>
 8007842:	3401      	adds	r4, #1
 8007844:	2102      	movs	r1, #2
 8007846:	e000      	b.n	800784a <__cvt+0x44>
 8007848:	2103      	movs	r1, #3
 800784a:	ab03      	add	r3, sp, #12
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	ab02      	add	r3, sp, #8
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	ec47 6b10 	vmov	d0, r6, r7
 8007856:	4653      	mov	r3, sl
 8007858:	4622      	mov	r2, r4
 800785a:	f001 f881 	bl	8008960 <_dtoa_r>
 800785e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007862:	4605      	mov	r5, r0
 8007864:	d119      	bne.n	800789a <__cvt+0x94>
 8007866:	f019 0f01 	tst.w	r9, #1
 800786a:	d00e      	beq.n	800788a <__cvt+0x84>
 800786c:	eb00 0904 	add.w	r9, r0, r4
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f7f9 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800787c:	b108      	cbz	r0, 8007882 <__cvt+0x7c>
 800787e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007882:	2230      	movs	r2, #48	@ 0x30
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	454b      	cmp	r3, r9
 8007888:	d31e      	bcc.n	80078c8 <__cvt+0xc2>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800788e:	1b5b      	subs	r3, r3, r5
 8007890:	4628      	mov	r0, r5
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800789e:	eb00 0904 	add.w	r9, r0, r4
 80078a2:	d1e5      	bne.n	8007870 <__cvt+0x6a>
 80078a4:	7803      	ldrb	r3, [r0, #0]
 80078a6:	2b30      	cmp	r3, #48	@ 0x30
 80078a8:	d10a      	bne.n	80078c0 <__cvt+0xba>
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f9 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b6:	b918      	cbnz	r0, 80078c0 <__cvt+0xba>
 80078b8:	f1c4 0401 	rsb	r4, r4, #1
 80078bc:	f8ca 4000 	str.w	r4, [sl]
 80078c0:	f8da 3000 	ldr.w	r3, [sl]
 80078c4:	4499      	add	r9, r3
 80078c6:	e7d3      	b.n	8007870 <__cvt+0x6a>
 80078c8:	1c59      	adds	r1, r3, #1
 80078ca:	9103      	str	r1, [sp, #12]
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e7d9      	b.n	8007884 <__cvt+0x7e>

080078d0 <__exponent>:
 80078d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d2:	2900      	cmp	r1, #0
 80078d4:	bfba      	itte	lt
 80078d6:	4249      	neglt	r1, r1
 80078d8:	232d      	movlt	r3, #45	@ 0x2d
 80078da:	232b      	movge	r3, #43	@ 0x2b
 80078dc:	2909      	cmp	r1, #9
 80078de:	7002      	strb	r2, [r0, #0]
 80078e0:	7043      	strb	r3, [r0, #1]
 80078e2:	dd29      	ble.n	8007938 <__exponent+0x68>
 80078e4:	f10d 0307 	add.w	r3, sp, #7
 80078e8:	461d      	mov	r5, r3
 80078ea:	270a      	movs	r7, #10
 80078ec:	461a      	mov	r2, r3
 80078ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80078f2:	fb07 1416 	mls	r4, r7, r6, r1
 80078f6:	3430      	adds	r4, #48	@ 0x30
 80078f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078fc:	460c      	mov	r4, r1
 80078fe:	2c63      	cmp	r4, #99	@ 0x63
 8007900:	f103 33ff 	add.w	r3, r3, #4294967295
 8007904:	4631      	mov	r1, r6
 8007906:	dcf1      	bgt.n	80078ec <__exponent+0x1c>
 8007908:	3130      	adds	r1, #48	@ 0x30
 800790a:	1e94      	subs	r4, r2, #2
 800790c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007910:	1c41      	adds	r1, r0, #1
 8007912:	4623      	mov	r3, r4
 8007914:	42ab      	cmp	r3, r5
 8007916:	d30a      	bcc.n	800792e <__exponent+0x5e>
 8007918:	f10d 0309 	add.w	r3, sp, #9
 800791c:	1a9b      	subs	r3, r3, r2
 800791e:	42ac      	cmp	r4, r5
 8007920:	bf88      	it	hi
 8007922:	2300      	movhi	r3, #0
 8007924:	3302      	adds	r3, #2
 8007926:	4403      	add	r3, r0
 8007928:	1a18      	subs	r0, r3, r0
 800792a:	b003      	add	sp, #12
 800792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007932:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007936:	e7ed      	b.n	8007914 <__exponent+0x44>
 8007938:	2330      	movs	r3, #48	@ 0x30
 800793a:	3130      	adds	r1, #48	@ 0x30
 800793c:	7083      	strb	r3, [r0, #2]
 800793e:	70c1      	strb	r1, [r0, #3]
 8007940:	1d03      	adds	r3, r0, #4
 8007942:	e7f1      	b.n	8007928 <__exponent+0x58>

08007944 <_printf_float>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	b08d      	sub	sp, #52	@ 0x34
 800794a:	460c      	mov	r4, r1
 800794c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007950:	4616      	mov	r6, r2
 8007952:	461f      	mov	r7, r3
 8007954:	4605      	mov	r5, r0
 8007956:	f000 fefb 	bl	8008750 <_localeconv_r>
 800795a:	6803      	ldr	r3, [r0, #0]
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fc86 	bl	8000270 <strlen>
 8007964:	2300      	movs	r3, #0
 8007966:	930a      	str	r3, [sp, #40]	@ 0x28
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	9005      	str	r0, [sp, #20]
 800796e:	3307      	adds	r3, #7
 8007970:	f023 0307 	bic.w	r3, r3, #7
 8007974:	f103 0208 	add.w	r2, r3, #8
 8007978:	f894 a018 	ldrb.w	sl, [r4, #24]
 800797c:	f8d4 b000 	ldr.w	fp, [r4]
 8007980:	f8c8 2000 	str.w	r2, [r8]
 8007984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007988:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800798c:	9307      	str	r3, [sp, #28]
 800798e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007992:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799a:	4b9c      	ldr	r3, [pc, #624]	@ (8007c0c <_printf_float+0x2c8>)
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	f7f9 f8c4 	bl	8000b2c <__aeabi_dcmpun>
 80079a4:	bb70      	cbnz	r0, 8007a04 <_printf_float+0xc0>
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	4b98      	ldr	r3, [pc, #608]	@ (8007c0c <_printf_float+0x2c8>)
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	f7f9 f89e 	bl	8000af0 <__aeabi_dcmple>
 80079b4:	bb30      	cbnz	r0, 8007a04 <_printf_float+0xc0>
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f9 f88d 	bl	8000adc <__aeabi_dcmplt>
 80079c2:	b110      	cbz	r0, 80079ca <_printf_float+0x86>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ca:	4a91      	ldr	r2, [pc, #580]	@ (8007c10 <_printf_float+0x2cc>)
 80079cc:	4b91      	ldr	r3, [pc, #580]	@ (8007c14 <_printf_float+0x2d0>)
 80079ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079d2:	bf8c      	ite	hi
 80079d4:	4690      	movhi	r8, r2
 80079d6:	4698      	movls	r8, r3
 80079d8:	2303      	movs	r3, #3
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	f02b 0304 	bic.w	r3, fp, #4
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	f04f 0900 	mov.w	r9, #0
 80079e6:	9700      	str	r7, [sp, #0]
 80079e8:	4633      	mov	r3, r6
 80079ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f9d2 	bl	8007d98 <_printf_common>
 80079f4:	3001      	adds	r0, #1
 80079f6:	f040 808d 	bne.w	8007b14 <_printf_float+0x1d0>
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	b00d      	add	sp, #52	@ 0x34
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	4642      	mov	r2, r8
 8007a06:	464b      	mov	r3, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7f9 f88e 	bl	8000b2c <__aeabi_dcmpun>
 8007a10:	b140      	cbz	r0, 8007a24 <_printf_float+0xe0>
 8007a12:	464b      	mov	r3, r9
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfbc      	itt	lt
 8007a18:	232d      	movlt	r3, #45	@ 0x2d
 8007a1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c18 <_printf_float+0x2d4>)
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <_printf_float+0x2d8>)
 8007a22:	e7d4      	b.n	80079ce <_printf_float+0x8a>
 8007a24:	6863      	ldr	r3, [r4, #4]
 8007a26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a2a:	9206      	str	r2, [sp, #24]
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	d13b      	bne.n	8007aa8 <_printf_float+0x164>
 8007a30:	2306      	movs	r3, #6
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a44:	ab09      	add	r3, sp, #36	@ 0x24
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	6861      	ldr	r1, [r4, #4]
 8007a4a:	ec49 8b10 	vmov	d0, r8, r9
 8007a4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7ff fed7 	bl	8007806 <__cvt>
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a5c:	2b47      	cmp	r3, #71	@ 0x47
 8007a5e:	4680      	mov	r8, r0
 8007a60:	d129      	bne.n	8007ab6 <_printf_float+0x172>
 8007a62:	1cc8      	adds	r0, r1, #3
 8007a64:	db02      	blt.n	8007a6c <_printf_float+0x128>
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	dd41      	ble.n	8007af0 <_printf_float+0x1ac>
 8007a6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a70:	fa5f fa8a 	uxtb.w	sl, sl
 8007a74:	3901      	subs	r1, #1
 8007a76:	4652      	mov	r2, sl
 8007a78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a7e:	f7ff ff27 	bl	80078d0 <__exponent>
 8007a82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a84:	1813      	adds	r3, r2, r0
 8007a86:	2a01      	cmp	r2, #1
 8007a88:	4681      	mov	r9, r0
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	dc02      	bgt.n	8007a94 <_printf_float+0x150>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	07d2      	lsls	r2, r2, #31
 8007a92:	d501      	bpl.n	8007a98 <_printf_float+0x154>
 8007a94:	3301      	adds	r3, #1
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0a2      	beq.n	80079e6 <_printf_float+0xa2>
 8007aa0:	232d      	movs	r3, #45	@ 0x2d
 8007aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa6:	e79e      	b.n	80079e6 <_printf_float+0xa2>
 8007aa8:	9a06      	ldr	r2, [sp, #24]
 8007aaa:	2a47      	cmp	r2, #71	@ 0x47
 8007aac:	d1c2      	bne.n	8007a34 <_printf_float+0xf0>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1c0      	bne.n	8007a34 <_printf_float+0xf0>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7bd      	b.n	8007a32 <_printf_float+0xee>
 8007ab6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aba:	d9db      	bls.n	8007a74 <_printf_float+0x130>
 8007abc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ac0:	d118      	bne.n	8007af4 <_printf_float+0x1b0>
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	6863      	ldr	r3, [r4, #4]
 8007ac6:	dd0b      	ble.n	8007ae0 <_printf_float+0x19c>
 8007ac8:	6121      	str	r1, [r4, #16]
 8007aca:	b913      	cbnz	r3, 8007ad2 <_printf_float+0x18e>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	07d0      	lsls	r0, r2, #31
 8007ad0:	d502      	bpl.n	8007ad8 <_printf_float+0x194>
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	440b      	add	r3, r1
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	e7db      	b.n	8007a98 <_printf_float+0x154>
 8007ae0:	b913      	cbnz	r3, 8007ae8 <_printf_float+0x1a4>
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	07d2      	lsls	r2, r2, #31
 8007ae6:	d501      	bpl.n	8007aec <_printf_float+0x1a8>
 8007ae8:	3302      	adds	r3, #2
 8007aea:	e7f4      	b.n	8007ad6 <_printf_float+0x192>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f2      	b.n	8007ad6 <_printf_float+0x192>
 8007af0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af6:	4299      	cmp	r1, r3
 8007af8:	db05      	blt.n	8007b06 <_printf_float+0x1c2>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	6121      	str	r1, [r4, #16]
 8007afe:	07d8      	lsls	r0, r3, #31
 8007b00:	d5ea      	bpl.n	8007ad8 <_printf_float+0x194>
 8007b02:	1c4b      	adds	r3, r1, #1
 8007b04:	e7e7      	b.n	8007ad6 <_printf_float+0x192>
 8007b06:	2900      	cmp	r1, #0
 8007b08:	bfd4      	ite	le
 8007b0a:	f1c1 0202 	rsble	r2, r1, #2
 8007b0e:	2201      	movgt	r2, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	e7e0      	b.n	8007ad6 <_printf_float+0x192>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	055a      	lsls	r2, r3, #21
 8007b18:	d407      	bmi.n	8007b2a <_printf_float+0x1e6>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	d12b      	bne.n	8007b80 <_printf_float+0x23c>
 8007b28:	e767      	b.n	80079fa <_printf_float+0xb6>
 8007b2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b2e:	f240 80dd 	bls.w	8007cec <_printf_float+0x3a8>
 8007b32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f7f8 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d033      	beq.n	8007baa <_printf_float+0x266>
 8007b42:	4a37      	ldr	r2, [pc, #220]	@ (8007c20 <_printf_float+0x2dc>)
 8007b44:	2301      	movs	r3, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f af54 	beq.w	80079fa <_printf_float+0xb6>
 8007b52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b56:	4543      	cmp	r3, r8
 8007b58:	db02      	blt.n	8007b60 <_printf_float+0x21c>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	07d8      	lsls	r0, r3, #31
 8007b5e:	d50f      	bpl.n	8007b80 <_printf_float+0x23c>
 8007b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af45 	beq.w	80079fa <_printf_float+0xb6>
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b78:	f104 0a1a 	add.w	sl, r4, #26
 8007b7c:	45c8      	cmp	r8, r9
 8007b7e:	dc09      	bgt.n	8007b94 <_printf_float+0x250>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	079b      	lsls	r3, r3, #30
 8007b84:	f100 8103 	bmi.w	8007d8e <_printf_float+0x44a>
 8007b88:	68e0      	ldr	r0, [r4, #12]
 8007b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8c:	4298      	cmp	r0, r3
 8007b8e:	bfb8      	it	lt
 8007b90:	4618      	movlt	r0, r3
 8007b92:	e734      	b.n	80079fe <_printf_float+0xba>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4652      	mov	r2, sl
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af2b 	beq.w	80079fa <_printf_float+0xb6>
 8007ba4:	f109 0901 	add.w	r9, r9, #1
 8007ba8:	e7e8      	b.n	8007b7c <_printf_float+0x238>
 8007baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc39      	bgt.n	8007c24 <_printf_float+0x2e0>
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <_printf_float+0x2dc>)
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af1d 	beq.w	80079fa <_printf_float+0xb6>
 8007bc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bc4:	ea59 0303 	orrs.w	r3, r9, r3
 8007bc8:	d102      	bne.n	8007bd0 <_printf_float+0x28c>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	07d9      	lsls	r1, r3, #31
 8007bce:	d5d7      	bpl.n	8007b80 <_printf_float+0x23c>
 8007bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af0d 	beq.w	80079fa <_printf_float+0xb6>
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	f104 0b1a 	add.w	fp, r4, #26
 8007be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bea:	425b      	negs	r3, r3
 8007bec:	4553      	cmp	r3, sl
 8007bee:	dc01      	bgt.n	8007bf4 <_printf_float+0x2b0>
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	e793      	b.n	8007b1c <_printf_float+0x1d8>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	465a      	mov	r2, fp
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f aefb 	beq.w	80079fa <_printf_float+0xb6>
 8007c04:	f10a 0a01 	add.w	sl, sl, #1
 8007c08:	e7ee      	b.n	8007be8 <_printf_float+0x2a4>
 8007c0a:	bf00      	nop
 8007c0c:	7fefffff 	.word	0x7fefffff
 8007c10:	0800bfb0 	.word	0x0800bfb0
 8007c14:	0800bfac 	.word	0x0800bfac
 8007c18:	0800bfb8 	.word	0x0800bfb8
 8007c1c:	0800bfb4 	.word	0x0800bfb4
 8007c20:	0800bfbc 	.word	0x0800bfbc
 8007c24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c2a:	4553      	cmp	r3, sl
 8007c2c:	bfa8      	it	ge
 8007c2e:	4653      	movge	r3, sl
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	4699      	mov	r9, r3
 8007c34:	dc36      	bgt.n	8007ca4 <_printf_float+0x360>
 8007c36:	f04f 0b00 	mov.w	fp, #0
 8007c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c3e:	f104 021a 	add.w	r2, r4, #26
 8007c42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c44:	9306      	str	r3, [sp, #24]
 8007c46:	eba3 0309 	sub.w	r3, r3, r9
 8007c4a:	455b      	cmp	r3, fp
 8007c4c:	dc31      	bgt.n	8007cb2 <_printf_float+0x36e>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	459a      	cmp	sl, r3
 8007c52:	dc3a      	bgt.n	8007cca <_printf_float+0x386>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	07da      	lsls	r2, r3, #31
 8007c58:	d437      	bmi.n	8007cca <_printf_float+0x386>
 8007c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5c:	ebaa 0903 	sub.w	r9, sl, r3
 8007c60:	9b06      	ldr	r3, [sp, #24]
 8007c62:	ebaa 0303 	sub.w	r3, sl, r3
 8007c66:	4599      	cmp	r9, r3
 8007c68:	bfa8      	it	ge
 8007c6a:	4699      	movge	r9, r3
 8007c6c:	f1b9 0f00 	cmp.w	r9, #0
 8007c70:	dc33      	bgt.n	8007cda <_printf_float+0x396>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c7a:	f104 0b1a 	add.w	fp, r4, #26
 8007c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c80:	ebaa 0303 	sub.w	r3, sl, r3
 8007c84:	eba3 0309 	sub.w	r3, r3, r9
 8007c88:	4543      	cmp	r3, r8
 8007c8a:	f77f af79 	ble.w	8007b80 <_printf_float+0x23c>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	465a      	mov	r2, fp
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f aeae 	beq.w	80079fa <_printf_float+0xb6>
 8007c9e:	f108 0801 	add.w	r8, r8, #1
 8007ca2:	e7ec      	b.n	8007c7e <_printf_float+0x33a>
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	d1c2      	bne.n	8007c36 <_printf_float+0x2f2>
 8007cb0:	e6a3      	b.n	80079fa <_printf_float+0xb6>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	9206      	str	r2, [sp, #24]
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae9c 	beq.w	80079fa <_printf_float+0xb6>
 8007cc2:	9a06      	ldr	r2, [sp, #24]
 8007cc4:	f10b 0b01 	add.w	fp, fp, #1
 8007cc8:	e7bb      	b.n	8007c42 <_printf_float+0x2fe>
 8007cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d1c0      	bne.n	8007c5a <_printf_float+0x316>
 8007cd8:	e68f      	b.n	80079fa <_printf_float+0xb6>
 8007cda:	9a06      	ldr	r2, [sp, #24]
 8007cdc:	464b      	mov	r3, r9
 8007cde:	4442      	add	r2, r8
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d1c3      	bne.n	8007c72 <_printf_float+0x32e>
 8007cea:	e686      	b.n	80079fa <_printf_float+0xb6>
 8007cec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cf0:	f1ba 0f01 	cmp.w	sl, #1
 8007cf4:	dc01      	bgt.n	8007cfa <_printf_float+0x3b6>
 8007cf6:	07db      	lsls	r3, r3, #31
 8007cf8:	d536      	bpl.n	8007d68 <_printf_float+0x424>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae78 	beq.w	80079fa <_printf_float+0xb6>
 8007d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f ae70 	beq.w	80079fa <_printf_float+0xb6>
 8007d1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b9c0      	cbnz	r0, 8007d5e <_printf_float+0x41a>
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	f108 0201 	add.w	r2, r8, #1
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d10c      	bne.n	8007d56 <_printf_float+0x412>
 8007d3c:	e65d      	b.n	80079fa <_printf_float+0xb6>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	465a      	mov	r2, fp
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f43f ae56 	beq.w	80079fa <_printf_float+0xb6>
 8007d4e:	f108 0801 	add.w	r8, r8, #1
 8007d52:	45d0      	cmp	r8, sl
 8007d54:	dbf3      	blt.n	8007d3e <_printf_float+0x3fa>
 8007d56:	464b      	mov	r3, r9
 8007d58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d5c:	e6df      	b.n	8007b1e <_printf_float+0x1da>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	f104 0b1a 	add.w	fp, r4, #26
 8007d66:	e7f4      	b.n	8007d52 <_printf_float+0x40e>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	e7e1      	b.n	8007d32 <_printf_float+0x3ee>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	464a      	mov	r2, r9
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f ae3e 	beq.w	80079fa <_printf_float+0xb6>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d86:	1a5b      	subs	r3, r3, r1
 8007d88:	4543      	cmp	r3, r8
 8007d8a:	dcf0      	bgt.n	8007d6e <_printf_float+0x42a>
 8007d8c:	e6fc      	b.n	8007b88 <_printf_float+0x244>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	f104 0919 	add.w	r9, r4, #25
 8007d96:	e7f4      	b.n	8007d82 <_printf_float+0x43e>

08007d98 <_printf_common>:
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	4698      	mov	r8, r3
 8007da0:	688a      	ldr	r2, [r1, #8]
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bfb8      	it	lt
 8007dac:	4613      	movlt	r3, r2
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007db4:	4607      	mov	r7, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b10a      	cbz	r2, 8007dbe <_printf_common+0x26>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	0699      	lsls	r1, r3, #26
 8007dc2:	bf42      	ittt	mi
 8007dc4:	6833      	ldrmi	r3, [r6, #0]
 8007dc6:	3302      	addmi	r3, #2
 8007dc8:	6033      	strmi	r3, [r6, #0]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d106      	bne.n	8007de0 <_printf_common+0x48>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	6832      	ldr	r2, [r6, #0]
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	dc26      	bgt.n	8007e2e <_printf_common+0x96>
 8007de0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	3b00      	subs	r3, #0
 8007de8:	bf18      	it	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	0692      	lsls	r2, r2, #26
 8007dee:	d42b      	bmi.n	8007e48 <_printf_common+0xb0>
 8007df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007df4:	4641      	mov	r1, r8
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c8      	blx	r9
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d01e      	beq.n	8007e3c <_printf_common+0xa4>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	f003 0306 	and.w	r3, r3, #6
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	bf02      	ittt	eq
 8007e0a:	68e5      	ldreq	r5, [r4, #12]
 8007e0c:	6833      	ldreq	r3, [r6, #0]
 8007e0e:	1aed      	subeq	r5, r5, r3
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	bf0c      	ite	eq
 8007e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e18:	2500      	movne	r5, #0
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfc4      	itt	gt
 8007e1e:	1a9b      	subgt	r3, r3, r2
 8007e20:	18ed      	addgt	r5, r5, r3
 8007e22:	2600      	movs	r6, #0
 8007e24:	341a      	adds	r4, #26
 8007e26:	42b5      	cmp	r5, r6
 8007e28:	d11a      	bne.n	8007e60 <_printf_common+0xc8>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e008      	b.n	8007e40 <_printf_common+0xa8>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4652      	mov	r2, sl
 8007e32:	4641      	mov	r1, r8
 8007e34:	4638      	mov	r0, r7
 8007e36:	47c8      	blx	r9
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d103      	bne.n	8007e44 <_printf_common+0xac>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e44:	3501      	adds	r5, #1
 8007e46:	e7c6      	b.n	8007dd6 <_printf_common+0x3e>
 8007e48:	18e1      	adds	r1, r4, r3
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	2030      	movs	r0, #48	@ 0x30
 8007e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e52:	4422      	add	r2, r4
 8007e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	e7c7      	b.n	8007df0 <_printf_common+0x58>
 8007e60:	2301      	movs	r3, #1
 8007e62:	4622      	mov	r2, r4
 8007e64:	4641      	mov	r1, r8
 8007e66:	4638      	mov	r0, r7
 8007e68:	47c8      	blx	r9
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d0e6      	beq.n	8007e3c <_printf_common+0xa4>
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7d9      	b.n	8007e26 <_printf_common+0x8e>
	...

08007e74 <_printf_i>:
 8007e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	7e0f      	ldrb	r7, [r1, #24]
 8007e7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e7c:	2f78      	cmp	r7, #120	@ 0x78
 8007e7e:	4691      	mov	r9, r2
 8007e80:	4680      	mov	r8, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	469a      	mov	sl, r3
 8007e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e8a:	d807      	bhi.n	8007e9c <_printf_i+0x28>
 8007e8c:	2f62      	cmp	r7, #98	@ 0x62
 8007e8e:	d80a      	bhi.n	8007ea6 <_printf_i+0x32>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	f000 80d1 	beq.w	8008038 <_printf_i+0x1c4>
 8007e96:	2f58      	cmp	r7, #88	@ 0x58
 8007e98:	f000 80b8 	beq.w	800800c <_printf_i+0x198>
 8007e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ea4:	e03a      	b.n	8007f1c <_printf_i+0xa8>
 8007ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eaa:	2b15      	cmp	r3, #21
 8007eac:	d8f6      	bhi.n	8007e9c <_printf_i+0x28>
 8007eae:	a101      	add	r1, pc, #4	@ (adr r1, 8007eb4 <_printf_i+0x40>)
 8007eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007e9d 	.word	0x08007e9d
 8007ec0:	08007e9d 	.word	0x08007e9d
 8007ec4:	08007e9d 	.word	0x08007e9d
 8007ec8:	08007e9d 	.word	0x08007e9d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e9d 	.word	0x08007e9d
 8007ed4:	08007e9d 	.word	0x08007e9d
 8007ed8:	08007e9d 	.word	0x08007e9d
 8007edc:	08007e9d 	.word	0x08007e9d
 8007ee0:	0800801f 	.word	0x0800801f
 8007ee4:	08007f4b 	.word	0x08007f4b
 8007ee8:	08007fd9 	.word	0x08007fd9
 8007eec:	08007e9d 	.word	0x08007e9d
 8007ef0:	08007e9d 	.word	0x08007e9d
 8007ef4:	08008041 	.word	0x08008041
 8007ef8:	08007e9d 	.word	0x08007e9d
 8007efc:	08007f4b 	.word	0x08007f4b
 8007f00:	08007e9d 	.word	0x08007e9d
 8007f04:	08007e9d 	.word	0x08007e9d
 8007f08:	08007fe1 	.word	0x08007fe1
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6032      	str	r2, [r6, #0]
 8007f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e09c      	b.n	800805a <_printf_i+0x1e6>
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	6031      	str	r1, [r6, #0]
 8007f28:	0606      	lsls	r6, r0, #24
 8007f2a:	d501      	bpl.n	8007f30 <_printf_i+0xbc>
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <_printf_i+0xc4>
 8007f30:	0645      	lsls	r5, r0, #25
 8007f32:	d5fb      	bpl.n	8007f2c <_printf_i+0xb8>
 8007f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	da03      	bge.n	8007f44 <_printf_i+0xd0>
 8007f3c:	232d      	movs	r3, #45	@ 0x2d
 8007f3e:	426d      	negs	r5, r5
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f44:	4858      	ldr	r0, [pc, #352]	@ (80080a8 <_printf_i+0x234>)
 8007f46:	230a      	movs	r3, #10
 8007f48:	e011      	b.n	8007f6e <_printf_i+0xfa>
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	6833      	ldr	r3, [r6, #0]
 8007f4e:	0608      	lsls	r0, r1, #24
 8007f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f54:	d402      	bmi.n	8007f5c <_printf_i+0xe8>
 8007f56:	0649      	lsls	r1, r1, #25
 8007f58:	bf48      	it	mi
 8007f5a:	b2ad      	uxthmi	r5, r5
 8007f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f5e:	4852      	ldr	r0, [pc, #328]	@ (80080a8 <_printf_i+0x234>)
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	bf14      	ite	ne
 8007f64:	230a      	movne	r3, #10
 8007f66:	2308      	moveq	r3, #8
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f6e:	6866      	ldr	r6, [r4, #4]
 8007f70:	60a6      	str	r6, [r4, #8]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	db05      	blt.n	8007f82 <_printf_i+0x10e>
 8007f76:	6821      	ldr	r1, [r4, #0]
 8007f78:	432e      	orrs	r6, r5
 8007f7a:	f021 0104 	bic.w	r1, r1, #4
 8007f7e:	6021      	str	r1, [r4, #0]
 8007f80:	d04b      	beq.n	800801a <_printf_i+0x1a6>
 8007f82:	4616      	mov	r6, r2
 8007f84:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f88:	fb03 5711 	mls	r7, r3, r1, r5
 8007f8c:	5dc7      	ldrb	r7, [r0, r7]
 8007f8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f92:	462f      	mov	r7, r5
 8007f94:	42bb      	cmp	r3, r7
 8007f96:	460d      	mov	r5, r1
 8007f98:	d9f4      	bls.n	8007f84 <_printf_i+0x110>
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d10b      	bne.n	8007fb6 <_printf_i+0x142>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	07df      	lsls	r7, r3, #31
 8007fa2:	d508      	bpl.n	8007fb6 <_printf_i+0x142>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	6861      	ldr	r1, [r4, #4]
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	bfde      	ittt	le
 8007fac:	2330      	movle	r3, #48	@ 0x30
 8007fae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb6:	1b92      	subs	r2, r2, r6
 8007fb8:	6122      	str	r2, [r4, #16]
 8007fba:	f8cd a000 	str.w	sl, [sp]
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	aa03      	add	r2, sp, #12
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	f7ff fee7 	bl	8007d98 <_printf_common>
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d14a      	bne.n	8008064 <_printf_i+0x1f0>
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	b004      	add	sp, #16
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	f043 0320 	orr.w	r3, r3, #32
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	4832      	ldr	r0, [pc, #200]	@ (80080ac <_printf_i+0x238>)
 8007fe2:	2778      	movs	r7, #120	@ 0x78
 8007fe4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	6831      	ldr	r1, [r6, #0]
 8007fec:	061f      	lsls	r7, r3, #24
 8007fee:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ff2:	d402      	bmi.n	8007ffa <_printf_i+0x186>
 8007ff4:	065f      	lsls	r7, r3, #25
 8007ff6:	bf48      	it	mi
 8007ff8:	b2ad      	uxthmi	r5, r5
 8007ffa:	6031      	str	r1, [r6, #0]
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	bf44      	itt	mi
 8008000:	f043 0320 	orrmi.w	r3, r3, #32
 8008004:	6023      	strmi	r3, [r4, #0]
 8008006:	b11d      	cbz	r5, 8008010 <_printf_i+0x19c>
 8008008:	2310      	movs	r3, #16
 800800a:	e7ad      	b.n	8007f68 <_printf_i+0xf4>
 800800c:	4826      	ldr	r0, [pc, #152]	@ (80080a8 <_printf_i+0x234>)
 800800e:	e7e9      	b.n	8007fe4 <_printf_i+0x170>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	f023 0320 	bic.w	r3, r3, #32
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	e7f6      	b.n	8008008 <_printf_i+0x194>
 800801a:	4616      	mov	r6, r2
 800801c:	e7bd      	b.n	8007f9a <_printf_i+0x126>
 800801e:	6833      	ldr	r3, [r6, #0]
 8008020:	6825      	ldr	r5, [r4, #0]
 8008022:	6961      	ldr	r1, [r4, #20]
 8008024:	1d18      	adds	r0, r3, #4
 8008026:	6030      	str	r0, [r6, #0]
 8008028:	062e      	lsls	r6, r5, #24
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	d501      	bpl.n	8008032 <_printf_i+0x1be>
 800802e:	6019      	str	r1, [r3, #0]
 8008030:	e002      	b.n	8008038 <_printf_i+0x1c4>
 8008032:	0668      	lsls	r0, r5, #25
 8008034:	d5fb      	bpl.n	800802e <_printf_i+0x1ba>
 8008036:	8019      	strh	r1, [r3, #0]
 8008038:	2300      	movs	r3, #0
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	4616      	mov	r6, r2
 800803e:	e7bc      	b.n	8007fba <_printf_i+0x146>
 8008040:	6833      	ldr	r3, [r6, #0]
 8008042:	1d1a      	adds	r2, r3, #4
 8008044:	6032      	str	r2, [r6, #0]
 8008046:	681e      	ldr	r6, [r3, #0]
 8008048:	6862      	ldr	r2, [r4, #4]
 800804a:	2100      	movs	r1, #0
 800804c:	4630      	mov	r0, r6
 800804e:	f7f8 f8bf 	bl	80001d0 <memchr>
 8008052:	b108      	cbz	r0, 8008058 <_printf_i+0x1e4>
 8008054:	1b80      	subs	r0, r0, r6
 8008056:	6060      	str	r0, [r4, #4]
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	2300      	movs	r3, #0
 800805e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008062:	e7aa      	b.n	8007fba <_printf_i+0x146>
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	4632      	mov	r2, r6
 8008068:	4649      	mov	r1, r9
 800806a:	4640      	mov	r0, r8
 800806c:	47d0      	blx	sl
 800806e:	3001      	adds	r0, #1
 8008070:	d0ad      	beq.n	8007fce <_printf_i+0x15a>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	079b      	lsls	r3, r3, #30
 8008076:	d413      	bmi.n	80080a0 <_printf_i+0x22c>
 8008078:	68e0      	ldr	r0, [r4, #12]
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	4298      	cmp	r0, r3
 800807e:	bfb8      	it	lt
 8008080:	4618      	movlt	r0, r3
 8008082:	e7a6      	b.n	8007fd2 <_printf_i+0x15e>
 8008084:	2301      	movs	r3, #1
 8008086:	4632      	mov	r2, r6
 8008088:	4649      	mov	r1, r9
 800808a:	4640      	mov	r0, r8
 800808c:	47d0      	blx	sl
 800808e:	3001      	adds	r0, #1
 8008090:	d09d      	beq.n	8007fce <_printf_i+0x15a>
 8008092:	3501      	adds	r5, #1
 8008094:	68e3      	ldr	r3, [r4, #12]
 8008096:	9903      	ldr	r1, [sp, #12]
 8008098:	1a5b      	subs	r3, r3, r1
 800809a:	42ab      	cmp	r3, r5
 800809c:	dcf2      	bgt.n	8008084 <_printf_i+0x210>
 800809e:	e7eb      	b.n	8008078 <_printf_i+0x204>
 80080a0:	2500      	movs	r5, #0
 80080a2:	f104 0619 	add.w	r6, r4, #25
 80080a6:	e7f5      	b.n	8008094 <_printf_i+0x220>
 80080a8:	0800bfbe 	.word	0x0800bfbe
 80080ac:	0800bfcf 	.word	0x0800bfcf

080080b0 <_scanf_float>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	b087      	sub	sp, #28
 80080b6:	4691      	mov	r9, r2
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	688b      	ldr	r3, [r1, #8]
 80080bc:	1e5a      	subs	r2, r3, #1
 80080be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80080c2:	bf81      	itttt	hi
 80080c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80080cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080d0:	608b      	strhi	r3, [r1, #8]
 80080d2:	680b      	ldr	r3, [r1, #0]
 80080d4:	460a      	mov	r2, r1
 80080d6:	f04f 0500 	mov.w	r5, #0
 80080da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080de:	f842 3b1c 	str.w	r3, [r2], #28
 80080e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080e6:	4680      	mov	r8, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	bf98      	it	ls
 80080ec:	f04f 0b00 	movls.w	fp, #0
 80080f0:	9201      	str	r2, [sp, #4]
 80080f2:	4616      	mov	r6, r2
 80080f4:	46aa      	mov	sl, r5
 80080f6:	462f      	mov	r7, r5
 80080f8:	9502      	str	r5, [sp, #8]
 80080fa:	68a2      	ldr	r2, [r4, #8]
 80080fc:	b15a      	cbz	r2, 8008116 <_scanf_float+0x66>
 80080fe:	f8d9 3000 	ldr.w	r3, [r9]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b4e      	cmp	r3, #78	@ 0x4e
 8008106:	d863      	bhi.n	80081d0 <_scanf_float+0x120>
 8008108:	2b40      	cmp	r3, #64	@ 0x40
 800810a:	d83b      	bhi.n	8008184 <_scanf_float+0xd4>
 800810c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008110:	b2c8      	uxtb	r0, r1
 8008112:	280e      	cmp	r0, #14
 8008114:	d939      	bls.n	800818a <_scanf_float+0xda>
 8008116:	b11f      	cbz	r7, 8008120 <_scanf_float+0x70>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008124:	f1ba 0f01 	cmp.w	sl, #1
 8008128:	f200 8114 	bhi.w	8008354 <_scanf_float+0x2a4>
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	429e      	cmp	r6, r3
 8008130:	f200 8105 	bhi.w	800833e <_scanf_float+0x28e>
 8008134:	2001      	movs	r0, #1
 8008136:	b007      	add	sp, #28
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008140:	2a0d      	cmp	r2, #13
 8008142:	d8e8      	bhi.n	8008116 <_scanf_float+0x66>
 8008144:	a101      	add	r1, pc, #4	@ (adr r1, 800814c <_scanf_float+0x9c>)
 8008146:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800814a:	bf00      	nop
 800814c:	08008295 	.word	0x08008295
 8008150:	08008117 	.word	0x08008117
 8008154:	08008117 	.word	0x08008117
 8008158:	08008117 	.word	0x08008117
 800815c:	080082f1 	.word	0x080082f1
 8008160:	080082cb 	.word	0x080082cb
 8008164:	08008117 	.word	0x08008117
 8008168:	08008117 	.word	0x08008117
 800816c:	080082a3 	.word	0x080082a3
 8008170:	08008117 	.word	0x08008117
 8008174:	08008117 	.word	0x08008117
 8008178:	08008117 	.word	0x08008117
 800817c:	08008117 	.word	0x08008117
 8008180:	0800825f 	.word	0x0800825f
 8008184:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008188:	e7da      	b.n	8008140 <_scanf_float+0x90>
 800818a:	290e      	cmp	r1, #14
 800818c:	d8c3      	bhi.n	8008116 <_scanf_float+0x66>
 800818e:	a001      	add	r0, pc, #4	@ (adr r0, 8008194 <_scanf_float+0xe4>)
 8008190:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008194:	0800824f 	.word	0x0800824f
 8008198:	08008117 	.word	0x08008117
 800819c:	0800824f 	.word	0x0800824f
 80081a0:	080082df 	.word	0x080082df
 80081a4:	08008117 	.word	0x08008117
 80081a8:	080081f1 	.word	0x080081f1
 80081ac:	08008235 	.word	0x08008235
 80081b0:	08008235 	.word	0x08008235
 80081b4:	08008235 	.word	0x08008235
 80081b8:	08008235 	.word	0x08008235
 80081bc:	08008235 	.word	0x08008235
 80081c0:	08008235 	.word	0x08008235
 80081c4:	08008235 	.word	0x08008235
 80081c8:	08008235 	.word	0x08008235
 80081cc:	08008235 	.word	0x08008235
 80081d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80081d2:	d809      	bhi.n	80081e8 <_scanf_float+0x138>
 80081d4:	2b60      	cmp	r3, #96	@ 0x60
 80081d6:	d8b1      	bhi.n	800813c <_scanf_float+0x8c>
 80081d8:	2b54      	cmp	r3, #84	@ 0x54
 80081da:	d07b      	beq.n	80082d4 <_scanf_float+0x224>
 80081dc:	2b59      	cmp	r3, #89	@ 0x59
 80081de:	d19a      	bne.n	8008116 <_scanf_float+0x66>
 80081e0:	2d07      	cmp	r5, #7
 80081e2:	d198      	bne.n	8008116 <_scanf_float+0x66>
 80081e4:	2508      	movs	r5, #8
 80081e6:	e02f      	b.n	8008248 <_scanf_float+0x198>
 80081e8:	2b74      	cmp	r3, #116	@ 0x74
 80081ea:	d073      	beq.n	80082d4 <_scanf_float+0x224>
 80081ec:	2b79      	cmp	r3, #121	@ 0x79
 80081ee:	e7f6      	b.n	80081de <_scanf_float+0x12e>
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	05c8      	lsls	r0, r1, #23
 80081f4:	d51e      	bpl.n	8008234 <_scanf_float+0x184>
 80081f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081fa:	6021      	str	r1, [r4, #0]
 80081fc:	3701      	adds	r7, #1
 80081fe:	f1bb 0f00 	cmp.w	fp, #0
 8008202:	d003      	beq.n	800820c <_scanf_float+0x15c>
 8008204:	3201      	adds	r2, #1
 8008206:	f10b 3bff 	add.w	fp, fp, #4294967295
 800820a:	60a2      	str	r2, [r4, #8]
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	3b01      	subs	r3, #1
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	3301      	adds	r3, #1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800821c:	3b01      	subs	r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	f8c9 3004 	str.w	r3, [r9, #4]
 8008224:	f340 8082 	ble.w	800832c <_scanf_float+0x27c>
 8008228:	f8d9 3000 	ldr.w	r3, [r9]
 800822c:	3301      	adds	r3, #1
 800822e:	f8c9 3000 	str.w	r3, [r9]
 8008232:	e762      	b.n	80080fa <_scanf_float+0x4a>
 8008234:	eb1a 0105 	adds.w	r1, sl, r5
 8008238:	f47f af6d 	bne.w	8008116 <_scanf_float+0x66>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008242:	6022      	str	r2, [r4, #0]
 8008244:	460d      	mov	r5, r1
 8008246:	468a      	mov	sl, r1
 8008248:	f806 3b01 	strb.w	r3, [r6], #1
 800824c:	e7de      	b.n	800820c <_scanf_float+0x15c>
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	0610      	lsls	r0, r2, #24
 8008252:	f57f af60 	bpl.w	8008116 <_scanf_float+0x66>
 8008256:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	e7f4      	b.n	8008248 <_scanf_float+0x198>
 800825e:	f1ba 0f00 	cmp.w	sl, #0
 8008262:	d10c      	bne.n	800827e <_scanf_float+0x1ce>
 8008264:	b977      	cbnz	r7, 8008284 <_scanf_float+0x1d4>
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800826c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008270:	d108      	bne.n	8008284 <_scanf_float+0x1d4>
 8008272:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008276:	6022      	str	r2, [r4, #0]
 8008278:	f04f 0a01 	mov.w	sl, #1
 800827c:	e7e4      	b.n	8008248 <_scanf_float+0x198>
 800827e:	f1ba 0f02 	cmp.w	sl, #2
 8008282:	d050      	beq.n	8008326 <_scanf_float+0x276>
 8008284:	2d01      	cmp	r5, #1
 8008286:	d002      	beq.n	800828e <_scanf_float+0x1de>
 8008288:	2d04      	cmp	r5, #4
 800828a:	f47f af44 	bne.w	8008116 <_scanf_float+0x66>
 800828e:	3501      	adds	r5, #1
 8008290:	b2ed      	uxtb	r5, r5
 8008292:	e7d9      	b.n	8008248 <_scanf_float+0x198>
 8008294:	f1ba 0f01 	cmp.w	sl, #1
 8008298:	f47f af3d 	bne.w	8008116 <_scanf_float+0x66>
 800829c:	f04f 0a02 	mov.w	sl, #2
 80082a0:	e7d2      	b.n	8008248 <_scanf_float+0x198>
 80082a2:	b975      	cbnz	r5, 80082c2 <_scanf_float+0x212>
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	f47f af37 	bne.w	8008118 <_scanf_float+0x68>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082b4:	f040 8103 	bne.w	80084be <_scanf_float+0x40e>
 80082b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	2501      	movs	r5, #1
 80082c0:	e7c2      	b.n	8008248 <_scanf_float+0x198>
 80082c2:	2d03      	cmp	r5, #3
 80082c4:	d0e3      	beq.n	800828e <_scanf_float+0x1de>
 80082c6:	2d05      	cmp	r5, #5
 80082c8:	e7df      	b.n	800828a <_scanf_float+0x1da>
 80082ca:	2d02      	cmp	r5, #2
 80082cc:	f47f af23 	bne.w	8008116 <_scanf_float+0x66>
 80082d0:	2503      	movs	r5, #3
 80082d2:	e7b9      	b.n	8008248 <_scanf_float+0x198>
 80082d4:	2d06      	cmp	r5, #6
 80082d6:	f47f af1e 	bne.w	8008116 <_scanf_float+0x66>
 80082da:	2507      	movs	r5, #7
 80082dc:	e7b4      	b.n	8008248 <_scanf_float+0x198>
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	0591      	lsls	r1, r2, #22
 80082e2:	f57f af18 	bpl.w	8008116 <_scanf_float+0x66>
 80082e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082ea:	6022      	str	r2, [r4, #0]
 80082ec:	9702      	str	r7, [sp, #8]
 80082ee:	e7ab      	b.n	8008248 <_scanf_float+0x198>
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082f6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082fa:	d005      	beq.n	8008308 <_scanf_float+0x258>
 80082fc:	0550      	lsls	r0, r2, #21
 80082fe:	f57f af0a 	bpl.w	8008116 <_scanf_float+0x66>
 8008302:	2f00      	cmp	r7, #0
 8008304:	f000 80db 	beq.w	80084be <_scanf_float+0x40e>
 8008308:	0591      	lsls	r1, r2, #22
 800830a:	bf58      	it	pl
 800830c:	9902      	ldrpl	r1, [sp, #8]
 800830e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008312:	bf58      	it	pl
 8008314:	1a79      	subpl	r1, r7, r1
 8008316:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800831a:	bf58      	it	pl
 800831c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	2700      	movs	r7, #0
 8008324:	e790      	b.n	8008248 <_scanf_float+0x198>
 8008326:	f04f 0a03 	mov.w	sl, #3
 800832a:	e78d      	b.n	8008248 <_scanf_float+0x198>
 800832c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008330:	4649      	mov	r1, r9
 8008332:	4640      	mov	r0, r8
 8008334:	4798      	blx	r3
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f aedf 	beq.w	80080fa <_scanf_float+0x4a>
 800833c:	e6eb      	b.n	8008116 <_scanf_float+0x66>
 800833e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008346:	464a      	mov	r2, r9
 8008348:	4640      	mov	r0, r8
 800834a:	4798      	blx	r3
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	3b01      	subs	r3, #1
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	e6eb      	b.n	800812c <_scanf_float+0x7c>
 8008354:	1e6b      	subs	r3, r5, #1
 8008356:	2b06      	cmp	r3, #6
 8008358:	d824      	bhi.n	80083a4 <_scanf_float+0x2f4>
 800835a:	2d02      	cmp	r5, #2
 800835c:	d836      	bhi.n	80083cc <_scanf_float+0x31c>
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	429e      	cmp	r6, r3
 8008362:	f67f aee7 	bls.w	8008134 <_scanf_float+0x84>
 8008366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800836a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800836e:	464a      	mov	r2, r9
 8008370:	4640      	mov	r0, r8
 8008372:	4798      	blx	r3
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	3b01      	subs	r3, #1
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	e7f0      	b.n	800835e <_scanf_float+0x2ae>
 800837c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008380:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008384:	464a      	mov	r2, r9
 8008386:	4640      	mov	r0, r8
 8008388:	4798      	blx	r3
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	6123      	str	r3, [r4, #16]
 8008390:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008394:	fa5f fa8a 	uxtb.w	sl, sl
 8008398:	f1ba 0f02 	cmp.w	sl, #2
 800839c:	d1ee      	bne.n	800837c <_scanf_float+0x2cc>
 800839e:	3d03      	subs	r5, #3
 80083a0:	b2ed      	uxtb	r5, r5
 80083a2:	1b76      	subs	r6, r6, r5
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	05da      	lsls	r2, r3, #23
 80083a8:	d530      	bpl.n	800840c <_scanf_float+0x35c>
 80083aa:	055b      	lsls	r3, r3, #21
 80083ac:	d511      	bpl.n	80083d2 <_scanf_float+0x322>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	429e      	cmp	r6, r3
 80083b2:	f67f aebf 	bls.w	8008134 <_scanf_float+0x84>
 80083b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083be:	464a      	mov	r2, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	4798      	blx	r3
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	e7f0      	b.n	80083ae <_scanf_float+0x2fe>
 80083cc:	46aa      	mov	sl, r5
 80083ce:	46b3      	mov	fp, r6
 80083d0:	e7de      	b.n	8008390 <_scanf_float+0x2e0>
 80083d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	2965      	cmp	r1, #101	@ 0x65
 80083da:	f103 33ff 	add.w	r3, r3, #4294967295
 80083de:	f106 35ff 	add.w	r5, r6, #4294967295
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	d00c      	beq.n	8008400 <_scanf_float+0x350>
 80083e6:	2945      	cmp	r1, #69	@ 0x45
 80083e8:	d00a      	beq.n	8008400 <_scanf_float+0x350>
 80083ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083ee:	464a      	mov	r2, r9
 80083f0:	4640      	mov	r0, r8
 80083f2:	4798      	blx	r3
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	1eb5      	subs	r5, r6, #2
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008404:	464a      	mov	r2, r9
 8008406:	4640      	mov	r0, r8
 8008408:	4798      	blx	r3
 800840a:	462e      	mov	r6, r5
 800840c:	6822      	ldr	r2, [r4, #0]
 800840e:	f012 0210 	ands.w	r2, r2, #16
 8008412:	d001      	beq.n	8008418 <_scanf_float+0x368>
 8008414:	2000      	movs	r0, #0
 8008416:	e68e      	b.n	8008136 <_scanf_float+0x86>
 8008418:	7032      	strb	r2, [r6, #0]
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008424:	d125      	bne.n	8008472 <_scanf_float+0x3c2>
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	429f      	cmp	r7, r3
 800842a:	d00a      	beq.n	8008442 <_scanf_float+0x392>
 800842c:	1bda      	subs	r2, r3, r7
 800842e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008432:	429e      	cmp	r6, r3
 8008434:	bf28      	it	cs
 8008436:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800843a:	4922      	ldr	r1, [pc, #136]	@ (80084c4 <_scanf_float+0x414>)
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f919 	bl	8008674 <siprintf>
 8008442:	9901      	ldr	r1, [sp, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	4640      	mov	r0, r8
 8008448:	f002 fc06 	bl	800ac58 <_strtod_r>
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	6821      	ldr	r1, [r4, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f011 0f02 	tst.w	r1, #2
 8008456:	ec57 6b10 	vmov	r6, r7, d0
 800845a:	f103 0204 	add.w	r2, r3, #4
 800845e:	d015      	beq.n	800848c <_scanf_float+0x3dc>
 8008460:	9903      	ldr	r1, [sp, #12]
 8008462:	600a      	str	r2, [r1, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	e9c3 6700 	strd	r6, r7, [r3]
 800846a:	68e3      	ldr	r3, [r4, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	60e3      	str	r3, [r4, #12]
 8008470:	e7d0      	b.n	8008414 <_scanf_float+0x364>
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0e4      	beq.n	8008442 <_scanf_float+0x392>
 8008478:	9905      	ldr	r1, [sp, #20]
 800847a:	230a      	movs	r3, #10
 800847c:	3101      	adds	r1, #1
 800847e:	4640      	mov	r0, r8
 8008480:	f002 fc6a 	bl	800ad58 <_strtol_r>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	9e05      	ldr	r6, [sp, #20]
 8008488:	1ac2      	subs	r2, r0, r3
 800848a:	e7d0      	b.n	800842e <_scanf_float+0x37e>
 800848c:	f011 0f04 	tst.w	r1, #4
 8008490:	9903      	ldr	r1, [sp, #12]
 8008492:	600a      	str	r2, [r1, #0]
 8008494:	d1e6      	bne.n	8008464 <_scanf_float+0x3b4>
 8008496:	681d      	ldr	r5, [r3, #0]
 8008498:	4632      	mov	r2, r6
 800849a:	463b      	mov	r3, r7
 800849c:	4630      	mov	r0, r6
 800849e:	4639      	mov	r1, r7
 80084a0:	f7f8 fb44 	bl	8000b2c <__aeabi_dcmpun>
 80084a4:	b128      	cbz	r0, 80084b2 <_scanf_float+0x402>
 80084a6:	4808      	ldr	r0, [pc, #32]	@ (80084c8 <_scanf_float+0x418>)
 80084a8:	f000 f9ca 	bl	8008840 <nanf>
 80084ac:	ed85 0a00 	vstr	s0, [r5]
 80084b0:	e7db      	b.n	800846a <_scanf_float+0x3ba>
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f8 fb97 	bl	8000be8 <__aeabi_d2f>
 80084ba:	6028      	str	r0, [r5, #0]
 80084bc:	e7d5      	b.n	800846a <_scanf_float+0x3ba>
 80084be:	2700      	movs	r7, #0
 80084c0:	e62e      	b.n	8008120 <_scanf_float+0x70>
 80084c2:	bf00      	nop
 80084c4:	0800bfe0 	.word	0x0800bfe0
 80084c8:	0800c121 	.word	0x0800c121

080084cc <std>:
 80084cc:	2300      	movs	r3, #0
 80084ce:	b510      	push	{r4, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	e9c0 3300 	strd	r3, r3, [r0]
 80084d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084da:	6083      	str	r3, [r0, #8]
 80084dc:	8181      	strh	r1, [r0, #12]
 80084de:	6643      	str	r3, [r0, #100]	@ 0x64
 80084e0:	81c2      	strh	r2, [r0, #14]
 80084e2:	6183      	str	r3, [r0, #24]
 80084e4:	4619      	mov	r1, r3
 80084e6:	2208      	movs	r2, #8
 80084e8:	305c      	adds	r0, #92	@ 0x5c
 80084ea:	f000 f928 	bl	800873e <memset>
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <std+0x58>)
 80084f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <std+0x5c>)
 80084f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084f6:	4b0d      	ldr	r3, [pc, #52]	@ (800852c <std+0x60>)
 80084f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <std+0x64>)
 80084fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <std+0x68>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	429c      	cmp	r4, r3
 8008504:	d006      	beq.n	8008514 <std+0x48>
 8008506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800850a:	4294      	cmp	r4, r2
 800850c:	d002      	beq.n	8008514 <std+0x48>
 800850e:	33d0      	adds	r3, #208	@ 0xd0
 8008510:	429c      	cmp	r4, r3
 8008512:	d105      	bne.n	8008520 <std+0x54>
 8008514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851c:	f000 b98c 	b.w	8008838 <__retarget_lock_init_recursive>
 8008520:	bd10      	pop	{r4, pc}
 8008522:	bf00      	nop
 8008524:	080086b9 	.word	0x080086b9
 8008528:	080086db 	.word	0x080086db
 800852c:	08008713 	.word	0x08008713
 8008530:	08008737 	.word	0x08008737
 8008534:	200004b8 	.word	0x200004b8

08008538 <stdio_exit_handler>:
 8008538:	4a02      	ldr	r2, [pc, #8]	@ (8008544 <stdio_exit_handler+0xc>)
 800853a:	4903      	ldr	r1, [pc, #12]	@ (8008548 <stdio_exit_handler+0x10>)
 800853c:	4803      	ldr	r0, [pc, #12]	@ (800854c <stdio_exit_handler+0x14>)
 800853e:	f000 b869 	b.w	8008614 <_fwalk_sglue>
 8008542:	bf00      	nop
 8008544:	20000014 	.word	0x20000014
 8008548:	0800b399 	.word	0x0800b399
 800854c:	20000024 	.word	0x20000024

08008550 <cleanup_stdio>:
 8008550:	6841      	ldr	r1, [r0, #4]
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <cleanup_stdio+0x34>)
 8008554:	4299      	cmp	r1, r3
 8008556:	b510      	push	{r4, lr}
 8008558:	4604      	mov	r4, r0
 800855a:	d001      	beq.n	8008560 <cleanup_stdio+0x10>
 800855c:	f002 ff1c 	bl	800b398 <_fflush_r>
 8008560:	68a1      	ldr	r1, [r4, #8]
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <cleanup_stdio+0x38>)
 8008564:	4299      	cmp	r1, r3
 8008566:	d002      	beq.n	800856e <cleanup_stdio+0x1e>
 8008568:	4620      	mov	r0, r4
 800856a:	f002 ff15 	bl	800b398 <_fflush_r>
 800856e:	68e1      	ldr	r1, [r4, #12]
 8008570:	4b06      	ldr	r3, [pc, #24]	@ (800858c <cleanup_stdio+0x3c>)
 8008572:	4299      	cmp	r1, r3
 8008574:	d004      	beq.n	8008580 <cleanup_stdio+0x30>
 8008576:	4620      	mov	r0, r4
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f002 bf0c 	b.w	800b398 <_fflush_r>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	200004b8 	.word	0x200004b8
 8008588:	20000520 	.word	0x20000520
 800858c:	20000588 	.word	0x20000588

08008590 <global_stdio_init.part.0>:
 8008590:	b510      	push	{r4, lr}
 8008592:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <global_stdio_init.part.0+0x30>)
 8008594:	4c0b      	ldr	r4, [pc, #44]	@ (80085c4 <global_stdio_init.part.0+0x34>)
 8008596:	4a0c      	ldr	r2, [pc, #48]	@ (80085c8 <global_stdio_init.part.0+0x38>)
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	4620      	mov	r0, r4
 800859c:	2200      	movs	r2, #0
 800859e:	2104      	movs	r1, #4
 80085a0:	f7ff ff94 	bl	80084cc <std>
 80085a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085a8:	2201      	movs	r2, #1
 80085aa:	2109      	movs	r1, #9
 80085ac:	f7ff ff8e 	bl	80084cc <std>
 80085b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085b4:	2202      	movs	r2, #2
 80085b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ba:	2112      	movs	r1, #18
 80085bc:	f7ff bf86 	b.w	80084cc <std>
 80085c0:	200005f0 	.word	0x200005f0
 80085c4:	200004b8 	.word	0x200004b8
 80085c8:	08008539 	.word	0x08008539

080085cc <__sfp_lock_acquire>:
 80085cc:	4801      	ldr	r0, [pc, #4]	@ (80085d4 <__sfp_lock_acquire+0x8>)
 80085ce:	f000 b934 	b.w	800883a <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	200005f9 	.word	0x200005f9

080085d8 <__sfp_lock_release>:
 80085d8:	4801      	ldr	r0, [pc, #4]	@ (80085e0 <__sfp_lock_release+0x8>)
 80085da:	f000 b92f 	b.w	800883c <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	200005f9 	.word	0x200005f9

080085e4 <__sinit>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
 80085e8:	f7ff fff0 	bl	80085cc <__sfp_lock_acquire>
 80085ec:	6a23      	ldr	r3, [r4, #32]
 80085ee:	b11b      	cbz	r3, 80085f8 <__sinit+0x14>
 80085f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f4:	f7ff bff0 	b.w	80085d8 <__sfp_lock_release>
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <__sinit+0x28>)
 80085fa:	6223      	str	r3, [r4, #32]
 80085fc:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <__sinit+0x2c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f5      	bne.n	80085f0 <__sinit+0xc>
 8008604:	f7ff ffc4 	bl	8008590 <global_stdio_init.part.0>
 8008608:	e7f2      	b.n	80085f0 <__sinit+0xc>
 800860a:	bf00      	nop
 800860c:	08008551 	.word	0x08008551
 8008610:	200005f0 	.word	0x200005f0

08008614 <_fwalk_sglue>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	4607      	mov	r7, r0
 800861a:	4688      	mov	r8, r1
 800861c:	4614      	mov	r4, r2
 800861e:	2600      	movs	r6, #0
 8008620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008624:	f1b9 0901 	subs.w	r9, r9, #1
 8008628:	d505      	bpl.n	8008636 <_fwalk_sglue+0x22>
 800862a:	6824      	ldr	r4, [r4, #0]
 800862c:	2c00      	cmp	r4, #0
 800862e:	d1f7      	bne.n	8008620 <_fwalk_sglue+0xc>
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d907      	bls.n	800864c <_fwalk_sglue+0x38>
 800863c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008640:	3301      	adds	r3, #1
 8008642:	d003      	beq.n	800864c <_fwalk_sglue+0x38>
 8008644:	4629      	mov	r1, r5
 8008646:	4638      	mov	r0, r7
 8008648:	47c0      	blx	r8
 800864a:	4306      	orrs	r6, r0
 800864c:	3568      	adds	r5, #104	@ 0x68
 800864e:	e7e9      	b.n	8008624 <_fwalk_sglue+0x10>

08008650 <iprintf>:
 8008650:	b40f      	push	{r0, r1, r2, r3}
 8008652:	b507      	push	{r0, r1, r2, lr}
 8008654:	4906      	ldr	r1, [pc, #24]	@ (8008670 <iprintf+0x20>)
 8008656:	ab04      	add	r3, sp, #16
 8008658:	6808      	ldr	r0, [r1, #0]
 800865a:	f853 2b04 	ldr.w	r2, [r3], #4
 800865e:	6881      	ldr	r1, [r0, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f002 fcfd 	bl	800b060 <_vfiprintf_r>
 8008666:	b003      	add	sp, #12
 8008668:	f85d eb04 	ldr.w	lr, [sp], #4
 800866c:	b004      	add	sp, #16
 800866e:	4770      	bx	lr
 8008670:	20000020 	.word	0x20000020

08008674 <siprintf>:
 8008674:	b40e      	push	{r1, r2, r3}
 8008676:	b510      	push	{r4, lr}
 8008678:	b09d      	sub	sp, #116	@ 0x74
 800867a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800867c:	9002      	str	r0, [sp, #8]
 800867e:	9006      	str	r0, [sp, #24]
 8008680:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008684:	480a      	ldr	r0, [pc, #40]	@ (80086b0 <siprintf+0x3c>)
 8008686:	9107      	str	r1, [sp, #28]
 8008688:	9104      	str	r1, [sp, #16]
 800868a:	490a      	ldr	r1, [pc, #40]	@ (80086b4 <siprintf+0x40>)
 800868c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008690:	9105      	str	r1, [sp, #20]
 8008692:	2400      	movs	r4, #0
 8008694:	a902      	add	r1, sp, #8
 8008696:	6800      	ldr	r0, [r0, #0]
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800869c:	f002 fbba 	bl	800ae14 <_svfiprintf_r>
 80086a0:	9b02      	ldr	r3, [sp, #8]
 80086a2:	701c      	strb	r4, [r3, #0]
 80086a4:	b01d      	add	sp, #116	@ 0x74
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086aa:	b003      	add	sp, #12
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20000020 	.word	0x20000020
 80086b4:	ffff0208 	.word	0xffff0208

080086b8 <__sread>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	460c      	mov	r4, r1
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	f000 f86c 	bl	800879c <_read_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	bfab      	itete	ge
 80086c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086ca:	89a3      	ldrhlt	r3, [r4, #12]
 80086cc:	181b      	addge	r3, r3, r0
 80086ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086d2:	bfac      	ite	ge
 80086d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086d6:	81a3      	strhlt	r3, [r4, #12]
 80086d8:	bd10      	pop	{r4, pc}

080086da <__swrite>:
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	461f      	mov	r7, r3
 80086e0:	898b      	ldrh	r3, [r1, #12]
 80086e2:	05db      	lsls	r3, r3, #23
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4616      	mov	r6, r2
 80086ea:	d505      	bpl.n	80086f8 <__swrite+0x1e>
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	2302      	movs	r3, #2
 80086f2:	2200      	movs	r2, #0
 80086f4:	f000 f840 	bl	8008778 <_lseek_r>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	f000 b857 	b.w	80087c0 <_write_r>

08008712 <__sseek>:
 8008712:	b510      	push	{r4, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871a:	f000 f82d 	bl	8008778 <_lseek_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	bf15      	itete	ne
 8008724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800872a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800872e:	81a3      	strheq	r3, [r4, #12]
 8008730:	bf18      	it	ne
 8008732:	81a3      	strhne	r3, [r4, #12]
 8008734:	bd10      	pop	{r4, pc}

08008736 <__sclose>:
 8008736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873a:	f000 b80d 	b.w	8008758 <_close_r>

0800873e <memset>:
 800873e:	4402      	add	r2, r0
 8008740:	4603      	mov	r3, r0
 8008742:	4293      	cmp	r3, r2
 8008744:	d100      	bne.n	8008748 <memset+0xa>
 8008746:	4770      	bx	lr
 8008748:	f803 1b01 	strb.w	r1, [r3], #1
 800874c:	e7f9      	b.n	8008742 <memset+0x4>
	...

08008750 <_localeconv_r>:
 8008750:	4800      	ldr	r0, [pc, #0]	@ (8008754 <_localeconv_r+0x4>)
 8008752:	4770      	bx	lr
 8008754:	20000160 	.word	0x20000160

08008758 <_close_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	@ (8008774 <_close_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f9 fbc4 	bl	8001ef0 <_close>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_close_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_close_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	200005f4 	.word	0x200005f4

08008778 <_lseek_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	@ (8008798 <_lseek_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7f9 fbd9 	bl	8001f3e <_lseek>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_lseek_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_lseek_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	200005f4 	.word	0x200005f4

0800879c <_read_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	@ (80087bc <_read_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7f9 fb83 	bl	8001eb6 <_read>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_read_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_read_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	200005f4 	.word	0x200005f4

080087c0 <_write_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	@ (80087e0 <_write_r+0x20>)
 80087c4:	4604      	mov	r4, r0
 80087c6:	4608      	mov	r0, r1
 80087c8:	4611      	mov	r1, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f7f8 fc26 	bl	8001020 <_write>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_write_r+0x1e>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_write_r+0x1e>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	200005f4 	.word	0x200005f4

080087e4 <__errno>:
 80087e4:	4b01      	ldr	r3, [pc, #4]	@ (80087ec <__errno+0x8>)
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20000020 	.word	0x20000020

080087f0 <__libc_init_array>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008828 <__libc_init_array+0x38>)
 80087f4:	4c0d      	ldr	r4, [pc, #52]	@ (800882c <__libc_init_array+0x3c>)
 80087f6:	1b64      	subs	r4, r4, r5
 80087f8:	10a4      	asrs	r4, r4, #2
 80087fa:	2600      	movs	r6, #0
 80087fc:	42a6      	cmp	r6, r4
 80087fe:	d109      	bne.n	8008814 <__libc_init_array+0x24>
 8008800:	4d0b      	ldr	r5, [pc, #44]	@ (8008830 <__libc_init_array+0x40>)
 8008802:	4c0c      	ldr	r4, [pc, #48]	@ (8008834 <__libc_init_array+0x44>)
 8008804:	f003 fb7a 	bl	800befc <_init>
 8008808:	1b64      	subs	r4, r4, r5
 800880a:	10a4      	asrs	r4, r4, #2
 800880c:	2600      	movs	r6, #0
 800880e:	42a6      	cmp	r6, r4
 8008810:	d105      	bne.n	800881e <__libc_init_array+0x2e>
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	f855 3b04 	ldr.w	r3, [r5], #4
 8008818:	4798      	blx	r3
 800881a:	3601      	adds	r6, #1
 800881c:	e7ee      	b.n	80087fc <__libc_init_array+0xc>
 800881e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008822:	4798      	blx	r3
 8008824:	3601      	adds	r6, #1
 8008826:	e7f2      	b.n	800880e <__libc_init_array+0x1e>
 8008828:	0800c3dc 	.word	0x0800c3dc
 800882c:	0800c3dc 	.word	0x0800c3dc
 8008830:	0800c3dc 	.word	0x0800c3dc
 8008834:	0800c3e0 	.word	0x0800c3e0

08008838 <__retarget_lock_init_recursive>:
 8008838:	4770      	bx	lr

0800883a <__retarget_lock_acquire_recursive>:
 800883a:	4770      	bx	lr

0800883c <__retarget_lock_release_recursive>:
 800883c:	4770      	bx	lr
	...

08008840 <nanf>:
 8008840:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008848 <nanf+0x8>
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	7fc00000 	.word	0x7fc00000

0800884c <quorem>:
 800884c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	6903      	ldr	r3, [r0, #16]
 8008852:	690c      	ldr	r4, [r1, #16]
 8008854:	42a3      	cmp	r3, r4
 8008856:	4607      	mov	r7, r0
 8008858:	db7e      	blt.n	8008958 <quorem+0x10c>
 800885a:	3c01      	subs	r4, #1
 800885c:	f101 0814 	add.w	r8, r1, #20
 8008860:	00a3      	lsls	r3, r4, #2
 8008862:	f100 0514 	add.w	r5, r0, #20
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008876:	3301      	adds	r3, #1
 8008878:	429a      	cmp	r2, r3
 800887a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800887e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008882:	d32e      	bcc.n	80088e2 <quorem+0x96>
 8008884:	f04f 0a00 	mov.w	sl, #0
 8008888:	46c4      	mov	ip, r8
 800888a:	46ae      	mov	lr, r5
 800888c:	46d3      	mov	fp, sl
 800888e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008892:	b298      	uxth	r0, r3
 8008894:	fb06 a000 	mla	r0, r6, r0, sl
 8008898:	0c02      	lsrs	r2, r0, #16
 800889a:	0c1b      	lsrs	r3, r3, #16
 800889c:	fb06 2303 	mla	r3, r6, r3, r2
 80088a0:	f8de 2000 	ldr.w	r2, [lr]
 80088a4:	b280      	uxth	r0, r0
 80088a6:	b292      	uxth	r2, r2
 80088a8:	1a12      	subs	r2, r2, r0
 80088aa:	445a      	add	r2, fp
 80088ac:	f8de 0000 	ldr.w	r0, [lr]
 80088b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088be:	b292      	uxth	r2, r2
 80088c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088c4:	45e1      	cmp	r9, ip
 80088c6:	f84e 2b04 	str.w	r2, [lr], #4
 80088ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088ce:	d2de      	bcs.n	800888e <quorem+0x42>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	58eb      	ldr	r3, [r5, r3]
 80088d4:	b92b      	cbnz	r3, 80088e2 <quorem+0x96>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	3b04      	subs	r3, #4
 80088da:	429d      	cmp	r5, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	d32f      	bcc.n	8008940 <quorem+0xf4>
 80088e0:	613c      	str	r4, [r7, #16]
 80088e2:	4638      	mov	r0, r7
 80088e4:	f001 f9c8 	bl	8009c78 <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	db25      	blt.n	8008938 <quorem+0xec>
 80088ec:	4629      	mov	r1, r5
 80088ee:	2000      	movs	r0, #0
 80088f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80088f4:	f8d1 c000 	ldr.w	ip, [r1]
 80088f8:	fa1f fe82 	uxth.w	lr, r2
 80088fc:	fa1f f38c 	uxth.w	r3, ip
 8008900:	eba3 030e 	sub.w	r3, r3, lr
 8008904:	4403      	add	r3, r0
 8008906:	0c12      	lsrs	r2, r2, #16
 8008908:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800890c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008910:	b29b      	uxth	r3, r3
 8008912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008916:	45c1      	cmp	r9, r8
 8008918:	f841 3b04 	str.w	r3, [r1], #4
 800891c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008920:	d2e6      	bcs.n	80088f0 <quorem+0xa4>
 8008922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800892a:	b922      	cbnz	r2, 8008936 <quorem+0xea>
 800892c:	3b04      	subs	r3, #4
 800892e:	429d      	cmp	r5, r3
 8008930:	461a      	mov	r2, r3
 8008932:	d30b      	bcc.n	800894c <quorem+0x100>
 8008934:	613c      	str	r4, [r7, #16]
 8008936:	3601      	adds	r6, #1
 8008938:	4630      	mov	r0, r6
 800893a:	b003      	add	sp, #12
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	3b04      	subs	r3, #4
 8008944:	2a00      	cmp	r2, #0
 8008946:	d1cb      	bne.n	80088e0 <quorem+0x94>
 8008948:	3c01      	subs	r4, #1
 800894a:	e7c6      	b.n	80088da <quorem+0x8e>
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	3b04      	subs	r3, #4
 8008950:	2a00      	cmp	r2, #0
 8008952:	d1ef      	bne.n	8008934 <quorem+0xe8>
 8008954:	3c01      	subs	r4, #1
 8008956:	e7ea      	b.n	800892e <quorem+0xe2>
 8008958:	2000      	movs	r0, #0
 800895a:	e7ee      	b.n	800893a <quorem+0xee>
 800895c:	0000      	movs	r0, r0
	...

08008960 <_dtoa_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	69c7      	ldr	r7, [r0, #28]
 8008966:	b097      	sub	sp, #92	@ 0x5c
 8008968:	ed8d 0b04 	vstr	d0, [sp, #16]
 800896c:	ec55 4b10 	vmov	r4, r5, d0
 8008970:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008972:	9107      	str	r1, [sp, #28]
 8008974:	4681      	mov	r9, r0
 8008976:	920c      	str	r2, [sp, #48]	@ 0x30
 8008978:	9311      	str	r3, [sp, #68]	@ 0x44
 800897a:	b97f      	cbnz	r7, 800899c <_dtoa_r+0x3c>
 800897c:	2010      	movs	r0, #16
 800897e:	f000 fe09 	bl	8009594 <malloc>
 8008982:	4602      	mov	r2, r0
 8008984:	f8c9 001c 	str.w	r0, [r9, #28]
 8008988:	b920      	cbnz	r0, 8008994 <_dtoa_r+0x34>
 800898a:	4ba9      	ldr	r3, [pc, #676]	@ (8008c30 <_dtoa_r+0x2d0>)
 800898c:	21ef      	movs	r1, #239	@ 0xef
 800898e:	48a9      	ldr	r0, [pc, #676]	@ (8008c34 <_dtoa_r+0x2d4>)
 8008990:	f002 fe12 	bl	800b5b8 <__assert_func>
 8008994:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008998:	6007      	str	r7, [r0, #0]
 800899a:	60c7      	str	r7, [r0, #12]
 800899c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	b159      	cbz	r1, 80089bc <_dtoa_r+0x5c>
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	604a      	str	r2, [r1, #4]
 80089a8:	2301      	movs	r3, #1
 80089aa:	4093      	lsls	r3, r2
 80089ac:	608b      	str	r3, [r1, #8]
 80089ae:	4648      	mov	r0, r9
 80089b0:	f000 fee6 	bl	8009780 <_Bfree>
 80089b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	1e2b      	subs	r3, r5, #0
 80089be:	bfb9      	ittee	lt
 80089c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	9305      	strlt	r3, [sp, #20]
 80089c6:	2300      	movge	r3, #0
 80089c8:	6033      	strge	r3, [r6, #0]
 80089ca:	9f05      	ldr	r7, [sp, #20]
 80089cc:	4b9a      	ldr	r3, [pc, #616]	@ (8008c38 <_dtoa_r+0x2d8>)
 80089ce:	bfbc      	itt	lt
 80089d0:	2201      	movlt	r2, #1
 80089d2:	6032      	strlt	r2, [r6, #0]
 80089d4:	43bb      	bics	r3, r7
 80089d6:	d112      	bne.n	80089fe <_dtoa_r+0x9e>
 80089d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80089da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089e4:	4323      	orrs	r3, r4
 80089e6:	f000 855a 	beq.w	800949e <_dtoa_r+0xb3e>
 80089ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008c4c <_dtoa_r+0x2ec>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 855c 	beq.w	80094ae <_dtoa_r+0xb4e>
 80089f6:	f10a 0303 	add.w	r3, sl, #3
 80089fa:	f000 bd56 	b.w	80094aa <_dtoa_r+0xb4a>
 80089fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a02:	2200      	movs	r2, #0
 8008a04:	ec51 0b17 	vmov	r0, r1, d7
 8008a08:	2300      	movs	r3, #0
 8008a0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008a0e:	f7f8 f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a12:	4680      	mov	r8, r0
 8008a14:	b158      	cbz	r0, 8008a2e <_dtoa_r+0xce>
 8008a16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a18:	2301      	movs	r3, #1
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a1e:	b113      	cbz	r3, 8008a26 <_dtoa_r+0xc6>
 8008a20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a22:	4b86      	ldr	r3, [pc, #536]	@ (8008c3c <_dtoa_r+0x2dc>)
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008c50 <_dtoa_r+0x2f0>
 8008a2a:	f000 bd40 	b.w	80094ae <_dtoa_r+0xb4e>
 8008a2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008a32:	aa14      	add	r2, sp, #80	@ 0x50
 8008a34:	a915      	add	r1, sp, #84	@ 0x54
 8008a36:	4648      	mov	r0, r9
 8008a38:	f001 fa3e 	bl	8009eb8 <__d2b>
 8008a3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a40:	9002      	str	r0, [sp, #8]
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d078      	beq.n	8008b38 <_dtoa_r+0x1d8>
 8008a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a60:	4619      	mov	r1, r3
 8008a62:	2200      	movs	r2, #0
 8008a64:	4b76      	ldr	r3, [pc, #472]	@ (8008c40 <_dtoa_r+0x2e0>)
 8008a66:	f7f7 fc0f 	bl	8000288 <__aeabi_dsub>
 8008a6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008c18 <_dtoa_r+0x2b8>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fdc2 	bl	80005f8 <__aeabi_dmul>
 8008a74:	a36a      	add	r3, pc, #424	@ (adr r3, 8008c20 <_dtoa_r+0x2c0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fc07 	bl	800028c <__adddf3>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4630      	mov	r0, r6
 8008a82:	460d      	mov	r5, r1
 8008a84:	f7f7 fd4e 	bl	8000524 <__aeabi_i2d>
 8008a88:	a367      	add	r3, pc, #412	@ (adr r3, 8008c28 <_dtoa_r+0x2c8>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fdb3 	bl	80005f8 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fbf7 	bl	800028c <__adddf3>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	f7f8 f859 	bl	8000b58 <__aeabi_d2iz>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f8 f814 	bl	8000adc <__aeabi_dcmplt>
 8008ab4:	b140      	cbz	r0, 8008ac8 <_dtoa_r+0x168>
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7f7 fd34 	bl	8000524 <__aeabi_i2d>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f8 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac4:	b900      	cbnz	r0, 8008ac8 <_dtoa_r+0x168>
 8008ac6:	3f01      	subs	r7, #1
 8008ac8:	2f16      	cmp	r7, #22
 8008aca:	d852      	bhi.n	8008b72 <_dtoa_r+0x212>
 8008acc:	4b5d      	ldr	r3, [pc, #372]	@ (8008c44 <_dtoa_r+0x2e4>)
 8008ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ada:	f7f7 ffff 	bl	8000adc <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d049      	beq.n	8008b76 <_dtoa_r+0x216>
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ae8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008aea:	1b9b      	subs	r3, r3, r6
 8008aec:	1e5a      	subs	r2, r3, #1
 8008aee:	bf45      	ittet	mi
 8008af0:	f1c3 0301 	rsbmi	r3, r3, #1
 8008af4:	9300      	strmi	r3, [sp, #0]
 8008af6:	2300      	movpl	r3, #0
 8008af8:	2300      	movmi	r3, #0
 8008afa:	9206      	str	r2, [sp, #24]
 8008afc:	bf54      	ite	pl
 8008afe:	9300      	strpl	r3, [sp, #0]
 8008b00:	9306      	strmi	r3, [sp, #24]
 8008b02:	2f00      	cmp	r7, #0
 8008b04:	db39      	blt.n	8008b7a <_dtoa_r+0x21a>
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	970d      	str	r7, [sp, #52]	@ 0x34
 8008b0a:	443b      	add	r3, r7
 8008b0c:	9306      	str	r3, [sp, #24]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9308      	str	r3, [sp, #32]
 8008b12:	9b07      	ldr	r3, [sp, #28]
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d863      	bhi.n	8008be0 <_dtoa_r+0x280>
 8008b18:	2b05      	cmp	r3, #5
 8008b1a:	bfc4      	itt	gt
 8008b1c:	3b04      	subgt	r3, #4
 8008b1e:	9307      	strgt	r3, [sp, #28]
 8008b20:	9b07      	ldr	r3, [sp, #28]
 8008b22:	f1a3 0302 	sub.w	r3, r3, #2
 8008b26:	bfcc      	ite	gt
 8008b28:	2400      	movgt	r4, #0
 8008b2a:	2401      	movle	r4, #1
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d863      	bhi.n	8008bf8 <_dtoa_r+0x298>
 8008b30:	e8df f003 	tbb	[pc, r3]
 8008b34:	2b375452 	.word	0x2b375452
 8008b38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b3c:	441e      	add	r6, r3
 8008b3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	bfc1      	itttt	gt
 8008b46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b4a:	409f      	lslgt	r7, r3
 8008b4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b54:	bfd6      	itet	le
 8008b56:	f1c3 0320 	rsble	r3, r3, #32
 8008b5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b5e:	fa04 f003 	lslle.w	r0, r4, r3
 8008b62:	f7f7 fccf 	bl	8000504 <__aeabi_ui2d>
 8008b66:	2201      	movs	r2, #1
 8008b68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b6c:	3e01      	subs	r6, #1
 8008b6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b70:	e776      	b.n	8008a60 <_dtoa_r+0x100>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7b7      	b.n	8008ae6 <_dtoa_r+0x186>
 8008b76:	9010      	str	r0, [sp, #64]	@ 0x40
 8008b78:	e7b6      	b.n	8008ae8 <_dtoa_r+0x188>
 8008b7a:	9b00      	ldr	r3, [sp, #0]
 8008b7c:	1bdb      	subs	r3, r3, r7
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	427b      	negs	r3, r7
 8008b82:	9308      	str	r3, [sp, #32]
 8008b84:	2300      	movs	r3, #0
 8008b86:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b88:	e7c3      	b.n	8008b12 <_dtoa_r+0x1b2>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b90:	eb07 0b03 	add.w	fp, r7, r3
 8008b94:	f10b 0301 	add.w	r3, fp, #1
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	bfb8      	it	lt
 8008b9e:	2301      	movlt	r3, #1
 8008ba0:	e006      	b.n	8008bb0 <_dtoa_r+0x250>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dd28      	ble.n	8008bfe <_dtoa_r+0x29e>
 8008bac:	469b      	mov	fp, r3
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	f102 0514 	add.w	r5, r2, #20
 8008bbc:	429d      	cmp	r5, r3
 8008bbe:	d926      	bls.n	8008c0e <_dtoa_r+0x2ae>
 8008bc0:	6041      	str	r1, [r0, #4]
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	f000 fd9c 	bl	8009700 <_Balloc>
 8008bc8:	4682      	mov	sl, r0
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d142      	bne.n	8008c54 <_dtoa_r+0x2f4>
 8008bce:	4b1e      	ldr	r3, [pc, #120]	@ (8008c48 <_dtoa_r+0x2e8>)
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bd6:	e6da      	b.n	800898e <_dtoa_r+0x2e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e7e3      	b.n	8008ba4 <_dtoa_r+0x244>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e7d5      	b.n	8008b8c <_dtoa_r+0x22c>
 8008be0:	2401      	movs	r4, #1
 8008be2:	2300      	movs	r3, #0
 8008be4:	9307      	str	r3, [sp, #28]
 8008be6:	9409      	str	r4, [sp, #36]	@ 0x24
 8008be8:	f04f 3bff 	mov.w	fp, #4294967295
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8cd b00c 	str.w	fp, [sp, #12]
 8008bf2:	2312      	movs	r3, #18
 8008bf4:	920c      	str	r2, [sp, #48]	@ 0x30
 8008bf6:	e7db      	b.n	8008bb0 <_dtoa_r+0x250>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfc:	e7f4      	b.n	8008be8 <_dtoa_r+0x288>
 8008bfe:	f04f 0b01 	mov.w	fp, #1
 8008c02:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c06:	465b      	mov	r3, fp
 8008c08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008c0c:	e7d0      	b.n	8008bb0 <_dtoa_r+0x250>
 8008c0e:	3101      	adds	r1, #1
 8008c10:	0052      	lsls	r2, r2, #1
 8008c12:	e7d1      	b.n	8008bb8 <_dtoa_r+0x258>
 8008c14:	f3af 8000 	nop.w
 8008c18:	636f4361 	.word	0x636f4361
 8008c1c:	3fd287a7 	.word	0x3fd287a7
 8008c20:	8b60c8b3 	.word	0x8b60c8b3
 8008c24:	3fc68a28 	.word	0x3fc68a28
 8008c28:	509f79fb 	.word	0x509f79fb
 8008c2c:	3fd34413 	.word	0x3fd34413
 8008c30:	0800bff2 	.word	0x0800bff2
 8008c34:	0800c009 	.word	0x0800c009
 8008c38:	7ff00000 	.word	0x7ff00000
 8008c3c:	0800bfbd 	.word	0x0800bfbd
 8008c40:	3ff80000 	.word	0x3ff80000
 8008c44:	0800c1b8 	.word	0x0800c1b8
 8008c48:	0800c061 	.word	0x0800c061
 8008c4c:	0800bfee 	.word	0x0800bfee
 8008c50:	0800bfbc 	.word	0x0800bfbc
 8008c54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c58:	6018      	str	r0, [r3, #0]
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	2b0e      	cmp	r3, #14
 8008c5e:	f200 80a1 	bhi.w	8008da4 <_dtoa_r+0x444>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	f000 809e 	beq.w	8008da4 <_dtoa_r+0x444>
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	dd33      	ble.n	8008cd4 <_dtoa_r+0x374>
 8008c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ee0 <_dtoa_r+0x580>)
 8008c6e:	f007 020f 	and.w	r2, r7, #15
 8008c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c76:	ed93 7b00 	vldr	d7, [r3]
 8008c7a:	05f8      	lsls	r0, r7, #23
 8008c7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008c80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c84:	d516      	bpl.n	8008cb4 <_dtoa_r+0x354>
 8008c86:	4b97      	ldr	r3, [pc, #604]	@ (8008ee4 <_dtoa_r+0x584>)
 8008c88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c90:	f7f7 fddc 	bl	800084c <__aeabi_ddiv>
 8008c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c98:	f004 040f 	and.w	r4, r4, #15
 8008c9c:	2603      	movs	r6, #3
 8008c9e:	4d91      	ldr	r5, [pc, #580]	@ (8008ee4 <_dtoa_r+0x584>)
 8008ca0:	b954      	cbnz	r4, 8008cb8 <_dtoa_r+0x358>
 8008ca2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008caa:	f7f7 fdcf 	bl	800084c <__aeabi_ddiv>
 8008cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb2:	e028      	b.n	8008d06 <_dtoa_r+0x3a6>
 8008cb4:	2602      	movs	r6, #2
 8008cb6:	e7f2      	b.n	8008c9e <_dtoa_r+0x33e>
 8008cb8:	07e1      	lsls	r1, r4, #31
 8008cba:	d508      	bpl.n	8008cce <_dtoa_r+0x36e>
 8008cbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ccc:	3601      	adds	r6, #1
 8008cce:	1064      	asrs	r4, r4, #1
 8008cd0:	3508      	adds	r5, #8
 8008cd2:	e7e5      	b.n	8008ca0 <_dtoa_r+0x340>
 8008cd4:	f000 80af 	beq.w	8008e36 <_dtoa_r+0x4d6>
 8008cd8:	427c      	negs	r4, r7
 8008cda:	4b81      	ldr	r3, [pc, #516]	@ (8008ee0 <_dtoa_r+0x580>)
 8008cdc:	4d81      	ldr	r5, [pc, #516]	@ (8008ee4 <_dtoa_r+0x584>)
 8008cde:	f004 020f 	and.w	r2, r4, #15
 8008ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cee:	f7f7 fc83 	bl	80005f8 <__aeabi_dmul>
 8008cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf6:	1124      	asrs	r4, r4, #4
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2602      	movs	r6, #2
 8008cfc:	2c00      	cmp	r4, #0
 8008cfe:	f040 808f 	bne.w	8008e20 <_dtoa_r+0x4c0>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1d3      	bne.n	8008cae <_dtoa_r+0x34e>
 8008d06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 8094 	beq.w	8008e3a <_dtoa_r+0x4da>
 8008d12:	4b75      	ldr	r3, [pc, #468]	@ (8008ee8 <_dtoa_r+0x588>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 fedf 	bl	8000adc <__aeabi_dcmplt>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	f000 808b 	beq.w	8008e3a <_dtoa_r+0x4da>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8087 	beq.w	8008e3a <_dtoa_r+0x4da>
 8008d2c:	f1bb 0f00 	cmp.w	fp, #0
 8008d30:	dd34      	ble.n	8008d9c <_dtoa_r+0x43c>
 8008d32:	4620      	mov	r0, r4
 8008d34:	4b6d      	ldr	r3, [pc, #436]	@ (8008eec <_dtoa_r+0x58c>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 fc5d 	bl	80005f8 <__aeabi_dmul>
 8008d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d42:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d46:	3601      	adds	r6, #1
 8008d48:	465c      	mov	r4, fp
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7f7 fbea 	bl	8000524 <__aeabi_i2d>
 8008d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	4b65      	ldr	r3, [pc, #404]	@ (8008ef0 <_dtoa_r+0x590>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f7f7 fa96 	bl	800028c <__adddf3>
 8008d60:	4605      	mov	r5, r0
 8008d62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d16a      	bne.n	8008e40 <_dtoa_r+0x4e0>
 8008d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d6e:	4b61      	ldr	r3, [pc, #388]	@ (8008ef4 <_dtoa_r+0x594>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	f7f7 fa89 	bl	8000288 <__aeabi_dsub>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d7e:	462a      	mov	r2, r5
 8008d80:	4633      	mov	r3, r6
 8008d82:	f7f7 fec9 	bl	8000b18 <__aeabi_dcmpgt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f040 8298 	bne.w	80092bc <_dtoa_r+0x95c>
 8008d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d90:	462a      	mov	r2, r5
 8008d92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d96:	f7f7 fea1 	bl	8000adc <__aeabi_dcmplt>
 8008d9a:	bb38      	cbnz	r0, 8008dec <_dtoa_r+0x48c>
 8008d9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008da0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008da4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f2c0 8157 	blt.w	800905a <_dtoa_r+0x6fa>
 8008dac:	2f0e      	cmp	r7, #14
 8008dae:	f300 8154 	bgt.w	800905a <_dtoa_r+0x6fa>
 8008db2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ee0 <_dtoa_r+0x580>)
 8008db4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008db8:	ed93 7b00 	vldr	d7, [r3]
 8008dbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	ed8d 7b00 	vstr	d7, [sp]
 8008dc4:	f280 80e5 	bge.w	8008f92 <_dtoa_r+0x632>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f300 80e1 	bgt.w	8008f92 <_dtoa_r+0x632>
 8008dd0:	d10c      	bne.n	8008dec <_dtoa_r+0x48c>
 8008dd2:	4b48      	ldr	r3, [pc, #288]	@ (8008ef4 <_dtoa_r+0x594>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	ec51 0b17 	vmov	r0, r1, d7
 8008dda:	f7f7 fc0d 	bl	80005f8 <__aeabi_dmul>
 8008dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de2:	f7f7 fe8f 	bl	8000b04 <__aeabi_dcmpge>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f000 8266 	beq.w	80092b8 <_dtoa_r+0x958>
 8008dec:	2400      	movs	r4, #0
 8008dee:	4625      	mov	r5, r4
 8008df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008df2:	4656      	mov	r6, sl
 8008df4:	ea6f 0803 	mvn.w	r8, r3
 8008df8:	2700      	movs	r7, #0
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f000 fcbf 	bl	8009780 <_Bfree>
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	f000 80bd 	beq.w	8008f82 <_dtoa_r+0x622>
 8008e08:	b12f      	cbz	r7, 8008e16 <_dtoa_r+0x4b6>
 8008e0a:	42af      	cmp	r7, r5
 8008e0c:	d003      	beq.n	8008e16 <_dtoa_r+0x4b6>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4648      	mov	r0, r9
 8008e12:	f000 fcb5 	bl	8009780 <_Bfree>
 8008e16:	4629      	mov	r1, r5
 8008e18:	4648      	mov	r0, r9
 8008e1a:	f000 fcb1 	bl	8009780 <_Bfree>
 8008e1e:	e0b0      	b.n	8008f82 <_dtoa_r+0x622>
 8008e20:	07e2      	lsls	r2, r4, #31
 8008e22:	d505      	bpl.n	8008e30 <_dtoa_r+0x4d0>
 8008e24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	2301      	movs	r3, #1
 8008e30:	1064      	asrs	r4, r4, #1
 8008e32:	3508      	adds	r5, #8
 8008e34:	e762      	b.n	8008cfc <_dtoa_r+0x39c>
 8008e36:	2602      	movs	r6, #2
 8008e38:	e765      	b.n	8008d06 <_dtoa_r+0x3a6>
 8008e3a:	9c03      	ldr	r4, [sp, #12]
 8008e3c:	46b8      	mov	r8, r7
 8008e3e:	e784      	b.n	8008d4a <_dtoa_r+0x3ea>
 8008e40:	4b27      	ldr	r3, [pc, #156]	@ (8008ee0 <_dtoa_r+0x580>)
 8008e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e4c:	4454      	add	r4, sl
 8008e4e:	2900      	cmp	r1, #0
 8008e50:	d054      	beq.n	8008efc <_dtoa_r+0x59c>
 8008e52:	4929      	ldr	r1, [pc, #164]	@ (8008ef8 <_dtoa_r+0x598>)
 8008e54:	2000      	movs	r0, #0
 8008e56:	f7f7 fcf9 	bl	800084c <__aeabi_ddiv>
 8008e5a:	4633      	mov	r3, r6
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	f7f7 fa13 	bl	8000288 <__aeabi_dsub>
 8008e62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e66:	4656      	mov	r6, sl
 8008e68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e6c:	f7f7 fe74 	bl	8000b58 <__aeabi_d2iz>
 8008e70:	4605      	mov	r5, r0
 8008e72:	f7f7 fb57 	bl	8000524 <__aeabi_i2d>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e7e:	f7f7 fa03 	bl	8000288 <__aeabi_dsub>
 8008e82:	3530      	adds	r5, #48	@ 0x30
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e8c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e94:	f7f7 fe22 	bl	8000adc <__aeabi_dcmplt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d172      	bne.n	8008f82 <_dtoa_r+0x622>
 8008e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea0:	4911      	ldr	r1, [pc, #68]	@ (8008ee8 <_dtoa_r+0x588>)
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f7f7 f9f0 	bl	8000288 <__aeabi_dsub>
 8008ea8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008eac:	f7f7 fe16 	bl	8000adc <__aeabi_dcmplt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f040 80b4 	bne.w	800901e <_dtoa_r+0x6be>
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	f43f af70 	beq.w	8008d9c <_dtoa_r+0x43c>
 8008ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8008eec <_dtoa_r+0x58c>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	4b08      	ldr	r3, [pc, #32]	@ (8008eec <_dtoa_r+0x58c>)
 8008eca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ece:	2200      	movs	r2, #0
 8008ed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008edc:	e7c4      	b.n	8008e68 <_dtoa_r+0x508>
 8008ede:	bf00      	nop
 8008ee0:	0800c1b8 	.word	0x0800c1b8
 8008ee4:	0800c190 	.word	0x0800c190
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	40240000 	.word	0x40240000
 8008ef0:	401c0000 	.word	0x401c0000
 8008ef4:	40140000 	.word	0x40140000
 8008ef8:	3fe00000 	.word	0x3fe00000
 8008efc:	4631      	mov	r1, r6
 8008efe:	4628      	mov	r0, r5
 8008f00:	f7f7 fb7a 	bl	80005f8 <__aeabi_dmul>
 8008f04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f08:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f0a:	4656      	mov	r6, sl
 8008f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f10:	f7f7 fe22 	bl	8000b58 <__aeabi_d2iz>
 8008f14:	4605      	mov	r5, r0
 8008f16:	f7f7 fb05 	bl	8000524 <__aeabi_i2d>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f22:	f7f7 f9b1 	bl	8000288 <__aeabi_dsub>
 8008f26:	3530      	adds	r5, #48	@ 0x30
 8008f28:	f806 5b01 	strb.w	r5, [r6], #1
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	d124      	bne.n	8008f86 <_dtoa_r+0x626>
 8008f3c:	4baf      	ldr	r3, [pc, #700]	@ (80091fc <_dtoa_r+0x89c>)
 8008f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f42:	f7f7 f9a3 	bl	800028c <__adddf3>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f4e:	f7f7 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d163      	bne.n	800901e <_dtoa_r+0x6be>
 8008f56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f5a:	49a8      	ldr	r1, [pc, #672]	@ (80091fc <_dtoa_r+0x89c>)
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f7f7 f993 	bl	8000288 <__aeabi_dsub>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f6a:	f7f7 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f af14 	beq.w	8008d9c <_dtoa_r+0x43c>
 8008f74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008f76:	1e73      	subs	r3, r6, #1
 8008f78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f7e:	2b30      	cmp	r3, #48	@ 0x30
 8008f80:	d0f8      	beq.n	8008f74 <_dtoa_r+0x614>
 8008f82:	4647      	mov	r7, r8
 8008f84:	e03b      	b.n	8008ffe <_dtoa_r+0x69e>
 8008f86:	4b9e      	ldr	r3, [pc, #632]	@ (8009200 <_dtoa_r+0x8a0>)
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f90:	e7bc      	b.n	8008f0c <_dtoa_r+0x5ac>
 8008f92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f96:	4656      	mov	r6, sl
 8008f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f7f7 fc54 	bl	800084c <__aeabi_ddiv>
 8008fa4:	f7f7 fdd8 	bl	8000b58 <__aeabi_d2iz>
 8008fa8:	4680      	mov	r8, r0
 8008faa:	f7f7 fabb 	bl	8000524 <__aeabi_i2d>
 8008fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb2:	f7f7 fb21 	bl	80005f8 <__aeabi_dmul>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fc2:	f7f7 f961 	bl	8000288 <__aeabi_dsub>
 8008fc6:	f806 4b01 	strb.w	r4, [r6], #1
 8008fca:	9d03      	ldr	r5, [sp, #12]
 8008fcc:	eba6 040a 	sub.w	r4, r6, sl
 8008fd0:	42a5      	cmp	r5, r4
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	d133      	bne.n	8009040 <_dtoa_r+0x6e0>
 8008fd8:	f7f7 f958 	bl	800028c <__adddf3>
 8008fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	f7f7 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 8008fe8:	b9c0      	cbnz	r0, 800901c <_dtoa_r+0x6bc>
 8008fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7f7 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff6:	b110      	cbz	r0, 8008ffe <_dtoa_r+0x69e>
 8008ff8:	f018 0f01 	tst.w	r8, #1
 8008ffc:	d10e      	bne.n	800901c <_dtoa_r+0x6bc>
 8008ffe:	9902      	ldr	r1, [sp, #8]
 8009000:	4648      	mov	r0, r9
 8009002:	f000 fbbd 	bl	8009780 <_Bfree>
 8009006:	2300      	movs	r3, #0
 8009008:	7033      	strb	r3, [r6, #0]
 800900a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800900c:	3701      	adds	r7, #1
 800900e:	601f      	str	r7, [r3, #0]
 8009010:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 824b 	beq.w	80094ae <_dtoa_r+0xb4e>
 8009018:	601e      	str	r6, [r3, #0]
 800901a:	e248      	b.n	80094ae <_dtoa_r+0xb4e>
 800901c:	46b8      	mov	r8, r7
 800901e:	4633      	mov	r3, r6
 8009020:	461e      	mov	r6, r3
 8009022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009026:	2a39      	cmp	r2, #57	@ 0x39
 8009028:	d106      	bne.n	8009038 <_dtoa_r+0x6d8>
 800902a:	459a      	cmp	sl, r3
 800902c:	d1f8      	bne.n	8009020 <_dtoa_r+0x6c0>
 800902e:	2230      	movs	r2, #48	@ 0x30
 8009030:	f108 0801 	add.w	r8, r8, #1
 8009034:	f88a 2000 	strb.w	r2, [sl]
 8009038:	781a      	ldrb	r2, [r3, #0]
 800903a:	3201      	adds	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	e7a0      	b.n	8008f82 <_dtoa_r+0x622>
 8009040:	4b6f      	ldr	r3, [pc, #444]	@ (8009200 <_dtoa_r+0x8a0>)
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 fad8 	bl	80005f8 <__aeabi_dmul>
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4604      	mov	r4, r0
 800904e:	460d      	mov	r5, r1
 8009050:	f7f7 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009054:	2800      	cmp	r0, #0
 8009056:	d09f      	beq.n	8008f98 <_dtoa_r+0x638>
 8009058:	e7d1      	b.n	8008ffe <_dtoa_r+0x69e>
 800905a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800905c:	2a00      	cmp	r2, #0
 800905e:	f000 80ea 	beq.w	8009236 <_dtoa_r+0x8d6>
 8009062:	9a07      	ldr	r2, [sp, #28]
 8009064:	2a01      	cmp	r2, #1
 8009066:	f300 80cd 	bgt.w	8009204 <_dtoa_r+0x8a4>
 800906a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800906c:	2a00      	cmp	r2, #0
 800906e:	f000 80c1 	beq.w	80091f4 <_dtoa_r+0x894>
 8009072:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009076:	9c08      	ldr	r4, [sp, #32]
 8009078:	9e00      	ldr	r6, [sp, #0]
 800907a:	9a00      	ldr	r2, [sp, #0]
 800907c:	441a      	add	r2, r3
 800907e:	9200      	str	r2, [sp, #0]
 8009080:	9a06      	ldr	r2, [sp, #24]
 8009082:	2101      	movs	r1, #1
 8009084:	441a      	add	r2, r3
 8009086:	4648      	mov	r0, r9
 8009088:	9206      	str	r2, [sp, #24]
 800908a:	f000 fc77 	bl	800997c <__i2b>
 800908e:	4605      	mov	r5, r0
 8009090:	b166      	cbz	r6, 80090ac <_dtoa_r+0x74c>
 8009092:	9b06      	ldr	r3, [sp, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd09      	ble.n	80090ac <_dtoa_r+0x74c>
 8009098:	42b3      	cmp	r3, r6
 800909a:	9a00      	ldr	r2, [sp, #0]
 800909c:	bfa8      	it	ge
 800909e:	4633      	movge	r3, r6
 80090a0:	1ad2      	subs	r2, r2, r3
 80090a2:	9200      	str	r2, [sp, #0]
 80090a4:	9a06      	ldr	r2, [sp, #24]
 80090a6:	1af6      	subs	r6, r6, r3
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	9306      	str	r3, [sp, #24]
 80090ac:	9b08      	ldr	r3, [sp, #32]
 80090ae:	b30b      	cbz	r3, 80090f4 <_dtoa_r+0x794>
 80090b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 80c6 	beq.w	8009244 <_dtoa_r+0x8e4>
 80090b8:	2c00      	cmp	r4, #0
 80090ba:	f000 80c0 	beq.w	800923e <_dtoa_r+0x8de>
 80090be:	4629      	mov	r1, r5
 80090c0:	4622      	mov	r2, r4
 80090c2:	4648      	mov	r0, r9
 80090c4:	f000 fd12 	bl	8009aec <__pow5mult>
 80090c8:	9a02      	ldr	r2, [sp, #8]
 80090ca:	4601      	mov	r1, r0
 80090cc:	4605      	mov	r5, r0
 80090ce:	4648      	mov	r0, r9
 80090d0:	f000 fc6a 	bl	80099a8 <__multiply>
 80090d4:	9902      	ldr	r1, [sp, #8]
 80090d6:	4680      	mov	r8, r0
 80090d8:	4648      	mov	r0, r9
 80090da:	f000 fb51 	bl	8009780 <_Bfree>
 80090de:	9b08      	ldr	r3, [sp, #32]
 80090e0:	1b1b      	subs	r3, r3, r4
 80090e2:	9308      	str	r3, [sp, #32]
 80090e4:	f000 80b1 	beq.w	800924a <_dtoa_r+0x8ea>
 80090e8:	9a08      	ldr	r2, [sp, #32]
 80090ea:	4641      	mov	r1, r8
 80090ec:	4648      	mov	r0, r9
 80090ee:	f000 fcfd 	bl	8009aec <__pow5mult>
 80090f2:	9002      	str	r0, [sp, #8]
 80090f4:	2101      	movs	r1, #1
 80090f6:	4648      	mov	r0, r9
 80090f8:	f000 fc40 	bl	800997c <__i2b>
 80090fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090fe:	4604      	mov	r4, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 81d8 	beq.w	80094b6 <_dtoa_r+0xb56>
 8009106:	461a      	mov	r2, r3
 8009108:	4601      	mov	r1, r0
 800910a:	4648      	mov	r0, r9
 800910c:	f000 fcee 	bl	8009aec <__pow5mult>
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	2b01      	cmp	r3, #1
 8009114:	4604      	mov	r4, r0
 8009116:	f300 809f 	bgt.w	8009258 <_dtoa_r+0x8f8>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f040 8097 	bne.w	8009250 <_dtoa_r+0x8f0>
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009128:	2b00      	cmp	r3, #0
 800912a:	f040 8093 	bne.w	8009254 <_dtoa_r+0x8f4>
 800912e:	9b05      	ldr	r3, [sp, #20]
 8009130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009134:	0d1b      	lsrs	r3, r3, #20
 8009136:	051b      	lsls	r3, r3, #20
 8009138:	b133      	cbz	r3, 8009148 <_dtoa_r+0x7e8>
 800913a:	9b00      	ldr	r3, [sp, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	3301      	adds	r3, #1
 8009144:	9306      	str	r3, [sp, #24]
 8009146:	2301      	movs	r3, #1
 8009148:	9308      	str	r3, [sp, #32]
 800914a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 81b8 	beq.w	80094c2 <_dtoa_r+0xb62>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009158:	6918      	ldr	r0, [r3, #16]
 800915a:	f000 fbc3 	bl	80098e4 <__hi0bits>
 800915e:	f1c0 0020 	rsb	r0, r0, #32
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	4418      	add	r0, r3
 8009166:	f010 001f 	ands.w	r0, r0, #31
 800916a:	f000 8082 	beq.w	8009272 <_dtoa_r+0x912>
 800916e:	f1c0 0320 	rsb	r3, r0, #32
 8009172:	2b04      	cmp	r3, #4
 8009174:	dd73      	ble.n	800925e <_dtoa_r+0x8fe>
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	f1c0 001c 	rsb	r0, r0, #28
 800917c:	4403      	add	r3, r0
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	4403      	add	r3, r0
 8009184:	4406      	add	r6, r0
 8009186:	9306      	str	r3, [sp, #24]
 8009188:	9b00      	ldr	r3, [sp, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	dd05      	ble.n	800919a <_dtoa_r+0x83a>
 800918e:	9902      	ldr	r1, [sp, #8]
 8009190:	461a      	mov	r2, r3
 8009192:	4648      	mov	r0, r9
 8009194:	f000 fd04 	bl	8009ba0 <__lshift>
 8009198:	9002      	str	r0, [sp, #8]
 800919a:	9b06      	ldr	r3, [sp, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	dd05      	ble.n	80091ac <_dtoa_r+0x84c>
 80091a0:	4621      	mov	r1, r4
 80091a2:	461a      	mov	r2, r3
 80091a4:	4648      	mov	r0, r9
 80091a6:	f000 fcfb 	bl	8009ba0 <__lshift>
 80091aa:	4604      	mov	r4, r0
 80091ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d061      	beq.n	8009276 <_dtoa_r+0x916>
 80091b2:	9802      	ldr	r0, [sp, #8]
 80091b4:	4621      	mov	r1, r4
 80091b6:	f000 fd5f 	bl	8009c78 <__mcmp>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	da5b      	bge.n	8009276 <_dtoa_r+0x916>
 80091be:	2300      	movs	r3, #0
 80091c0:	9902      	ldr	r1, [sp, #8]
 80091c2:	220a      	movs	r2, #10
 80091c4:	4648      	mov	r0, r9
 80091c6:	f000 fafd 	bl	80097c4 <__multadd>
 80091ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091cc:	9002      	str	r0, [sp, #8]
 80091ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8177 	beq.w	80094c6 <_dtoa_r+0xb66>
 80091d8:	4629      	mov	r1, r5
 80091da:	2300      	movs	r3, #0
 80091dc:	220a      	movs	r2, #10
 80091de:	4648      	mov	r0, r9
 80091e0:	f000 faf0 	bl	80097c4 <__multadd>
 80091e4:	f1bb 0f00 	cmp.w	fp, #0
 80091e8:	4605      	mov	r5, r0
 80091ea:	dc6f      	bgt.n	80092cc <_dtoa_r+0x96c>
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	dc49      	bgt.n	8009286 <_dtoa_r+0x926>
 80091f2:	e06b      	b.n	80092cc <_dtoa_r+0x96c>
 80091f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091fa:	e73c      	b.n	8009076 <_dtoa_r+0x716>
 80091fc:	3fe00000 	.word	0x3fe00000
 8009200:	40240000 	.word	0x40240000
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	1e5c      	subs	r4, r3, #1
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	42a3      	cmp	r3, r4
 800920c:	db09      	blt.n	8009222 <_dtoa_r+0x8c2>
 800920e:	1b1c      	subs	r4, r3, r4
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f6bf af30 	bge.w	8009078 <_dtoa_r+0x718>
 8009218:	9b00      	ldr	r3, [sp, #0]
 800921a:	9a03      	ldr	r2, [sp, #12]
 800921c:	1a9e      	subs	r6, r3, r2
 800921e:	2300      	movs	r3, #0
 8009220:	e72b      	b.n	800907a <_dtoa_r+0x71a>
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009226:	9408      	str	r4, [sp, #32]
 8009228:	1ae3      	subs	r3, r4, r3
 800922a:	441a      	add	r2, r3
 800922c:	9e00      	ldr	r6, [sp, #0]
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	920d      	str	r2, [sp, #52]	@ 0x34
 8009232:	2400      	movs	r4, #0
 8009234:	e721      	b.n	800907a <_dtoa_r+0x71a>
 8009236:	9c08      	ldr	r4, [sp, #32]
 8009238:	9e00      	ldr	r6, [sp, #0]
 800923a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800923c:	e728      	b.n	8009090 <_dtoa_r+0x730>
 800923e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009242:	e751      	b.n	80090e8 <_dtoa_r+0x788>
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	9902      	ldr	r1, [sp, #8]
 8009248:	e750      	b.n	80090ec <_dtoa_r+0x78c>
 800924a:	f8cd 8008 	str.w	r8, [sp, #8]
 800924e:	e751      	b.n	80090f4 <_dtoa_r+0x794>
 8009250:	2300      	movs	r3, #0
 8009252:	e779      	b.n	8009148 <_dtoa_r+0x7e8>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	e777      	b.n	8009148 <_dtoa_r+0x7e8>
 8009258:	2300      	movs	r3, #0
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	e779      	b.n	8009152 <_dtoa_r+0x7f2>
 800925e:	d093      	beq.n	8009188 <_dtoa_r+0x828>
 8009260:	9a00      	ldr	r2, [sp, #0]
 8009262:	331c      	adds	r3, #28
 8009264:	441a      	add	r2, r3
 8009266:	9200      	str	r2, [sp, #0]
 8009268:	9a06      	ldr	r2, [sp, #24]
 800926a:	441a      	add	r2, r3
 800926c:	441e      	add	r6, r3
 800926e:	9206      	str	r2, [sp, #24]
 8009270:	e78a      	b.n	8009188 <_dtoa_r+0x828>
 8009272:	4603      	mov	r3, r0
 8009274:	e7f4      	b.n	8009260 <_dtoa_r+0x900>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	46b8      	mov	r8, r7
 800927c:	dc20      	bgt.n	80092c0 <_dtoa_r+0x960>
 800927e:	469b      	mov	fp, r3
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	2b02      	cmp	r3, #2
 8009284:	dd1e      	ble.n	80092c4 <_dtoa_r+0x964>
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	f47f adb1 	bne.w	8008df0 <_dtoa_r+0x490>
 800928e:	4621      	mov	r1, r4
 8009290:	465b      	mov	r3, fp
 8009292:	2205      	movs	r2, #5
 8009294:	4648      	mov	r0, r9
 8009296:	f000 fa95 	bl	80097c4 <__multadd>
 800929a:	4601      	mov	r1, r0
 800929c:	4604      	mov	r4, r0
 800929e:	9802      	ldr	r0, [sp, #8]
 80092a0:	f000 fcea 	bl	8009c78 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f77f ada3 	ble.w	8008df0 <_dtoa_r+0x490>
 80092aa:	4656      	mov	r6, sl
 80092ac:	2331      	movs	r3, #49	@ 0x31
 80092ae:	f806 3b01 	strb.w	r3, [r6], #1
 80092b2:	f108 0801 	add.w	r8, r8, #1
 80092b6:	e59f      	b.n	8008df8 <_dtoa_r+0x498>
 80092b8:	9c03      	ldr	r4, [sp, #12]
 80092ba:	46b8      	mov	r8, r7
 80092bc:	4625      	mov	r5, r4
 80092be:	e7f4      	b.n	80092aa <_dtoa_r+0x94a>
 80092c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80092c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8101 	beq.w	80094ce <_dtoa_r+0xb6e>
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	dd05      	ble.n	80092dc <_dtoa_r+0x97c>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4632      	mov	r2, r6
 80092d4:	4648      	mov	r0, r9
 80092d6:	f000 fc63 	bl	8009ba0 <__lshift>
 80092da:	4605      	mov	r5, r0
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d05c      	beq.n	800939c <_dtoa_r+0xa3c>
 80092e2:	6869      	ldr	r1, [r5, #4]
 80092e4:	4648      	mov	r0, r9
 80092e6:	f000 fa0b 	bl	8009700 <_Balloc>
 80092ea:	4606      	mov	r6, r0
 80092ec:	b928      	cbnz	r0, 80092fa <_dtoa_r+0x99a>
 80092ee:	4b82      	ldr	r3, [pc, #520]	@ (80094f8 <_dtoa_r+0xb98>)
 80092f0:	4602      	mov	r2, r0
 80092f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092f6:	f7ff bb4a 	b.w	800898e <_dtoa_r+0x2e>
 80092fa:	692a      	ldr	r2, [r5, #16]
 80092fc:	3202      	adds	r2, #2
 80092fe:	0092      	lsls	r2, r2, #2
 8009300:	f105 010c 	add.w	r1, r5, #12
 8009304:	300c      	adds	r0, #12
 8009306:	f002 f93f 	bl	800b588 <memcpy>
 800930a:	2201      	movs	r2, #1
 800930c:	4631      	mov	r1, r6
 800930e:	4648      	mov	r0, r9
 8009310:	f000 fc46 	bl	8009ba0 <__lshift>
 8009314:	f10a 0301 	add.w	r3, sl, #1
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	eb0a 030b 	add.w	r3, sl, fp
 800931e:	9308      	str	r3, [sp, #32]
 8009320:	9b04      	ldr	r3, [sp, #16]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	462f      	mov	r7, r5
 8009328:	9306      	str	r3, [sp, #24]
 800932a:	4605      	mov	r5, r0
 800932c:	9b00      	ldr	r3, [sp, #0]
 800932e:	9802      	ldr	r0, [sp, #8]
 8009330:	4621      	mov	r1, r4
 8009332:	f103 3bff 	add.w	fp, r3, #4294967295
 8009336:	f7ff fa89 	bl	800884c <quorem>
 800933a:	4603      	mov	r3, r0
 800933c:	3330      	adds	r3, #48	@ 0x30
 800933e:	9003      	str	r0, [sp, #12]
 8009340:	4639      	mov	r1, r7
 8009342:	9802      	ldr	r0, [sp, #8]
 8009344:	9309      	str	r3, [sp, #36]	@ 0x24
 8009346:	f000 fc97 	bl	8009c78 <__mcmp>
 800934a:	462a      	mov	r2, r5
 800934c:	9004      	str	r0, [sp, #16]
 800934e:	4621      	mov	r1, r4
 8009350:	4648      	mov	r0, r9
 8009352:	f000 fcad 	bl	8009cb0 <__mdiff>
 8009356:	68c2      	ldr	r2, [r0, #12]
 8009358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800935a:	4606      	mov	r6, r0
 800935c:	bb02      	cbnz	r2, 80093a0 <_dtoa_r+0xa40>
 800935e:	4601      	mov	r1, r0
 8009360:	9802      	ldr	r0, [sp, #8]
 8009362:	f000 fc89 	bl	8009c78 <__mcmp>
 8009366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009368:	4602      	mov	r2, r0
 800936a:	4631      	mov	r1, r6
 800936c:	4648      	mov	r0, r9
 800936e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009370:	9309      	str	r3, [sp, #36]	@ 0x24
 8009372:	f000 fa05 	bl	8009780 <_Bfree>
 8009376:	9b07      	ldr	r3, [sp, #28]
 8009378:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800937a:	9e00      	ldr	r6, [sp, #0]
 800937c:	ea42 0103 	orr.w	r1, r2, r3
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	4319      	orrs	r1, r3
 8009384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009386:	d10d      	bne.n	80093a4 <_dtoa_r+0xa44>
 8009388:	2b39      	cmp	r3, #57	@ 0x39
 800938a:	d027      	beq.n	80093dc <_dtoa_r+0xa7c>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	2a00      	cmp	r2, #0
 8009390:	dd01      	ble.n	8009396 <_dtoa_r+0xa36>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	3331      	adds	r3, #49	@ 0x31
 8009396:	f88b 3000 	strb.w	r3, [fp]
 800939a:	e52e      	b.n	8008dfa <_dtoa_r+0x49a>
 800939c:	4628      	mov	r0, r5
 800939e:	e7b9      	b.n	8009314 <_dtoa_r+0x9b4>
 80093a0:	2201      	movs	r2, #1
 80093a2:	e7e2      	b.n	800936a <_dtoa_r+0xa0a>
 80093a4:	9904      	ldr	r1, [sp, #16]
 80093a6:	2900      	cmp	r1, #0
 80093a8:	db04      	blt.n	80093b4 <_dtoa_r+0xa54>
 80093aa:	9807      	ldr	r0, [sp, #28]
 80093ac:	4301      	orrs	r1, r0
 80093ae:	9806      	ldr	r0, [sp, #24]
 80093b0:	4301      	orrs	r1, r0
 80093b2:	d120      	bne.n	80093f6 <_dtoa_r+0xa96>
 80093b4:	2a00      	cmp	r2, #0
 80093b6:	ddee      	ble.n	8009396 <_dtoa_r+0xa36>
 80093b8:	9902      	ldr	r1, [sp, #8]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2201      	movs	r2, #1
 80093be:	4648      	mov	r0, r9
 80093c0:	f000 fbee 	bl	8009ba0 <__lshift>
 80093c4:	4621      	mov	r1, r4
 80093c6:	9002      	str	r0, [sp, #8]
 80093c8:	f000 fc56 	bl	8009c78 <__mcmp>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	dc02      	bgt.n	80093d8 <_dtoa_r+0xa78>
 80093d2:	d1e0      	bne.n	8009396 <_dtoa_r+0xa36>
 80093d4:	07da      	lsls	r2, r3, #31
 80093d6:	d5de      	bpl.n	8009396 <_dtoa_r+0xa36>
 80093d8:	2b39      	cmp	r3, #57	@ 0x39
 80093da:	d1da      	bne.n	8009392 <_dtoa_r+0xa32>
 80093dc:	2339      	movs	r3, #57	@ 0x39
 80093de:	f88b 3000 	strb.w	r3, [fp]
 80093e2:	4633      	mov	r3, r6
 80093e4:	461e      	mov	r6, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093ec:	2a39      	cmp	r2, #57	@ 0x39
 80093ee:	d04e      	beq.n	800948e <_dtoa_r+0xb2e>
 80093f0:	3201      	adds	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
 80093f4:	e501      	b.n	8008dfa <_dtoa_r+0x49a>
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	dd03      	ble.n	8009402 <_dtoa_r+0xaa2>
 80093fa:	2b39      	cmp	r3, #57	@ 0x39
 80093fc:	d0ee      	beq.n	80093dc <_dtoa_r+0xa7c>
 80093fe:	3301      	adds	r3, #1
 8009400:	e7c9      	b.n	8009396 <_dtoa_r+0xa36>
 8009402:	9a00      	ldr	r2, [sp, #0]
 8009404:	9908      	ldr	r1, [sp, #32]
 8009406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800940a:	428a      	cmp	r2, r1
 800940c:	d028      	beq.n	8009460 <_dtoa_r+0xb00>
 800940e:	9902      	ldr	r1, [sp, #8]
 8009410:	2300      	movs	r3, #0
 8009412:	220a      	movs	r2, #10
 8009414:	4648      	mov	r0, r9
 8009416:	f000 f9d5 	bl	80097c4 <__multadd>
 800941a:	42af      	cmp	r7, r5
 800941c:	9002      	str	r0, [sp, #8]
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	f04f 020a 	mov.w	r2, #10
 8009426:	4639      	mov	r1, r7
 8009428:	4648      	mov	r0, r9
 800942a:	d107      	bne.n	800943c <_dtoa_r+0xadc>
 800942c:	f000 f9ca 	bl	80097c4 <__multadd>
 8009430:	4607      	mov	r7, r0
 8009432:	4605      	mov	r5, r0
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	3301      	adds	r3, #1
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	e777      	b.n	800932c <_dtoa_r+0x9cc>
 800943c:	f000 f9c2 	bl	80097c4 <__multadd>
 8009440:	4629      	mov	r1, r5
 8009442:	4607      	mov	r7, r0
 8009444:	2300      	movs	r3, #0
 8009446:	220a      	movs	r2, #10
 8009448:	4648      	mov	r0, r9
 800944a:	f000 f9bb 	bl	80097c4 <__multadd>
 800944e:	4605      	mov	r5, r0
 8009450:	e7f0      	b.n	8009434 <_dtoa_r+0xad4>
 8009452:	f1bb 0f00 	cmp.w	fp, #0
 8009456:	bfcc      	ite	gt
 8009458:	465e      	movgt	r6, fp
 800945a:	2601      	movle	r6, #1
 800945c:	4456      	add	r6, sl
 800945e:	2700      	movs	r7, #0
 8009460:	9902      	ldr	r1, [sp, #8]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	2201      	movs	r2, #1
 8009466:	4648      	mov	r0, r9
 8009468:	f000 fb9a 	bl	8009ba0 <__lshift>
 800946c:	4621      	mov	r1, r4
 800946e:	9002      	str	r0, [sp, #8]
 8009470:	f000 fc02 	bl	8009c78 <__mcmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	dcb4      	bgt.n	80093e2 <_dtoa_r+0xa82>
 8009478:	d102      	bne.n	8009480 <_dtoa_r+0xb20>
 800947a:	9b00      	ldr	r3, [sp, #0]
 800947c:	07db      	lsls	r3, r3, #31
 800947e:	d4b0      	bmi.n	80093e2 <_dtoa_r+0xa82>
 8009480:	4633      	mov	r3, r6
 8009482:	461e      	mov	r6, r3
 8009484:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009488:	2a30      	cmp	r2, #48	@ 0x30
 800948a:	d0fa      	beq.n	8009482 <_dtoa_r+0xb22>
 800948c:	e4b5      	b.n	8008dfa <_dtoa_r+0x49a>
 800948e:	459a      	cmp	sl, r3
 8009490:	d1a8      	bne.n	80093e4 <_dtoa_r+0xa84>
 8009492:	2331      	movs	r3, #49	@ 0x31
 8009494:	f108 0801 	add.w	r8, r8, #1
 8009498:	f88a 3000 	strb.w	r3, [sl]
 800949c:	e4ad      	b.n	8008dfa <_dtoa_r+0x49a>
 800949e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80094fc <_dtoa_r+0xb9c>
 80094a4:	b11b      	cbz	r3, 80094ae <_dtoa_r+0xb4e>
 80094a6:	f10a 0308 	add.w	r3, sl, #8
 80094aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	4650      	mov	r0, sl
 80094b0:	b017      	add	sp, #92	@ 0x5c
 80094b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	f77f ae2e 	ble.w	800911a <_dtoa_r+0x7ba>
 80094be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094c0:	9308      	str	r3, [sp, #32]
 80094c2:	2001      	movs	r0, #1
 80094c4:	e64d      	b.n	8009162 <_dtoa_r+0x802>
 80094c6:	f1bb 0f00 	cmp.w	fp, #0
 80094ca:	f77f aed9 	ble.w	8009280 <_dtoa_r+0x920>
 80094ce:	4656      	mov	r6, sl
 80094d0:	9802      	ldr	r0, [sp, #8]
 80094d2:	4621      	mov	r1, r4
 80094d4:	f7ff f9ba 	bl	800884c <quorem>
 80094d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80094dc:	f806 3b01 	strb.w	r3, [r6], #1
 80094e0:	eba6 020a 	sub.w	r2, r6, sl
 80094e4:	4593      	cmp	fp, r2
 80094e6:	ddb4      	ble.n	8009452 <_dtoa_r+0xaf2>
 80094e8:	9902      	ldr	r1, [sp, #8]
 80094ea:	2300      	movs	r3, #0
 80094ec:	220a      	movs	r2, #10
 80094ee:	4648      	mov	r0, r9
 80094f0:	f000 f968 	bl	80097c4 <__multadd>
 80094f4:	9002      	str	r0, [sp, #8]
 80094f6:	e7eb      	b.n	80094d0 <_dtoa_r+0xb70>
 80094f8:	0800c061 	.word	0x0800c061
 80094fc:	0800bfe5 	.word	0x0800bfe5

08009500 <_free_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	2900      	cmp	r1, #0
 8009506:	d041      	beq.n	800958c <_free_r+0x8c>
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f0c      	subs	r4, r1, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfb8      	it	lt
 8009512:	18e4      	addlt	r4, r4, r3
 8009514:	f000 f8e8 	bl	80096e8 <__malloc_lock>
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <_free_r+0x90>)
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	b933      	cbnz	r3, 800952c <_free_r+0x2c>
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	6014      	str	r4, [r2, #0]
 8009522:	4628      	mov	r0, r5
 8009524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009528:	f000 b8e4 	b.w	80096f4 <__malloc_unlock>
 800952c:	42a3      	cmp	r3, r4
 800952e:	d908      	bls.n	8009542 <_free_r+0x42>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	1821      	adds	r1, r4, r0
 8009534:	428b      	cmp	r3, r1
 8009536:	bf01      	itttt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	1809      	addeq	r1, r1, r0
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	e7ed      	b.n	800951e <_free_r+0x1e>
 8009542:	461a      	mov	r2, r3
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	b10b      	cbz	r3, 800954c <_free_r+0x4c>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x42>
 800954c:	6811      	ldr	r1, [r2, #0]
 800954e:	1850      	adds	r0, r2, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x6c>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1850      	adds	r0, r2, r1
 800955a:	4283      	cmp	r3, r0
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	d1e0      	bne.n	8009522 <_free_r+0x22>
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	6053      	str	r3, [r2, #4]
 8009566:	4408      	add	r0, r1
 8009568:	6010      	str	r0, [r2, #0]
 800956a:	e7da      	b.n	8009522 <_free_r+0x22>
 800956c:	d902      	bls.n	8009574 <_free_r+0x74>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d6      	b.n	8009522 <_free_r+0x22>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428b      	cmp	r3, r1
 800957a:	bf04      	itt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	6054      	str	r4, [r2, #4]
 800958a:	e7ca      	b.n	8009522 <_free_r+0x22>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	20000600 	.word	0x20000600

08009594 <malloc>:
 8009594:	4b02      	ldr	r3, [pc, #8]	@ (80095a0 <malloc+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f000 b825 	b.w	80095e8 <_malloc_r>
 800959e:	bf00      	nop
 80095a0:	20000020 	.word	0x20000020

080095a4 <sbrk_aligned>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4e0f      	ldr	r6, [pc, #60]	@ (80095e4 <sbrk_aligned+0x40>)
 80095a8:	460c      	mov	r4, r1
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b911      	cbnz	r1, 80095b6 <sbrk_aligned+0x12>
 80095b0:	f001 ffda 	bl	800b568 <_sbrk_r>
 80095b4:	6030      	str	r0, [r6, #0]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f001 ffd5 	bl	800b568 <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d103      	bne.n	80095ca <sbrk_aligned+0x26>
 80095c2:	f04f 34ff 	mov.w	r4, #4294967295
 80095c6:	4620      	mov	r0, r4
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	1cc4      	adds	r4, r0, #3
 80095cc:	f024 0403 	bic.w	r4, r4, #3
 80095d0:	42a0      	cmp	r0, r4
 80095d2:	d0f8      	beq.n	80095c6 <sbrk_aligned+0x22>
 80095d4:	1a21      	subs	r1, r4, r0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f001 ffc6 	bl	800b568 <_sbrk_r>
 80095dc:	3001      	adds	r0, #1
 80095de:	d1f2      	bne.n	80095c6 <sbrk_aligned+0x22>
 80095e0:	e7ef      	b.n	80095c2 <sbrk_aligned+0x1e>
 80095e2:	bf00      	nop
 80095e4:	200005fc 	.word	0x200005fc

080095e8 <_malloc_r>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	1ccd      	adds	r5, r1, #3
 80095ee:	f025 0503 	bic.w	r5, r5, #3
 80095f2:	3508      	adds	r5, #8
 80095f4:	2d0c      	cmp	r5, #12
 80095f6:	bf38      	it	cc
 80095f8:	250c      	movcc	r5, #12
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	db01      	blt.n	8009604 <_malloc_r+0x1c>
 8009600:	42a9      	cmp	r1, r5
 8009602:	d904      	bls.n	800960e <_malloc_r+0x26>
 8009604:	230c      	movs	r3, #12
 8009606:	6033      	str	r3, [r6, #0]
 8009608:	2000      	movs	r0, #0
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096e4 <_malloc_r+0xfc>
 8009612:	f000 f869 	bl	80096e8 <__malloc_lock>
 8009616:	f8d8 3000 	ldr.w	r3, [r8]
 800961a:	461c      	mov	r4, r3
 800961c:	bb44      	cbnz	r4, 8009670 <_malloc_r+0x88>
 800961e:	4629      	mov	r1, r5
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffbf 	bl	80095a4 <sbrk_aligned>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	4604      	mov	r4, r0
 800962a:	d158      	bne.n	80096de <_malloc_r+0xf6>
 800962c:	f8d8 4000 	ldr.w	r4, [r8]
 8009630:	4627      	mov	r7, r4
 8009632:	2f00      	cmp	r7, #0
 8009634:	d143      	bne.n	80096be <_malloc_r+0xd6>
 8009636:	2c00      	cmp	r4, #0
 8009638:	d04b      	beq.n	80096d2 <_malloc_r+0xea>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	4639      	mov	r1, r7
 800963e:	4630      	mov	r0, r6
 8009640:	eb04 0903 	add.w	r9, r4, r3
 8009644:	f001 ff90 	bl	800b568 <_sbrk_r>
 8009648:	4581      	cmp	r9, r0
 800964a:	d142      	bne.n	80096d2 <_malloc_r+0xea>
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	1a6d      	subs	r5, r5, r1
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ffa6 	bl	80095a4 <sbrk_aligned>
 8009658:	3001      	adds	r0, #1
 800965a:	d03a      	beq.n	80096d2 <_malloc_r+0xea>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	442b      	add	r3, r5
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	f8d8 3000 	ldr.w	r3, [r8]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	bb62      	cbnz	r2, 80096c4 <_malloc_r+0xdc>
 800966a:	f8c8 7000 	str.w	r7, [r8]
 800966e:	e00f      	b.n	8009690 <_malloc_r+0xa8>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	d420      	bmi.n	80096b8 <_malloc_r+0xd0>
 8009676:	2a0b      	cmp	r2, #11
 8009678:	d917      	bls.n	80096aa <_malloc_r+0xc2>
 800967a:	1961      	adds	r1, r4, r5
 800967c:	42a3      	cmp	r3, r4
 800967e:	6025      	str	r5, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	6059      	strne	r1, [r3, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	bf08      	it	eq
 8009688:	f8c8 1000 	streq.w	r1, [r8]
 800968c:	5162      	str	r2, [r4, r5]
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f82f 	bl	80096f4 <__malloc_unlock>
 8009696:	f104 000b 	add.w	r0, r4, #11
 800969a:	1d23      	adds	r3, r4, #4
 800969c:	f020 0007 	bic.w	r0, r0, #7
 80096a0:	1ac2      	subs	r2, r0, r3
 80096a2:	bf1c      	itt	ne
 80096a4:	1a1b      	subne	r3, r3, r0
 80096a6:	50a3      	strne	r3, [r4, r2]
 80096a8:	e7af      	b.n	800960a <_malloc_r+0x22>
 80096aa:	6862      	ldr	r2, [r4, #4]
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	bf0c      	ite	eq
 80096b0:	f8c8 2000 	streq.w	r2, [r8]
 80096b4:	605a      	strne	r2, [r3, #4]
 80096b6:	e7eb      	b.n	8009690 <_malloc_r+0xa8>
 80096b8:	4623      	mov	r3, r4
 80096ba:	6864      	ldr	r4, [r4, #4]
 80096bc:	e7ae      	b.n	800961c <_malloc_r+0x34>
 80096be:	463c      	mov	r4, r7
 80096c0:	687f      	ldr	r7, [r7, #4]
 80096c2:	e7b6      	b.n	8009632 <_malloc_r+0x4a>
 80096c4:	461a      	mov	r2, r3
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d1fb      	bne.n	80096c4 <_malloc_r+0xdc>
 80096cc:	2300      	movs	r3, #0
 80096ce:	6053      	str	r3, [r2, #4]
 80096d0:	e7de      	b.n	8009690 <_malloc_r+0xa8>
 80096d2:	230c      	movs	r3, #12
 80096d4:	6033      	str	r3, [r6, #0]
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 f80c 	bl	80096f4 <__malloc_unlock>
 80096dc:	e794      	b.n	8009608 <_malloc_r+0x20>
 80096de:	6005      	str	r5, [r0, #0]
 80096e0:	e7d6      	b.n	8009690 <_malloc_r+0xa8>
 80096e2:	bf00      	nop
 80096e4:	20000600 	.word	0x20000600

080096e8 <__malloc_lock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	@ (80096f0 <__malloc_lock+0x8>)
 80096ea:	f7ff b8a6 	b.w	800883a <__retarget_lock_acquire_recursive>
 80096ee:	bf00      	nop
 80096f0:	200005f8 	.word	0x200005f8

080096f4 <__malloc_unlock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	@ (80096fc <__malloc_unlock+0x8>)
 80096f6:	f7ff b8a1 	b.w	800883c <__retarget_lock_release_recursive>
 80096fa:	bf00      	nop
 80096fc:	200005f8 	.word	0x200005f8

08009700 <_Balloc>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Balloc+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff42 	bl	8009594 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e0      	str	r0, [r4, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Balloc+0x20>
 8009716:	4b18      	ldr	r3, [pc, #96]	@ (8009778 <_Balloc+0x78>)
 8009718:	4818      	ldr	r0, [pc, #96]	@ (800977c <_Balloc+0x7c>)
 800971a:	216b      	movs	r1, #107	@ 0x6b
 800971c:	f001 ff4c 	bl	800b5b8 <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	69e6      	ldr	r6, [r4, #28]
 800972a:	68f3      	ldr	r3, [r6, #12]
 800972c:	b183      	cbz	r3, 8009750 <_Balloc+0x50>
 800972e:	69e3      	ldr	r3, [r4, #28]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009736:	b9b8      	cbnz	r0, 8009768 <_Balloc+0x68>
 8009738:	2101      	movs	r1, #1
 800973a:	fa01 f605 	lsl.w	r6, r1, r5
 800973e:	1d72      	adds	r2, r6, #5
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	4620      	mov	r0, r4
 8009744:	f001 ff56 	bl	800b5f4 <_calloc_r>
 8009748:	b160      	cbz	r0, 8009764 <_Balloc+0x64>
 800974a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800974e:	e00e      	b.n	800976e <_Balloc+0x6e>
 8009750:	2221      	movs	r2, #33	@ 0x21
 8009752:	2104      	movs	r1, #4
 8009754:	4620      	mov	r0, r4
 8009756:	f001 ff4d 	bl	800b5f4 <_calloc_r>
 800975a:	69e3      	ldr	r3, [r4, #28]
 800975c:	60f0      	str	r0, [r6, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <_Balloc+0x2e>
 8009764:	2000      	movs	r0, #0
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	6802      	ldr	r2, [r0, #0]
 800976a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800976e:	2300      	movs	r3, #0
 8009770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009774:	e7f7      	b.n	8009766 <_Balloc+0x66>
 8009776:	bf00      	nop
 8009778:	0800bff2 	.word	0x0800bff2
 800977c:	0800c072 	.word	0x0800c072

08009780 <_Bfree>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	69c6      	ldr	r6, [r0, #28]
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b976      	cbnz	r6, 80097a8 <_Bfree+0x28>
 800978a:	2010      	movs	r0, #16
 800978c:	f7ff ff02 	bl	8009594 <malloc>
 8009790:	4602      	mov	r2, r0
 8009792:	61e8      	str	r0, [r5, #28]
 8009794:	b920      	cbnz	r0, 80097a0 <_Bfree+0x20>
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <_Bfree+0x3c>)
 8009798:	4809      	ldr	r0, [pc, #36]	@ (80097c0 <_Bfree+0x40>)
 800979a:	218f      	movs	r1, #143	@ 0x8f
 800979c:	f001 ff0c 	bl	800b5b8 <__assert_func>
 80097a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a4:	6006      	str	r6, [r0, #0]
 80097a6:	60c6      	str	r6, [r0, #12]
 80097a8:	b13c      	cbz	r4, 80097ba <_Bfree+0x3a>
 80097aa:	69eb      	ldr	r3, [r5, #28]
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b4:	6021      	str	r1, [r4, #0]
 80097b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0800bff2 	.word	0x0800bff2
 80097c0:	0800c072 	.word	0x0800c072

080097c4 <__multadd>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	690d      	ldr	r5, [r1, #16]
 80097ca:	4607      	mov	r7, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	461e      	mov	r6, r3
 80097d0:	f101 0c14 	add.w	ip, r1, #20
 80097d4:	2000      	movs	r0, #0
 80097d6:	f8dc 3000 	ldr.w	r3, [ip]
 80097da:	b299      	uxth	r1, r3
 80097dc:	fb02 6101 	mla	r1, r2, r1, r6
 80097e0:	0c1e      	lsrs	r6, r3, #16
 80097e2:	0c0b      	lsrs	r3, r1, #16
 80097e4:	fb02 3306 	mla	r3, r2, r6, r3
 80097e8:	b289      	uxth	r1, r1
 80097ea:	3001      	adds	r0, #1
 80097ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097f0:	4285      	cmp	r5, r0
 80097f2:	f84c 1b04 	str.w	r1, [ip], #4
 80097f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097fa:	dcec      	bgt.n	80097d6 <__multadd+0x12>
 80097fc:	b30e      	cbz	r6, 8009842 <__multadd+0x7e>
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	42ab      	cmp	r3, r5
 8009802:	dc19      	bgt.n	8009838 <__multadd+0x74>
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	4638      	mov	r0, r7
 8009808:	3101      	adds	r1, #1
 800980a:	f7ff ff79 	bl	8009700 <_Balloc>
 800980e:	4680      	mov	r8, r0
 8009810:	b928      	cbnz	r0, 800981e <__multadd+0x5a>
 8009812:	4602      	mov	r2, r0
 8009814:	4b0c      	ldr	r3, [pc, #48]	@ (8009848 <__multadd+0x84>)
 8009816:	480d      	ldr	r0, [pc, #52]	@ (800984c <__multadd+0x88>)
 8009818:	21ba      	movs	r1, #186	@ 0xba
 800981a:	f001 fecd 	bl	800b5b8 <__assert_func>
 800981e:	6922      	ldr	r2, [r4, #16]
 8009820:	3202      	adds	r2, #2
 8009822:	f104 010c 	add.w	r1, r4, #12
 8009826:	0092      	lsls	r2, r2, #2
 8009828:	300c      	adds	r0, #12
 800982a:	f001 fead 	bl	800b588 <memcpy>
 800982e:	4621      	mov	r1, r4
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff ffa5 	bl	8009780 <_Bfree>
 8009836:	4644      	mov	r4, r8
 8009838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800983c:	3501      	adds	r5, #1
 800983e:	615e      	str	r6, [r3, #20]
 8009840:	6125      	str	r5, [r4, #16]
 8009842:	4620      	mov	r0, r4
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	0800c061 	.word	0x0800c061
 800984c:	0800c072 	.word	0x0800c072

08009850 <__s2b>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	460c      	mov	r4, r1
 8009856:	4615      	mov	r5, r2
 8009858:	461f      	mov	r7, r3
 800985a:	2209      	movs	r2, #9
 800985c:	3308      	adds	r3, #8
 800985e:	4606      	mov	r6, r0
 8009860:	fb93 f3f2 	sdiv	r3, r3, r2
 8009864:	2100      	movs	r1, #0
 8009866:	2201      	movs	r2, #1
 8009868:	429a      	cmp	r2, r3
 800986a:	db09      	blt.n	8009880 <__s2b+0x30>
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff ff47 	bl	8009700 <_Balloc>
 8009872:	b940      	cbnz	r0, 8009886 <__s2b+0x36>
 8009874:	4602      	mov	r2, r0
 8009876:	4b19      	ldr	r3, [pc, #100]	@ (80098dc <__s2b+0x8c>)
 8009878:	4819      	ldr	r0, [pc, #100]	@ (80098e0 <__s2b+0x90>)
 800987a:	21d3      	movs	r1, #211	@ 0xd3
 800987c:	f001 fe9c 	bl	800b5b8 <__assert_func>
 8009880:	0052      	lsls	r2, r2, #1
 8009882:	3101      	adds	r1, #1
 8009884:	e7f0      	b.n	8009868 <__s2b+0x18>
 8009886:	9b08      	ldr	r3, [sp, #32]
 8009888:	6143      	str	r3, [r0, #20]
 800988a:	2d09      	cmp	r5, #9
 800988c:	f04f 0301 	mov.w	r3, #1
 8009890:	6103      	str	r3, [r0, #16]
 8009892:	dd16      	ble.n	80098c2 <__s2b+0x72>
 8009894:	f104 0909 	add.w	r9, r4, #9
 8009898:	46c8      	mov	r8, r9
 800989a:	442c      	add	r4, r5
 800989c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098a0:	4601      	mov	r1, r0
 80098a2:	3b30      	subs	r3, #48	@ 0x30
 80098a4:	220a      	movs	r2, #10
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff8c 	bl	80097c4 <__multadd>
 80098ac:	45a0      	cmp	r8, r4
 80098ae:	d1f5      	bne.n	800989c <__s2b+0x4c>
 80098b0:	f1a5 0408 	sub.w	r4, r5, #8
 80098b4:	444c      	add	r4, r9
 80098b6:	1b2d      	subs	r5, r5, r4
 80098b8:	1963      	adds	r3, r4, r5
 80098ba:	42bb      	cmp	r3, r7
 80098bc:	db04      	blt.n	80098c8 <__s2b+0x78>
 80098be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c2:	340a      	adds	r4, #10
 80098c4:	2509      	movs	r5, #9
 80098c6:	e7f6      	b.n	80098b6 <__s2b+0x66>
 80098c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098cc:	4601      	mov	r1, r0
 80098ce:	3b30      	subs	r3, #48	@ 0x30
 80098d0:	220a      	movs	r2, #10
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff76 	bl	80097c4 <__multadd>
 80098d8:	e7ee      	b.n	80098b8 <__s2b+0x68>
 80098da:	bf00      	nop
 80098dc:	0800c061 	.word	0x0800c061
 80098e0:	0800c072 	.word	0x0800c072

080098e4 <__hi0bits>:
 80098e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80098e8:	4603      	mov	r3, r0
 80098ea:	bf36      	itet	cc
 80098ec:	0403      	lslcc	r3, r0, #16
 80098ee:	2000      	movcs	r0, #0
 80098f0:	2010      	movcc	r0, #16
 80098f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098f6:	bf3c      	itt	cc
 80098f8:	021b      	lslcc	r3, r3, #8
 80098fa:	3008      	addcc	r0, #8
 80098fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009900:	bf3c      	itt	cc
 8009902:	011b      	lslcc	r3, r3, #4
 8009904:	3004      	addcc	r0, #4
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990a:	bf3c      	itt	cc
 800990c:	009b      	lslcc	r3, r3, #2
 800990e:	3002      	addcc	r0, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	db05      	blt.n	8009920 <__hi0bits+0x3c>
 8009914:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009918:	f100 0001 	add.w	r0, r0, #1
 800991c:	bf08      	it	eq
 800991e:	2020      	moveq	r0, #32
 8009920:	4770      	bx	lr

08009922 <__lo0bits>:
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	4602      	mov	r2, r0
 8009926:	f013 0007 	ands.w	r0, r3, #7
 800992a:	d00b      	beq.n	8009944 <__lo0bits+0x22>
 800992c:	07d9      	lsls	r1, r3, #31
 800992e:	d421      	bmi.n	8009974 <__lo0bits+0x52>
 8009930:	0798      	lsls	r0, r3, #30
 8009932:	bf49      	itett	mi
 8009934:	085b      	lsrmi	r3, r3, #1
 8009936:	089b      	lsrpl	r3, r3, #2
 8009938:	2001      	movmi	r0, #1
 800993a:	6013      	strmi	r3, [r2, #0]
 800993c:	bf5c      	itt	pl
 800993e:	6013      	strpl	r3, [r2, #0]
 8009940:	2002      	movpl	r0, #2
 8009942:	4770      	bx	lr
 8009944:	b299      	uxth	r1, r3
 8009946:	b909      	cbnz	r1, 800994c <__lo0bits+0x2a>
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	2010      	movs	r0, #16
 800994c:	b2d9      	uxtb	r1, r3
 800994e:	b909      	cbnz	r1, 8009954 <__lo0bits+0x32>
 8009950:	3008      	adds	r0, #8
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	0719      	lsls	r1, r3, #28
 8009956:	bf04      	itt	eq
 8009958:	091b      	lsreq	r3, r3, #4
 800995a:	3004      	addeq	r0, #4
 800995c:	0799      	lsls	r1, r3, #30
 800995e:	bf04      	itt	eq
 8009960:	089b      	lsreq	r3, r3, #2
 8009962:	3002      	addeq	r0, #2
 8009964:	07d9      	lsls	r1, r3, #31
 8009966:	d403      	bmi.n	8009970 <__lo0bits+0x4e>
 8009968:	085b      	lsrs	r3, r3, #1
 800996a:	f100 0001 	add.w	r0, r0, #1
 800996e:	d003      	beq.n	8009978 <__lo0bits+0x56>
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4770      	bx	lr
 8009974:	2000      	movs	r0, #0
 8009976:	4770      	bx	lr
 8009978:	2020      	movs	r0, #32
 800997a:	4770      	bx	lr

0800997c <__i2b>:
 800997c:	b510      	push	{r4, lr}
 800997e:	460c      	mov	r4, r1
 8009980:	2101      	movs	r1, #1
 8009982:	f7ff febd 	bl	8009700 <_Balloc>
 8009986:	4602      	mov	r2, r0
 8009988:	b928      	cbnz	r0, 8009996 <__i2b+0x1a>
 800998a:	4b05      	ldr	r3, [pc, #20]	@ (80099a0 <__i2b+0x24>)
 800998c:	4805      	ldr	r0, [pc, #20]	@ (80099a4 <__i2b+0x28>)
 800998e:	f240 1145 	movw	r1, #325	@ 0x145
 8009992:	f001 fe11 	bl	800b5b8 <__assert_func>
 8009996:	2301      	movs	r3, #1
 8009998:	6144      	str	r4, [r0, #20]
 800999a:	6103      	str	r3, [r0, #16]
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	0800c061 	.word	0x0800c061
 80099a4:	0800c072 	.word	0x0800c072

080099a8 <__multiply>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4617      	mov	r7, r2
 80099ae:	690a      	ldr	r2, [r1, #16]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	bfa8      	it	ge
 80099b6:	463b      	movge	r3, r7
 80099b8:	4689      	mov	r9, r1
 80099ba:	bfa4      	itt	ge
 80099bc:	460f      	movge	r7, r1
 80099be:	4699      	movge	r9, r3
 80099c0:	693d      	ldr	r5, [r7, #16]
 80099c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	eb05 060a 	add.w	r6, r5, sl
 80099ce:	42b3      	cmp	r3, r6
 80099d0:	b085      	sub	sp, #20
 80099d2:	bfb8      	it	lt
 80099d4:	3101      	addlt	r1, #1
 80099d6:	f7ff fe93 	bl	8009700 <_Balloc>
 80099da:	b930      	cbnz	r0, 80099ea <__multiply+0x42>
 80099dc:	4602      	mov	r2, r0
 80099de:	4b41      	ldr	r3, [pc, #260]	@ (8009ae4 <__multiply+0x13c>)
 80099e0:	4841      	ldr	r0, [pc, #260]	@ (8009ae8 <__multiply+0x140>)
 80099e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80099e6:	f001 fde7 	bl	800b5b8 <__assert_func>
 80099ea:	f100 0414 	add.w	r4, r0, #20
 80099ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80099f2:	4623      	mov	r3, r4
 80099f4:	2200      	movs	r2, #0
 80099f6:	4573      	cmp	r3, lr
 80099f8:	d320      	bcc.n	8009a3c <__multiply+0x94>
 80099fa:	f107 0814 	add.w	r8, r7, #20
 80099fe:	f109 0114 	add.w	r1, r9, #20
 8009a02:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009a06:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009a0a:	9302      	str	r3, [sp, #8]
 8009a0c:	1beb      	subs	r3, r5, r7
 8009a0e:	3b15      	subs	r3, #21
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	3304      	adds	r3, #4
 8009a16:	3715      	adds	r7, #21
 8009a18:	42bd      	cmp	r5, r7
 8009a1a:	bf38      	it	cc
 8009a1c:	2304      	movcc	r3, #4
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	9103      	str	r1, [sp, #12]
 8009a24:	428b      	cmp	r3, r1
 8009a26:	d80c      	bhi.n	8009a42 <__multiply+0x9a>
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	dd03      	ble.n	8009a34 <__multiply+0x8c>
 8009a2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d055      	beq.n	8009ae0 <__multiply+0x138>
 8009a34:	6106      	str	r6, [r0, #16]
 8009a36:	b005      	add	sp, #20
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	f843 2b04 	str.w	r2, [r3], #4
 8009a40:	e7d9      	b.n	80099f6 <__multiply+0x4e>
 8009a42:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a46:	f1ba 0f00 	cmp.w	sl, #0
 8009a4a:	d01f      	beq.n	8009a8c <__multiply+0xe4>
 8009a4c:	46c4      	mov	ip, r8
 8009a4e:	46a1      	mov	r9, r4
 8009a50:	2700      	movs	r7, #0
 8009a52:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a56:	f8d9 3000 	ldr.w	r3, [r9]
 8009a5a:	fa1f fb82 	uxth.w	fp, r2
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a64:	443b      	add	r3, r7
 8009a66:	f8d9 7000 	ldr.w	r7, [r9]
 8009a6a:	0c12      	lsrs	r2, r2, #16
 8009a6c:	0c3f      	lsrs	r7, r7, #16
 8009a6e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009a72:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a7c:	4565      	cmp	r5, ip
 8009a7e:	f849 3b04 	str.w	r3, [r9], #4
 8009a82:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009a86:	d8e4      	bhi.n	8009a52 <__multiply+0xaa>
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	50e7      	str	r7, [r4, r3]
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a92:	3104      	adds	r1, #4
 8009a94:	f1b9 0f00 	cmp.w	r9, #0
 8009a98:	d020      	beq.n	8009adc <__multiply+0x134>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	4647      	mov	r7, r8
 8009a9e:	46a4      	mov	ip, r4
 8009aa0:	f04f 0a00 	mov.w	sl, #0
 8009aa4:	f8b7 b000 	ldrh.w	fp, [r7]
 8009aa8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009aac:	fb09 220b 	mla	r2, r9, fp, r2
 8009ab0:	4452      	add	r2, sl
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab8:	f84c 3b04 	str.w	r3, [ip], #4
 8009abc:	f857 3b04 	ldr.w	r3, [r7], #4
 8009ac0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ac4:	f8bc 3000 	ldrh.w	r3, [ip]
 8009ac8:	fb09 330a 	mla	r3, r9, sl, r3
 8009acc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009ad0:	42bd      	cmp	r5, r7
 8009ad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ad6:	d8e5      	bhi.n	8009aa4 <__multiply+0xfc>
 8009ad8:	9a01      	ldr	r2, [sp, #4]
 8009ada:	50a3      	str	r3, [r4, r2]
 8009adc:	3404      	adds	r4, #4
 8009ade:	e79f      	b.n	8009a20 <__multiply+0x78>
 8009ae0:	3e01      	subs	r6, #1
 8009ae2:	e7a1      	b.n	8009a28 <__multiply+0x80>
 8009ae4:	0800c061 	.word	0x0800c061
 8009ae8:	0800c072 	.word	0x0800c072

08009aec <__pow5mult>:
 8009aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af0:	4615      	mov	r5, r2
 8009af2:	f012 0203 	ands.w	r2, r2, #3
 8009af6:	4607      	mov	r7, r0
 8009af8:	460e      	mov	r6, r1
 8009afa:	d007      	beq.n	8009b0c <__pow5mult+0x20>
 8009afc:	4c25      	ldr	r4, [pc, #148]	@ (8009b94 <__pow5mult+0xa8>)
 8009afe:	3a01      	subs	r2, #1
 8009b00:	2300      	movs	r3, #0
 8009b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b06:	f7ff fe5d 	bl	80097c4 <__multadd>
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	10ad      	asrs	r5, r5, #2
 8009b0e:	d03d      	beq.n	8009b8c <__pow5mult+0xa0>
 8009b10:	69fc      	ldr	r4, [r7, #28]
 8009b12:	b97c      	cbnz	r4, 8009b34 <__pow5mult+0x48>
 8009b14:	2010      	movs	r0, #16
 8009b16:	f7ff fd3d 	bl	8009594 <malloc>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	61f8      	str	r0, [r7, #28]
 8009b1e:	b928      	cbnz	r0, 8009b2c <__pow5mult+0x40>
 8009b20:	4b1d      	ldr	r3, [pc, #116]	@ (8009b98 <__pow5mult+0xac>)
 8009b22:	481e      	ldr	r0, [pc, #120]	@ (8009b9c <__pow5mult+0xb0>)
 8009b24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b28:	f001 fd46 	bl	800b5b8 <__assert_func>
 8009b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b30:	6004      	str	r4, [r0, #0]
 8009b32:	60c4      	str	r4, [r0, #12]
 8009b34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b3c:	b94c      	cbnz	r4, 8009b52 <__pow5mult+0x66>
 8009b3e:	f240 2171 	movw	r1, #625	@ 0x271
 8009b42:	4638      	mov	r0, r7
 8009b44:	f7ff ff1a 	bl	800997c <__i2b>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b4e:	4604      	mov	r4, r0
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	f04f 0900 	mov.w	r9, #0
 8009b56:	07eb      	lsls	r3, r5, #31
 8009b58:	d50a      	bpl.n	8009b70 <__pow5mult+0x84>
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4638      	mov	r0, r7
 8009b60:	f7ff ff22 	bl	80099a8 <__multiply>
 8009b64:	4631      	mov	r1, r6
 8009b66:	4680      	mov	r8, r0
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7ff fe09 	bl	8009780 <_Bfree>
 8009b6e:	4646      	mov	r6, r8
 8009b70:	106d      	asrs	r5, r5, #1
 8009b72:	d00b      	beq.n	8009b8c <__pow5mult+0xa0>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	b938      	cbnz	r0, 8009b88 <__pow5mult+0x9c>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f7ff ff13 	bl	80099a8 <__multiply>
 8009b82:	6020      	str	r0, [r4, #0]
 8009b84:	f8c0 9000 	str.w	r9, [r0]
 8009b88:	4604      	mov	r4, r0
 8009b8a:	e7e4      	b.n	8009b56 <__pow5mult+0x6a>
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b92:	bf00      	nop
 8009b94:	0800c184 	.word	0x0800c184
 8009b98:	0800bff2 	.word	0x0800bff2
 8009b9c:	0800c072 	.word	0x0800c072

08009ba0 <__lshift>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	6849      	ldr	r1, [r1, #4]
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	4691      	mov	r9, r2
 8009bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bb8:	f108 0601 	add.w	r6, r8, #1
 8009bbc:	42b3      	cmp	r3, r6
 8009bbe:	db0b      	blt.n	8009bd8 <__lshift+0x38>
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f7ff fd9d 	bl	8009700 <_Balloc>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b948      	cbnz	r0, 8009bde <__lshift+0x3e>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <__lshift+0xd0>)
 8009bce:	4829      	ldr	r0, [pc, #164]	@ (8009c74 <__lshift+0xd4>)
 8009bd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009bd4:	f001 fcf0 	bl	800b5b8 <__assert_func>
 8009bd8:	3101      	adds	r1, #1
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	e7ee      	b.n	8009bbc <__lshift+0x1c>
 8009bde:	2300      	movs	r3, #0
 8009be0:	f100 0114 	add.w	r1, r0, #20
 8009be4:	f100 0210 	add.w	r2, r0, #16
 8009be8:	4618      	mov	r0, r3
 8009bea:	4553      	cmp	r3, sl
 8009bec:	db33      	blt.n	8009c56 <__lshift+0xb6>
 8009bee:	6920      	ldr	r0, [r4, #16]
 8009bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bf4:	f104 0314 	add.w	r3, r4, #20
 8009bf8:	f019 091f 	ands.w	r9, r9, #31
 8009bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c04:	d02b      	beq.n	8009c5e <__lshift+0xbe>
 8009c06:	f1c9 0e20 	rsb	lr, r9, #32
 8009c0a:	468a      	mov	sl, r1
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	fa00 f009 	lsl.w	r0, r0, r9
 8009c14:	4310      	orrs	r0, r2
 8009c16:	f84a 0b04 	str.w	r0, [sl], #4
 8009c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1e:	459c      	cmp	ip, r3
 8009c20:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c24:	d8f3      	bhi.n	8009c0e <__lshift+0x6e>
 8009c26:	ebac 0304 	sub.w	r3, ip, r4
 8009c2a:	3b15      	subs	r3, #21
 8009c2c:	f023 0303 	bic.w	r3, r3, #3
 8009c30:	3304      	adds	r3, #4
 8009c32:	f104 0015 	add.w	r0, r4, #21
 8009c36:	4560      	cmp	r0, ip
 8009c38:	bf88      	it	hi
 8009c3a:	2304      	movhi	r3, #4
 8009c3c:	50ca      	str	r2, [r1, r3]
 8009c3e:	b10a      	cbz	r2, 8009c44 <__lshift+0xa4>
 8009c40:	f108 0602 	add.w	r6, r8, #2
 8009c44:	3e01      	subs	r6, #1
 8009c46:	4638      	mov	r0, r7
 8009c48:	612e      	str	r6, [r5, #16]
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	f7ff fd98 	bl	8009780 <_Bfree>
 8009c50:	4628      	mov	r0, r5
 8009c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	e7c5      	b.n	8009bea <__lshift+0x4a>
 8009c5e:	3904      	subs	r1, #4
 8009c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c68:	459c      	cmp	ip, r3
 8009c6a:	d8f9      	bhi.n	8009c60 <__lshift+0xc0>
 8009c6c:	e7ea      	b.n	8009c44 <__lshift+0xa4>
 8009c6e:	bf00      	nop
 8009c70:	0800c061 	.word	0x0800c061
 8009c74:	0800c072 	.word	0x0800c072

08009c78 <__mcmp>:
 8009c78:	690a      	ldr	r2, [r1, #16]
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6900      	ldr	r0, [r0, #16]
 8009c7e:	1a80      	subs	r0, r0, r2
 8009c80:	b530      	push	{r4, r5, lr}
 8009c82:	d10e      	bne.n	8009ca2 <__mcmp+0x2a>
 8009c84:	3314      	adds	r3, #20
 8009c86:	3114      	adds	r1, #20
 8009c88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c98:	4295      	cmp	r5, r2
 8009c9a:	d003      	beq.n	8009ca4 <__mcmp+0x2c>
 8009c9c:	d205      	bcs.n	8009caa <__mcmp+0x32>
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	bd30      	pop	{r4, r5, pc}
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d3f3      	bcc.n	8009c90 <__mcmp+0x18>
 8009ca8:	e7fb      	b.n	8009ca2 <__mcmp+0x2a>
 8009caa:	2001      	movs	r0, #1
 8009cac:	e7f9      	b.n	8009ca2 <__mcmp+0x2a>
	...

08009cb0 <__mdiff>:
 8009cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	4689      	mov	r9, r1
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4648      	mov	r0, r9
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	f7ff ffdb 	bl	8009c78 <__mcmp>
 8009cc2:	1e05      	subs	r5, r0, #0
 8009cc4:	d112      	bne.n	8009cec <__mdiff+0x3c>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff fd19 	bl	8009700 <_Balloc>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	b928      	cbnz	r0, 8009cde <__mdiff+0x2e>
 8009cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8009dd0 <__mdiff+0x120>)
 8009cd4:	f240 2137 	movw	r1, #567	@ 0x237
 8009cd8:	483e      	ldr	r0, [pc, #248]	@ (8009dd4 <__mdiff+0x124>)
 8009cda:	f001 fc6d 	bl	800b5b8 <__assert_func>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	b003      	add	sp, #12
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cec:	bfbc      	itt	lt
 8009cee:	464b      	movlt	r3, r9
 8009cf0:	46a1      	movlt	r9, r4
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009cf8:	bfba      	itte	lt
 8009cfa:	461c      	movlt	r4, r3
 8009cfc:	2501      	movlt	r5, #1
 8009cfe:	2500      	movge	r5, #0
 8009d00:	f7ff fcfe 	bl	8009700 <_Balloc>
 8009d04:	4602      	mov	r2, r0
 8009d06:	b918      	cbnz	r0, 8009d10 <__mdiff+0x60>
 8009d08:	4b31      	ldr	r3, [pc, #196]	@ (8009dd0 <__mdiff+0x120>)
 8009d0a:	f240 2145 	movw	r1, #581	@ 0x245
 8009d0e:	e7e3      	b.n	8009cd8 <__mdiff+0x28>
 8009d10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d14:	6926      	ldr	r6, [r4, #16]
 8009d16:	60c5      	str	r5, [r0, #12]
 8009d18:	f109 0310 	add.w	r3, r9, #16
 8009d1c:	f109 0514 	add.w	r5, r9, #20
 8009d20:	f104 0e14 	add.w	lr, r4, #20
 8009d24:	f100 0b14 	add.w	fp, r0, #20
 8009d28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	46d9      	mov	r9, fp
 8009d34:	f04f 0c00 	mov.w	ip, #0
 8009d38:	9b01      	ldr	r3, [sp, #4]
 8009d3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	fa1f f38a 	uxth.w	r3, sl
 8009d48:	4619      	mov	r1, r3
 8009d4a:	b283      	uxth	r3, r0
 8009d4c:	1acb      	subs	r3, r1, r3
 8009d4e:	0c00      	lsrs	r0, r0, #16
 8009d50:	4463      	add	r3, ip
 8009d52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d60:	4576      	cmp	r6, lr
 8009d62:	f849 3b04 	str.w	r3, [r9], #4
 8009d66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d6a:	d8e5      	bhi.n	8009d38 <__mdiff+0x88>
 8009d6c:	1b33      	subs	r3, r6, r4
 8009d6e:	3b15      	subs	r3, #21
 8009d70:	f023 0303 	bic.w	r3, r3, #3
 8009d74:	3415      	adds	r4, #21
 8009d76:	3304      	adds	r3, #4
 8009d78:	42a6      	cmp	r6, r4
 8009d7a:	bf38      	it	cc
 8009d7c:	2304      	movcc	r3, #4
 8009d7e:	441d      	add	r5, r3
 8009d80:	445b      	add	r3, fp
 8009d82:	461e      	mov	r6, r3
 8009d84:	462c      	mov	r4, r5
 8009d86:	4544      	cmp	r4, r8
 8009d88:	d30e      	bcc.n	8009da8 <__mdiff+0xf8>
 8009d8a:	f108 0103 	add.w	r1, r8, #3
 8009d8e:	1b49      	subs	r1, r1, r5
 8009d90:	f021 0103 	bic.w	r1, r1, #3
 8009d94:	3d03      	subs	r5, #3
 8009d96:	45a8      	cmp	r8, r5
 8009d98:	bf38      	it	cc
 8009d9a:	2100      	movcc	r1, #0
 8009d9c:	440b      	add	r3, r1
 8009d9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009da2:	b191      	cbz	r1, 8009dca <__mdiff+0x11a>
 8009da4:	6117      	str	r7, [r2, #16]
 8009da6:	e79d      	b.n	8009ce4 <__mdiff+0x34>
 8009da8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009dac:	46e6      	mov	lr, ip
 8009dae:	0c08      	lsrs	r0, r1, #16
 8009db0:	fa1c fc81 	uxtah	ip, ip, r1
 8009db4:	4471      	add	r1, lr
 8009db6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009dba:	b289      	uxth	r1, r1
 8009dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009dc0:	f846 1b04 	str.w	r1, [r6], #4
 8009dc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dc8:	e7dd      	b.n	8009d86 <__mdiff+0xd6>
 8009dca:	3f01      	subs	r7, #1
 8009dcc:	e7e7      	b.n	8009d9e <__mdiff+0xee>
 8009dce:	bf00      	nop
 8009dd0:	0800c061 	.word	0x0800c061
 8009dd4:	0800c072 	.word	0x0800c072

08009dd8 <__ulp>:
 8009dd8:	b082      	sub	sp, #8
 8009dda:	ed8d 0b00 	vstr	d0, [sp]
 8009dde:	9a01      	ldr	r2, [sp, #4]
 8009de0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e20 <__ulp+0x48>)
 8009de2:	4013      	ands	r3, r2
 8009de4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dc08      	bgt.n	8009dfe <__ulp+0x26>
 8009dec:	425b      	negs	r3, r3
 8009dee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009df2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009df6:	da04      	bge.n	8009e02 <__ulp+0x2a>
 8009df8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009dfc:	4113      	asrs	r3, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	e008      	b.n	8009e14 <__ulp+0x3c>
 8009e02:	f1a2 0314 	sub.w	r3, r2, #20
 8009e06:	2b1e      	cmp	r3, #30
 8009e08:	bfda      	itte	le
 8009e0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e0e:	40da      	lsrle	r2, r3
 8009e10:	2201      	movgt	r2, #1
 8009e12:	2300      	movs	r3, #0
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	ec41 0b10 	vmov	d0, r0, r1
 8009e1c:	b002      	add	sp, #8
 8009e1e:	4770      	bx	lr
 8009e20:	7ff00000 	.word	0x7ff00000

08009e24 <__b2d>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	6906      	ldr	r6, [r0, #16]
 8009e2a:	f100 0814 	add.w	r8, r0, #20
 8009e2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e32:	1f37      	subs	r7, r6, #4
 8009e34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7ff fd53 	bl	80098e4 <__hi0bits>
 8009e3e:	f1c0 0320 	rsb	r3, r0, #32
 8009e42:	280a      	cmp	r0, #10
 8009e44:	600b      	str	r3, [r1, #0]
 8009e46:	491b      	ldr	r1, [pc, #108]	@ (8009eb4 <__b2d+0x90>)
 8009e48:	dc15      	bgt.n	8009e76 <__b2d+0x52>
 8009e4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e52:	45b8      	cmp	r8, r7
 8009e54:	ea43 0501 	orr.w	r5, r3, r1
 8009e58:	bf34      	ite	cc
 8009e5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e5e:	2300      	movcs	r3, #0
 8009e60:	3015      	adds	r0, #21
 8009e62:	fa02 f000 	lsl.w	r0, r2, r0
 8009e66:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e6a:	4303      	orrs	r3, r0
 8009e6c:	461c      	mov	r4, r3
 8009e6e:	ec45 4b10 	vmov	d0, r4, r5
 8009e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e76:	45b8      	cmp	r8, r7
 8009e78:	bf3a      	itte	cc
 8009e7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009e82:	2300      	movcs	r3, #0
 8009e84:	380b      	subs	r0, #11
 8009e86:	d012      	beq.n	8009eae <__b2d+0x8a>
 8009e88:	f1c0 0120 	rsb	r1, r0, #32
 8009e8c:	fa23 f401 	lsr.w	r4, r3, r1
 8009e90:	4082      	lsls	r2, r0
 8009e92:	4322      	orrs	r2, r4
 8009e94:	4547      	cmp	r7, r8
 8009e96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009e9a:	bf8c      	ite	hi
 8009e9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009ea0:	2200      	movls	r2, #0
 8009ea2:	4083      	lsls	r3, r0
 8009ea4:	40ca      	lsrs	r2, r1
 8009ea6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	e7de      	b.n	8009e6c <__b2d+0x48>
 8009eae:	ea42 0501 	orr.w	r5, r2, r1
 8009eb2:	e7db      	b.n	8009e6c <__b2d+0x48>
 8009eb4:	3ff00000 	.word	0x3ff00000

08009eb8 <__d2b>:
 8009eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	ec59 8b10 	vmov	r8, r9, d0
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	f7ff fc1b 	bl	8009700 <_Balloc>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	b930      	cbnz	r0, 8009edc <__d2b+0x24>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	4b23      	ldr	r3, [pc, #140]	@ (8009f60 <__d2b+0xa8>)
 8009ed2:	4824      	ldr	r0, [pc, #144]	@ (8009f64 <__d2b+0xac>)
 8009ed4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ed8:	f001 fb6e 	bl	800b5b8 <__assert_func>
 8009edc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ee4:	b10d      	cbz	r5, 8009eea <__d2b+0x32>
 8009ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	f1b8 0300 	subs.w	r3, r8, #0
 8009ef0:	d023      	beq.n	8009f3a <__d2b+0x82>
 8009ef2:	4668      	mov	r0, sp
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f7ff fd14 	bl	8009922 <__lo0bits>
 8009efa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009efe:	b1d0      	cbz	r0, 8009f36 <__d2b+0x7e>
 8009f00:	f1c0 0320 	rsb	r3, r0, #32
 8009f04:	fa02 f303 	lsl.w	r3, r2, r3
 8009f08:	430b      	orrs	r3, r1
 8009f0a:	40c2      	lsrs	r2, r0
 8009f0c:	6163      	str	r3, [r4, #20]
 8009f0e:	9201      	str	r2, [sp, #4]
 8009f10:	9b01      	ldr	r3, [sp, #4]
 8009f12:	61a3      	str	r3, [r4, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bf0c      	ite	eq
 8009f18:	2201      	moveq	r2, #1
 8009f1a:	2202      	movne	r2, #2
 8009f1c:	6122      	str	r2, [r4, #16]
 8009f1e:	b1a5      	cbz	r5, 8009f4a <__d2b+0x92>
 8009f20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f24:	4405      	add	r5, r0
 8009f26:	603d      	str	r5, [r7, #0]
 8009f28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f2c:	6030      	str	r0, [r6, #0]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	b003      	add	sp, #12
 8009f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f36:	6161      	str	r1, [r4, #20]
 8009f38:	e7ea      	b.n	8009f10 <__d2b+0x58>
 8009f3a:	a801      	add	r0, sp, #4
 8009f3c:	f7ff fcf1 	bl	8009922 <__lo0bits>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	3020      	adds	r0, #32
 8009f46:	2201      	movs	r2, #1
 8009f48:	e7e8      	b.n	8009f1c <__d2b+0x64>
 8009f4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f52:	6038      	str	r0, [r7, #0]
 8009f54:	6918      	ldr	r0, [r3, #16]
 8009f56:	f7ff fcc5 	bl	80098e4 <__hi0bits>
 8009f5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f5e:	e7e5      	b.n	8009f2c <__d2b+0x74>
 8009f60:	0800c061 	.word	0x0800c061
 8009f64:	0800c072 	.word	0x0800c072

08009f68 <__ratio>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	e9cd 1000 	strd	r1, r0, [sp]
 8009f72:	a902      	add	r1, sp, #8
 8009f74:	f7ff ff56 	bl	8009e24 <__b2d>
 8009f78:	9800      	ldr	r0, [sp, #0]
 8009f7a:	a903      	add	r1, sp, #12
 8009f7c:	ec55 4b10 	vmov	r4, r5, d0
 8009f80:	f7ff ff50 	bl	8009e24 <__b2d>
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	6919      	ldr	r1, [r3, #16]
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	1ac9      	subs	r1, r1, r3
 8009f8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f92:	1a9b      	subs	r3, r3, r2
 8009f94:	ec5b ab10 	vmov	sl, fp, d0
 8009f98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfce      	itee	gt
 8009fa0:	462a      	movgt	r2, r5
 8009fa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fa6:	465a      	movle	r2, fp
 8009fa8:	462f      	mov	r7, r5
 8009faa:	46d9      	mov	r9, fp
 8009fac:	bfcc      	ite	gt
 8009fae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fb2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	4652      	mov	r2, sl
 8009fba:	4620      	mov	r0, r4
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	f7f6 fc45 	bl	800084c <__aeabi_ddiv>
 8009fc2:	ec41 0b10 	vmov	d0, r0, r1
 8009fc6:	b005      	add	sp, #20
 8009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fcc <__copybits>:
 8009fcc:	3901      	subs	r1, #1
 8009fce:	b570      	push	{r4, r5, r6, lr}
 8009fd0:	1149      	asrs	r1, r1, #5
 8009fd2:	6914      	ldr	r4, [r2, #16]
 8009fd4:	3101      	adds	r1, #1
 8009fd6:	f102 0314 	add.w	r3, r2, #20
 8009fda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fe2:	1f05      	subs	r5, r0, #4
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d30c      	bcc.n	800a002 <__copybits+0x36>
 8009fe8:	1aa3      	subs	r3, r4, r2
 8009fea:	3b11      	subs	r3, #17
 8009fec:	f023 0303 	bic.w	r3, r3, #3
 8009ff0:	3211      	adds	r2, #17
 8009ff2:	42a2      	cmp	r2, r4
 8009ff4:	bf88      	it	hi
 8009ff6:	2300      	movhi	r3, #0
 8009ff8:	4418      	add	r0, r3
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4288      	cmp	r0, r1
 8009ffe:	d305      	bcc.n	800a00c <__copybits+0x40>
 800a000:	bd70      	pop	{r4, r5, r6, pc}
 800a002:	f853 6b04 	ldr.w	r6, [r3], #4
 800a006:	f845 6f04 	str.w	r6, [r5, #4]!
 800a00a:	e7eb      	b.n	8009fe4 <__copybits+0x18>
 800a00c:	f840 3b04 	str.w	r3, [r0], #4
 800a010:	e7f4      	b.n	8009ffc <__copybits+0x30>

0800a012 <__any_on>:
 800a012:	f100 0214 	add.w	r2, r0, #20
 800a016:	6900      	ldr	r0, [r0, #16]
 800a018:	114b      	asrs	r3, r1, #5
 800a01a:	4298      	cmp	r0, r3
 800a01c:	b510      	push	{r4, lr}
 800a01e:	db11      	blt.n	800a044 <__any_on+0x32>
 800a020:	dd0a      	ble.n	800a038 <__any_on+0x26>
 800a022:	f011 011f 	ands.w	r1, r1, #31
 800a026:	d007      	beq.n	800a038 <__any_on+0x26>
 800a028:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a02c:	fa24 f001 	lsr.w	r0, r4, r1
 800a030:	fa00 f101 	lsl.w	r1, r0, r1
 800a034:	428c      	cmp	r4, r1
 800a036:	d10b      	bne.n	800a050 <__any_on+0x3e>
 800a038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d803      	bhi.n	800a048 <__any_on+0x36>
 800a040:	2000      	movs	r0, #0
 800a042:	bd10      	pop	{r4, pc}
 800a044:	4603      	mov	r3, r0
 800a046:	e7f7      	b.n	800a038 <__any_on+0x26>
 800a048:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d0f5      	beq.n	800a03c <__any_on+0x2a>
 800a050:	2001      	movs	r0, #1
 800a052:	e7f6      	b.n	800a042 <__any_on+0x30>

0800a054 <sulp>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	460d      	mov	r5, r1
 800a05a:	ec45 4b10 	vmov	d0, r4, r5
 800a05e:	4616      	mov	r6, r2
 800a060:	f7ff feba 	bl	8009dd8 <__ulp>
 800a064:	ec51 0b10 	vmov	r0, r1, d0
 800a068:	b17e      	cbz	r6, 800a08a <sulp+0x36>
 800a06a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a06e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a072:	2b00      	cmp	r3, #0
 800a074:	dd09      	ble.n	800a08a <sulp+0x36>
 800a076:	051b      	lsls	r3, r3, #20
 800a078:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a07c:	2400      	movs	r4, #0
 800a07e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a082:	4622      	mov	r2, r4
 800a084:	462b      	mov	r3, r5
 800a086:	f7f6 fab7 	bl	80005f8 <__aeabi_dmul>
 800a08a:	ec41 0b10 	vmov	d0, r0, r1
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <_strtod_l>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	b09f      	sub	sp, #124	@ 0x7c
 800a096:	460c      	mov	r4, r1
 800a098:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a09a:	2200      	movs	r2, #0
 800a09c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a09e:	9005      	str	r0, [sp, #20]
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	f04f 0b00 	mov.w	fp, #0
 800a0a8:	460a      	mov	r2, r1
 800a0aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ac:	7811      	ldrb	r1, [r2, #0]
 800a0ae:	292b      	cmp	r1, #43	@ 0x2b
 800a0b0:	d04a      	beq.n	800a148 <_strtod_l+0xb8>
 800a0b2:	d838      	bhi.n	800a126 <_strtod_l+0x96>
 800a0b4:	290d      	cmp	r1, #13
 800a0b6:	d832      	bhi.n	800a11e <_strtod_l+0x8e>
 800a0b8:	2908      	cmp	r1, #8
 800a0ba:	d832      	bhi.n	800a122 <_strtod_l+0x92>
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d03b      	beq.n	800a138 <_strtod_l+0xa8>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a0c6:	782a      	ldrb	r2, [r5, #0]
 800a0c8:	2a30      	cmp	r2, #48	@ 0x30
 800a0ca:	f040 80b2 	bne.w	800a232 <_strtod_l+0x1a2>
 800a0ce:	786a      	ldrb	r2, [r5, #1]
 800a0d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0d4:	2a58      	cmp	r2, #88	@ 0x58
 800a0d6:	d16e      	bne.n	800a1b6 <_strtod_l+0x126>
 800a0d8:	9302      	str	r3, [sp, #8]
 800a0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	ab1a      	add	r3, sp, #104	@ 0x68
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	4a8f      	ldr	r2, [pc, #572]	@ (800a320 <_strtod_l+0x290>)
 800a0e4:	9805      	ldr	r0, [sp, #20]
 800a0e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a0e8:	a919      	add	r1, sp, #100	@ 0x64
 800a0ea:	f001 faff 	bl	800b6ec <__gethex>
 800a0ee:	f010 060f 	ands.w	r6, r0, #15
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	d005      	beq.n	800a102 <_strtod_l+0x72>
 800a0f6:	2e06      	cmp	r6, #6
 800a0f8:	d128      	bne.n	800a14c <_strtod_l+0xbc>
 800a0fa:	3501      	adds	r5, #1
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800a100:	930e      	str	r3, [sp, #56]	@ 0x38
 800a102:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a104:	2b00      	cmp	r3, #0
 800a106:	f040 858e 	bne.w	800ac26 <_strtod_l+0xb96>
 800a10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10c:	b1cb      	cbz	r3, 800a142 <_strtod_l+0xb2>
 800a10e:	4652      	mov	r2, sl
 800a110:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a114:	ec43 2b10 	vmov	d0, r2, r3
 800a118:	b01f      	add	sp, #124	@ 0x7c
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11e:	2920      	cmp	r1, #32
 800a120:	d1ce      	bne.n	800a0c0 <_strtod_l+0x30>
 800a122:	3201      	adds	r2, #1
 800a124:	e7c1      	b.n	800a0aa <_strtod_l+0x1a>
 800a126:	292d      	cmp	r1, #45	@ 0x2d
 800a128:	d1ca      	bne.n	800a0c0 <_strtod_l+0x30>
 800a12a:	2101      	movs	r1, #1
 800a12c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a12e:	1c51      	adds	r1, r2, #1
 800a130:	9119      	str	r1, [sp, #100]	@ 0x64
 800a132:	7852      	ldrb	r2, [r2, #1]
 800a134:	2a00      	cmp	r2, #0
 800a136:	d1c5      	bne.n	800a0c4 <_strtod_l+0x34>
 800a138:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a13a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8570 	bne.w	800ac22 <_strtod_l+0xb92>
 800a142:	4652      	mov	r2, sl
 800a144:	465b      	mov	r3, fp
 800a146:	e7e5      	b.n	800a114 <_strtod_l+0x84>
 800a148:	2100      	movs	r1, #0
 800a14a:	e7ef      	b.n	800a12c <_strtod_l+0x9c>
 800a14c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a14e:	b13a      	cbz	r2, 800a160 <_strtod_l+0xd0>
 800a150:	2135      	movs	r1, #53	@ 0x35
 800a152:	a81c      	add	r0, sp, #112	@ 0x70
 800a154:	f7ff ff3a 	bl	8009fcc <__copybits>
 800a158:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a15a:	9805      	ldr	r0, [sp, #20]
 800a15c:	f7ff fb10 	bl	8009780 <_Bfree>
 800a160:	3e01      	subs	r6, #1
 800a162:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a164:	2e04      	cmp	r6, #4
 800a166:	d806      	bhi.n	800a176 <_strtod_l+0xe6>
 800a168:	e8df f006 	tbb	[pc, r6]
 800a16c:	201d0314 	.word	0x201d0314
 800a170:	14          	.byte	0x14
 800a171:	00          	.byte	0x00
 800a172:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a176:	05e1      	lsls	r1, r4, #23
 800a178:	bf48      	it	mi
 800a17a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a17e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a182:	0d1b      	lsrs	r3, r3, #20
 800a184:	051b      	lsls	r3, r3, #20
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1bb      	bne.n	800a102 <_strtod_l+0x72>
 800a18a:	f7fe fb2b 	bl	80087e4 <__errno>
 800a18e:	2322      	movs	r3, #34	@ 0x22
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	e7b6      	b.n	800a102 <_strtod_l+0x72>
 800a194:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a198:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a19c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a1a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1a4:	e7e7      	b.n	800a176 <_strtod_l+0xe6>
 800a1a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a328 <_strtod_l+0x298>
 800a1aa:	e7e4      	b.n	800a176 <_strtod_l+0xe6>
 800a1ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a1b0:	f04f 3aff 	mov.w	sl, #4294967295
 800a1b4:	e7df      	b.n	800a176 <_strtod_l+0xe6>
 800a1b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b30      	cmp	r3, #48	@ 0x30
 800a1c0:	d0f9      	beq.n	800a1b6 <_strtod_l+0x126>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d09d      	beq.n	800a102 <_strtod_l+0x72>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	2700      	movs	r7, #0
 800a1ca:	9308      	str	r3, [sp, #32]
 800a1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a1d2:	46b9      	mov	r9, r7
 800a1d4:	220a      	movs	r2, #10
 800a1d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a1d8:	7805      	ldrb	r5, [r0, #0]
 800a1da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a1de:	b2d9      	uxtb	r1, r3
 800a1e0:	2909      	cmp	r1, #9
 800a1e2:	d928      	bls.n	800a236 <_strtod_l+0x1a6>
 800a1e4:	494f      	ldr	r1, [pc, #316]	@ (800a324 <_strtod_l+0x294>)
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f001 f9ac 	bl	800b544 <strncmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d032      	beq.n	800a256 <_strtod_l+0x1c6>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1f6:	464d      	mov	r5, r9
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2a65      	cmp	r2, #101	@ 0x65
 800a1fc:	d001      	beq.n	800a202 <_strtod_l+0x172>
 800a1fe:	2a45      	cmp	r2, #69	@ 0x45
 800a200:	d114      	bne.n	800a22c <_strtod_l+0x19c>
 800a202:	b91d      	cbnz	r5, 800a20c <_strtod_l+0x17c>
 800a204:	9a08      	ldr	r2, [sp, #32]
 800a206:	4302      	orrs	r2, r0
 800a208:	d096      	beq.n	800a138 <_strtod_l+0xa8>
 800a20a:	2500      	movs	r5, #0
 800a20c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a20e:	1c62      	adds	r2, r4, #1
 800a210:	9219      	str	r2, [sp, #100]	@ 0x64
 800a212:	7862      	ldrb	r2, [r4, #1]
 800a214:	2a2b      	cmp	r2, #43	@ 0x2b
 800a216:	d07a      	beq.n	800a30e <_strtod_l+0x27e>
 800a218:	2a2d      	cmp	r2, #45	@ 0x2d
 800a21a:	d07e      	beq.n	800a31a <_strtod_l+0x28a>
 800a21c:	f04f 0c00 	mov.w	ip, #0
 800a220:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a224:	2909      	cmp	r1, #9
 800a226:	f240 8085 	bls.w	800a334 <_strtod_l+0x2a4>
 800a22a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a22c:	f04f 0800 	mov.w	r8, #0
 800a230:	e0a5      	b.n	800a37e <_strtod_l+0x2ee>
 800a232:	2300      	movs	r3, #0
 800a234:	e7c8      	b.n	800a1c8 <_strtod_l+0x138>
 800a236:	f1b9 0f08 	cmp.w	r9, #8
 800a23a:	bfd8      	it	le
 800a23c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a23e:	f100 0001 	add.w	r0, r0, #1
 800a242:	bfda      	itte	le
 800a244:	fb02 3301 	mlale	r3, r2, r1, r3
 800a248:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a24a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a24e:	f109 0901 	add.w	r9, r9, #1
 800a252:	9019      	str	r0, [sp, #100]	@ 0x64
 800a254:	e7bf      	b.n	800a1d6 <_strtod_l+0x146>
 800a256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a25c:	785a      	ldrb	r2, [r3, #1]
 800a25e:	f1b9 0f00 	cmp.w	r9, #0
 800a262:	d03b      	beq.n	800a2dc <_strtod_l+0x24c>
 800a264:	900a      	str	r0, [sp, #40]	@ 0x28
 800a266:	464d      	mov	r5, r9
 800a268:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a26c:	2b09      	cmp	r3, #9
 800a26e:	d912      	bls.n	800a296 <_strtod_l+0x206>
 800a270:	2301      	movs	r3, #1
 800a272:	e7c2      	b.n	800a1fa <_strtod_l+0x16a>
 800a274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	9219      	str	r2, [sp, #100]	@ 0x64
 800a27a:	785a      	ldrb	r2, [r3, #1]
 800a27c:	3001      	adds	r0, #1
 800a27e:	2a30      	cmp	r2, #48	@ 0x30
 800a280:	d0f8      	beq.n	800a274 <_strtod_l+0x1e4>
 800a282:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a286:	2b08      	cmp	r3, #8
 800a288:	f200 84d2 	bhi.w	800ac30 <_strtod_l+0xba0>
 800a28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a28e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a290:	2000      	movs	r0, #0
 800a292:	930c      	str	r3, [sp, #48]	@ 0x30
 800a294:	4605      	mov	r5, r0
 800a296:	3a30      	subs	r2, #48	@ 0x30
 800a298:	f100 0301 	add.w	r3, r0, #1
 800a29c:	d018      	beq.n	800a2d0 <_strtod_l+0x240>
 800a29e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2a0:	4419      	add	r1, r3
 800a2a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800a2a4:	462e      	mov	r6, r5
 800a2a6:	f04f 0e0a 	mov.w	lr, #10
 800a2aa:	1c71      	adds	r1, r6, #1
 800a2ac:	eba1 0c05 	sub.w	ip, r1, r5
 800a2b0:	4563      	cmp	r3, ip
 800a2b2:	dc15      	bgt.n	800a2e0 <_strtod_l+0x250>
 800a2b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a2b8:	182b      	adds	r3, r5, r0
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	f105 0501 	add.w	r5, r5, #1
 800a2c0:	4405      	add	r5, r0
 800a2c2:	dc1a      	bgt.n	800a2fa <_strtod_l+0x26a>
 800a2c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2c6:	230a      	movs	r3, #10
 800a2c8:	fb03 2301 	mla	r3, r3, r1, r2
 800a2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2d2:	1c51      	adds	r1, r2, #1
 800a2d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a2d6:	7852      	ldrb	r2, [r2, #1]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	e7c5      	b.n	800a268 <_strtod_l+0x1d8>
 800a2dc:	4648      	mov	r0, r9
 800a2de:	e7ce      	b.n	800a27e <_strtod_l+0x1ee>
 800a2e0:	2e08      	cmp	r6, #8
 800a2e2:	dc05      	bgt.n	800a2f0 <_strtod_l+0x260>
 800a2e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a2e6:	fb0e f606 	mul.w	r6, lr, r6
 800a2ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a2ec:	460e      	mov	r6, r1
 800a2ee:	e7dc      	b.n	800a2aa <_strtod_l+0x21a>
 800a2f0:	2910      	cmp	r1, #16
 800a2f2:	bfd8      	it	le
 800a2f4:	fb0e f707 	mulle.w	r7, lr, r7
 800a2f8:	e7f8      	b.n	800a2ec <_strtod_l+0x25c>
 800a2fa:	2b0f      	cmp	r3, #15
 800a2fc:	bfdc      	itt	le
 800a2fe:	230a      	movle	r3, #10
 800a300:	fb03 2707 	mlale	r7, r3, r7, r2
 800a304:	e7e3      	b.n	800a2ce <_strtod_l+0x23e>
 800a306:	2300      	movs	r3, #0
 800a308:	930a      	str	r3, [sp, #40]	@ 0x28
 800a30a:	2301      	movs	r3, #1
 800a30c:	e77a      	b.n	800a204 <_strtod_l+0x174>
 800a30e:	f04f 0c00 	mov.w	ip, #0
 800a312:	1ca2      	adds	r2, r4, #2
 800a314:	9219      	str	r2, [sp, #100]	@ 0x64
 800a316:	78a2      	ldrb	r2, [r4, #2]
 800a318:	e782      	b.n	800a220 <_strtod_l+0x190>
 800a31a:	f04f 0c01 	mov.w	ip, #1
 800a31e:	e7f8      	b.n	800a312 <_strtod_l+0x282>
 800a320:	0800c294 	.word	0x0800c294
 800a324:	0800c0cb 	.word	0x0800c0cb
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a32e:	1c51      	adds	r1, r2, #1
 800a330:	9119      	str	r1, [sp, #100]	@ 0x64
 800a332:	7852      	ldrb	r2, [r2, #1]
 800a334:	2a30      	cmp	r2, #48	@ 0x30
 800a336:	d0f9      	beq.n	800a32c <_strtod_l+0x29c>
 800a338:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a33c:	2908      	cmp	r1, #8
 800a33e:	f63f af75 	bhi.w	800a22c <_strtod_l+0x19c>
 800a342:	3a30      	subs	r2, #48	@ 0x30
 800a344:	9209      	str	r2, [sp, #36]	@ 0x24
 800a346:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a348:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a34a:	f04f 080a 	mov.w	r8, #10
 800a34e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a350:	1c56      	adds	r6, r2, #1
 800a352:	9619      	str	r6, [sp, #100]	@ 0x64
 800a354:	7852      	ldrb	r2, [r2, #1]
 800a356:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a35a:	f1be 0f09 	cmp.w	lr, #9
 800a35e:	d939      	bls.n	800a3d4 <_strtod_l+0x344>
 800a360:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a362:	1a76      	subs	r6, r6, r1
 800a364:	2e08      	cmp	r6, #8
 800a366:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a36a:	dc03      	bgt.n	800a374 <_strtod_l+0x2e4>
 800a36c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a36e:	4588      	cmp	r8, r1
 800a370:	bfa8      	it	ge
 800a372:	4688      	movge	r8, r1
 800a374:	f1bc 0f00 	cmp.w	ip, #0
 800a378:	d001      	beq.n	800a37e <_strtod_l+0x2ee>
 800a37a:	f1c8 0800 	rsb	r8, r8, #0
 800a37e:	2d00      	cmp	r5, #0
 800a380:	d14e      	bne.n	800a420 <_strtod_l+0x390>
 800a382:	9908      	ldr	r1, [sp, #32]
 800a384:	4308      	orrs	r0, r1
 800a386:	f47f aebc 	bne.w	800a102 <_strtod_l+0x72>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f47f aed4 	bne.w	800a138 <_strtod_l+0xa8>
 800a390:	2a69      	cmp	r2, #105	@ 0x69
 800a392:	d028      	beq.n	800a3e6 <_strtod_l+0x356>
 800a394:	dc25      	bgt.n	800a3e2 <_strtod_l+0x352>
 800a396:	2a49      	cmp	r2, #73	@ 0x49
 800a398:	d025      	beq.n	800a3e6 <_strtod_l+0x356>
 800a39a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a39c:	f47f aecc 	bne.w	800a138 <_strtod_l+0xa8>
 800a3a0:	499a      	ldr	r1, [pc, #616]	@ (800a60c <_strtod_l+0x57c>)
 800a3a2:	a819      	add	r0, sp, #100	@ 0x64
 800a3a4:	f001 fbc4 	bl	800bb30 <__match>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f43f aec5 	beq.w	800a138 <_strtod_l+0xa8>
 800a3ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b28      	cmp	r3, #40	@ 0x28
 800a3b4:	d12e      	bne.n	800a414 <_strtod_l+0x384>
 800a3b6:	4996      	ldr	r1, [pc, #600]	@ (800a610 <_strtod_l+0x580>)
 800a3b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3ba:	a819      	add	r0, sp, #100	@ 0x64
 800a3bc:	f001 fbcc 	bl	800bb58 <__hexnan>
 800a3c0:	2805      	cmp	r0, #5
 800a3c2:	d127      	bne.n	800a414 <_strtod_l+0x384>
 800a3c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a3ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a3ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a3d2:	e696      	b.n	800a102 <_strtod_l+0x72>
 800a3d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d6:	fb08 2101 	mla	r1, r8, r1, r2
 800a3da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a3de:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3e0:	e7b5      	b.n	800a34e <_strtod_l+0x2be>
 800a3e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a3e4:	e7da      	b.n	800a39c <_strtod_l+0x30c>
 800a3e6:	498b      	ldr	r1, [pc, #556]	@ (800a614 <_strtod_l+0x584>)
 800a3e8:	a819      	add	r0, sp, #100	@ 0x64
 800a3ea:	f001 fba1 	bl	800bb30 <__match>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f43f aea2 	beq.w	800a138 <_strtod_l+0xa8>
 800a3f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3f6:	4988      	ldr	r1, [pc, #544]	@ (800a618 <_strtod_l+0x588>)
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	a819      	add	r0, sp, #100	@ 0x64
 800a3fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a3fe:	f001 fb97 	bl	800bb30 <__match>
 800a402:	b910      	cbnz	r0, 800a40a <_strtod_l+0x37a>
 800a404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a406:	3301      	adds	r3, #1
 800a408:	9319      	str	r3, [sp, #100]	@ 0x64
 800a40a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a628 <_strtod_l+0x598>
 800a40e:	f04f 0a00 	mov.w	sl, #0
 800a412:	e676      	b.n	800a102 <_strtod_l+0x72>
 800a414:	4881      	ldr	r0, [pc, #516]	@ (800a61c <_strtod_l+0x58c>)
 800a416:	f001 f8c7 	bl	800b5a8 <nan>
 800a41a:	ec5b ab10 	vmov	sl, fp, d0
 800a41e:	e670      	b.n	800a102 <_strtod_l+0x72>
 800a420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a422:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a424:	eba8 0303 	sub.w	r3, r8, r3
 800a428:	f1b9 0f00 	cmp.w	r9, #0
 800a42c:	bf08      	it	eq
 800a42e:	46a9      	moveq	r9, r5
 800a430:	2d10      	cmp	r5, #16
 800a432:	9309      	str	r3, [sp, #36]	@ 0x24
 800a434:	462c      	mov	r4, r5
 800a436:	bfa8      	it	ge
 800a438:	2410      	movge	r4, #16
 800a43a:	f7f6 f863 	bl	8000504 <__aeabi_ui2d>
 800a43e:	2d09      	cmp	r5, #9
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	dc13      	bgt.n	800a46e <_strtod_l+0x3de>
 800a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f43f ae5a 	beq.w	800a102 <_strtod_l+0x72>
 800a44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a450:	dd78      	ble.n	800a544 <_strtod_l+0x4b4>
 800a452:	2b16      	cmp	r3, #22
 800a454:	dc5f      	bgt.n	800a516 <_strtod_l+0x486>
 800a456:	4972      	ldr	r1, [pc, #456]	@ (800a620 <_strtod_l+0x590>)
 800a458:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a460:	4652      	mov	r2, sl
 800a462:	465b      	mov	r3, fp
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4682      	mov	sl, r0
 800a46a:	468b      	mov	fp, r1
 800a46c:	e649      	b.n	800a102 <_strtod_l+0x72>
 800a46e:	4b6c      	ldr	r3, [pc, #432]	@ (800a620 <_strtod_l+0x590>)
 800a470:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a474:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	4682      	mov	sl, r0
 800a47e:	4638      	mov	r0, r7
 800a480:	468b      	mov	fp, r1
 800a482:	f7f6 f83f 	bl	8000504 <__aeabi_ui2d>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4650      	mov	r0, sl
 800a48c:	4659      	mov	r1, fp
 800a48e:	f7f5 fefd 	bl	800028c <__adddf3>
 800a492:	2d0f      	cmp	r5, #15
 800a494:	4682      	mov	sl, r0
 800a496:	468b      	mov	fp, r1
 800a498:	ddd5      	ble.n	800a446 <_strtod_l+0x3b6>
 800a49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a49c:	1b2c      	subs	r4, r5, r4
 800a49e:	441c      	add	r4, r3
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	f340 8093 	ble.w	800a5cc <_strtod_l+0x53c>
 800a4a6:	f014 030f 	ands.w	r3, r4, #15
 800a4aa:	d00a      	beq.n	800a4c2 <_strtod_l+0x432>
 800a4ac:	495c      	ldr	r1, [pc, #368]	@ (800a620 <_strtod_l+0x590>)
 800a4ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	465b      	mov	r3, fp
 800a4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4682      	mov	sl, r0
 800a4c0:	468b      	mov	fp, r1
 800a4c2:	f034 040f 	bics.w	r4, r4, #15
 800a4c6:	d073      	beq.n	800a5b0 <_strtod_l+0x520>
 800a4c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a4cc:	dd49      	ble.n	800a562 <_strtod_l+0x4d2>
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	46a0      	mov	r8, r4
 800a4d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4d4:	46a1      	mov	r9, r4
 800a4d6:	9a05      	ldr	r2, [sp, #20]
 800a4d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a628 <_strtod_l+0x598>
 800a4dc:	2322      	movs	r3, #34	@ 0x22
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f04f 0a00 	mov.w	sl, #0
 800a4e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f43f ae0b 	beq.w	800a102 <_strtod_l+0x72>
 800a4ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4ee:	9805      	ldr	r0, [sp, #20]
 800a4f0:	f7ff f946 	bl	8009780 <_Bfree>
 800a4f4:	9805      	ldr	r0, [sp, #20]
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	f7ff f942 	bl	8009780 <_Bfree>
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	4641      	mov	r1, r8
 800a500:	f7ff f93e 	bl	8009780 <_Bfree>
 800a504:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a506:	9805      	ldr	r0, [sp, #20]
 800a508:	f7ff f93a 	bl	8009780 <_Bfree>
 800a50c:	9805      	ldr	r0, [sp, #20]
 800a50e:	4621      	mov	r1, r4
 800a510:	f7ff f936 	bl	8009780 <_Bfree>
 800a514:	e5f5      	b.n	800a102 <_strtod_l+0x72>
 800a516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a518:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a51c:	4293      	cmp	r3, r2
 800a51e:	dbbc      	blt.n	800a49a <_strtod_l+0x40a>
 800a520:	4c3f      	ldr	r4, [pc, #252]	@ (800a620 <_strtod_l+0x590>)
 800a522:	f1c5 050f 	rsb	r5, r5, #15
 800a526:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a52a:	4652      	mov	r2, sl
 800a52c:	465b      	mov	r3, fp
 800a52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a532:	f7f6 f861 	bl	80005f8 <__aeabi_dmul>
 800a536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a538:	1b5d      	subs	r5, r3, r5
 800a53a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a53e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a542:	e78f      	b.n	800a464 <_strtod_l+0x3d4>
 800a544:	3316      	adds	r3, #22
 800a546:	dba8      	blt.n	800a49a <_strtod_l+0x40a>
 800a548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a54a:	eba3 0808 	sub.w	r8, r3, r8
 800a54e:	4b34      	ldr	r3, [pc, #208]	@ (800a620 <_strtod_l+0x590>)
 800a550:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a554:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a558:	4650      	mov	r0, sl
 800a55a:	4659      	mov	r1, fp
 800a55c:	f7f6 f976 	bl	800084c <__aeabi_ddiv>
 800a560:	e782      	b.n	800a468 <_strtod_l+0x3d8>
 800a562:	2300      	movs	r3, #0
 800a564:	4f2f      	ldr	r7, [pc, #188]	@ (800a624 <_strtod_l+0x594>)
 800a566:	1124      	asrs	r4, r4, #4
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	461e      	mov	r6, r3
 800a56e:	2c01      	cmp	r4, #1
 800a570:	dc21      	bgt.n	800a5b6 <_strtod_l+0x526>
 800a572:	b10b      	cbz	r3, 800a578 <_strtod_l+0x4e8>
 800a574:	4682      	mov	sl, r0
 800a576:	468b      	mov	fp, r1
 800a578:	492a      	ldr	r1, [pc, #168]	@ (800a624 <_strtod_l+0x594>)
 800a57a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a57e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a582:	4652      	mov	r2, sl
 800a584:	465b      	mov	r3, fp
 800a586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	4b26      	ldr	r3, [pc, #152]	@ (800a628 <_strtod_l+0x598>)
 800a590:	460a      	mov	r2, r1
 800a592:	400b      	ands	r3, r1
 800a594:	4925      	ldr	r1, [pc, #148]	@ (800a62c <_strtod_l+0x59c>)
 800a596:	428b      	cmp	r3, r1
 800a598:	4682      	mov	sl, r0
 800a59a:	d898      	bhi.n	800a4ce <_strtod_l+0x43e>
 800a59c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf86      	itte	hi
 800a5a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a630 <_strtod_l+0x5a0>
 800a5a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	9308      	str	r3, [sp, #32]
 800a5b4:	e076      	b.n	800a6a4 <_strtod_l+0x614>
 800a5b6:	07e2      	lsls	r2, r4, #31
 800a5b8:	d504      	bpl.n	800a5c4 <_strtod_l+0x534>
 800a5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	3601      	adds	r6, #1
 800a5c6:	1064      	asrs	r4, r4, #1
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	e7d0      	b.n	800a56e <_strtod_l+0x4de>
 800a5cc:	d0f0      	beq.n	800a5b0 <_strtod_l+0x520>
 800a5ce:	4264      	negs	r4, r4
 800a5d0:	f014 020f 	ands.w	r2, r4, #15
 800a5d4:	d00a      	beq.n	800a5ec <_strtod_l+0x55c>
 800a5d6:	4b12      	ldr	r3, [pc, #72]	@ (800a620 <_strtod_l+0x590>)
 800a5d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5dc:	4650      	mov	r0, sl
 800a5de:	4659      	mov	r1, fp
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f932 	bl	800084c <__aeabi_ddiv>
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	468b      	mov	fp, r1
 800a5ec:	1124      	asrs	r4, r4, #4
 800a5ee:	d0df      	beq.n	800a5b0 <_strtod_l+0x520>
 800a5f0:	2c1f      	cmp	r4, #31
 800a5f2:	dd1f      	ble.n	800a634 <_strtod_l+0x5a4>
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	46a0      	mov	r8, r4
 800a5f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5fa:	46a1      	mov	r9, r4
 800a5fc:	9a05      	ldr	r2, [sp, #20]
 800a5fe:	2322      	movs	r3, #34	@ 0x22
 800a600:	f04f 0a00 	mov.w	sl, #0
 800a604:	f04f 0b00 	mov.w	fp, #0
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	e76b      	b.n	800a4e4 <_strtod_l+0x454>
 800a60c:	0800bfb9 	.word	0x0800bfb9
 800a610:	0800c280 	.word	0x0800c280
 800a614:	0800bfb1 	.word	0x0800bfb1
 800a618:	0800bfe8 	.word	0x0800bfe8
 800a61c:	0800c121 	.word	0x0800c121
 800a620:	0800c1b8 	.word	0x0800c1b8
 800a624:	0800c190 	.word	0x0800c190
 800a628:	7ff00000 	.word	0x7ff00000
 800a62c:	7ca00000 	.word	0x7ca00000
 800a630:	7fefffff 	.word	0x7fefffff
 800a634:	f014 0310 	ands.w	r3, r4, #16
 800a638:	bf18      	it	ne
 800a63a:	236a      	movne	r3, #106	@ 0x6a
 800a63c:	4ea9      	ldr	r6, [pc, #676]	@ (800a8e4 <_strtod_l+0x854>)
 800a63e:	9308      	str	r3, [sp, #32]
 800a640:	4650      	mov	r0, sl
 800a642:	4659      	mov	r1, fp
 800a644:	2300      	movs	r3, #0
 800a646:	07e7      	lsls	r7, r4, #31
 800a648:	d504      	bpl.n	800a654 <_strtod_l+0x5c4>
 800a64a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	2301      	movs	r3, #1
 800a654:	1064      	asrs	r4, r4, #1
 800a656:	f106 0608 	add.w	r6, r6, #8
 800a65a:	d1f4      	bne.n	800a646 <_strtod_l+0x5b6>
 800a65c:	b10b      	cbz	r3, 800a662 <_strtod_l+0x5d2>
 800a65e:	4682      	mov	sl, r0
 800a660:	468b      	mov	fp, r1
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	b1b3      	cbz	r3, 800a694 <_strtod_l+0x604>
 800a666:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a66a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a66e:	2b00      	cmp	r3, #0
 800a670:	4659      	mov	r1, fp
 800a672:	dd0f      	ble.n	800a694 <_strtod_l+0x604>
 800a674:	2b1f      	cmp	r3, #31
 800a676:	dd56      	ble.n	800a726 <_strtod_l+0x696>
 800a678:	2b34      	cmp	r3, #52	@ 0x34
 800a67a:	bfde      	ittt	le
 800a67c:	f04f 33ff 	movle.w	r3, #4294967295
 800a680:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a684:	4093      	lslle	r3, r2
 800a686:	f04f 0a00 	mov.w	sl, #0
 800a68a:	bfcc      	ite	gt
 800a68c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a690:	ea03 0b01 	andle.w	fp, r3, r1
 800a694:	2200      	movs	r2, #0
 800a696:	2300      	movs	r3, #0
 800a698:	4650      	mov	r0, sl
 800a69a:	4659      	mov	r1, fp
 800a69c:	f7f6 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1a7      	bne.n	800a5f4 <_strtod_l+0x564>
 800a6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a6aa:	9805      	ldr	r0, [sp, #20]
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	464a      	mov	r2, r9
 800a6b0:	f7ff f8ce 	bl	8009850 <__s2b>
 800a6b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f43f af09 	beq.w	800a4ce <_strtod_l+0x43e>
 800a6bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	eba3 0308 	sub.w	r3, r3, r8
 800a6c6:	bfa8      	it	ge
 800a6c8:	2300      	movge	r3, #0
 800a6ca:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6cc:	2400      	movs	r4, #0
 800a6ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a6d4:	46a0      	mov	r8, r4
 800a6d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	6859      	ldr	r1, [r3, #4]
 800a6dc:	f7ff f810 	bl	8009700 <_Balloc>
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f43f aef7 	beq.w	800a4d6 <_strtod_l+0x446>
 800a6e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	3202      	adds	r2, #2
 800a6ee:	f103 010c 	add.w	r1, r3, #12
 800a6f2:	0092      	lsls	r2, r2, #2
 800a6f4:	300c      	adds	r0, #12
 800a6f6:	f000 ff47 	bl	800b588 <memcpy>
 800a6fa:	ec4b ab10 	vmov	d0, sl, fp
 800a6fe:	9805      	ldr	r0, [sp, #20]
 800a700:	aa1c      	add	r2, sp, #112	@ 0x70
 800a702:	a91b      	add	r1, sp, #108	@ 0x6c
 800a704:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a708:	f7ff fbd6 	bl	8009eb8 <__d2b>
 800a70c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a70e:	2800      	cmp	r0, #0
 800a710:	f43f aee1 	beq.w	800a4d6 <_strtod_l+0x446>
 800a714:	9805      	ldr	r0, [sp, #20]
 800a716:	2101      	movs	r1, #1
 800a718:	f7ff f930 	bl	800997c <__i2b>
 800a71c:	4680      	mov	r8, r0
 800a71e:	b948      	cbnz	r0, 800a734 <_strtod_l+0x6a4>
 800a720:	f04f 0800 	mov.w	r8, #0
 800a724:	e6d7      	b.n	800a4d6 <_strtod_l+0x446>
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	fa02 f303 	lsl.w	r3, r2, r3
 800a72e:	ea03 0a0a 	and.w	sl, r3, sl
 800a732:	e7af      	b.n	800a694 <_strtod_l+0x604>
 800a734:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a736:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a738:	2d00      	cmp	r5, #0
 800a73a:	bfab      	itete	ge
 800a73c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a73e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a740:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a742:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a744:	bfac      	ite	ge
 800a746:	18ef      	addge	r7, r5, r3
 800a748:	1b5e      	sublt	r6, r3, r5
 800a74a:	9b08      	ldr	r3, [sp, #32]
 800a74c:	1aed      	subs	r5, r5, r3
 800a74e:	4415      	add	r5, r2
 800a750:	4b65      	ldr	r3, [pc, #404]	@ (800a8e8 <_strtod_l+0x858>)
 800a752:	3d01      	subs	r5, #1
 800a754:	429d      	cmp	r5, r3
 800a756:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a75a:	da50      	bge.n	800a7fe <_strtod_l+0x76e>
 800a75c:	1b5b      	subs	r3, r3, r5
 800a75e:	2b1f      	cmp	r3, #31
 800a760:	eba2 0203 	sub.w	r2, r2, r3
 800a764:	f04f 0101 	mov.w	r1, #1
 800a768:	dc3d      	bgt.n	800a7e6 <_strtod_l+0x756>
 800a76a:	fa01 f303 	lsl.w	r3, r1, r3
 800a76e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a770:	2300      	movs	r3, #0
 800a772:	9310      	str	r3, [sp, #64]	@ 0x40
 800a774:	18bd      	adds	r5, r7, r2
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	42af      	cmp	r7, r5
 800a77a:	4416      	add	r6, r2
 800a77c:	441e      	add	r6, r3
 800a77e:	463b      	mov	r3, r7
 800a780:	bfa8      	it	ge
 800a782:	462b      	movge	r3, r5
 800a784:	42b3      	cmp	r3, r6
 800a786:	bfa8      	it	ge
 800a788:	4633      	movge	r3, r6
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfc2      	ittt	gt
 800a78e:	1aed      	subgt	r5, r5, r3
 800a790:	1af6      	subgt	r6, r6, r3
 800a792:	1aff      	subgt	r7, r7, r3
 800a794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a796:	2b00      	cmp	r3, #0
 800a798:	dd16      	ble.n	800a7c8 <_strtod_l+0x738>
 800a79a:	4641      	mov	r1, r8
 800a79c:	9805      	ldr	r0, [sp, #20]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7ff f9a4 	bl	8009aec <__pow5mult>
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d0ba      	beq.n	800a720 <_strtod_l+0x690>
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7ae:	9805      	ldr	r0, [sp, #20]
 800a7b0:	f7ff f8fa 	bl	80099a8 <__multiply>
 800a7b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f43f ae8d 	beq.w	800a4d6 <_strtod_l+0x446>
 800a7bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7be:	9805      	ldr	r0, [sp, #20]
 800a7c0:	f7fe ffde 	bl	8009780 <_Bfree>
 800a7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7c8:	2d00      	cmp	r5, #0
 800a7ca:	dc1d      	bgt.n	800a808 <_strtod_l+0x778>
 800a7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dd23      	ble.n	800a81a <_strtod_l+0x78a>
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a7d6:	9805      	ldr	r0, [sp, #20]
 800a7d8:	f7ff f988 	bl	8009aec <__pow5mult>
 800a7dc:	4681      	mov	r9, r0
 800a7de:	b9e0      	cbnz	r0, 800a81a <_strtod_l+0x78a>
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	e677      	b.n	800a4d6 <_strtod_l+0x446>
 800a7e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a7ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a7ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a7f2:	35e2      	adds	r5, #226	@ 0xe2
 800a7f4:	fa01 f305 	lsl.w	r3, r1, r5
 800a7f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a7fc:	e7ba      	b.n	800a774 <_strtod_l+0x6e4>
 800a7fe:	2300      	movs	r3, #0
 800a800:	9310      	str	r3, [sp, #64]	@ 0x40
 800a802:	2301      	movs	r3, #1
 800a804:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a806:	e7b5      	b.n	800a774 <_strtod_l+0x6e4>
 800a808:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a80a:	9805      	ldr	r0, [sp, #20]
 800a80c:	462a      	mov	r2, r5
 800a80e:	f7ff f9c7 	bl	8009ba0 <__lshift>
 800a812:	901a      	str	r0, [sp, #104]	@ 0x68
 800a814:	2800      	cmp	r0, #0
 800a816:	d1d9      	bne.n	800a7cc <_strtod_l+0x73c>
 800a818:	e65d      	b.n	800a4d6 <_strtod_l+0x446>
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	dd07      	ble.n	800a82e <_strtod_l+0x79e>
 800a81e:	4649      	mov	r1, r9
 800a820:	9805      	ldr	r0, [sp, #20]
 800a822:	4632      	mov	r2, r6
 800a824:	f7ff f9bc 	bl	8009ba0 <__lshift>
 800a828:	4681      	mov	r9, r0
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0d8      	beq.n	800a7e0 <_strtod_l+0x750>
 800a82e:	2f00      	cmp	r7, #0
 800a830:	dd08      	ble.n	800a844 <_strtod_l+0x7b4>
 800a832:	4641      	mov	r1, r8
 800a834:	9805      	ldr	r0, [sp, #20]
 800a836:	463a      	mov	r2, r7
 800a838:	f7ff f9b2 	bl	8009ba0 <__lshift>
 800a83c:	4680      	mov	r8, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f ae49 	beq.w	800a4d6 <_strtod_l+0x446>
 800a844:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a846:	9805      	ldr	r0, [sp, #20]
 800a848:	464a      	mov	r2, r9
 800a84a:	f7ff fa31 	bl	8009cb0 <__mdiff>
 800a84e:	4604      	mov	r4, r0
 800a850:	2800      	cmp	r0, #0
 800a852:	f43f ae40 	beq.w	800a4d6 <_strtod_l+0x446>
 800a856:	68c3      	ldr	r3, [r0, #12]
 800a858:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a85a:	2300      	movs	r3, #0
 800a85c:	60c3      	str	r3, [r0, #12]
 800a85e:	4641      	mov	r1, r8
 800a860:	f7ff fa0a 	bl	8009c78 <__mcmp>
 800a864:	2800      	cmp	r0, #0
 800a866:	da45      	bge.n	800a8f4 <_strtod_l+0x864>
 800a868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86a:	ea53 030a 	orrs.w	r3, r3, sl
 800a86e:	d16b      	bne.n	800a948 <_strtod_l+0x8b8>
 800a870:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a874:	2b00      	cmp	r3, #0
 800a876:	d167      	bne.n	800a948 <_strtod_l+0x8b8>
 800a878:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a87c:	0d1b      	lsrs	r3, r3, #20
 800a87e:	051b      	lsls	r3, r3, #20
 800a880:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a884:	d960      	bls.n	800a948 <_strtod_l+0x8b8>
 800a886:	6963      	ldr	r3, [r4, #20]
 800a888:	b913      	cbnz	r3, 800a890 <_strtod_l+0x800>
 800a88a:	6923      	ldr	r3, [r4, #16]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	dd5b      	ble.n	800a948 <_strtod_l+0x8b8>
 800a890:	4621      	mov	r1, r4
 800a892:	2201      	movs	r2, #1
 800a894:	9805      	ldr	r0, [sp, #20]
 800a896:	f7ff f983 	bl	8009ba0 <__lshift>
 800a89a:	4641      	mov	r1, r8
 800a89c:	4604      	mov	r4, r0
 800a89e:	f7ff f9eb 	bl	8009c78 <__mcmp>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	dd50      	ble.n	800a948 <_strtod_l+0x8b8>
 800a8a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8aa:	9a08      	ldr	r2, [sp, #32]
 800a8ac:	0d1b      	lsrs	r3, r3, #20
 800a8ae:	051b      	lsls	r3, r3, #20
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	d06a      	beq.n	800a98a <_strtod_l+0x8fa>
 800a8b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8b8:	d867      	bhi.n	800a98a <_strtod_l+0x8fa>
 800a8ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a8be:	f67f ae9d 	bls.w	800a5fc <_strtod_l+0x56c>
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ec <_strtod_l+0x85c>)
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	4659      	mov	r1, fp
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f7f5 fe95 	bl	80005f8 <__aeabi_dmul>
 800a8ce:	4b08      	ldr	r3, [pc, #32]	@ (800a8f0 <_strtod_l+0x860>)
 800a8d0:	400b      	ands	r3, r1
 800a8d2:	4682      	mov	sl, r0
 800a8d4:	468b      	mov	fp, r1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f47f ae08 	bne.w	800a4ec <_strtod_l+0x45c>
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	2322      	movs	r3, #34	@ 0x22
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	e603      	b.n	800a4ec <_strtod_l+0x45c>
 800a8e4:	0800c2a8 	.word	0x0800c2a8
 800a8e8:	fffffc02 	.word	0xfffffc02
 800a8ec:	39500000 	.word	0x39500000
 800a8f0:	7ff00000 	.word	0x7ff00000
 800a8f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a8f8:	d165      	bne.n	800a9c6 <_strtod_l+0x936>
 800a8fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a900:	b35a      	cbz	r2, 800a95a <_strtod_l+0x8ca>
 800a902:	4a9f      	ldr	r2, [pc, #636]	@ (800ab80 <_strtod_l+0xaf0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d12b      	bne.n	800a960 <_strtod_l+0x8d0>
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	4651      	mov	r1, sl
 800a90c:	b303      	cbz	r3, 800a950 <_strtod_l+0x8c0>
 800a90e:	4b9d      	ldr	r3, [pc, #628]	@ (800ab84 <_strtod_l+0xaf4>)
 800a910:	465a      	mov	r2, fp
 800a912:	4013      	ands	r3, r2
 800a914:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a918:	f04f 32ff 	mov.w	r2, #4294967295
 800a91c:	d81b      	bhi.n	800a956 <_strtod_l+0x8c6>
 800a91e:	0d1b      	lsrs	r3, r3, #20
 800a920:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	4299      	cmp	r1, r3
 800a92a:	d119      	bne.n	800a960 <_strtod_l+0x8d0>
 800a92c:	4b96      	ldr	r3, [pc, #600]	@ (800ab88 <_strtod_l+0xaf8>)
 800a92e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a930:	429a      	cmp	r2, r3
 800a932:	d102      	bne.n	800a93a <_strtod_l+0x8aa>
 800a934:	3101      	adds	r1, #1
 800a936:	f43f adce 	beq.w	800a4d6 <_strtod_l+0x446>
 800a93a:	4b92      	ldr	r3, [pc, #584]	@ (800ab84 <_strtod_l+0xaf4>)
 800a93c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a93e:	401a      	ands	r2, r3
 800a940:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a944:	f04f 0a00 	mov.w	sl, #0
 800a948:	9b08      	ldr	r3, [sp, #32]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1b9      	bne.n	800a8c2 <_strtod_l+0x832>
 800a94e:	e5cd      	b.n	800a4ec <_strtod_l+0x45c>
 800a950:	f04f 33ff 	mov.w	r3, #4294967295
 800a954:	e7e8      	b.n	800a928 <_strtod_l+0x898>
 800a956:	4613      	mov	r3, r2
 800a958:	e7e6      	b.n	800a928 <_strtod_l+0x898>
 800a95a:	ea53 030a 	orrs.w	r3, r3, sl
 800a95e:	d0a2      	beq.n	800a8a6 <_strtod_l+0x816>
 800a960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a962:	b1db      	cbz	r3, 800a99c <_strtod_l+0x90c>
 800a964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a966:	4213      	tst	r3, r2
 800a968:	d0ee      	beq.n	800a948 <_strtod_l+0x8b8>
 800a96a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a96c:	9a08      	ldr	r2, [sp, #32]
 800a96e:	4650      	mov	r0, sl
 800a970:	4659      	mov	r1, fp
 800a972:	b1bb      	cbz	r3, 800a9a4 <_strtod_l+0x914>
 800a974:	f7ff fb6e 	bl	800a054 <sulp>
 800a978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a97c:	ec53 2b10 	vmov	r2, r3, d0
 800a980:	f7f5 fc84 	bl	800028c <__adddf3>
 800a984:	4682      	mov	sl, r0
 800a986:	468b      	mov	fp, r1
 800a988:	e7de      	b.n	800a948 <_strtod_l+0x8b8>
 800a98a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a98e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a992:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a996:	f04f 3aff 	mov.w	sl, #4294967295
 800a99a:	e7d5      	b.n	800a948 <_strtod_l+0x8b8>
 800a99c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a99e:	ea13 0f0a 	tst.w	r3, sl
 800a9a2:	e7e1      	b.n	800a968 <_strtod_l+0x8d8>
 800a9a4:	f7ff fb56 	bl	800a054 <sulp>
 800a9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ac:	ec53 2b10 	vmov	r2, r3, d0
 800a9b0:	f7f5 fc6a 	bl	8000288 <__aeabi_dsub>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	468b      	mov	fp, r1
 800a9bc:	f7f6 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d0c1      	beq.n	800a948 <_strtod_l+0x8b8>
 800a9c4:	e61a      	b.n	800a5fc <_strtod_l+0x56c>
 800a9c6:	4641      	mov	r1, r8
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7ff facd 	bl	8009f68 <__ratio>
 800a9ce:	ec57 6b10 	vmov	r6, r7, d0
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f6 f888 	bl	8000af0 <__aeabi_dcmple>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d06f      	beq.n	800aac4 <_strtod_l+0xa34>
 800a9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d17a      	bne.n	800aae0 <_strtod_l+0xa50>
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	d158      	bne.n	800aaa2 <_strtod_l+0xa12>
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d15a      	bne.n	800aab0 <_strtod_l+0xa20>
 800a9fa:	4b64      	ldr	r3, [pc, #400]	@ (800ab8c <_strtod_l+0xafc>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f6 f86b 	bl	8000adc <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d159      	bne.n	800aabe <_strtod_l+0xa2e>
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4b60      	ldr	r3, [pc, #384]	@ (800ab90 <_strtod_l+0xb00>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	f7f5 fdf1 	bl	80005f8 <__aeabi_dmul>
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa1e:	9606      	str	r6, [sp, #24]
 800aa20:	9307      	str	r3, [sp, #28]
 800aa22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa26:	4d57      	ldr	r5, [pc, #348]	@ (800ab84 <_strtod_l+0xaf4>)
 800aa28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2e:	401d      	ands	r5, r3
 800aa30:	4b58      	ldr	r3, [pc, #352]	@ (800ab94 <_strtod_l+0xb04>)
 800aa32:	429d      	cmp	r5, r3
 800aa34:	f040 80b2 	bne.w	800ab9c <_strtod_l+0xb0c>
 800aa38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aa3e:	ec4b ab10 	vmov	d0, sl, fp
 800aa42:	f7ff f9c9 	bl	8009dd8 <__ulp>
 800aa46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa4a:	ec51 0b10 	vmov	r0, r1, d0
 800aa4e:	f7f5 fdd3 	bl	80005f8 <__aeabi_dmul>
 800aa52:	4652      	mov	r2, sl
 800aa54:	465b      	mov	r3, fp
 800aa56:	f7f5 fc19 	bl	800028c <__adddf3>
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4949      	ldr	r1, [pc, #292]	@ (800ab84 <_strtod_l+0xaf4>)
 800aa5e:	4a4e      	ldr	r2, [pc, #312]	@ (800ab98 <_strtod_l+0xb08>)
 800aa60:	4019      	ands	r1, r3
 800aa62:	4291      	cmp	r1, r2
 800aa64:	4682      	mov	sl, r0
 800aa66:	d942      	bls.n	800aaee <_strtod_l+0xa5e>
 800aa68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa6a:	4b47      	ldr	r3, [pc, #284]	@ (800ab88 <_strtod_l+0xaf8>)
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d103      	bne.n	800aa78 <_strtod_l+0x9e8>
 800aa70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa72:	3301      	adds	r3, #1
 800aa74:	f43f ad2f 	beq.w	800a4d6 <_strtod_l+0x446>
 800aa78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ab88 <_strtod_l+0xaf8>
 800aa7c:	f04f 3aff 	mov.w	sl, #4294967295
 800aa80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa82:	9805      	ldr	r0, [sp, #20]
 800aa84:	f7fe fe7c 	bl	8009780 <_Bfree>
 800aa88:	9805      	ldr	r0, [sp, #20]
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	f7fe fe78 	bl	8009780 <_Bfree>
 800aa90:	9805      	ldr	r0, [sp, #20]
 800aa92:	4641      	mov	r1, r8
 800aa94:	f7fe fe74 	bl	8009780 <_Bfree>
 800aa98:	9805      	ldr	r0, [sp, #20]
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	f7fe fe70 	bl	8009780 <_Bfree>
 800aaa0:	e619      	b.n	800a6d6 <_strtod_l+0x646>
 800aaa2:	f1ba 0f01 	cmp.w	sl, #1
 800aaa6:	d103      	bne.n	800aab0 <_strtod_l+0xa20>
 800aaa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f43f ada6 	beq.w	800a5fc <_strtod_l+0x56c>
 800aab0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ab60 <_strtod_l+0xad0>
 800aab4:	4f35      	ldr	r7, [pc, #212]	@ (800ab8c <_strtod_l+0xafc>)
 800aab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aaba:	2600      	movs	r6, #0
 800aabc:	e7b1      	b.n	800aa22 <_strtod_l+0x992>
 800aabe:	4f34      	ldr	r7, [pc, #208]	@ (800ab90 <_strtod_l+0xb00>)
 800aac0:	2600      	movs	r6, #0
 800aac2:	e7aa      	b.n	800aa1a <_strtod_l+0x98a>
 800aac4:	4b32      	ldr	r3, [pc, #200]	@ (800ab90 <_strtod_l+0xb00>)
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	2200      	movs	r2, #0
 800aacc:	f7f5 fd94 	bl	80005f8 <__aeabi_dmul>
 800aad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d09f      	beq.n	800aa1a <_strtod_l+0x98a>
 800aada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aade:	e7a0      	b.n	800aa22 <_strtod_l+0x992>
 800aae0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ab68 <_strtod_l+0xad8>
 800aae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aae8:	ec57 6b17 	vmov	r6, r7, d7
 800aaec:	e799      	b.n	800aa22 <_strtod_l+0x992>
 800aaee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1c1      	bne.n	800aa80 <_strtod_l+0x9f0>
 800aafc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab00:	0d1b      	lsrs	r3, r3, #20
 800ab02:	051b      	lsls	r3, r3, #20
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d1bb      	bne.n	800aa80 <_strtod_l+0x9f0>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f6 f8d4 	bl	8000cb8 <__aeabi_d2lz>
 800ab10:	f7f5 fd44 	bl	800059c <__aeabi_l2d>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 fbb4 	bl	8000288 <__aeabi_dsub>
 800ab20:	460b      	mov	r3, r1
 800ab22:	4602      	mov	r2, r0
 800ab24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab2e:	ea46 060a 	orr.w	r6, r6, sl
 800ab32:	431e      	orrs	r6, r3
 800ab34:	d06f      	beq.n	800ac16 <_strtod_l+0xb86>
 800ab36:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab70 <_strtod_l+0xae0>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 ffce 	bl	8000adc <__aeabi_dcmplt>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f47f acd3 	bne.w	800a4ec <_strtod_l+0x45c>
 800ab46:	a30c      	add	r3, pc, #48	@ (adr r3, 800ab78 <_strtod_l+0xae8>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab50:	f7f5 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d093      	beq.n	800aa80 <_strtod_l+0x9f0>
 800ab58:	e4c8      	b.n	800a4ec <_strtod_l+0x45c>
 800ab5a:	bf00      	nop
 800ab5c:	f3af 8000 	nop.w
 800ab60:	00000000 	.word	0x00000000
 800ab64:	bff00000 	.word	0xbff00000
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	3ff00000 	.word	0x3ff00000
 800ab70:	94a03595 	.word	0x94a03595
 800ab74:	3fdfffff 	.word	0x3fdfffff
 800ab78:	35afe535 	.word	0x35afe535
 800ab7c:	3fe00000 	.word	0x3fe00000
 800ab80:	000fffff 	.word	0x000fffff
 800ab84:	7ff00000 	.word	0x7ff00000
 800ab88:	7fefffff 	.word	0x7fefffff
 800ab8c:	3ff00000 	.word	0x3ff00000
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	7fe00000 	.word	0x7fe00000
 800ab98:	7c9fffff 	.word	0x7c9fffff
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	b323      	cbz	r3, 800abea <_strtod_l+0xb5a>
 800aba0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aba4:	d821      	bhi.n	800abea <_strtod_l+0xb5a>
 800aba6:	a328      	add	r3, pc, #160	@ (adr r3, 800ac48 <_strtod_l+0xbb8>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	f7f5 ff9e 	bl	8000af0 <__aeabi_dcmple>
 800abb4:	b1a0      	cbz	r0, 800abe0 <_strtod_l+0xb50>
 800abb6:	4639      	mov	r1, r7
 800abb8:	4630      	mov	r0, r6
 800abba:	f7f5 fff5 	bl	8000ba8 <__aeabi_d2uiz>
 800abbe:	2801      	cmp	r0, #1
 800abc0:	bf38      	it	cc
 800abc2:	2001      	movcc	r0, #1
 800abc4:	f7f5 fc9e 	bl	8000504 <__aeabi_ui2d>
 800abc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	b9fb      	cbnz	r3, 800ac10 <_strtod_l+0xb80>
 800abd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abd4:	9014      	str	r0, [sp, #80]	@ 0x50
 800abd6:	9315      	str	r3, [sp, #84]	@ 0x54
 800abd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800abdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abe0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abe2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800abe6:	1b5b      	subs	r3, r3, r5
 800abe8:	9311      	str	r3, [sp, #68]	@ 0x44
 800abea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800abee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800abf2:	f7ff f8f1 	bl	8009dd8 <__ulp>
 800abf6:	4650      	mov	r0, sl
 800abf8:	ec53 2b10 	vmov	r2, r3, d0
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ac02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac06:	f7f5 fb41 	bl	800028c <__adddf3>
 800ac0a:	4682      	mov	sl, r0
 800ac0c:	468b      	mov	fp, r1
 800ac0e:	e770      	b.n	800aaf2 <_strtod_l+0xa62>
 800ac10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac14:	e7e0      	b.n	800abd8 <_strtod_l+0xb48>
 800ac16:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac50 <_strtod_l+0xbc0>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	f7f5 ff5e 	bl	8000adc <__aeabi_dcmplt>
 800ac20:	e798      	b.n	800ab54 <_strtod_l+0xac4>
 800ac22:	2300      	movs	r3, #0
 800ac24:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	f7ff ba6d 	b.w	800a10a <_strtod_l+0x7a>
 800ac30:	2a65      	cmp	r2, #101	@ 0x65
 800ac32:	f43f ab68 	beq.w	800a306 <_strtod_l+0x276>
 800ac36:	2a45      	cmp	r2, #69	@ 0x45
 800ac38:	f43f ab65 	beq.w	800a306 <_strtod_l+0x276>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	f7ff bba0 	b.w	800a382 <_strtod_l+0x2f2>
 800ac42:	bf00      	nop
 800ac44:	f3af 8000 	nop.w
 800ac48:	ffc00000 	.word	0xffc00000
 800ac4c:	41dfffff 	.word	0x41dfffff
 800ac50:	94a03595 	.word	0x94a03595
 800ac54:	3fcfffff 	.word	0x3fcfffff

0800ac58 <_strtod_r>:
 800ac58:	4b01      	ldr	r3, [pc, #4]	@ (800ac60 <_strtod_r+0x8>)
 800ac5a:	f7ff ba19 	b.w	800a090 <_strtod_l>
 800ac5e:	bf00      	nop
 800ac60:	20000070 	.word	0x20000070

0800ac64 <_strtol_l.isra.0>:
 800ac64:	2b24      	cmp	r3, #36	@ 0x24
 800ac66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac6a:	4686      	mov	lr, r0
 800ac6c:	4690      	mov	r8, r2
 800ac6e:	d801      	bhi.n	800ac74 <_strtol_l.isra.0+0x10>
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d106      	bne.n	800ac82 <_strtol_l.isra.0+0x1e>
 800ac74:	f7fd fdb6 	bl	80087e4 <__errno>
 800ac78:	2316      	movs	r3, #22
 800ac7a:	6003      	str	r3, [r0, #0]
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac82:	4834      	ldr	r0, [pc, #208]	@ (800ad54 <_strtol_l.isra.0+0xf0>)
 800ac84:	460d      	mov	r5, r1
 800ac86:	462a      	mov	r2, r5
 800ac88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac8c:	5d06      	ldrb	r6, [r0, r4]
 800ac8e:	f016 0608 	ands.w	r6, r6, #8
 800ac92:	d1f8      	bne.n	800ac86 <_strtol_l.isra.0+0x22>
 800ac94:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac96:	d110      	bne.n	800acba <_strtol_l.isra.0+0x56>
 800ac98:	782c      	ldrb	r4, [r5, #0]
 800ac9a:	2601      	movs	r6, #1
 800ac9c:	1c95      	adds	r5, r2, #2
 800ac9e:	f033 0210 	bics.w	r2, r3, #16
 800aca2:	d115      	bne.n	800acd0 <_strtol_l.isra.0+0x6c>
 800aca4:	2c30      	cmp	r4, #48	@ 0x30
 800aca6:	d10d      	bne.n	800acc4 <_strtol_l.isra.0+0x60>
 800aca8:	782a      	ldrb	r2, [r5, #0]
 800acaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acae:	2a58      	cmp	r2, #88	@ 0x58
 800acb0:	d108      	bne.n	800acc4 <_strtol_l.isra.0+0x60>
 800acb2:	786c      	ldrb	r4, [r5, #1]
 800acb4:	3502      	adds	r5, #2
 800acb6:	2310      	movs	r3, #16
 800acb8:	e00a      	b.n	800acd0 <_strtol_l.isra.0+0x6c>
 800acba:	2c2b      	cmp	r4, #43	@ 0x2b
 800acbc:	bf04      	itt	eq
 800acbe:	782c      	ldrbeq	r4, [r5, #0]
 800acc0:	1c95      	addeq	r5, r2, #2
 800acc2:	e7ec      	b.n	800ac9e <_strtol_l.isra.0+0x3a>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f6      	bne.n	800acb6 <_strtol_l.isra.0+0x52>
 800acc8:	2c30      	cmp	r4, #48	@ 0x30
 800acca:	bf14      	ite	ne
 800accc:	230a      	movne	r3, #10
 800acce:	2308      	moveq	r3, #8
 800acd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acd8:	2200      	movs	r2, #0
 800acda:	fbbc f9f3 	udiv	r9, ip, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ace4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ace8:	2f09      	cmp	r7, #9
 800acea:	d80f      	bhi.n	800ad0c <_strtol_l.isra.0+0xa8>
 800acec:	463c      	mov	r4, r7
 800acee:	42a3      	cmp	r3, r4
 800acf0:	dd1b      	ble.n	800ad2a <_strtol_l.isra.0+0xc6>
 800acf2:	1c57      	adds	r7, r2, #1
 800acf4:	d007      	beq.n	800ad06 <_strtol_l.isra.0+0xa2>
 800acf6:	4581      	cmp	r9, r0
 800acf8:	d314      	bcc.n	800ad24 <_strtol_l.isra.0+0xc0>
 800acfa:	d101      	bne.n	800ad00 <_strtol_l.isra.0+0x9c>
 800acfc:	45a2      	cmp	sl, r4
 800acfe:	db11      	blt.n	800ad24 <_strtol_l.isra.0+0xc0>
 800ad00:	fb00 4003 	mla	r0, r0, r3, r4
 800ad04:	2201      	movs	r2, #1
 800ad06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad0a:	e7eb      	b.n	800ace4 <_strtol_l.isra.0+0x80>
 800ad0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad10:	2f19      	cmp	r7, #25
 800ad12:	d801      	bhi.n	800ad18 <_strtol_l.isra.0+0xb4>
 800ad14:	3c37      	subs	r4, #55	@ 0x37
 800ad16:	e7ea      	b.n	800acee <_strtol_l.isra.0+0x8a>
 800ad18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad1c:	2f19      	cmp	r7, #25
 800ad1e:	d804      	bhi.n	800ad2a <_strtol_l.isra.0+0xc6>
 800ad20:	3c57      	subs	r4, #87	@ 0x57
 800ad22:	e7e4      	b.n	800acee <_strtol_l.isra.0+0x8a>
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	e7ed      	b.n	800ad06 <_strtol_l.isra.0+0xa2>
 800ad2a:	1c53      	adds	r3, r2, #1
 800ad2c:	d108      	bne.n	800ad40 <_strtol_l.isra.0+0xdc>
 800ad2e:	2322      	movs	r3, #34	@ 0x22
 800ad30:	f8ce 3000 	str.w	r3, [lr]
 800ad34:	4660      	mov	r0, ip
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	d0a0      	beq.n	800ac7e <_strtol_l.isra.0+0x1a>
 800ad3c:	1e69      	subs	r1, r5, #1
 800ad3e:	e006      	b.n	800ad4e <_strtol_l.isra.0+0xea>
 800ad40:	b106      	cbz	r6, 800ad44 <_strtol_l.isra.0+0xe0>
 800ad42:	4240      	negs	r0, r0
 800ad44:	f1b8 0f00 	cmp.w	r8, #0
 800ad48:	d099      	beq.n	800ac7e <_strtol_l.isra.0+0x1a>
 800ad4a:	2a00      	cmp	r2, #0
 800ad4c:	d1f6      	bne.n	800ad3c <_strtol_l.isra.0+0xd8>
 800ad4e:	f8c8 1000 	str.w	r1, [r8]
 800ad52:	e794      	b.n	800ac7e <_strtol_l.isra.0+0x1a>
 800ad54:	0800c2d1 	.word	0x0800c2d1

0800ad58 <_strtol_r>:
 800ad58:	f7ff bf84 	b.w	800ac64 <_strtol_l.isra.0>

0800ad5c <__ssputs_r>:
 800ad5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad60:	688e      	ldr	r6, [r1, #8]
 800ad62:	461f      	mov	r7, r3
 800ad64:	42be      	cmp	r6, r7
 800ad66:	680b      	ldr	r3, [r1, #0]
 800ad68:	4682      	mov	sl, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	4690      	mov	r8, r2
 800ad6e:	d82d      	bhi.n	800adcc <__ssputs_r+0x70>
 800ad70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad78:	d026      	beq.n	800adc8 <__ssputs_r+0x6c>
 800ad7a:	6965      	ldr	r5, [r4, #20]
 800ad7c:	6909      	ldr	r1, [r1, #16]
 800ad7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad82:	eba3 0901 	sub.w	r9, r3, r1
 800ad86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad8a:	1c7b      	adds	r3, r7, #1
 800ad8c:	444b      	add	r3, r9
 800ad8e:	106d      	asrs	r5, r5, #1
 800ad90:	429d      	cmp	r5, r3
 800ad92:	bf38      	it	cc
 800ad94:	461d      	movcc	r5, r3
 800ad96:	0553      	lsls	r3, r2, #21
 800ad98:	d527      	bpl.n	800adea <__ssputs_r+0x8e>
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7fe fc24 	bl	80095e8 <_malloc_r>
 800ada0:	4606      	mov	r6, r0
 800ada2:	b360      	cbz	r0, 800adfe <__ssputs_r+0xa2>
 800ada4:	6921      	ldr	r1, [r4, #16]
 800ada6:	464a      	mov	r2, r9
 800ada8:	f000 fbee 	bl	800b588 <memcpy>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	6126      	str	r6, [r4, #16]
 800adba:	6165      	str	r5, [r4, #20]
 800adbc:	444e      	add	r6, r9
 800adbe:	eba5 0509 	sub.w	r5, r5, r9
 800adc2:	6026      	str	r6, [r4, #0]
 800adc4:	60a5      	str	r5, [r4, #8]
 800adc6:	463e      	mov	r6, r7
 800adc8:	42be      	cmp	r6, r7
 800adca:	d900      	bls.n	800adce <__ssputs_r+0x72>
 800adcc:	463e      	mov	r6, r7
 800adce:	6820      	ldr	r0, [r4, #0]
 800add0:	4632      	mov	r2, r6
 800add2:	4641      	mov	r1, r8
 800add4:	f000 fb9c 	bl	800b510 <memmove>
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	1b9b      	subs	r3, r3, r6
 800addc:	60a3      	str	r3, [r4, #8]
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	4433      	add	r3, r6
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	2000      	movs	r0, #0
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adea:	462a      	mov	r2, r5
 800adec:	f000 ff61 	bl	800bcb2 <_realloc_r>
 800adf0:	4606      	mov	r6, r0
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d1e0      	bne.n	800adb8 <__ssputs_r+0x5c>
 800adf6:	6921      	ldr	r1, [r4, #16]
 800adf8:	4650      	mov	r0, sl
 800adfa:	f7fe fb81 	bl	8009500 <_free_r>
 800adfe:	230c      	movs	r3, #12
 800ae00:	f8ca 3000 	str.w	r3, [sl]
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e7e9      	b.n	800ade6 <__ssputs_r+0x8a>
	...

0800ae14 <_svfiprintf_r>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	4698      	mov	r8, r3
 800ae1a:	898b      	ldrh	r3, [r1, #12]
 800ae1c:	061b      	lsls	r3, r3, #24
 800ae1e:	b09d      	sub	sp, #116	@ 0x74
 800ae20:	4607      	mov	r7, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	4614      	mov	r4, r2
 800ae26:	d510      	bpl.n	800ae4a <_svfiprintf_r+0x36>
 800ae28:	690b      	ldr	r3, [r1, #16]
 800ae2a:	b973      	cbnz	r3, 800ae4a <_svfiprintf_r+0x36>
 800ae2c:	2140      	movs	r1, #64	@ 0x40
 800ae2e:	f7fe fbdb 	bl	80095e8 <_malloc_r>
 800ae32:	6028      	str	r0, [r5, #0]
 800ae34:	6128      	str	r0, [r5, #16]
 800ae36:	b930      	cbnz	r0, 800ae46 <_svfiprintf_r+0x32>
 800ae38:	230c      	movs	r3, #12
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	b01d      	add	sp, #116	@ 0x74
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	2340      	movs	r3, #64	@ 0x40
 800ae48:	616b      	str	r3, [r5, #20]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae4e:	2320      	movs	r3, #32
 800ae50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae58:	2330      	movs	r3, #48	@ 0x30
 800ae5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aff8 <_svfiprintf_r+0x1e4>
 800ae5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae62:	f04f 0901 	mov.w	r9, #1
 800ae66:	4623      	mov	r3, r4
 800ae68:	469a      	mov	sl, r3
 800ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6e:	b10a      	cbz	r2, 800ae74 <_svfiprintf_r+0x60>
 800ae70:	2a25      	cmp	r2, #37	@ 0x25
 800ae72:	d1f9      	bne.n	800ae68 <_svfiprintf_r+0x54>
 800ae74:	ebba 0b04 	subs.w	fp, sl, r4
 800ae78:	d00b      	beq.n	800ae92 <_svfiprintf_r+0x7e>
 800ae7a:	465b      	mov	r3, fp
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ff6b 	bl	800ad5c <__ssputs_r>
 800ae86:	3001      	adds	r0, #1
 800ae88:	f000 80a7 	beq.w	800afda <_svfiprintf_r+0x1c6>
 800ae8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae8e:	445a      	add	r2, fp
 800ae90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae92:	f89a 3000 	ldrb.w	r3, [sl]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 809f 	beq.w	800afda <_svfiprintf_r+0x1c6>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea6:	f10a 0a01 	add.w	sl, sl, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	9307      	str	r3, [sp, #28]
 800aeae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aeb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aeb4:	4654      	mov	r4, sl
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebc:	484e      	ldr	r0, [pc, #312]	@ (800aff8 <_svfiprintf_r+0x1e4>)
 800aebe:	f7f5 f987 	bl	80001d0 <memchr>
 800aec2:	9a04      	ldr	r2, [sp, #16]
 800aec4:	b9d8      	cbnz	r0, 800aefe <_svfiprintf_r+0xea>
 800aec6:	06d0      	lsls	r0, r2, #27
 800aec8:	bf44      	itt	mi
 800aeca:	2320      	movmi	r3, #32
 800aecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aed0:	0711      	lsls	r1, r2, #28
 800aed2:	bf44      	itt	mi
 800aed4:	232b      	movmi	r3, #43	@ 0x2b
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeda:	f89a 3000 	ldrb.w	r3, [sl]
 800aede:	2b2a      	cmp	r3, #42	@ 0x2a
 800aee0:	d015      	beq.n	800af0e <_svfiprintf_r+0xfa>
 800aee2:	9a07      	ldr	r2, [sp, #28]
 800aee4:	4654      	mov	r4, sl
 800aee6:	2000      	movs	r0, #0
 800aee8:	f04f 0c0a 	mov.w	ip, #10
 800aeec:	4621      	mov	r1, r4
 800aeee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef2:	3b30      	subs	r3, #48	@ 0x30
 800aef4:	2b09      	cmp	r3, #9
 800aef6:	d94b      	bls.n	800af90 <_svfiprintf_r+0x17c>
 800aef8:	b1b0      	cbz	r0, 800af28 <_svfiprintf_r+0x114>
 800aefa:	9207      	str	r2, [sp, #28]
 800aefc:	e014      	b.n	800af28 <_svfiprintf_r+0x114>
 800aefe:	eba0 0308 	sub.w	r3, r0, r8
 800af02:	fa09 f303 	lsl.w	r3, r9, r3
 800af06:	4313      	orrs	r3, r2
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	46a2      	mov	sl, r4
 800af0c:	e7d2      	b.n	800aeb4 <_svfiprintf_r+0xa0>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	1d19      	adds	r1, r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	9103      	str	r1, [sp, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	bfbb      	ittet	lt
 800af1a:	425b      	neglt	r3, r3
 800af1c:	f042 0202 	orrlt.w	r2, r2, #2
 800af20:	9307      	strge	r3, [sp, #28]
 800af22:	9307      	strlt	r3, [sp, #28]
 800af24:	bfb8      	it	lt
 800af26:	9204      	strlt	r2, [sp, #16]
 800af28:	7823      	ldrb	r3, [r4, #0]
 800af2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af2c:	d10a      	bne.n	800af44 <_svfiprintf_r+0x130>
 800af2e:	7863      	ldrb	r3, [r4, #1]
 800af30:	2b2a      	cmp	r3, #42	@ 0x2a
 800af32:	d132      	bne.n	800af9a <_svfiprintf_r+0x186>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	1d1a      	adds	r2, r3, #4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	9203      	str	r2, [sp, #12]
 800af3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af40:	3402      	adds	r4, #2
 800af42:	9305      	str	r3, [sp, #20]
 800af44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b008 <_svfiprintf_r+0x1f4>
 800af48:	7821      	ldrb	r1, [r4, #0]
 800af4a:	2203      	movs	r2, #3
 800af4c:	4650      	mov	r0, sl
 800af4e:	f7f5 f93f 	bl	80001d0 <memchr>
 800af52:	b138      	cbz	r0, 800af64 <_svfiprintf_r+0x150>
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	eba0 000a 	sub.w	r0, r0, sl
 800af5a:	2240      	movs	r2, #64	@ 0x40
 800af5c:	4082      	lsls	r2, r0
 800af5e:	4313      	orrs	r3, r2
 800af60:	3401      	adds	r4, #1
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af68:	4824      	ldr	r0, [pc, #144]	@ (800affc <_svfiprintf_r+0x1e8>)
 800af6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af6e:	2206      	movs	r2, #6
 800af70:	f7f5 f92e 	bl	80001d0 <memchr>
 800af74:	2800      	cmp	r0, #0
 800af76:	d036      	beq.n	800afe6 <_svfiprintf_r+0x1d2>
 800af78:	4b21      	ldr	r3, [pc, #132]	@ (800b000 <_svfiprintf_r+0x1ec>)
 800af7a:	bb1b      	cbnz	r3, 800afc4 <_svfiprintf_r+0x1b0>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	3307      	adds	r3, #7
 800af80:	f023 0307 	bic.w	r3, r3, #7
 800af84:	3308      	adds	r3, #8
 800af86:	9303      	str	r3, [sp, #12]
 800af88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8a:	4433      	add	r3, r6
 800af8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8e:	e76a      	b.n	800ae66 <_svfiprintf_r+0x52>
 800af90:	fb0c 3202 	mla	r2, ip, r2, r3
 800af94:	460c      	mov	r4, r1
 800af96:	2001      	movs	r0, #1
 800af98:	e7a8      	b.n	800aeec <_svfiprintf_r+0xd8>
 800af9a:	2300      	movs	r3, #0
 800af9c:	3401      	adds	r4, #1
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	4619      	mov	r1, r3
 800afa2:	f04f 0c0a 	mov.w	ip, #10
 800afa6:	4620      	mov	r0, r4
 800afa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afac:	3a30      	subs	r2, #48	@ 0x30
 800afae:	2a09      	cmp	r2, #9
 800afb0:	d903      	bls.n	800afba <_svfiprintf_r+0x1a6>
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0c6      	beq.n	800af44 <_svfiprintf_r+0x130>
 800afb6:	9105      	str	r1, [sp, #20]
 800afb8:	e7c4      	b.n	800af44 <_svfiprintf_r+0x130>
 800afba:	fb0c 2101 	mla	r1, ip, r1, r2
 800afbe:	4604      	mov	r4, r0
 800afc0:	2301      	movs	r3, #1
 800afc2:	e7f0      	b.n	800afa6 <_svfiprintf_r+0x192>
 800afc4:	ab03      	add	r3, sp, #12
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	462a      	mov	r2, r5
 800afca:	4b0e      	ldr	r3, [pc, #56]	@ (800b004 <_svfiprintf_r+0x1f0>)
 800afcc:	a904      	add	r1, sp, #16
 800afce:	4638      	mov	r0, r7
 800afd0:	f7fc fcb8 	bl	8007944 <_printf_float>
 800afd4:	1c42      	adds	r2, r0, #1
 800afd6:	4606      	mov	r6, r0
 800afd8:	d1d6      	bne.n	800af88 <_svfiprintf_r+0x174>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	065b      	lsls	r3, r3, #25
 800afde:	f53f af2d 	bmi.w	800ae3c <_svfiprintf_r+0x28>
 800afe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afe4:	e72c      	b.n	800ae40 <_svfiprintf_r+0x2c>
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4b05      	ldr	r3, [pc, #20]	@ (800b004 <_svfiprintf_r+0x1f0>)
 800afee:	a904      	add	r1, sp, #16
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7fc ff3f 	bl	8007e74 <_printf_i>
 800aff6:	e7ed      	b.n	800afd4 <_svfiprintf_r+0x1c0>
 800aff8:	0800c0cd 	.word	0x0800c0cd
 800affc:	0800c0d7 	.word	0x0800c0d7
 800b000:	08007945 	.word	0x08007945
 800b004:	0800ad5d 	.word	0x0800ad5d
 800b008:	0800c0d3 	.word	0x0800c0d3

0800b00c <__sfputc_r>:
 800b00c:	6893      	ldr	r3, [r2, #8]
 800b00e:	3b01      	subs	r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	b410      	push	{r4}
 800b014:	6093      	str	r3, [r2, #8]
 800b016:	da08      	bge.n	800b02a <__sfputc_r+0x1e>
 800b018:	6994      	ldr	r4, [r2, #24]
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	db01      	blt.n	800b022 <__sfputc_r+0x16>
 800b01e:	290a      	cmp	r1, #10
 800b020:	d103      	bne.n	800b02a <__sfputc_r+0x1e>
 800b022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b026:	f000 b9df 	b.w	800b3e8 <__swbuf_r>
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	1c58      	adds	r0, r3, #1
 800b02e:	6010      	str	r0, [r2, #0]
 800b030:	7019      	strb	r1, [r3, #0]
 800b032:	4608      	mov	r0, r1
 800b034:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <__sfputs_r>:
 800b03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03c:	4606      	mov	r6, r0
 800b03e:	460f      	mov	r7, r1
 800b040:	4614      	mov	r4, r2
 800b042:	18d5      	adds	r5, r2, r3
 800b044:	42ac      	cmp	r4, r5
 800b046:	d101      	bne.n	800b04c <__sfputs_r+0x12>
 800b048:	2000      	movs	r0, #0
 800b04a:	e007      	b.n	800b05c <__sfputs_r+0x22>
 800b04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b050:	463a      	mov	r2, r7
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ffda 	bl	800b00c <__sfputc_r>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d1f3      	bne.n	800b044 <__sfputs_r+0xa>
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b060 <_vfiprintf_r>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	460d      	mov	r5, r1
 800b066:	b09d      	sub	sp, #116	@ 0x74
 800b068:	4614      	mov	r4, r2
 800b06a:	4698      	mov	r8, r3
 800b06c:	4606      	mov	r6, r0
 800b06e:	b118      	cbz	r0, 800b078 <_vfiprintf_r+0x18>
 800b070:	6a03      	ldr	r3, [r0, #32]
 800b072:	b90b      	cbnz	r3, 800b078 <_vfiprintf_r+0x18>
 800b074:	f7fd fab6 	bl	80085e4 <__sinit>
 800b078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b07a:	07d9      	lsls	r1, r3, #31
 800b07c:	d405      	bmi.n	800b08a <_vfiprintf_r+0x2a>
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	059a      	lsls	r2, r3, #22
 800b082:	d402      	bmi.n	800b08a <_vfiprintf_r+0x2a>
 800b084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b086:	f7fd fbd8 	bl	800883a <__retarget_lock_acquire_recursive>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	071b      	lsls	r3, r3, #28
 800b08e:	d501      	bpl.n	800b094 <_vfiprintf_r+0x34>
 800b090:	692b      	ldr	r3, [r5, #16]
 800b092:	b99b      	cbnz	r3, 800b0bc <_vfiprintf_r+0x5c>
 800b094:	4629      	mov	r1, r5
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f9e4 	bl	800b464 <__swsetup_r>
 800b09c:	b170      	cbz	r0, 800b0bc <_vfiprintf_r+0x5c>
 800b09e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a0:	07dc      	lsls	r4, r3, #31
 800b0a2:	d504      	bpl.n	800b0ae <_vfiprintf_r+0x4e>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	b01d      	add	sp, #116	@ 0x74
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	89ab      	ldrh	r3, [r5, #12]
 800b0b0:	0598      	lsls	r0, r3, #22
 800b0b2:	d4f7      	bmi.n	800b0a4 <_vfiprintf_r+0x44>
 800b0b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0b6:	f7fd fbc1 	bl	800883c <__retarget_lock_release_recursive>
 800b0ba:	e7f3      	b.n	800b0a4 <_vfiprintf_r+0x44>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c0:	2320      	movs	r3, #32
 800b0c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ca:	2330      	movs	r3, #48	@ 0x30
 800b0cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b27c <_vfiprintf_r+0x21c>
 800b0d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0d4:	f04f 0901 	mov.w	r9, #1
 800b0d8:	4623      	mov	r3, r4
 800b0da:	469a      	mov	sl, r3
 800b0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e0:	b10a      	cbz	r2, 800b0e6 <_vfiprintf_r+0x86>
 800b0e2:	2a25      	cmp	r2, #37	@ 0x25
 800b0e4:	d1f9      	bne.n	800b0da <_vfiprintf_r+0x7a>
 800b0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ea:	d00b      	beq.n	800b104 <_vfiprintf_r+0xa4>
 800b0ec:	465b      	mov	r3, fp
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7ff ffa1 	bl	800b03a <__sfputs_r>
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	f000 80a7 	beq.w	800b24c <_vfiprintf_r+0x1ec>
 800b0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b100:	445a      	add	r2, fp
 800b102:	9209      	str	r2, [sp, #36]	@ 0x24
 800b104:	f89a 3000 	ldrb.w	r3, [sl]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 809f 	beq.w	800b24c <_vfiprintf_r+0x1ec>
 800b10e:	2300      	movs	r3, #0
 800b110:	f04f 32ff 	mov.w	r2, #4294967295
 800b114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b118:	f10a 0a01 	add.w	sl, sl, #1
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	9307      	str	r3, [sp, #28]
 800b120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b124:	931a      	str	r3, [sp, #104]	@ 0x68
 800b126:	4654      	mov	r4, sl
 800b128:	2205      	movs	r2, #5
 800b12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12e:	4853      	ldr	r0, [pc, #332]	@ (800b27c <_vfiprintf_r+0x21c>)
 800b130:	f7f5 f84e 	bl	80001d0 <memchr>
 800b134:	9a04      	ldr	r2, [sp, #16]
 800b136:	b9d8      	cbnz	r0, 800b170 <_vfiprintf_r+0x110>
 800b138:	06d1      	lsls	r1, r2, #27
 800b13a:	bf44      	itt	mi
 800b13c:	2320      	movmi	r3, #32
 800b13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b142:	0713      	lsls	r3, r2, #28
 800b144:	bf44      	itt	mi
 800b146:	232b      	movmi	r3, #43	@ 0x2b
 800b148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b14c:	f89a 3000 	ldrb.w	r3, [sl]
 800b150:	2b2a      	cmp	r3, #42	@ 0x2a
 800b152:	d015      	beq.n	800b180 <_vfiprintf_r+0x120>
 800b154:	9a07      	ldr	r2, [sp, #28]
 800b156:	4654      	mov	r4, sl
 800b158:	2000      	movs	r0, #0
 800b15a:	f04f 0c0a 	mov.w	ip, #10
 800b15e:	4621      	mov	r1, r4
 800b160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b164:	3b30      	subs	r3, #48	@ 0x30
 800b166:	2b09      	cmp	r3, #9
 800b168:	d94b      	bls.n	800b202 <_vfiprintf_r+0x1a2>
 800b16a:	b1b0      	cbz	r0, 800b19a <_vfiprintf_r+0x13a>
 800b16c:	9207      	str	r2, [sp, #28]
 800b16e:	e014      	b.n	800b19a <_vfiprintf_r+0x13a>
 800b170:	eba0 0308 	sub.w	r3, r0, r8
 800b174:	fa09 f303 	lsl.w	r3, r9, r3
 800b178:	4313      	orrs	r3, r2
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	46a2      	mov	sl, r4
 800b17e:	e7d2      	b.n	800b126 <_vfiprintf_r+0xc6>
 800b180:	9b03      	ldr	r3, [sp, #12]
 800b182:	1d19      	adds	r1, r3, #4
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	9103      	str	r1, [sp, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfbb      	ittet	lt
 800b18c:	425b      	neglt	r3, r3
 800b18e:	f042 0202 	orrlt.w	r2, r2, #2
 800b192:	9307      	strge	r3, [sp, #28]
 800b194:	9307      	strlt	r3, [sp, #28]
 800b196:	bfb8      	it	lt
 800b198:	9204      	strlt	r2, [sp, #16]
 800b19a:	7823      	ldrb	r3, [r4, #0]
 800b19c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b19e:	d10a      	bne.n	800b1b6 <_vfiprintf_r+0x156>
 800b1a0:	7863      	ldrb	r3, [r4, #1]
 800b1a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1a4:	d132      	bne.n	800b20c <_vfiprintf_r+0x1ac>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	1d1a      	adds	r2, r3, #4
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	9203      	str	r2, [sp, #12]
 800b1ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1b2:	3402      	adds	r4, #2
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b28c <_vfiprintf_r+0x22c>
 800b1ba:	7821      	ldrb	r1, [r4, #0]
 800b1bc:	2203      	movs	r2, #3
 800b1be:	4650      	mov	r0, sl
 800b1c0:	f7f5 f806 	bl	80001d0 <memchr>
 800b1c4:	b138      	cbz	r0, 800b1d6 <_vfiprintf_r+0x176>
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	eba0 000a 	sub.w	r0, r0, sl
 800b1cc:	2240      	movs	r2, #64	@ 0x40
 800b1ce:	4082      	lsls	r2, r0
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1da:	4829      	ldr	r0, [pc, #164]	@ (800b280 <_vfiprintf_r+0x220>)
 800b1dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e0:	2206      	movs	r2, #6
 800b1e2:	f7f4 fff5 	bl	80001d0 <memchr>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d03f      	beq.n	800b26a <_vfiprintf_r+0x20a>
 800b1ea:	4b26      	ldr	r3, [pc, #152]	@ (800b284 <_vfiprintf_r+0x224>)
 800b1ec:	bb1b      	cbnz	r3, 800b236 <_vfiprintf_r+0x1d6>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	3307      	adds	r3, #7
 800b1f2:	f023 0307 	bic.w	r3, r3, #7
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	9303      	str	r3, [sp, #12]
 800b1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1fc:	443b      	add	r3, r7
 800b1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b200:	e76a      	b.n	800b0d8 <_vfiprintf_r+0x78>
 800b202:	fb0c 3202 	mla	r2, ip, r2, r3
 800b206:	460c      	mov	r4, r1
 800b208:	2001      	movs	r0, #1
 800b20a:	e7a8      	b.n	800b15e <_vfiprintf_r+0xfe>
 800b20c:	2300      	movs	r3, #0
 800b20e:	3401      	adds	r4, #1
 800b210:	9305      	str	r3, [sp, #20]
 800b212:	4619      	mov	r1, r3
 800b214:	f04f 0c0a 	mov.w	ip, #10
 800b218:	4620      	mov	r0, r4
 800b21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b21e:	3a30      	subs	r2, #48	@ 0x30
 800b220:	2a09      	cmp	r2, #9
 800b222:	d903      	bls.n	800b22c <_vfiprintf_r+0x1cc>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0c6      	beq.n	800b1b6 <_vfiprintf_r+0x156>
 800b228:	9105      	str	r1, [sp, #20]
 800b22a:	e7c4      	b.n	800b1b6 <_vfiprintf_r+0x156>
 800b22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b230:	4604      	mov	r4, r0
 800b232:	2301      	movs	r3, #1
 800b234:	e7f0      	b.n	800b218 <_vfiprintf_r+0x1b8>
 800b236:	ab03      	add	r3, sp, #12
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	462a      	mov	r2, r5
 800b23c:	4b12      	ldr	r3, [pc, #72]	@ (800b288 <_vfiprintf_r+0x228>)
 800b23e:	a904      	add	r1, sp, #16
 800b240:	4630      	mov	r0, r6
 800b242:	f7fc fb7f 	bl	8007944 <_printf_float>
 800b246:	4607      	mov	r7, r0
 800b248:	1c78      	adds	r0, r7, #1
 800b24a:	d1d6      	bne.n	800b1fa <_vfiprintf_r+0x19a>
 800b24c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b24e:	07d9      	lsls	r1, r3, #31
 800b250:	d405      	bmi.n	800b25e <_vfiprintf_r+0x1fe>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	059a      	lsls	r2, r3, #22
 800b256:	d402      	bmi.n	800b25e <_vfiprintf_r+0x1fe>
 800b258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b25a:	f7fd faef 	bl	800883c <__retarget_lock_release_recursive>
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	065b      	lsls	r3, r3, #25
 800b262:	f53f af1f 	bmi.w	800b0a4 <_vfiprintf_r+0x44>
 800b266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b268:	e71e      	b.n	800b0a8 <_vfiprintf_r+0x48>
 800b26a:	ab03      	add	r3, sp, #12
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	462a      	mov	r2, r5
 800b270:	4b05      	ldr	r3, [pc, #20]	@ (800b288 <_vfiprintf_r+0x228>)
 800b272:	a904      	add	r1, sp, #16
 800b274:	4630      	mov	r0, r6
 800b276:	f7fc fdfd 	bl	8007e74 <_printf_i>
 800b27a:	e7e4      	b.n	800b246 <_vfiprintf_r+0x1e6>
 800b27c:	0800c0cd 	.word	0x0800c0cd
 800b280:	0800c0d7 	.word	0x0800c0d7
 800b284:	08007945 	.word	0x08007945
 800b288:	0800b03b 	.word	0x0800b03b
 800b28c:	0800c0d3 	.word	0x0800c0d3

0800b290 <__sflush_r>:
 800b290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	0716      	lsls	r6, r2, #28
 800b29a:	4605      	mov	r5, r0
 800b29c:	460c      	mov	r4, r1
 800b29e:	d454      	bmi.n	800b34a <__sflush_r+0xba>
 800b2a0:	684b      	ldr	r3, [r1, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dc02      	bgt.n	800b2ac <__sflush_r+0x1c>
 800b2a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dd48      	ble.n	800b33e <__sflush_r+0xae>
 800b2ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	d045      	beq.n	800b33e <__sflush_r+0xae>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2b8:	682f      	ldr	r7, [r5, #0]
 800b2ba:	6a21      	ldr	r1, [r4, #32]
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	d030      	beq.n	800b322 <__sflush_r+0x92>
 800b2c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	0759      	lsls	r1, r3, #29
 800b2c6:	d505      	bpl.n	800b2d4 <__sflush_r+0x44>
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2ce:	b10b      	cbz	r3, 800b2d4 <__sflush_r+0x44>
 800b2d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2d2:	1ad2      	subs	r2, r2, r3
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2d8:	6a21      	ldr	r1, [r4, #32]
 800b2da:	4628      	mov	r0, r5
 800b2dc:	47b0      	blx	r6
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	d106      	bne.n	800b2f2 <__sflush_r+0x62>
 800b2e4:	6829      	ldr	r1, [r5, #0]
 800b2e6:	291d      	cmp	r1, #29
 800b2e8:	d82b      	bhi.n	800b342 <__sflush_r+0xb2>
 800b2ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b394 <__sflush_r+0x104>)
 800b2ec:	40ca      	lsrs	r2, r1
 800b2ee:	07d6      	lsls	r6, r2, #31
 800b2f0:	d527      	bpl.n	800b342 <__sflush_r+0xb2>
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	6062      	str	r2, [r4, #4]
 800b2f6:	04d9      	lsls	r1, r3, #19
 800b2f8:	6922      	ldr	r2, [r4, #16]
 800b2fa:	6022      	str	r2, [r4, #0]
 800b2fc:	d504      	bpl.n	800b308 <__sflush_r+0x78>
 800b2fe:	1c42      	adds	r2, r0, #1
 800b300:	d101      	bne.n	800b306 <__sflush_r+0x76>
 800b302:	682b      	ldr	r3, [r5, #0]
 800b304:	b903      	cbnz	r3, 800b308 <__sflush_r+0x78>
 800b306:	6560      	str	r0, [r4, #84]	@ 0x54
 800b308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b30a:	602f      	str	r7, [r5, #0]
 800b30c:	b1b9      	cbz	r1, 800b33e <__sflush_r+0xae>
 800b30e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b312:	4299      	cmp	r1, r3
 800b314:	d002      	beq.n	800b31c <__sflush_r+0x8c>
 800b316:	4628      	mov	r0, r5
 800b318:	f7fe f8f2 	bl	8009500 <_free_r>
 800b31c:	2300      	movs	r3, #0
 800b31e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b320:	e00d      	b.n	800b33e <__sflush_r+0xae>
 800b322:	2301      	movs	r3, #1
 800b324:	4628      	mov	r0, r5
 800b326:	47b0      	blx	r6
 800b328:	4602      	mov	r2, r0
 800b32a:	1c50      	adds	r0, r2, #1
 800b32c:	d1c9      	bne.n	800b2c2 <__sflush_r+0x32>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0c6      	beq.n	800b2c2 <__sflush_r+0x32>
 800b334:	2b1d      	cmp	r3, #29
 800b336:	d001      	beq.n	800b33c <__sflush_r+0xac>
 800b338:	2b16      	cmp	r3, #22
 800b33a:	d11e      	bne.n	800b37a <__sflush_r+0xea>
 800b33c:	602f      	str	r7, [r5, #0]
 800b33e:	2000      	movs	r0, #0
 800b340:	e022      	b.n	800b388 <__sflush_r+0xf8>
 800b342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b346:	b21b      	sxth	r3, r3
 800b348:	e01b      	b.n	800b382 <__sflush_r+0xf2>
 800b34a:	690f      	ldr	r7, [r1, #16]
 800b34c:	2f00      	cmp	r7, #0
 800b34e:	d0f6      	beq.n	800b33e <__sflush_r+0xae>
 800b350:	0793      	lsls	r3, r2, #30
 800b352:	680e      	ldr	r6, [r1, #0]
 800b354:	bf08      	it	eq
 800b356:	694b      	ldreq	r3, [r1, #20]
 800b358:	600f      	str	r7, [r1, #0]
 800b35a:	bf18      	it	ne
 800b35c:	2300      	movne	r3, #0
 800b35e:	eba6 0807 	sub.w	r8, r6, r7
 800b362:	608b      	str	r3, [r1, #8]
 800b364:	f1b8 0f00 	cmp.w	r8, #0
 800b368:	dde9      	ble.n	800b33e <__sflush_r+0xae>
 800b36a:	6a21      	ldr	r1, [r4, #32]
 800b36c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b36e:	4643      	mov	r3, r8
 800b370:	463a      	mov	r2, r7
 800b372:	4628      	mov	r0, r5
 800b374:	47b0      	blx	r6
 800b376:	2800      	cmp	r0, #0
 800b378:	dc08      	bgt.n	800b38c <__sflush_r+0xfc>
 800b37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38c:	4407      	add	r7, r0
 800b38e:	eba8 0800 	sub.w	r8, r8, r0
 800b392:	e7e7      	b.n	800b364 <__sflush_r+0xd4>
 800b394:	20400001 	.word	0x20400001

0800b398 <_fflush_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	690b      	ldr	r3, [r1, #16]
 800b39c:	4605      	mov	r5, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	b913      	cbnz	r3, 800b3a8 <_fflush_r+0x10>
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	b118      	cbz	r0, 800b3b2 <_fflush_r+0x1a>
 800b3aa:	6a03      	ldr	r3, [r0, #32]
 800b3ac:	b90b      	cbnz	r3, 800b3b2 <_fflush_r+0x1a>
 800b3ae:	f7fd f919 	bl	80085e4 <__sinit>
 800b3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0f3      	beq.n	800b3a2 <_fflush_r+0xa>
 800b3ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3bc:	07d0      	lsls	r0, r2, #31
 800b3be:	d404      	bmi.n	800b3ca <_fflush_r+0x32>
 800b3c0:	0599      	lsls	r1, r3, #22
 800b3c2:	d402      	bmi.n	800b3ca <_fflush_r+0x32>
 800b3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3c6:	f7fd fa38 	bl	800883a <__retarget_lock_acquire_recursive>
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	f7ff ff5f 	bl	800b290 <__sflush_r>
 800b3d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3d4:	07da      	lsls	r2, r3, #31
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	d4e4      	bmi.n	800b3a4 <_fflush_r+0xc>
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	059b      	lsls	r3, r3, #22
 800b3de:	d4e1      	bmi.n	800b3a4 <_fflush_r+0xc>
 800b3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3e2:	f7fd fa2b 	bl	800883c <__retarget_lock_release_recursive>
 800b3e6:	e7dd      	b.n	800b3a4 <_fflush_r+0xc>

0800b3e8 <__swbuf_r>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	b118      	cbz	r0, 800b3fa <__swbuf_r+0x12>
 800b3f2:	6a03      	ldr	r3, [r0, #32]
 800b3f4:	b90b      	cbnz	r3, 800b3fa <__swbuf_r+0x12>
 800b3f6:	f7fd f8f5 	bl	80085e4 <__sinit>
 800b3fa:	69a3      	ldr	r3, [r4, #24]
 800b3fc:	60a3      	str	r3, [r4, #8]
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	071a      	lsls	r2, r3, #28
 800b402:	d501      	bpl.n	800b408 <__swbuf_r+0x20>
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	b943      	cbnz	r3, 800b41a <__swbuf_r+0x32>
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f82a 	bl	800b464 <__swsetup_r>
 800b410:	b118      	cbz	r0, 800b41a <__swbuf_r+0x32>
 800b412:	f04f 37ff 	mov.w	r7, #4294967295
 800b416:	4638      	mov	r0, r7
 800b418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	6922      	ldr	r2, [r4, #16]
 800b41e:	1a98      	subs	r0, r3, r2
 800b420:	6963      	ldr	r3, [r4, #20]
 800b422:	b2f6      	uxtb	r6, r6
 800b424:	4283      	cmp	r3, r0
 800b426:	4637      	mov	r7, r6
 800b428:	dc05      	bgt.n	800b436 <__swbuf_r+0x4e>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f7ff ffb3 	bl	800b398 <_fflush_r>
 800b432:	2800      	cmp	r0, #0
 800b434:	d1ed      	bne.n	800b412 <__swbuf_r+0x2a>
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	3b01      	subs	r3, #1
 800b43a:	60a3      	str	r3, [r4, #8]
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	6022      	str	r2, [r4, #0]
 800b442:	701e      	strb	r6, [r3, #0]
 800b444:	6962      	ldr	r2, [r4, #20]
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	429a      	cmp	r2, r3
 800b44a:	d004      	beq.n	800b456 <__swbuf_r+0x6e>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	07db      	lsls	r3, r3, #31
 800b450:	d5e1      	bpl.n	800b416 <__swbuf_r+0x2e>
 800b452:	2e0a      	cmp	r6, #10
 800b454:	d1df      	bne.n	800b416 <__swbuf_r+0x2e>
 800b456:	4621      	mov	r1, r4
 800b458:	4628      	mov	r0, r5
 800b45a:	f7ff ff9d 	bl	800b398 <_fflush_r>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d0d9      	beq.n	800b416 <__swbuf_r+0x2e>
 800b462:	e7d6      	b.n	800b412 <__swbuf_r+0x2a>

0800b464 <__swsetup_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4b29      	ldr	r3, [pc, #164]	@ (800b50c <__swsetup_r+0xa8>)
 800b468:	4605      	mov	r5, r0
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	460c      	mov	r4, r1
 800b46e:	b118      	cbz	r0, 800b478 <__swsetup_r+0x14>
 800b470:	6a03      	ldr	r3, [r0, #32]
 800b472:	b90b      	cbnz	r3, 800b478 <__swsetup_r+0x14>
 800b474:	f7fd f8b6 	bl	80085e4 <__sinit>
 800b478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47c:	0719      	lsls	r1, r3, #28
 800b47e:	d422      	bmi.n	800b4c6 <__swsetup_r+0x62>
 800b480:	06da      	lsls	r2, r3, #27
 800b482:	d407      	bmi.n	800b494 <__swsetup_r+0x30>
 800b484:	2209      	movs	r2, #9
 800b486:	602a      	str	r2, [r5, #0]
 800b488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	f04f 30ff 	mov.w	r0, #4294967295
 800b492:	e033      	b.n	800b4fc <__swsetup_r+0x98>
 800b494:	0758      	lsls	r0, r3, #29
 800b496:	d512      	bpl.n	800b4be <__swsetup_r+0x5a>
 800b498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b49a:	b141      	cbz	r1, 800b4ae <__swsetup_r+0x4a>
 800b49c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4a0:	4299      	cmp	r1, r3
 800b4a2:	d002      	beq.n	800b4aa <__swsetup_r+0x46>
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7fe f82b 	bl	8009500 <_free_r>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f043 0308 	orr.w	r3, r3, #8
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	6923      	ldr	r3, [r4, #16]
 800b4c8:	b94b      	cbnz	r3, 800b4de <__swsetup_r+0x7a>
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4d4:	d003      	beq.n	800b4de <__swsetup_r+0x7a>
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fc5d 	bl	800bd98 <__smakebuf_r>
 800b4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e2:	f013 0201 	ands.w	r2, r3, #1
 800b4e6:	d00a      	beq.n	800b4fe <__swsetup_r+0x9a>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	60a2      	str	r2, [r4, #8]
 800b4ec:	6962      	ldr	r2, [r4, #20]
 800b4ee:	4252      	negs	r2, r2
 800b4f0:	61a2      	str	r2, [r4, #24]
 800b4f2:	6922      	ldr	r2, [r4, #16]
 800b4f4:	b942      	cbnz	r2, 800b508 <__swsetup_r+0xa4>
 800b4f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4fa:	d1c5      	bne.n	800b488 <__swsetup_r+0x24>
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	0799      	lsls	r1, r3, #30
 800b500:	bf58      	it	pl
 800b502:	6962      	ldrpl	r2, [r4, #20]
 800b504:	60a2      	str	r2, [r4, #8]
 800b506:	e7f4      	b.n	800b4f2 <__swsetup_r+0x8e>
 800b508:	2000      	movs	r0, #0
 800b50a:	e7f7      	b.n	800b4fc <__swsetup_r+0x98>
 800b50c:	20000020 	.word	0x20000020

0800b510 <memmove>:
 800b510:	4288      	cmp	r0, r1
 800b512:	b510      	push	{r4, lr}
 800b514:	eb01 0402 	add.w	r4, r1, r2
 800b518:	d902      	bls.n	800b520 <memmove+0x10>
 800b51a:	4284      	cmp	r4, r0
 800b51c:	4623      	mov	r3, r4
 800b51e:	d807      	bhi.n	800b530 <memmove+0x20>
 800b520:	1e43      	subs	r3, r0, #1
 800b522:	42a1      	cmp	r1, r4
 800b524:	d008      	beq.n	800b538 <memmove+0x28>
 800b526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b52e:	e7f8      	b.n	800b522 <memmove+0x12>
 800b530:	4402      	add	r2, r0
 800b532:	4601      	mov	r1, r0
 800b534:	428a      	cmp	r2, r1
 800b536:	d100      	bne.n	800b53a <memmove+0x2a>
 800b538:	bd10      	pop	{r4, pc}
 800b53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b542:	e7f7      	b.n	800b534 <memmove+0x24>

0800b544 <strncmp>:
 800b544:	b510      	push	{r4, lr}
 800b546:	b16a      	cbz	r2, 800b564 <strncmp+0x20>
 800b548:	3901      	subs	r1, #1
 800b54a:	1884      	adds	r4, r0, r2
 800b54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b550:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b554:	429a      	cmp	r2, r3
 800b556:	d103      	bne.n	800b560 <strncmp+0x1c>
 800b558:	42a0      	cmp	r0, r4
 800b55a:	d001      	beq.n	800b560 <strncmp+0x1c>
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	d1f5      	bne.n	800b54c <strncmp+0x8>
 800b560:	1ad0      	subs	r0, r2, r3
 800b562:	bd10      	pop	{r4, pc}
 800b564:	4610      	mov	r0, r2
 800b566:	e7fc      	b.n	800b562 <strncmp+0x1e>

0800b568 <_sbrk_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4d06      	ldr	r5, [pc, #24]	@ (800b584 <_sbrk_r+0x1c>)
 800b56c:	2300      	movs	r3, #0
 800b56e:	4604      	mov	r4, r0
 800b570:	4608      	mov	r0, r1
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	f7f6 fcf0 	bl	8001f58 <_sbrk>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_sbrk_r+0x1a>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_sbrk_r+0x1a>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	200005f4 	.word	0x200005f4

0800b588 <memcpy>:
 800b588:	440a      	add	r2, r1
 800b58a:	4291      	cmp	r1, r2
 800b58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b590:	d100      	bne.n	800b594 <memcpy+0xc>
 800b592:	4770      	bx	lr
 800b594:	b510      	push	{r4, lr}
 800b596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b59e:	4291      	cmp	r1, r2
 800b5a0:	d1f9      	bne.n	800b596 <memcpy+0xe>
 800b5a2:	bd10      	pop	{r4, pc}
 800b5a4:	0000      	movs	r0, r0
	...

0800b5a8 <nan>:
 800b5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b5b0 <nan+0x8>
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	00000000 	.word	0x00000000
 800b5b4:	7ff80000 	.word	0x7ff80000

0800b5b8 <__assert_func>:
 800b5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ba:	4614      	mov	r4, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b09      	ldr	r3, [pc, #36]	@ (800b5e4 <__assert_func+0x2c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	68d8      	ldr	r0, [r3, #12]
 800b5c6:	b14c      	cbz	r4, 800b5dc <__assert_func+0x24>
 800b5c8:	4b07      	ldr	r3, [pc, #28]	@ (800b5e8 <__assert_func+0x30>)
 800b5ca:	9100      	str	r1, [sp, #0]
 800b5cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5d0:	4906      	ldr	r1, [pc, #24]	@ (800b5ec <__assert_func+0x34>)
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f000 fba8 	bl	800bd28 <fiprintf>
 800b5d8:	f000 fc3c 	bl	800be54 <abort>
 800b5dc:	4b04      	ldr	r3, [pc, #16]	@ (800b5f0 <__assert_func+0x38>)
 800b5de:	461c      	mov	r4, r3
 800b5e0:	e7f3      	b.n	800b5ca <__assert_func+0x12>
 800b5e2:	bf00      	nop
 800b5e4:	20000020 	.word	0x20000020
 800b5e8:	0800c0e6 	.word	0x0800c0e6
 800b5ec:	0800c0f3 	.word	0x0800c0f3
 800b5f0:	0800c121 	.word	0x0800c121

0800b5f4 <_calloc_r>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	fba1 5402 	umull	r5, r4, r1, r2
 800b5fa:	b934      	cbnz	r4, 800b60a <_calloc_r+0x16>
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7fd fff3 	bl	80095e8 <_malloc_r>
 800b602:	4606      	mov	r6, r0
 800b604:	b928      	cbnz	r0, 800b612 <_calloc_r+0x1e>
 800b606:	4630      	mov	r0, r6
 800b608:	bd70      	pop	{r4, r5, r6, pc}
 800b60a:	220c      	movs	r2, #12
 800b60c:	6002      	str	r2, [r0, #0]
 800b60e:	2600      	movs	r6, #0
 800b610:	e7f9      	b.n	800b606 <_calloc_r+0x12>
 800b612:	462a      	mov	r2, r5
 800b614:	4621      	mov	r1, r4
 800b616:	f7fd f892 	bl	800873e <memset>
 800b61a:	e7f4      	b.n	800b606 <_calloc_r+0x12>

0800b61c <rshift>:
 800b61c:	6903      	ldr	r3, [r0, #16]
 800b61e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b626:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b62a:	f100 0414 	add.w	r4, r0, #20
 800b62e:	dd45      	ble.n	800b6bc <rshift+0xa0>
 800b630:	f011 011f 	ands.w	r1, r1, #31
 800b634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b63c:	d10c      	bne.n	800b658 <rshift+0x3c>
 800b63e:	f100 0710 	add.w	r7, r0, #16
 800b642:	4629      	mov	r1, r5
 800b644:	42b1      	cmp	r1, r6
 800b646:	d334      	bcc.n	800b6b2 <rshift+0x96>
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	1eea      	subs	r2, r5, #3
 800b64e:	4296      	cmp	r6, r2
 800b650:	bf38      	it	cc
 800b652:	2300      	movcc	r3, #0
 800b654:	4423      	add	r3, r4
 800b656:	e015      	b.n	800b684 <rshift+0x68>
 800b658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b65c:	f1c1 0820 	rsb	r8, r1, #32
 800b660:	40cf      	lsrs	r7, r1
 800b662:	f105 0e04 	add.w	lr, r5, #4
 800b666:	46a1      	mov	r9, r4
 800b668:	4576      	cmp	r6, lr
 800b66a:	46f4      	mov	ip, lr
 800b66c:	d815      	bhi.n	800b69a <rshift+0x7e>
 800b66e:	1a9a      	subs	r2, r3, r2
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	3a04      	subs	r2, #4
 800b674:	3501      	adds	r5, #1
 800b676:	42ae      	cmp	r6, r5
 800b678:	bf38      	it	cc
 800b67a:	2200      	movcc	r2, #0
 800b67c:	18a3      	adds	r3, r4, r2
 800b67e:	50a7      	str	r7, [r4, r2]
 800b680:	b107      	cbz	r7, 800b684 <rshift+0x68>
 800b682:	3304      	adds	r3, #4
 800b684:	1b1a      	subs	r2, r3, r4
 800b686:	42a3      	cmp	r3, r4
 800b688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b68c:	bf08      	it	eq
 800b68e:	2300      	moveq	r3, #0
 800b690:	6102      	str	r2, [r0, #16]
 800b692:	bf08      	it	eq
 800b694:	6143      	streq	r3, [r0, #20]
 800b696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69a:	f8dc c000 	ldr.w	ip, [ip]
 800b69e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b6a6:	f849 7b04 	str.w	r7, [r9], #4
 800b6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6ae:	40cf      	lsrs	r7, r1
 800b6b0:	e7da      	b.n	800b668 <rshift+0x4c>
 800b6b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6ba:	e7c3      	b.n	800b644 <rshift+0x28>
 800b6bc:	4623      	mov	r3, r4
 800b6be:	e7e1      	b.n	800b684 <rshift+0x68>

0800b6c0 <__hexdig_fun>:
 800b6c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	d802      	bhi.n	800b6ce <__hexdig_fun+0xe>
 800b6c8:	3820      	subs	r0, #32
 800b6ca:	b2c0      	uxtb	r0, r0
 800b6cc:	4770      	bx	lr
 800b6ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6d2:	2b05      	cmp	r3, #5
 800b6d4:	d801      	bhi.n	800b6da <__hexdig_fun+0x1a>
 800b6d6:	3847      	subs	r0, #71	@ 0x47
 800b6d8:	e7f7      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d801      	bhi.n	800b6e6 <__hexdig_fun+0x26>
 800b6e2:	3827      	subs	r0, #39	@ 0x27
 800b6e4:	e7f1      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	4770      	bx	lr
	...

0800b6ec <__gethex>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	468a      	mov	sl, r1
 800b6f4:	9302      	str	r3, [sp, #8]
 800b6f6:	680b      	ldr	r3, [r1, #0]
 800b6f8:	9001      	str	r0, [sp, #4]
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	1c9c      	adds	r4, r3, #2
 800b6fe:	46a1      	mov	r9, r4
 800b700:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b704:	2830      	cmp	r0, #48	@ 0x30
 800b706:	d0fa      	beq.n	800b6fe <__gethex+0x12>
 800b708:	eba9 0303 	sub.w	r3, r9, r3
 800b70c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b710:	f7ff ffd6 	bl	800b6c0 <__hexdig_fun>
 800b714:	4605      	mov	r5, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	d168      	bne.n	800b7ec <__gethex+0x100>
 800b71a:	49a0      	ldr	r1, [pc, #640]	@ (800b99c <__gethex+0x2b0>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	4648      	mov	r0, r9
 800b720:	f7ff ff10 	bl	800b544 <strncmp>
 800b724:	4607      	mov	r7, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d167      	bne.n	800b7fa <__gethex+0x10e>
 800b72a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b72e:	4626      	mov	r6, r4
 800b730:	f7ff ffc6 	bl	800b6c0 <__hexdig_fun>
 800b734:	2800      	cmp	r0, #0
 800b736:	d062      	beq.n	800b7fe <__gethex+0x112>
 800b738:	4623      	mov	r3, r4
 800b73a:	7818      	ldrb	r0, [r3, #0]
 800b73c:	2830      	cmp	r0, #48	@ 0x30
 800b73e:	4699      	mov	r9, r3
 800b740:	f103 0301 	add.w	r3, r3, #1
 800b744:	d0f9      	beq.n	800b73a <__gethex+0x4e>
 800b746:	f7ff ffbb 	bl	800b6c0 <__hexdig_fun>
 800b74a:	fab0 f580 	clz	r5, r0
 800b74e:	096d      	lsrs	r5, r5, #5
 800b750:	f04f 0b01 	mov.w	fp, #1
 800b754:	464a      	mov	r2, r9
 800b756:	4616      	mov	r6, r2
 800b758:	3201      	adds	r2, #1
 800b75a:	7830      	ldrb	r0, [r6, #0]
 800b75c:	f7ff ffb0 	bl	800b6c0 <__hexdig_fun>
 800b760:	2800      	cmp	r0, #0
 800b762:	d1f8      	bne.n	800b756 <__gethex+0x6a>
 800b764:	498d      	ldr	r1, [pc, #564]	@ (800b99c <__gethex+0x2b0>)
 800b766:	2201      	movs	r2, #1
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff feeb 	bl	800b544 <strncmp>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d13f      	bne.n	800b7f2 <__gethex+0x106>
 800b772:	b944      	cbnz	r4, 800b786 <__gethex+0x9a>
 800b774:	1c74      	adds	r4, r6, #1
 800b776:	4622      	mov	r2, r4
 800b778:	4616      	mov	r6, r2
 800b77a:	3201      	adds	r2, #1
 800b77c:	7830      	ldrb	r0, [r6, #0]
 800b77e:	f7ff ff9f 	bl	800b6c0 <__hexdig_fun>
 800b782:	2800      	cmp	r0, #0
 800b784:	d1f8      	bne.n	800b778 <__gethex+0x8c>
 800b786:	1ba4      	subs	r4, r4, r6
 800b788:	00a7      	lsls	r7, r4, #2
 800b78a:	7833      	ldrb	r3, [r6, #0]
 800b78c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b790:	2b50      	cmp	r3, #80	@ 0x50
 800b792:	d13e      	bne.n	800b812 <__gethex+0x126>
 800b794:	7873      	ldrb	r3, [r6, #1]
 800b796:	2b2b      	cmp	r3, #43	@ 0x2b
 800b798:	d033      	beq.n	800b802 <__gethex+0x116>
 800b79a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b79c:	d034      	beq.n	800b808 <__gethex+0x11c>
 800b79e:	1c71      	adds	r1, r6, #1
 800b7a0:	2400      	movs	r4, #0
 800b7a2:	7808      	ldrb	r0, [r1, #0]
 800b7a4:	f7ff ff8c 	bl	800b6c0 <__hexdig_fun>
 800b7a8:	1e43      	subs	r3, r0, #1
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b18      	cmp	r3, #24
 800b7ae:	d830      	bhi.n	800b812 <__gethex+0x126>
 800b7b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b7b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7b8:	f7ff ff82 	bl	800b6c0 <__hexdig_fun>
 800b7bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7c0:	fa5f fc8c 	uxtb.w	ip, ip
 800b7c4:	f1bc 0f18 	cmp.w	ip, #24
 800b7c8:	f04f 030a 	mov.w	r3, #10
 800b7cc:	d91e      	bls.n	800b80c <__gethex+0x120>
 800b7ce:	b104      	cbz	r4, 800b7d2 <__gethex+0xe6>
 800b7d0:	4252      	negs	r2, r2
 800b7d2:	4417      	add	r7, r2
 800b7d4:	f8ca 1000 	str.w	r1, [sl]
 800b7d8:	b1ed      	cbz	r5, 800b816 <__gethex+0x12a>
 800b7da:	f1bb 0f00 	cmp.w	fp, #0
 800b7de:	bf0c      	ite	eq
 800b7e0:	2506      	moveq	r5, #6
 800b7e2:	2500      	movne	r5, #0
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	b005      	add	sp, #20
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	2500      	movs	r5, #0
 800b7ee:	462c      	mov	r4, r5
 800b7f0:	e7b0      	b.n	800b754 <__gethex+0x68>
 800b7f2:	2c00      	cmp	r4, #0
 800b7f4:	d1c7      	bne.n	800b786 <__gethex+0x9a>
 800b7f6:	4627      	mov	r7, r4
 800b7f8:	e7c7      	b.n	800b78a <__gethex+0x9e>
 800b7fa:	464e      	mov	r6, r9
 800b7fc:	462f      	mov	r7, r5
 800b7fe:	2501      	movs	r5, #1
 800b800:	e7c3      	b.n	800b78a <__gethex+0x9e>
 800b802:	2400      	movs	r4, #0
 800b804:	1cb1      	adds	r1, r6, #2
 800b806:	e7cc      	b.n	800b7a2 <__gethex+0xb6>
 800b808:	2401      	movs	r4, #1
 800b80a:	e7fb      	b.n	800b804 <__gethex+0x118>
 800b80c:	fb03 0002 	mla	r0, r3, r2, r0
 800b810:	e7ce      	b.n	800b7b0 <__gethex+0xc4>
 800b812:	4631      	mov	r1, r6
 800b814:	e7de      	b.n	800b7d4 <__gethex+0xe8>
 800b816:	eba6 0309 	sub.w	r3, r6, r9
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4629      	mov	r1, r5
 800b81e:	2b07      	cmp	r3, #7
 800b820:	dc0a      	bgt.n	800b838 <__gethex+0x14c>
 800b822:	9801      	ldr	r0, [sp, #4]
 800b824:	f7fd ff6c 	bl	8009700 <_Balloc>
 800b828:	4604      	mov	r4, r0
 800b82a:	b940      	cbnz	r0, 800b83e <__gethex+0x152>
 800b82c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9a0 <__gethex+0x2b4>)
 800b82e:	4602      	mov	r2, r0
 800b830:	21e4      	movs	r1, #228	@ 0xe4
 800b832:	485c      	ldr	r0, [pc, #368]	@ (800b9a4 <__gethex+0x2b8>)
 800b834:	f7ff fec0 	bl	800b5b8 <__assert_func>
 800b838:	3101      	adds	r1, #1
 800b83a:	105b      	asrs	r3, r3, #1
 800b83c:	e7ef      	b.n	800b81e <__gethex+0x132>
 800b83e:	f100 0a14 	add.w	sl, r0, #20
 800b842:	2300      	movs	r3, #0
 800b844:	4655      	mov	r5, sl
 800b846:	469b      	mov	fp, r3
 800b848:	45b1      	cmp	r9, r6
 800b84a:	d337      	bcc.n	800b8bc <__gethex+0x1d0>
 800b84c:	f845 bb04 	str.w	fp, [r5], #4
 800b850:	eba5 050a 	sub.w	r5, r5, sl
 800b854:	10ad      	asrs	r5, r5, #2
 800b856:	6125      	str	r5, [r4, #16]
 800b858:	4658      	mov	r0, fp
 800b85a:	f7fe f843 	bl	80098e4 <__hi0bits>
 800b85e:	016d      	lsls	r5, r5, #5
 800b860:	f8d8 6000 	ldr.w	r6, [r8]
 800b864:	1a2d      	subs	r5, r5, r0
 800b866:	42b5      	cmp	r5, r6
 800b868:	dd54      	ble.n	800b914 <__gethex+0x228>
 800b86a:	1bad      	subs	r5, r5, r6
 800b86c:	4629      	mov	r1, r5
 800b86e:	4620      	mov	r0, r4
 800b870:	f7fe fbcf 	bl	800a012 <__any_on>
 800b874:	4681      	mov	r9, r0
 800b876:	b178      	cbz	r0, 800b898 <__gethex+0x1ac>
 800b878:	1e6b      	subs	r3, r5, #1
 800b87a:	1159      	asrs	r1, r3, #5
 800b87c:	f003 021f 	and.w	r2, r3, #31
 800b880:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b884:	f04f 0901 	mov.w	r9, #1
 800b888:	fa09 f202 	lsl.w	r2, r9, r2
 800b88c:	420a      	tst	r2, r1
 800b88e:	d003      	beq.n	800b898 <__gethex+0x1ac>
 800b890:	454b      	cmp	r3, r9
 800b892:	dc36      	bgt.n	800b902 <__gethex+0x216>
 800b894:	f04f 0902 	mov.w	r9, #2
 800b898:	4629      	mov	r1, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7ff febe 	bl	800b61c <rshift>
 800b8a0:	442f      	add	r7, r5
 800b8a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	da42      	bge.n	800b930 <__gethex+0x244>
 800b8aa:	9801      	ldr	r0, [sp, #4]
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f7fd ff67 	bl	8009780 <_Bfree>
 800b8b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	25a3      	movs	r5, #163	@ 0xa3
 800b8ba:	e793      	b.n	800b7e4 <__gethex+0xf8>
 800b8bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8c2:	d012      	beq.n	800b8ea <__gethex+0x1fe>
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d104      	bne.n	800b8d2 <__gethex+0x1e6>
 800b8c8:	f845 bb04 	str.w	fp, [r5], #4
 800b8cc:	f04f 0b00 	mov.w	fp, #0
 800b8d0:	465b      	mov	r3, fp
 800b8d2:	7830      	ldrb	r0, [r6, #0]
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	f7ff fef3 	bl	800b6c0 <__hexdig_fun>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	f000 000f 	and.w	r0, r0, #15
 800b8e0:	4098      	lsls	r0, r3
 800b8e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	e7ae      	b.n	800b848 <__gethex+0x15c>
 800b8ea:	45b1      	cmp	r9, r6
 800b8ec:	d8ea      	bhi.n	800b8c4 <__gethex+0x1d8>
 800b8ee:	492b      	ldr	r1, [pc, #172]	@ (800b99c <__gethex+0x2b0>)
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff fe25 	bl	800b544 <strncmp>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1e1      	bne.n	800b8c4 <__gethex+0x1d8>
 800b900:	e7a2      	b.n	800b848 <__gethex+0x15c>
 800b902:	1ea9      	subs	r1, r5, #2
 800b904:	4620      	mov	r0, r4
 800b906:	f7fe fb84 	bl	800a012 <__any_on>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d0c2      	beq.n	800b894 <__gethex+0x1a8>
 800b90e:	f04f 0903 	mov.w	r9, #3
 800b912:	e7c1      	b.n	800b898 <__gethex+0x1ac>
 800b914:	da09      	bge.n	800b92a <__gethex+0x23e>
 800b916:	1b75      	subs	r5, r6, r5
 800b918:	4621      	mov	r1, r4
 800b91a:	9801      	ldr	r0, [sp, #4]
 800b91c:	462a      	mov	r2, r5
 800b91e:	f7fe f93f 	bl	8009ba0 <__lshift>
 800b922:	1b7f      	subs	r7, r7, r5
 800b924:	4604      	mov	r4, r0
 800b926:	f100 0a14 	add.w	sl, r0, #20
 800b92a:	f04f 0900 	mov.w	r9, #0
 800b92e:	e7b8      	b.n	800b8a2 <__gethex+0x1b6>
 800b930:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b934:	42bd      	cmp	r5, r7
 800b936:	dd6f      	ble.n	800ba18 <__gethex+0x32c>
 800b938:	1bed      	subs	r5, r5, r7
 800b93a:	42ae      	cmp	r6, r5
 800b93c:	dc34      	bgt.n	800b9a8 <__gethex+0x2bc>
 800b93e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d022      	beq.n	800b98c <__gethex+0x2a0>
 800b946:	2b03      	cmp	r3, #3
 800b948:	d024      	beq.n	800b994 <__gethex+0x2a8>
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d115      	bne.n	800b97a <__gethex+0x28e>
 800b94e:	42ae      	cmp	r6, r5
 800b950:	d113      	bne.n	800b97a <__gethex+0x28e>
 800b952:	2e01      	cmp	r6, #1
 800b954:	d10b      	bne.n	800b96e <__gethex+0x282>
 800b956:	9a02      	ldr	r2, [sp, #8]
 800b958:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	2301      	movs	r3, #1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	f8ca 3000 	str.w	r3, [sl]
 800b966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b968:	2562      	movs	r5, #98	@ 0x62
 800b96a:	601c      	str	r4, [r3, #0]
 800b96c:	e73a      	b.n	800b7e4 <__gethex+0xf8>
 800b96e:	1e71      	subs	r1, r6, #1
 800b970:	4620      	mov	r0, r4
 800b972:	f7fe fb4e 	bl	800a012 <__any_on>
 800b976:	2800      	cmp	r0, #0
 800b978:	d1ed      	bne.n	800b956 <__gethex+0x26a>
 800b97a:	9801      	ldr	r0, [sp, #4]
 800b97c:	4621      	mov	r1, r4
 800b97e:	f7fd feff 	bl	8009780 <_Bfree>
 800b982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b984:	2300      	movs	r3, #0
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	2550      	movs	r5, #80	@ 0x50
 800b98a:	e72b      	b.n	800b7e4 <__gethex+0xf8>
 800b98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f3      	bne.n	800b97a <__gethex+0x28e>
 800b992:	e7e0      	b.n	800b956 <__gethex+0x26a>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1dd      	bne.n	800b956 <__gethex+0x26a>
 800b99a:	e7ee      	b.n	800b97a <__gethex+0x28e>
 800b99c:	0800c0cb 	.word	0x0800c0cb
 800b9a0:	0800c061 	.word	0x0800c061
 800b9a4:	0800c122 	.word	0x0800c122
 800b9a8:	1e6f      	subs	r7, r5, #1
 800b9aa:	f1b9 0f00 	cmp.w	r9, #0
 800b9ae:	d130      	bne.n	800ba12 <__gethex+0x326>
 800b9b0:	b127      	cbz	r7, 800b9bc <__gethex+0x2d0>
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7fe fb2c 	bl	800a012 <__any_on>
 800b9ba:	4681      	mov	r9, r0
 800b9bc:	117a      	asrs	r2, r7, #5
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9c4:	f007 071f 	and.w	r7, r7, #31
 800b9c8:	40bb      	lsls	r3, r7
 800b9ca:	4213      	tst	r3, r2
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	bf18      	it	ne
 800b9d2:	f049 0902 	orrne.w	r9, r9, #2
 800b9d6:	f7ff fe21 	bl	800b61c <rshift>
 800b9da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b9de:	1b76      	subs	r6, r6, r5
 800b9e0:	2502      	movs	r5, #2
 800b9e2:	f1b9 0f00 	cmp.w	r9, #0
 800b9e6:	d047      	beq.n	800ba78 <__gethex+0x38c>
 800b9e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d015      	beq.n	800ba1c <__gethex+0x330>
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d017      	beq.n	800ba24 <__gethex+0x338>
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d109      	bne.n	800ba0c <__gethex+0x320>
 800b9f8:	f019 0f02 	tst.w	r9, #2
 800b9fc:	d006      	beq.n	800ba0c <__gethex+0x320>
 800b9fe:	f8da 3000 	ldr.w	r3, [sl]
 800ba02:	ea49 0903 	orr.w	r9, r9, r3
 800ba06:	f019 0f01 	tst.w	r9, #1
 800ba0a:	d10e      	bne.n	800ba2a <__gethex+0x33e>
 800ba0c:	f045 0510 	orr.w	r5, r5, #16
 800ba10:	e032      	b.n	800ba78 <__gethex+0x38c>
 800ba12:	f04f 0901 	mov.w	r9, #1
 800ba16:	e7d1      	b.n	800b9bc <__gethex+0x2d0>
 800ba18:	2501      	movs	r5, #1
 800ba1a:	e7e2      	b.n	800b9e2 <__gethex+0x2f6>
 800ba1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1e:	f1c3 0301 	rsb	r3, r3, #1
 800ba22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0f0      	beq.n	800ba0c <__gethex+0x320>
 800ba2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba2e:	f104 0314 	add.w	r3, r4, #20
 800ba32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba3a:	f04f 0c00 	mov.w	ip, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba48:	d01b      	beq.n	800ba82 <__gethex+0x396>
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	6002      	str	r2, [r0, #0]
 800ba4e:	2d02      	cmp	r5, #2
 800ba50:	f104 0314 	add.w	r3, r4, #20
 800ba54:	d13c      	bne.n	800bad0 <__gethex+0x3e4>
 800ba56:	f8d8 2000 	ldr.w	r2, [r8]
 800ba5a:	3a01      	subs	r2, #1
 800ba5c:	42b2      	cmp	r2, r6
 800ba5e:	d109      	bne.n	800ba74 <__gethex+0x388>
 800ba60:	1171      	asrs	r1, r6, #5
 800ba62:	2201      	movs	r2, #1
 800ba64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba68:	f006 061f 	and.w	r6, r6, #31
 800ba6c:	fa02 f606 	lsl.w	r6, r2, r6
 800ba70:	421e      	tst	r6, r3
 800ba72:	d13a      	bne.n	800baea <__gethex+0x3fe>
 800ba74:	f045 0520 	orr.w	r5, r5, #32
 800ba78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba7a:	601c      	str	r4, [r3, #0]
 800ba7c:	9b02      	ldr	r3, [sp, #8]
 800ba7e:	601f      	str	r7, [r3, #0]
 800ba80:	e6b0      	b.n	800b7e4 <__gethex+0xf8>
 800ba82:	4299      	cmp	r1, r3
 800ba84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba88:	d8d9      	bhi.n	800ba3e <__gethex+0x352>
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	459b      	cmp	fp, r3
 800ba8e:	db17      	blt.n	800bac0 <__gethex+0x3d4>
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	9801      	ldr	r0, [sp, #4]
 800ba94:	3101      	adds	r1, #1
 800ba96:	f7fd fe33 	bl	8009700 <_Balloc>
 800ba9a:	4681      	mov	r9, r0
 800ba9c:	b918      	cbnz	r0, 800baa6 <__gethex+0x3ba>
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb08 <__gethex+0x41c>)
 800baa0:	4602      	mov	r2, r0
 800baa2:	2184      	movs	r1, #132	@ 0x84
 800baa4:	e6c5      	b.n	800b832 <__gethex+0x146>
 800baa6:	6922      	ldr	r2, [r4, #16]
 800baa8:	3202      	adds	r2, #2
 800baaa:	f104 010c 	add.w	r1, r4, #12
 800baae:	0092      	lsls	r2, r2, #2
 800bab0:	300c      	adds	r0, #12
 800bab2:	f7ff fd69 	bl	800b588 <memcpy>
 800bab6:	4621      	mov	r1, r4
 800bab8:	9801      	ldr	r0, [sp, #4]
 800baba:	f7fd fe61 	bl	8009780 <_Bfree>
 800babe:	464c      	mov	r4, r9
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bac8:	6122      	str	r2, [r4, #16]
 800baca:	2201      	movs	r2, #1
 800bacc:	615a      	str	r2, [r3, #20]
 800bace:	e7be      	b.n	800ba4e <__gethex+0x362>
 800bad0:	6922      	ldr	r2, [r4, #16]
 800bad2:	455a      	cmp	r2, fp
 800bad4:	dd0b      	ble.n	800baee <__gethex+0x402>
 800bad6:	2101      	movs	r1, #1
 800bad8:	4620      	mov	r0, r4
 800bada:	f7ff fd9f 	bl	800b61c <rshift>
 800bade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bae2:	3701      	adds	r7, #1
 800bae4:	42bb      	cmp	r3, r7
 800bae6:	f6ff aee0 	blt.w	800b8aa <__gethex+0x1be>
 800baea:	2501      	movs	r5, #1
 800baec:	e7c2      	b.n	800ba74 <__gethex+0x388>
 800baee:	f016 061f 	ands.w	r6, r6, #31
 800baf2:	d0fa      	beq.n	800baea <__gethex+0x3fe>
 800baf4:	4453      	add	r3, sl
 800baf6:	f1c6 0620 	rsb	r6, r6, #32
 800bafa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bafe:	f7fd fef1 	bl	80098e4 <__hi0bits>
 800bb02:	42b0      	cmp	r0, r6
 800bb04:	dbe7      	blt.n	800bad6 <__gethex+0x3ea>
 800bb06:	e7f0      	b.n	800baea <__gethex+0x3fe>
 800bb08:	0800c061 	.word	0x0800c061

0800bb0c <L_shift>:
 800bb0c:	f1c2 0208 	rsb	r2, r2, #8
 800bb10:	0092      	lsls	r2, r2, #2
 800bb12:	b570      	push	{r4, r5, r6, lr}
 800bb14:	f1c2 0620 	rsb	r6, r2, #32
 800bb18:	6843      	ldr	r3, [r0, #4]
 800bb1a:	6804      	ldr	r4, [r0, #0]
 800bb1c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb20:	432c      	orrs	r4, r5
 800bb22:	40d3      	lsrs	r3, r2
 800bb24:	6004      	str	r4, [r0, #0]
 800bb26:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb2a:	4288      	cmp	r0, r1
 800bb2c:	d3f4      	bcc.n	800bb18 <L_shift+0xc>
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__match>:
 800bb30:	b530      	push	{r4, r5, lr}
 800bb32:	6803      	ldr	r3, [r0, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb3a:	b914      	cbnz	r4, 800bb42 <__match+0x12>
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	bd30      	pop	{r4, r5, pc}
 800bb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb4a:	2d19      	cmp	r5, #25
 800bb4c:	bf98      	it	ls
 800bb4e:	3220      	addls	r2, #32
 800bb50:	42a2      	cmp	r2, r4
 800bb52:	d0f0      	beq.n	800bb36 <__match+0x6>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7f3      	b.n	800bb40 <__match+0x10>

0800bb58 <__hexnan>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	680b      	ldr	r3, [r1, #0]
 800bb5e:	6801      	ldr	r1, [r0, #0]
 800bb60:	115e      	asrs	r6, r3, #5
 800bb62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb66:	f013 031f 	ands.w	r3, r3, #31
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	bf18      	it	ne
 800bb6e:	3604      	addne	r6, #4
 800bb70:	2500      	movs	r5, #0
 800bb72:	1f37      	subs	r7, r6, #4
 800bb74:	4682      	mov	sl, r0
 800bb76:	4690      	mov	r8, r2
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb7e:	46b9      	mov	r9, r7
 800bb80:	463c      	mov	r4, r7
 800bb82:	9502      	str	r5, [sp, #8]
 800bb84:	46ab      	mov	fp, r5
 800bb86:	784a      	ldrb	r2, [r1, #1]
 800bb88:	1c4b      	adds	r3, r1, #1
 800bb8a:	9303      	str	r3, [sp, #12]
 800bb8c:	b342      	cbz	r2, 800bbe0 <__hexnan+0x88>
 800bb8e:	4610      	mov	r0, r2
 800bb90:	9105      	str	r1, [sp, #20]
 800bb92:	9204      	str	r2, [sp, #16]
 800bb94:	f7ff fd94 	bl	800b6c0 <__hexdig_fun>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d151      	bne.n	800bc40 <__hexnan+0xe8>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	9905      	ldr	r1, [sp, #20]
 800bba0:	2a20      	cmp	r2, #32
 800bba2:	d818      	bhi.n	800bbd6 <__hexnan+0x7e>
 800bba4:	9b02      	ldr	r3, [sp, #8]
 800bba6:	459b      	cmp	fp, r3
 800bba8:	dd13      	ble.n	800bbd2 <__hexnan+0x7a>
 800bbaa:	454c      	cmp	r4, r9
 800bbac:	d206      	bcs.n	800bbbc <__hexnan+0x64>
 800bbae:	2d07      	cmp	r5, #7
 800bbb0:	dc04      	bgt.n	800bbbc <__hexnan+0x64>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7ff ffa8 	bl	800bb0c <L_shift>
 800bbbc:	4544      	cmp	r4, r8
 800bbbe:	d952      	bls.n	800bc66 <__hexnan+0x10e>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbca:	f8cd b008 	str.w	fp, [sp, #8]
 800bbce:	464c      	mov	r4, r9
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	9903      	ldr	r1, [sp, #12]
 800bbd4:	e7d7      	b.n	800bb86 <__hexnan+0x2e>
 800bbd6:	2a29      	cmp	r2, #41	@ 0x29
 800bbd8:	d157      	bne.n	800bc8a <__hexnan+0x132>
 800bbda:	3102      	adds	r1, #2
 800bbdc:	f8ca 1000 	str.w	r1, [sl]
 800bbe0:	f1bb 0f00 	cmp.w	fp, #0
 800bbe4:	d051      	beq.n	800bc8a <__hexnan+0x132>
 800bbe6:	454c      	cmp	r4, r9
 800bbe8:	d206      	bcs.n	800bbf8 <__hexnan+0xa0>
 800bbea:	2d07      	cmp	r5, #7
 800bbec:	dc04      	bgt.n	800bbf8 <__hexnan+0xa0>
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ff8a 	bl	800bb0c <L_shift>
 800bbf8:	4544      	cmp	r4, r8
 800bbfa:	d936      	bls.n	800bc6a <__hexnan+0x112>
 800bbfc:	f1a8 0204 	sub.w	r2, r8, #4
 800bc00:	4623      	mov	r3, r4
 800bc02:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc06:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc0a:	429f      	cmp	r7, r3
 800bc0c:	d2f9      	bcs.n	800bc02 <__hexnan+0xaa>
 800bc0e:	1b3b      	subs	r3, r7, r4
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	3304      	adds	r3, #4
 800bc16:	3401      	adds	r4, #1
 800bc18:	3e03      	subs	r6, #3
 800bc1a:	42b4      	cmp	r4, r6
 800bc1c:	bf88      	it	hi
 800bc1e:	2304      	movhi	r3, #4
 800bc20:	4443      	add	r3, r8
 800bc22:	2200      	movs	r2, #0
 800bc24:	f843 2b04 	str.w	r2, [r3], #4
 800bc28:	429f      	cmp	r7, r3
 800bc2a:	d2fb      	bcs.n	800bc24 <__hexnan+0xcc>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	b91b      	cbnz	r3, 800bc38 <__hexnan+0xe0>
 800bc30:	4547      	cmp	r7, r8
 800bc32:	d128      	bne.n	800bc86 <__hexnan+0x12e>
 800bc34:	2301      	movs	r3, #1
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	2005      	movs	r0, #5
 800bc3a:	b007      	add	sp, #28
 800bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc40:	3501      	adds	r5, #1
 800bc42:	2d08      	cmp	r5, #8
 800bc44:	f10b 0b01 	add.w	fp, fp, #1
 800bc48:	dd06      	ble.n	800bc58 <__hexnan+0x100>
 800bc4a:	4544      	cmp	r4, r8
 800bc4c:	d9c1      	bls.n	800bbd2 <__hexnan+0x7a>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc54:	2501      	movs	r5, #1
 800bc56:	3c04      	subs	r4, #4
 800bc58:	6822      	ldr	r2, [r4, #0]
 800bc5a:	f000 000f 	and.w	r0, r0, #15
 800bc5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	e7b5      	b.n	800bbd2 <__hexnan+0x7a>
 800bc66:	2508      	movs	r5, #8
 800bc68:	e7b3      	b.n	800bbd2 <__hexnan+0x7a>
 800bc6a:	9b01      	ldr	r3, [sp, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0dd      	beq.n	800bc2c <__hexnan+0xd4>
 800bc70:	f1c3 0320 	rsb	r3, r3, #32
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	40da      	lsrs	r2, r3
 800bc7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc7e:	4013      	ands	r3, r2
 800bc80:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc84:	e7d2      	b.n	800bc2c <__hexnan+0xd4>
 800bc86:	3f04      	subs	r7, #4
 800bc88:	e7d0      	b.n	800bc2c <__hexnan+0xd4>
 800bc8a:	2004      	movs	r0, #4
 800bc8c:	e7d5      	b.n	800bc3a <__hexnan+0xe2>

0800bc8e <__ascii_mbtowc>:
 800bc8e:	b082      	sub	sp, #8
 800bc90:	b901      	cbnz	r1, 800bc94 <__ascii_mbtowc+0x6>
 800bc92:	a901      	add	r1, sp, #4
 800bc94:	b142      	cbz	r2, 800bca8 <__ascii_mbtowc+0x1a>
 800bc96:	b14b      	cbz	r3, 800bcac <__ascii_mbtowc+0x1e>
 800bc98:	7813      	ldrb	r3, [r2, #0]
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	1e10      	subs	r0, r2, #0
 800bca0:	bf18      	it	ne
 800bca2:	2001      	movne	r0, #1
 800bca4:	b002      	add	sp, #8
 800bca6:	4770      	bx	lr
 800bca8:	4610      	mov	r0, r2
 800bcaa:	e7fb      	b.n	800bca4 <__ascii_mbtowc+0x16>
 800bcac:	f06f 0001 	mvn.w	r0, #1
 800bcb0:	e7f8      	b.n	800bca4 <__ascii_mbtowc+0x16>

0800bcb2 <_realloc_r>:
 800bcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4614      	mov	r4, r2
 800bcba:	460d      	mov	r5, r1
 800bcbc:	b921      	cbnz	r1, 800bcc8 <_realloc_r+0x16>
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	f7fd bc90 	b.w	80095e8 <_malloc_r>
 800bcc8:	b92a      	cbnz	r2, 800bcd6 <_realloc_r+0x24>
 800bcca:	f7fd fc19 	bl	8009500 <_free_r>
 800bcce:	4625      	mov	r5, r4
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f000 f8c4 	bl	800be62 <_malloc_usable_size_r>
 800bcda:	4284      	cmp	r4, r0
 800bcdc:	4606      	mov	r6, r0
 800bcde:	d802      	bhi.n	800bce6 <_realloc_r+0x34>
 800bce0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce4:	d8f4      	bhi.n	800bcd0 <_realloc_r+0x1e>
 800bce6:	4621      	mov	r1, r4
 800bce8:	4638      	mov	r0, r7
 800bcea:	f7fd fc7d 	bl	80095e8 <_malloc_r>
 800bcee:	4680      	mov	r8, r0
 800bcf0:	b908      	cbnz	r0, 800bcf6 <_realloc_r+0x44>
 800bcf2:	4645      	mov	r5, r8
 800bcf4:	e7ec      	b.n	800bcd0 <_realloc_r+0x1e>
 800bcf6:	42b4      	cmp	r4, r6
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	bf28      	it	cs
 800bcfe:	4632      	movcs	r2, r6
 800bd00:	f7ff fc42 	bl	800b588 <memcpy>
 800bd04:	4629      	mov	r1, r5
 800bd06:	4638      	mov	r0, r7
 800bd08:	f7fd fbfa 	bl	8009500 <_free_r>
 800bd0c:	e7f1      	b.n	800bcf2 <_realloc_r+0x40>

0800bd0e <__ascii_wctomb>:
 800bd0e:	4603      	mov	r3, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	b141      	cbz	r1, 800bd26 <__ascii_wctomb+0x18>
 800bd14:	2aff      	cmp	r2, #255	@ 0xff
 800bd16:	d904      	bls.n	800bd22 <__ascii_wctomb+0x14>
 800bd18:	228a      	movs	r2, #138	@ 0x8a
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	4770      	bx	lr
 800bd22:	700a      	strb	r2, [r1, #0]
 800bd24:	2001      	movs	r0, #1
 800bd26:	4770      	bx	lr

0800bd28 <fiprintf>:
 800bd28:	b40e      	push	{r1, r2, r3}
 800bd2a:	b503      	push	{r0, r1, lr}
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	ab03      	add	r3, sp, #12
 800bd30:	4805      	ldr	r0, [pc, #20]	@ (800bd48 <fiprintf+0x20>)
 800bd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd36:	6800      	ldr	r0, [r0, #0]
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	f7ff f991 	bl	800b060 <_vfiprintf_r>
 800bd3e:	b002      	add	sp, #8
 800bd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd44:	b003      	add	sp, #12
 800bd46:	4770      	bx	lr
 800bd48:	20000020 	.word	0x20000020

0800bd4c <__swhatbuf_r>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	460c      	mov	r4, r1
 800bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd54:	2900      	cmp	r1, #0
 800bd56:	b096      	sub	sp, #88	@ 0x58
 800bd58:	4615      	mov	r5, r2
 800bd5a:	461e      	mov	r6, r3
 800bd5c:	da0d      	bge.n	800bd7a <__swhatbuf_r+0x2e>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd64:	f04f 0100 	mov.w	r1, #0
 800bd68:	bf14      	ite	ne
 800bd6a:	2340      	movne	r3, #64	@ 0x40
 800bd6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd70:	2000      	movs	r0, #0
 800bd72:	6031      	str	r1, [r6, #0]
 800bd74:	602b      	str	r3, [r5, #0]
 800bd76:	b016      	add	sp, #88	@ 0x58
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
 800bd7a:	466a      	mov	r2, sp
 800bd7c:	f000 f848 	bl	800be10 <_fstat_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	dbec      	blt.n	800bd5e <__swhatbuf_r+0x12>
 800bd84:	9901      	ldr	r1, [sp, #4]
 800bd86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd8e:	4259      	negs	r1, r3
 800bd90:	4159      	adcs	r1, r3
 800bd92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd96:	e7eb      	b.n	800bd70 <__swhatbuf_r+0x24>

0800bd98 <__smakebuf_r>:
 800bd98:	898b      	ldrh	r3, [r1, #12]
 800bd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd9c:	079d      	lsls	r5, r3, #30
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460c      	mov	r4, r1
 800bda2:	d507      	bpl.n	800bdb4 <__smakebuf_r+0x1c>
 800bda4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	2301      	movs	r3, #1
 800bdae:	6163      	str	r3, [r4, #20]
 800bdb0:	b003      	add	sp, #12
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb4:	ab01      	add	r3, sp, #4
 800bdb6:	466a      	mov	r2, sp
 800bdb8:	f7ff ffc8 	bl	800bd4c <__swhatbuf_r>
 800bdbc:	9f00      	ldr	r7, [sp, #0]
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fd fc10 	bl	80095e8 <_malloc_r>
 800bdc8:	b948      	cbnz	r0, 800bdde <__smakebuf_r+0x46>
 800bdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdce:	059a      	lsls	r2, r3, #22
 800bdd0:	d4ee      	bmi.n	800bdb0 <__smakebuf_r+0x18>
 800bdd2:	f023 0303 	bic.w	r3, r3, #3
 800bdd6:	f043 0302 	orr.w	r3, r3, #2
 800bdda:	81a3      	strh	r3, [r4, #12]
 800bddc:	e7e2      	b.n	800bda4 <__smakebuf_r+0xc>
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	6020      	str	r0, [r4, #0]
 800bde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde6:	81a3      	strh	r3, [r4, #12]
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bdee:	b15b      	cbz	r3, 800be08 <__smakebuf_r+0x70>
 800bdf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f000 f81d 	bl	800be34 <_isatty_r>
 800bdfa:	b128      	cbz	r0, 800be08 <__smakebuf_r+0x70>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	431d      	orrs	r5, r3
 800be0c:	81a5      	strh	r5, [r4, #12]
 800be0e:	e7cf      	b.n	800bdb0 <__smakebuf_r+0x18>

0800be10 <_fstat_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d07      	ldr	r5, [pc, #28]	@ (800be30 <_fstat_r+0x20>)
 800be14:	2300      	movs	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	4611      	mov	r1, r2
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	f7f6 f873 	bl	8001f08 <_fstat>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	d102      	bne.n	800be2c <_fstat_r+0x1c>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	b103      	cbz	r3, 800be2c <_fstat_r+0x1c>
 800be2a:	6023      	str	r3, [r4, #0]
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	bf00      	nop
 800be30:	200005f4 	.word	0x200005f4

0800be34 <_isatty_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d06      	ldr	r5, [pc, #24]	@ (800be50 <_isatty_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	602b      	str	r3, [r5, #0]
 800be40:	f7f6 f872 	bl	8001f28 <_isatty>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_isatty_r+0x1a>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_isatty_r+0x1a>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	200005f4 	.word	0x200005f4

0800be54 <abort>:
 800be54:	b508      	push	{r3, lr}
 800be56:	2006      	movs	r0, #6
 800be58:	f000 f834 	bl	800bec4 <raise>
 800be5c:	2001      	movs	r0, #1
 800be5e:	f7f6 f81f 	bl	8001ea0 <_exit>

0800be62 <_malloc_usable_size_r>:
 800be62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be66:	1f18      	subs	r0, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	bfbc      	itt	lt
 800be6c:	580b      	ldrlt	r3, [r1, r0]
 800be6e:	18c0      	addlt	r0, r0, r3
 800be70:	4770      	bx	lr

0800be72 <_raise_r>:
 800be72:	291f      	cmp	r1, #31
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4605      	mov	r5, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	d904      	bls.n	800be86 <_raise_r+0x14>
 800be7c:	2316      	movs	r3, #22
 800be7e:	6003      	str	r3, [r0, #0]
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be88:	b112      	cbz	r2, 800be90 <_raise_r+0x1e>
 800be8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be8e:	b94b      	cbnz	r3, 800bea4 <_raise_r+0x32>
 800be90:	4628      	mov	r0, r5
 800be92:	f000 f831 	bl	800bef8 <_getpid_r>
 800be96:	4622      	mov	r2, r4
 800be98:	4601      	mov	r1, r0
 800be9a:	4628      	mov	r0, r5
 800be9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bea0:	f000 b818 	b.w	800bed4 <_kill_r>
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d00a      	beq.n	800bebe <_raise_r+0x4c>
 800bea8:	1c59      	adds	r1, r3, #1
 800beaa:	d103      	bne.n	800beb4 <_raise_r+0x42>
 800beac:	2316      	movs	r3, #22
 800beae:	6003      	str	r3, [r0, #0]
 800beb0:	2001      	movs	r0, #1
 800beb2:	e7e7      	b.n	800be84 <_raise_r+0x12>
 800beb4:	2100      	movs	r1, #0
 800beb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800beba:	4620      	mov	r0, r4
 800bebc:	4798      	blx	r3
 800bebe:	2000      	movs	r0, #0
 800bec0:	e7e0      	b.n	800be84 <_raise_r+0x12>
	...

0800bec4 <raise>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	@ (800bed0 <raise+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f7ff bfd2 	b.w	800be72 <_raise_r>
 800bece:	bf00      	nop
 800bed0:	20000020 	.word	0x20000020

0800bed4 <_kill_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	@ (800bef4 <_kill_r+0x20>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f7f5 ffcd 	bl	8001e80 <_kill>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d102      	bne.n	800bef0 <_kill_r+0x1c>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	b103      	cbz	r3, 800bef0 <_kill_r+0x1c>
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	200005f4 	.word	0x200005f4

0800bef8 <_getpid_r>:
 800bef8:	f7f5 bfba 	b.w	8001e70 <_getpid>

0800befc <_init>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	bf00      	nop
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr

0800bf08 <_fini>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr
