
CANTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbb0  0800bbb0  0000d438  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bbb0  0800bbb0  0000cbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbb8  0800bbb8  0000d438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbb8  0800bbb8  0000cbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbbc  0800bbbc  0000cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000438  20000000  0800bbc0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000438  0800bff8  0000d438  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0800bff8  0000d6d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d438  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247a0  00000000  00000000  0000d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad7  00000000  00000000  00031c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000366e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105a  00000000  00000000  00037b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025825  00000000  00000000  00038bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec92  00000000  00000000  0005e3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d57c0  00000000  00000000  0007d091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152851  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d00  00000000  00000000  00152894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00158594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b240 	.word	0x0800b240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	0800b240 	.word	0x0800b240

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	2304      	movs	r3, #4
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <OD_getIndex+0x14>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	e000      	b.n	800061c <OD_getIndex+0x16>
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <OD_extension_init+0x14>
 8000638:	2305      	movs	r3, #5
 800063a:	e003      	b.n	8000644 <OD_extension_init+0x1c>
    entry->extension = extension;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	460b      	mov	r3, r1
 800065e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000660:	7af9      	ldrb	r1, [r7, #11]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f001 fb56 	bl	8001d1c <OD_get_value>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00c      	beq.n	80006a8 <OD_read_1014_default+0x2e>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	7c5b      	ldrb	r3, [r3, #17]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d108      	bne.n	80006a8 <OD_read_1014_default+0x2e>
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d005      	beq.n	80006a8 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d902      	bls.n	80006a8 <OD_read_1014_default+0x2e>
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80006a8:	2309      	movs	r3, #9
 80006aa:	e01b      	b.n	80006e4 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <OD_read_1014_default+0x44>
 80006ba:	2300      	movs	r3, #0
 80006bc:	e001      	b.n	80006c2 <OD_read_1014_default+0x48>
 80006be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80006c2:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80006ca:	3380      	adds	r3, #128	@ 0x80
 80006cc:	461a      	mov	r2, r3
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80006d4:	6939      	ldr	r1, [r7, #16]
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f7ff ff86 	bl	80005e8 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2204      	movs	r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00f      	beq.n	8000720 <OD_read_1003+0x34>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00c      	beq.n	8000720 <OD_read_1003+0x34>
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d803      	bhi.n	800071a <OD_read_1003+0x2e>
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	7c5b      	ldrb	r3, [r3, #17]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <OD_read_1003+0x34>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000720:	2309      	movs	r3, #9
 8000722:	e04c      	b.n	80007be <OD_read_1003+0xd2>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	7f1b      	ldrb	r3, [r3, #28]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d801      	bhi.n	8000736 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000732:	2309      	movs	r3, #9
 8000734:	e043      	b.n	80007be <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	7c5b      	ldrb	r3, [r3, #17]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10b      	bne.n	8000756 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000744:	4619      	mov	r1, r3
 8000746:	68b8      	ldr	r0, [r7, #8]
 8000748:	f7ff ff3e 	bl	80005c8 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e033      	b.n	80007be <OD_read_1003+0xd2>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	7c5a      	ldrb	r2, [r3, #17]
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000760:	429a      	cmp	r2, r3
 8000762:	d82b      	bhi.n	80007bc <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	7f5b      	ldrb	r3, [r3, #29]
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	7c5b      	ldrb	r3, [r3, #17]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	b29b      	uxth	r3, r3
 8000772:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000774:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000778:	2b00      	cmp	r3, #0
 800077a:	da07      	bge.n	800078c <OD_read_1003+0xa0>
            index += em->fifoSize;
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	7f1b      	ldrb	r3, [r3, #28]
 8000780:	461a      	mov	r2, r3
 8000782:	8afb      	ldrh	r3, [r7, #22]
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	82fb      	strh	r3, [r7, #22]
 800078a:	e007      	b.n	800079c <OD_read_1003+0xb0>
        }
        else if (index >= (em->fifoSize)) {
 800078c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	7f12      	ldrb	r2, [r2, #28]
 8000794:	4293      	cmp	r3, r2
 8000796:	db01      	blt.n	800079c <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 8000798:	2309      	movs	r3, #9
 800079a:	e010      	b.n	80007be <OD_read_1003+0xd2>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f7ff ff1b 	bl	80005e8 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2204      	movs	r2, #4
 80007b6:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e000      	b.n	80007be <OD_read_1003+0xd2>
    }
    else {
        return ODR_NO_DATA;
 80007bc:	2319      	movs	r3, #25
    }
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00c      	beq.n	80007f4 <OD_write_1003+0x2e>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	7c5b      	ldrb	r3, [r3, #17]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d108      	bne.n	80007f4 <OD_write_1003+0x2e>
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <OD_write_1003+0x2e>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d102      	bne.n	80007f4 <OD_write_1003+0x2e>
        || countWritten == NULL)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80007f4:	2309      	movs	r3, #9
 80007f6:	e012      	b.n	800081e <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f7ff fed7 	bl	80005ac <CO_getUint8>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000804:	230f      	movs	r3, #15
 8000806:	e00a      	b.n	800081e <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af02      	add	r7, sp, #8
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000836:	2300      	movs	r3, #0
 8000838:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d01a      	beq.n	8000876 <CO_EM_init+0x4e>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d017      	beq.n	8000876 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d103      	bne.n	8000854 <CO_EM_init+0x2c>
 800084c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d810      	bhi.n	8000876 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00d      	beq.n	8000876 <CO_EM_init+0x4e>
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000860:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <CO_EM_init+0x4e>
 8000868:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800086c:	2b00      	cmp	r3, #0
 800086e:	db02      	blt.n	8000876 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e0a7      	b.n	80009cc <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 800087c:	2250      	movs	r2, #80	@ 0x50
 800087e:	2100      	movs	r1, #0
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f00a f8a7 	bl	800a9d4 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800088c:	2300      	movs	r3, #0
 800088e:	2201      	movs	r2, #1
 8000890:	2100      	movs	r1, #0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f001 faa9 	bl	8001dea <OD_getPtr>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10c      	bne.n	80008c0 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80008a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <CO_EM_init+0x92>
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff feaa 	bl	8000606 <OD_getIndex>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80008ba:	f06f 030b 	mvn.w	r3, #11
 80008be:	e085      	b.n	80009cc <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008d4:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008d6:	f107 0210 	add.w	r2, r7, #16
 80008da:	2301      	movs	r3, #1
 80008dc:	2100      	movs	r1, #0
 80008de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80008e0:	f7ff feb6 	bl	8000650 <OD_get_u32>
 80008e4:	4603      	mov	r3, r0
 80008e6:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80008e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <CO_EM_init+0xd2>
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <CO_EM_init+0x1ac>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80008fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d006      	beq.n	800090e <CO_EM_init+0xe6>
 8000900:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000902:	f7ff fe80 	bl	8000606 <OD_getIndex>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090c:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 800090e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000916:	f06f 030b 	mvn.w	r3, #11
 800091a:	e057      	b.n	80009cc <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 800091c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000920:	b29b      	uxth	r3, r3
 8000922:	3380      	adds	r3, #128	@ 0x80
 8000924:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	43db      	mvns	r3, r3
 800092a:	0fdb      	lsrs	r3, r3, #31
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4a26      	ldr	r2, [pc, #152]	@ (80009d8 <CO_EM_init+0x1b0>)
 800093e:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4a26      	ldr	r2, [pc, #152]	@ (80009dc <CO_EM_init+0x1b4>)
 8000944:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3330      	adds	r3, #48	@ 0x30
 800094a:	4619      	mov	r1, r3
 800094c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800094e:	f7ff fe6b 	bl	8000628 <OD_extension_init>
 8000952:	4603      	mov	r3, r0
 8000954:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000956:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00c      	beq.n	8000978 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800095e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <CO_EM_init+0x14a>
 8000964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000966:	f7ff fe4e 	bl	8000606 <OD_getIndex>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000970:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000972:	f06f 030b 	mvn.w	r3, #11
 8000976:	e029      	b.n	80009cc <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800097e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000982:	8aba      	ldrh	r2, [r7, #20]
 8000984:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000986:	2300      	movs	r3, #0
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	2308      	movs	r3, #8
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2300      	movs	r3, #0
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f006 f86f 	bl	8006a74 <CO_CANtxBufferInit>
 8000996:	4602      	mov	r2, r0
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	e010      	b.n	80009cc <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <CO_EM_init+0x1b8>)
 80009b4:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <CO_EM_init+0x1bc>)
 80009ba:	649a      	str	r2, [r3, #72]	@ 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3340      	adds	r3, #64	@ 0x40
 80009c0:	4619      	mov	r1, r3
 80009c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009c4:	f7ff fe30 	bl	8000628 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80009c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	7ffff800 	.word	0x7ffff800
 80009d8:	0800067b 	.word	0x0800067b
 80009dc:	08001951 	.word	0x08001951
 80009e0:	080006ed 	.word	0x080006ed
 80009e4:	080007c7 	.word	0x080007c7

080009e8 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	8a5b      	ldrh	r3, [r3, #18]
 80009fc:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	8a1b      	ldrh	r3, [r3, #16]
 8000a02:	8aba      	ldrh	r2, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f000 80a2 	beq.w	8000b4e <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	8a1a      	ldrh	r2, [r3, #16]
 8000a0e:	8abb      	ldrh	r3, [r7, #20]
 8000a10:	4053      	eors	r3, r2
 8000a12:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	8aba      	ldrh	r2, [r7, #20]
 8000a18:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 8000a1a:	8a7a      	ldrh	r2, [r7, #18]
 8000a1c:	f240 1301 	movw	r3, #257	@ 0x101
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d010      	beq.n	8000a48 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8000a26:	8aba      	ldrh	r2, [r7, #20]
 8000a28:	f240 1301 	movw	r3, #257	@ 0x101
 8000a2c:	4013      	ands	r3, r2
            CO_error(em,
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2201      	movs	r2, #1
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f91a 	bl	8000c7c <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8000a48:	8a7b      	ldrh	r3, [r7, #18]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d010      	beq.n	8000a74 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a52:	8abb      	ldrh	r3, [r7, #20]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f904 	bl	8000c7c <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000a74:	8a7b      	ldrh	r3, [r7, #18]
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d010      	beq.n	8000aa0 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000a7e:	8abb      	ldrh	r3, [r7, #20]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000a98:	2212      	movs	r2, #18
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 f8ee 	bl	8000c7c <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 8000aa0:	8a7b      	ldrh	r3, [r7, #18]
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d010      	beq.n	8000acc <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000aaa:	8abb      	ldrh	r3, [r7, #20]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4619      	mov	r1, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000ac4:	2214      	movs	r2, #20
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 f8d8 	bl	8000c7c <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8000acc:	8a7b      	ldrh	r3, [r7, #18]
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d010      	beq.n	8000af8 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000ad6:	8abb      	ldrh	r3, [r7, #20]
 8000ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000af0:	2215      	movs	r2, #21
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f000 f8c2 	bl	8000c7c <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8000af8:	8a7b      	ldrh	r3, [r7, #18]
 8000afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d010      	beq.n	8000b24 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000b02:	8abb      	ldrh	r3, [r7, #20]
 8000b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf14      	ite	ne
 8000b0c:	2301      	movne	r3, #1
 8000b0e:	2300      	moveq	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	2300      	movs	r3, #0
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f8ac 	bl	8000c7c <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000b24:	8a7b      	ldrh	r3, [r7, #18]
 8000b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00f      	beq.n	8000b4e <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2313      	movs	r3, #19
 8000b46:	2213      	movs	r2, #19
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f897 	bl	8000c7c <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	789b      	ldrb	r3, [r3, #2]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <CO_EM_process+0x18a>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	78db      	ldrb	r3, [r3, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	7a1b      	ldrb	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <CO_EM_process+0x1a2>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	7a5b      	ldrb	r3, [r3, #9]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b90:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	7dfa      	ldrb	r2, [r7, #23]
 8000b98:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d067      	beq.n	8000c70 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	7f1b      	ldrb	r3, [r3, #28]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d965      	bls.n	8000c74 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	7f9b      	ldrb	r3, [r3, #30]
 8000bac:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	7f5b      	ldrb	r3, [r3, #29]
 8000bb2:	7c7a      	ldrb	r2, [r7, #17]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d05d      	beq.n	8000c74 <CO_EM_process+0x28c>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d158      	bne.n	8000c74 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	699a      	ldr	r2, [r3, #24]
 8000bc6:	7c7b      	ldrb	r3, [r7, #17]
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	041a      	lsls	r2, r3, #16
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6998      	ldr	r0, [r3, #24]
 8000bd6:	7c7b      	ldrb	r3, [r7, #17]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	4403      	add	r3, r0
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be4:	1d58      	adds	r0, r3, #5
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	7c7b      	ldrb	r3, [r7, #17]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f009 ff79 	bl	800aaea <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f005 ffb0 	bl	8006b68 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000c08:	7c7b      	ldrb	r3, [r7, #17]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	747b      	strb	r3, [r7, #17]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	7f1b      	ldrb	r3, [r3, #28]
 8000c12:	7c7a      	ldrb	r2, [r7, #17]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d201      	bcs.n	8000c1c <CO_EM_process+0x234>
 8000c18:	7c7a      	ldrb	r2, [r7, #17]
 8000c1a:	e000      	b.n	8000c1e <CO_EM_process+0x236>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	7fdb      	ldrb	r3, [r3, #31]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d10c      	bne.n	8000c44 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 f81d 	bl	8000c7c <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c42:	e017      	b.n	8000c74 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	7fdb      	ldrb	r3, [r3, #31]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d113      	bne.n	8000c74 <CO_EM_process+0x28c>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	7f9a      	ldrb	r2, [r3, #30]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	7f5b      	ldrb	r3, [r3, #29]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d10d      	bne.n	8000c74 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f000 f807 	bl	8000c7c <CO_error>
    return;
 8000c6e:	e001      	b.n	8000c74 <CO_EM_process+0x28c>
        return;
 8000c70:	bf00      	nop
 8000c72:	e000      	b.n	8000c76 <CO_EM_process+0x28e>
    return;
 8000c74:	bf00      	nop
}
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b08d      	sub	sp, #52	@ 0x34
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80a6 	beq.w	8000de6 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb6:	2b09      	cmp	r3, #9
 8000cb8:	d90a      	bls.n	8000cd0 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000cc6:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000cca:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <CO_error+0x88>
            return;
 8000cf6:	e079      	b.n	8000dec <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d074      	beq.n	8000dea <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000d00:	2300      	movs	r3, #0
 8000d02:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	061a      	lsls	r2, r3, #24
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d10:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d16:	f3ef 8210 	mrs	r2, PRIMASK
 8000d1a:	617a      	str	r2, [r7, #20]
  return(result);
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d008      	beq.n	8000d3c <CO_error+0xc0>
 8000d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e00b      	b.n	8000d54 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000d46:	43db      	mvns	r3, r3
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d52:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	7f1b      	ldrb	r3, [r3, #28]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d93c      	bls.n	8000dd6 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	7f5b      	ldrb	r3, [r3, #29]
 8000d60:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000d62:	7efb      	ldrb	r3, [r7, #27]
 8000d64:	3301      	adds	r3, #1
 8000d66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	7f1b      	ldrb	r3, [r3, #28]
 8000d6e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d302      	bcc.n	8000d7c <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7f9b      	ldrb	r3, [r3, #30]
 8000d80:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d103      	bne.n	8000d90 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	77da      	strb	r2, [r3, #31]
 8000d8e:	e022      	b.n	8000dd6 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	699a      	ldr	r2, [r3, #24]
 8000d94:	7efb      	ldrb	r3, [r7, #27]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	6a3a      	ldr	r2, [r7, #32]
 8000d9c:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	7efb      	ldrb	r3, [r7, #27]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4413      	add	r3, r2
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000db2:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	da07      	bge.n	8000dd6 <CO_error+0x15a>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	f383 8810 	msr	PRIMASK, r3
}
 8000de4:	e002      	b.n	8000dec <CO_error+0x170>
    if (em == NULL) return;
 8000de6:	bf00      	nop
 8000de8:	e000      	b.n	8000dec <CO_error+0x170>
            return;
 8000dea:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000dec:	3734      	adds	r7, #52	@ 0x34
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <OD_getIndex+0x14>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	e000      	b.n	8000e28 <OD_getIndex+0x16>
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <OD_extension_init>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <OD_extension_init+0x14>
 8000e44:	2305      	movs	r3, #5
 8000e46:	e003      	b.n	8000e50 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <OD_get_u32>:
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e6c:	7af9      	ldrb	r1, [r7, #11]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2304      	movs	r3, #4
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 ff50 	bl	8001d1c <OD_get_value>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000e86:	b480      	push	{r7}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	3305      	adds	r3, #5
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000ea0:	7cfb      	ldrb	r3, [r7, #19]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b088      	sub	sp, #32
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d012      	beq.n	8000f02 <OD_write_1016+0x40>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00f      	beq.n	8000f02 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7c5b      	ldrb	r3, [r3, #17]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00b      	beq.n	8000f02 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	7c5a      	ldrb	r2, [r3, #17]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	7a1b      	ldrb	r3, [r3, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d805      	bhi.n	8000f02 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d102      	bne.n	8000f02 <OD_write_1016+0x40>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000f02:	2309      	movs	r3, #9
 8000f04:	e020      	b.n	8000f48 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000f06:	68b8      	ldr	r0, [r7, #8]
 8000f08:	f7ff ff75 	bl	8000df6 <CO_getUint32>
 8000f0c:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	7c5b      	ldrb	r3, [r3, #17]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b2d9      	uxtb	r1, r3
 8000f20:	8abb      	ldrh	r3, [r7, #20]
 8000f22:	7dfa      	ldrb	r2, [r7, #23]
 8000f24:	69f8      	ldr	r0, [r7, #28]
 8000f26:	f000 f8bf 	bl	80010a8 <CO_HBconsumer_initEntry>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000f2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f36:	2308      	movs	r3, #8
 8000f38:	e006      	b.n	8000f48 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fd05 	bl	8001950 <OD_writeOriginal>
 8000f46:	4603      	mov	r3, r0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <CO_HBconsumer_init+0x2c>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <CO_HBconsumer_init+0x2c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <CO_HBconsumer_init+0x2c>
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	e08a      	b.n	8001098 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f009 fd24 	bl	800a9d4 <memset>
    HBcons->em = em;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f9c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000fa2:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa6:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000fa8:	78fa      	ldrb	r2, [r7, #3]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d304      	bcc.n	8000fb8 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb0:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e000      	b.n	8000fba <CO_HBconsumer_init+0x6a>
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	e041      	b.n	8001048 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	f107 0214 	add.w	r2, r7, #20
 8000fce:	2301      	movs	r3, #1
 8000fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fd2:	f7ff ff43 	bl	8000e5c <OD_get_u32>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000fda:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00c      	beq.n	8000ffc <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <CO_HBconsumer_init+0xa6>
 8000fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fea:	f7ff ff12 	bl	8000e12 <OD_getIndex>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000ff6:	f06f 030b 	mvn.w	r3, #11
 8000ffa:	e04d      	b.n	8001098 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8001006:	8b7b      	ldrh	r3, [r7, #26]
 8001008:	7f7a      	ldrb	r2, [r7, #29]
 800100a:	7ff9      	ldrb	r1, [r7, #31]
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f000 f84b 	bl	80010a8 <CO_HBconsumer_initEntry>
 8001012:	4603      	mov	r3, r0
 8001014:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001016:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d011      	beq.n	8001042 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800101e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <CO_HBconsumer_init+0xe2>
 8001024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001026:	f7ff fef4 	bl	8000e12 <OD_getIndex>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001030:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001032:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001036:	f113 0f0c 	cmn.w	r3, #12
 800103a:	d002      	beq.n	8001042 <CO_HBconsumer_init+0xf2>
                return ret;
 800103c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001040:	e02a      	b.n	8001098 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	7a1b      	ldrb	r3, [r3, #8]
 800104c:	7ffa      	ldrb	r2, [r7, #31]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3b8      	bcc.n	8000fc4 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <CO_HBconsumer_init+0x150>)
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <CO_HBconsumer_init+0x154>)
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3320      	adds	r3, #32
 8001068:	4619      	mov	r1, r3
 800106a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800106c:	f7ff fee2 	bl	8000e34 <OD_extension_init>
 8001070:	4603      	mov	r3, r0
 8001072:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001074:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800107c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <CO_HBconsumer_init+0x140>
 8001082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001084:	f7ff fec5 	bl	8000e12 <OD_getIndex>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001090:	f06f 030b 	mvn.w	r3, #11
 8001094:	e000      	b.n	8001098 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	080018a1 	.word	0x080018a1
 80010a4:	08000ec3 	.word	0x08000ec3

080010a8 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08d      	sub	sp, #52	@ 0x34
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	70fb      	strb	r3, [r7, #3]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70bb      	strb	r3, [r7, #2]
 80010be:	4613      	mov	r3, r2
 80010c0:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80010c2:	2300      	movs	r3, #0
 80010c4:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <CO_HBconsumer_initEntry+0x2e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7a1b      	ldrb	r3, [r3, #8]
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d302      	bcc.n	80010dc <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e076      	b.n	80011ca <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 80010dc:	883b      	ldrh	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d024      	beq.n	800112c <CO_HBconsumer_initEntry+0x84>
 80010e2:	78bb      	ldrb	r3, [r7, #2]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d021      	beq.n	800112c <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	77bb      	strb	r3, [r7, #30]
 80010ec:	e019      	b.n	8001122 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	7fbb      	ldrb	r3, [r7, #30]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	f107 0408 	add.w	r4, r7, #8
 80010fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	7fbb      	ldrb	r3, [r7, #30]
 8001106:	429a      	cmp	r2, r3
 8001108:	d008      	beq.n	800111c <CO_HBconsumer_initEntry+0x74>
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <CO_HBconsumer_initEntry+0x74>
 8001110:	7a3b      	ldrb	r3, [r7, #8]
 8001112:	78ba      	ldrb	r2, [r7, #2]
 8001114:	429a      	cmp	r2, r3
 8001116:	d101      	bne.n	800111c <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001118:	23f4      	movs	r3, #244	@ 0xf4
 800111a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800111c:	7fbb      	ldrb	r3, [r7, #30]
 800111e:	3301      	adds	r3, #1
 8001120:	77bb      	strb	r3, [r7, #30]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7a1b      	ldrb	r3, [r3, #8]
 8001126:	7fba      	ldrb	r2, [r7, #30]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3e0      	bcc.n	80010ee <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 800112c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d148      	bne.n	80011c6 <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	78ba      	ldrb	r2, [r7, #2]
 8001144:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001146:	883b      	ldrh	r3, [r7, #0]
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	461a      	mov	r2, r3
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	22ff      	movs	r2, #255	@ 0xff
 800115a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00c      	beq.n	8001184 <CO_HBconsumer_initEntry+0xdc>
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800117a:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2201      	movs	r2, #1
 8001180:	709a      	strb	r2, [r3, #2]
 8001182:	e007      	b.n	8001194 <CO_HBconsumer_initEntry+0xec>
        }
        else {
            COB_ID = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2200      	movs	r2, #0
 8001192:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011ae:	8bba      	ldrh	r2, [r7, #28]
 80011b0:	4c08      	ldr	r4, [pc, #32]	@ (80011d4 <CO_HBconsumer_initEntry+0x12c>)
 80011b2:	9402      	str	r4, [sp, #8]
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011be:	f005 fbfb 	bl	80069b8 <CO_CANrxBufferInit>
 80011c2:	4603      	mov	r3, r0
 80011c4:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 80011c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08000e87 	.word	0x08000e87

080011d8 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	@ 0x38
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d077      	beq.n	80012e4 <CO_HBconsumer_process+0x10c>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d073      	beq.n	80012e4 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001202:	e068      	b.n	80012d6 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d055      	beq.n	80012ca <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d022      	beq.n	800126c <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d112      	bne.n	8001256 <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d10a      	bne.n	800124e <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001246:	221c      	movs	r2, #28
 8001248:	2101      	movs	r1, #1
 800124a:	f7ff fd17 	bl	8000c7c <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2201      	movs	r2, #1
 8001252:	709a      	strb	r2, [r3, #2]
 8001254:	e007      	b.n	8001266 <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2202      	movs	r2, #2
 800125a:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d11c      	bne.n	80012ae <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	441a      	add	r2, r3
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	429a      	cmp	r2, r3
 800128a:	d310      	bcc.n	80012ae <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	f248 1330 	movw	r3, #33072	@ 0x8130
 800129a:	221b      	movs	r2, #27
 800129c:	2101      	movs	r1, #1
 800129e:	f7ff fced 	bl	8000c7c <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2203      	movs	r2, #3
 80012ac:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d001      	beq.n	80012ba <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d003      	beq.n	80012cc <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012c8:	e000      	b.n	80012cc <CO_HBconsumer_process+0xf4>
                continue;
 80012ca:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	7a1b      	ldrb	r3, [r3, #8]
 80012da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012de:	429a      	cmp	r2, r3
 80012e0:	d390      	bcc.n	8001204 <CO_HBconsumer_process+0x2c>
 80012e2:	e028      	b.n	8001336 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <CO_HBconsumer_process+0x11a>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d021      	beq.n	8001336 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	77fb      	strb	r3, [r7, #31]
 80012f6:	e015      	b.n	8001324 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	22ff      	movs	r2, #255	@ 0xff
 8001308:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2201      	movs	r2, #1
 800131c:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	3301      	adds	r3, #1
 8001322:	77fb      	strb	r3, [r7, #31]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	7a1b      	ldrb	r3, [r3, #8]
 8001328:	7ffa      	ldrb	r2, [r7, #31]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3e4      	bcc.n	80012f8 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d114      	bne.n	8001368 <CO_HBconsumer_process+0x190>
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d011      	beq.n	8001368 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	221b      	movs	r2, #27
 8001350:	2100      	movs	r1, #0
 8001352:	f7ff fc93 	bl	8000c7c <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	221c      	movs	r2, #28
 8001362:	2100      	movs	r1, #0
 8001364:	f7ff fc8a 	bl	8000c7c <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800136c:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001372:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	615a      	str	r2, [r3, #20]
}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	@ 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	81fb      	strh	r3, [r7, #14]
 8001392:	89fb      	ldrh	r3, [r7, #14]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <OD_getIndex+0x14>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	e000      	b.n	80013b6 <OD_getIndex+0x16>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <OD_extension_init>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <OD_extension_init+0x14>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e003      	b.n	80013de <OD_extension_init+0x1c>
    entry->extension = extension;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <OD_get_u16>:
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af02      	add	r7, sp, #8
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013fa:	7af9      	ldrb	r1, [r7, #11]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2302      	movs	r3, #2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fc89 	bl	8001d1c <OD_get_value>
 800140a:	4603      	mov	r3, r0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	2201      	movs	r2, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00a      	beq.n	8001450 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b09      	cmp	r3, #9
 800143e:	d807      	bhi.n	8001450 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	5cd2      	ldrb	r2, [r2, r3]
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	4013      	ands	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <CO_isError+0x40>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <CO_isError+0x42>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <CO_getErrorRegister+0x1e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <CO_getErrorRegister+0x1e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e000      	b.n	8001482 <CO_getErrorRegister+0x20>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3305      	adds	r3, #5
 80014a2:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d10a      	bne.n	80014d0 <CO_NMT_receive+0x42>
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <CO_NMT_receive+0x3c>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	78db      	ldrb	r3, [r3, #3]
 80014c4:	7bba      	ldrb	r2, [r7, #14]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d102      	bne.n	80014d0 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <OD_write_1017+0x2e>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	7c5b      	ldrb	r3, [r3, #17]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <OD_write_1017+0x2e>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <OD_write_1017+0x2e>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800150a:	2309      	movs	r3, #9
 800150c:	e017      	b.n	800153e <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff ff34 	bl	8001382 <CO_getUint16>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fb03 f202 	mul.w	r2, r3, r2
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 fa0a 	bl	8001950 <OD_writeOriginal>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af04      	add	r7, sp, #16
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <CO_NMT_init+0x30>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <CO_NMT_init+0x30>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 800156c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <CO_NMT_init+0x30>
 8001572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e098      	b.n	80016b0 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 800157e:	222c      	movs	r2, #44	@ 0x2c
 8001580:	2100      	movs	r1, #0
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f009 fa26 	bl	800a9d4 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8c3a      	ldrh	r2, [r7, #32]
 800159e:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 80015a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80015b6:	f107 0214 	add.w	r2, r7, #20
 80015ba:	2301      	movs	r3, #1
 80015bc:	2100      	movs	r1, #0
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f7ff ff13 	bl	80013ea <OD_get_u16>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00c      	beq.n	80015ea <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <CO_NMT_init+0x9c>
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f7ff fee2 	bl	80013a0 <OD_getIndex>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80015e4:	f06f 030b 	mvn.w	r3, #11
 80015e8:	e062      	b.n	80016b0 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80015ea:	8abb      	ldrh	r3, [r7, #20]
 80015ec:	461a      	mov	r2, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	fb03 f202 	mul.w	r2, r3, r2
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <CO_NMT_init+0x170>)
 8001604:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <CO_NMT_init+0x174>)
 800160a:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3310      	adds	r3, #16
 8001610:	4619      	mov	r1, r3
 8001612:	68b8      	ldr	r0, [r7, #8]
 8001614:	f7ff fed5 	bl	80013c2 <OD_extension_init>
 8001618:	4603      	mov	r3, r0
 800161a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800161c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00c      	beq.n	800163e <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <CO_NMT_init+0xf0>
 800162a:	68b8      	ldr	r0, [r7, #8]
 800162c:	f7ff feb8 	bl	80013a0 <OD_getIndex>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001636:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001638:	f06f 030b 	mvn.w	r3, #11
 800163c:	e038      	b.n	80016b0 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	429a      	cmp	r2, r3
 8001648:	d903      	bls.n	8001652 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001652:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001654:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <CO_NMT_init+0x178>)
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001668:	f005 f9a6 	bl	80069b8 <CO_CANrxBufferInit>
 800166c:	4603      	mov	r3, r0
 800166e:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <CO_NMT_init+0x136>
        return ret;
 8001678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167c:	e018      	b.n	80016b0 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001684:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001686:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001688:	2300      	movs	r3, #0
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001694:	f005 f9ee 	bl	8006a74 <CO_CANtxBufferInit>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e001      	b.n	80016b0 <CO_NMT_init+0x168>
    }

    return ret;
 80016ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	080018a1 	.word	0x080018a1
 80016bc:	080014dd 	.word	0x080014dd
 80016c0:	0800148f 	.word	0x0800148f

080016c4 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016d8:	2300      	movs	r3, #0
 80016da:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d204      	bcs.n	8001700 <CO_NMT_process+0x3c>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	e000      	b.n	8001702 <CO_NMT_process+0x3e>
 8001700:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10e      	bne.n	800172a <CO_NMT_process+0x66>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d029      	beq.n	8001768 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001722:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001726:	429a      	cmp	r2, r3
 8001728:	d01e      	beq.n	8001768 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172e:	7ffa      	ldrb	r2, [r7, #31]
 8001730:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f005 fa13 	bl	8006b68 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <CO_NMT_process+0x96>
 8001756:	2305      	movs	r3, #5
 8001758:	e000      	b.n	800175c <CO_NMT_process+0x98>
 800175a:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e003      	b.n	8001768 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7ffa      	ldrb	r2, [r7, #31]
 800176c:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d025      	beq.n	80017c2 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	2b82      	cmp	r3, #130	@ 0x82
 800177c:	d01a      	beq.n	80017b4 <CO_NMT_process+0xf0>
 800177e:	2b82      	cmp	r3, #130	@ 0x82
 8001780:	dc1b      	bgt.n	80017ba <CO_NMT_process+0xf6>
 8001782:	2b81      	cmp	r3, #129	@ 0x81
 8001784:	d013      	beq.n	80017ae <CO_NMT_process+0xea>
 8001786:	2b81      	cmp	r3, #129	@ 0x81
 8001788:	dc17      	bgt.n	80017ba <CO_NMT_process+0xf6>
 800178a:	2b80      	cmp	r3, #128	@ 0x80
 800178c:	d00c      	beq.n	80017a8 <CO_NMT_process+0xe4>
 800178e:	2b80      	cmp	r3, #128	@ 0x80
 8001790:	dc13      	bgt.n	80017ba <CO_NMT_process+0xf6>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d002      	beq.n	800179c <CO_NMT_process+0xd8>
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800179a:	e00e      	b.n	80017ba <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 800179c:	2305      	movs	r3, #5
 800179e:	77fb      	strb	r3, [r7, #31]
                break;
 80017a0:	e00c      	b.n	80017bc <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80017a2:	2304      	movs	r3, #4
 80017a4:	77fb      	strb	r3, [r7, #31]
                break;
 80017a6:	e009      	b.n	80017bc <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80017a8:	237f      	movs	r3, #127	@ 0x7f
 80017aa:	77fb      	strb	r3, [r7, #31]
                break;
 80017ac:	e006      	b.n	80017bc <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	77bb      	strb	r3, [r7, #30]
                break;
 80017b2:	e003      	b.n	80017bc <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 80017b4:	2301      	movs	r3, #1
 80017b6:	77bb      	strb	r3, [r7, #30]
                break;
 80017b8:	e000      	b.n	80017bc <CO_NMT_process+0xf8>
                break;
 80017ba:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <CO_NMT_process+0x144>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2112      	movs	r1, #18
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe1d 	bl	8001414 <CO_isError>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	211b      	movs	r1, #27
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fe14 	bl	8001414 <CO_isError>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	211c      	movs	r1, #28
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe0b 	bl	8001414 <CO_isError>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <CO_NMT_process+0x146>
 8001808:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800180a:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <CO_NMT_process+0x170>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe20 	bl	8001462 <CO_getErrorRegister>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <CO_NMT_process+0x170>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <CO_NMT_process+0x172>
 8001834:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001836:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d110      	bne.n	8001862 <CO_NMT_process+0x19e>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <CO_NMT_process+0x188>
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <CO_NMT_process+0x198>
 8001858:	2304      	movs	r3, #4
 800185a:	e000      	b.n	800185e <CO_NMT_process+0x19a>
 800185c:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800185e:	77fb      	strb	r3, [r7, #31]
 8001860:	e010      	b.n	8001884 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	889b      	ldrh	r3, [r3, #4]
 8001866:	b21b      	sxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	da0b      	bge.n	8001884 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 800186c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001870:	2b7f      	cmp	r3, #127	@ 0x7f
 8001872:	d107      	bne.n	8001884 <CO_NMT_process+0x1c0>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d104      	bne.n	8001884 <CO_NMT_process+0x1c0>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001880:	2305      	movs	r3, #5
 8001882:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	7ffa      	ldrb	r2, [r7, #31]
 8001888:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <CO_NMT_process+0x1d2>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	7ffa      	ldrb	r2, [r7, #31]
 8001894:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8001896:	7fbb      	ldrb	r3, [r7, #30]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <OD_readOriginal+0x20>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <OD_readOriginal+0x20>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80018c0:	2309      	movs	r3, #9
 80018c2:	e041      	b.n	8001948 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018d6:	230e      	movs	r3, #14
 80018d8:	e036      	b.n	8001948 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <OD_readOriginal+0x4e>
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d922      	bls.n	8001934 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d801      	bhi.n	80018fc <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80018f8:	2309      	movs	r3, #9
 80018fa:	e025      	b.n	8001948 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4413      	add	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d90a      	bls.n	800192e <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	441a      	add	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001928:	23ff      	movs	r3, #255	@ 0xff
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	e002      	b.n	8001934 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	68b8      	ldr	r0, [r7, #8]
 800193a:	f009 f8d6 	bl	800aaea <memcpy>

    *countRead = dataLenToCopy;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <OD_writeOriginal+0x20>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <OD_writeOriginal+0x20>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001970:	2309      	movs	r3, #9
 8001972:	e047      	b.n	8001a04 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001986:	230e      	movs	r3, #14
 8001988:	e03c      	b.n	8001a04 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <OD_writeOriginal+0x4e>
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d922      	bls.n	80019e4 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d801      	bhi.n	80019ac <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80019a8:	2309      	movs	r3, #9
 80019aa:	e02b      	b.n	8001a04 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4413      	add	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d90a      	bls.n	80019de <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	441a      	add	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019d8:	23ff      	movs	r3, #255	@ 0xff
 80019da:	75fb      	strb	r3, [r7, #23]
 80019dc:	e002      	b.n	80019e4 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d201      	bcs.n	80019f0 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80019ec:	230c      	movs	r3, #12
 80019ee:	e009      	b.n	8001a04 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	69b8      	ldr	r0, [r7, #24]
 80019f6:	f009 f878 	bl	800aaea <memcpy>

    *countWritten = dataLenToCopy;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8001a1a:	2302      	movs	r3, #2
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a36:	2302      	movs	r3, #2
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <OD_find+0x1a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <OD_find+0x1e>
        return NULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e046      	b.n	8001af0 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a6e:	e026      	b.n	8001abe <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a70:	8afa      	ldrh	r2, [r7, #22]
 8001a72:	8abb      	ldrh	r3, [r7, #20]
 8001a74:	4413      	add	r3, r2
 8001a76:	105b      	asrs	r3, r3, #1
 8001a78:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	89fa      	ldrh	r2, [r7, #14]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	887a      	ldrh	r2, [r7, #2]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d101      	bne.n	8001a9a <OD_find+0x56>
            return entry;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	e02a      	b.n	8001af0 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d209      	bcs.n	8001ab8 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <OD_find+0x6e>
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	e000      	b.n	8001ab4 <OD_find+0x70>
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	82bb      	strh	r3, [r7, #20]
 8001ab6:	e002      	b.n	8001abe <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	3301      	adds	r3, #1
 8001abc:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001abe:	8afa      	ldrh	r2, [r7, #22]
 8001ac0:	8abb      	ldrh	r3, [r7, #20]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3d4      	bcc.n	8001a70 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001ac6:	8afa      	ldrh	r2, [r7, #22]
 8001ac8:	8abb      	ldrh	r3, [r7, #20]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d10f      	bne.n	8001aee <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	8afa      	ldrh	r2, [r7, #22]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d101      	bne.n	8001aee <OD_find+0xaa>
            return entry;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	e000      	b.n	8001af0 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b08d      	sub	sp, #52	@ 0x34
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <OD_getSub+0x1e>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <OD_getSub+0x22>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e0d2      	b.n	8001cc4 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <OD_getSub+0x2c>
 8001b24:	2309      	movs	r3, #9
 8001b26:	e0cd      	b.n	8001cc4 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d050      	beq.n	8001bda <OD_getSub+0xde>
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	f300 808c 	bgt.w	8001c56 <OD_getSub+0x15a>
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <OD_getSub+0x4c>
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d015      	beq.n	8001b72 <OD_getSub+0x76>
 8001b46:	e086      	b.n	8001c56 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <OD_getSub+0x56>
 8001b4e:	230e      	movs	r3, #14
 8001b50:	e0b8      	b.n	8001cc4 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	791a      	ldrb	r2, [r3, #4]
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	609a      	str	r2, [r3, #8]
        break;
 8001b70:	e073      	b.n	8001c5a <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	789b      	ldrb	r3, [r3, #2]
 8001b76:	7afa      	ldrb	r2, [r7, #11]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d301      	bcc.n	8001b80 <OD_getSub+0x84>
 8001b7c:	230e      	movs	r3, #14
 8001b7e:	e0a1      	b.n	8001cc4 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	7a1a      	ldrb	r2, [r3, #8]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001ba2:	e05a      	b.n	8001c5a <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	7a5a      	ldrb	r2, [r3, #9]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	7afa      	ldrb	r2, [r7, #11]
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	e000      	b.n	8001bcc <OD_getSub+0xd0>
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bce:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	609a      	str	r2, [r3, #8]
        break;
 8001bd8:	e03f      	b.n	8001c5a <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001bea:	e01c      	b.n	8001c26 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001bec:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	7afa      	ldrb	r2, [r7, #11]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d10a      	bne.n	8001c1c <OD_getSub+0x120>
                odo = &odoArr[i];
 8001c06:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	4413      	add	r3, r2
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8001c1a:	e00a      	b.n	8001c32 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001c20:	3301      	adds	r3, #1
 8001c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3dc      	bcc.n	8001bec <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <OD_getSub+0x140>
 8001c38:	230e      	movs	r3, #14
 8001c3a:	e043      	b.n	8001cc4 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3e:	795a      	ldrb	r2, [r3, #5]
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	609a      	str	r2, [r3, #8]
        break;
 8001c54:	e001      	b.n	8001c5a <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c56:	2309      	movs	r3, #9
 8001c58:	e034      	b.n	8001cc4 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <OD_getSub+0x16c>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <OD_getSub+0x1d4>)
 8001c6c:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <OD_getSub+0x1d8>)
 8001c72:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	e01c      	b.n	8001cb6 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <OD_getSub+0x192>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	e000      	b.n	8001c90 <OD_getSub+0x194>
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <OD_getSub+0x1aa>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	e000      	b.n	8001ca8 <OD_getSub+0x1ac>
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	7afa      	ldrb	r2, [r7, #11]
 8001cc0:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3734      	adds	r7, #52	@ 0x34
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	080018a1 	.word	0x080018a1
 8001cd4:	08001951 	.word	0x08001951
 8001cd8:	08001a0d 	.word	0x08001a0d
 8001cdc:	08001a29 	.word	0x08001a29

08001ce0 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db03      	blt.n	8001cfa <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b19      	cmp	r3, #25
 8001cf8:	dd02      	ble.n	8001d00 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <OD_getSDOabCode+0x38>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	e004      	b.n	8001d0a <OD_getSDOabCode+0x2a>
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <OD_getSDOabCode+0x38>)
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	0800b420 	.word	0x0800b420

08001d1c <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b08f      	sub	sp, #60	@ 0x3c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <OD_get_value+0x1a>
 8001d32:	2309      	movs	r3, #9
 8001d34:	e024      	b.n	8001d80 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countRd = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d40:	f107 0214 	add.w	r2, r7, #20
 8001d44:	7af9      	ldrb	r1, [r7, #11]
 8001d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fed7 	bl	8001afc <OD_getSub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 8001d54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <OD_get_value+0x46>
 8001d5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001d60:	e00e      	b.n	8001d80 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <OD_get_value+0x54>
 8001d6c:	230b      	movs	r3, #11
 8001d6e:	e007      	b.n	8001d80 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001d70:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d7c:	47a0      	blx	r4
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	373c      	adds	r7, #60	@ 0x3c
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}

08001d88 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b08f      	sub	sp, #60	@ 0x3c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	460b      	mov	r3, r1
 8001d96:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countWritten = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001da2:	f107 0214 	add.w	r2, r7, #20
 8001da6:	7af9      	ldrb	r1, [r7, #11]
 8001da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fea6 	bl	8001afc <OD_getSub>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 8001db6:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <OD_set_value+0x3c>
 8001dbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001dc2:	e00e      	b.n	8001de2 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <OD_set_value+0x4a>
 8001dce:	230b      	movs	r3, #11
 8001dd0:	e007      	b.n	8001de2 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001dd2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dde:	47a0      	blx	r4
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	373c      	adds	r7, #60	@ 0x3c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08e      	sub	sp, #56	@ 0x38
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	460b      	mov	r3, r1
 8001df8:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e00:	f107 0214 	add.w	r2, r7, #20
 8001e04:	7af9      	ldrb	r1, [r7, #11]
 8001e06:	2301      	movs	r3, #1
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fe77 	bl	8001afc <OD_getSub>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001e14:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <OD_getPtr+0x42>
 8001e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001e2c:	2309      	movs	r3, #9
 8001e2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e32:	e00a      	b.n	8001e4a <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <OD_getPtr+0x60>
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d002      	beq.n	8001e4a <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001e44:	230b      	movs	r3, #11
 8001e46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <OD_getPtr+0x6e>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001e56:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001e58:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <OD_getPtr+0x7c>
 8001e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e000      	b.n	8001e68 <OD_getPtr+0x7e>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3738      	adds	r7, #56	@ 0x38
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	81fb      	strh	r3, [r7, #14]
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	2304      	movs	r3, #4
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <OD_getIndex+0x14>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	e000      	b.n	8001efa <OD_getIndex+0x16>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <OD_extension_init>:
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <OD_extension_init+0x14>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e003      	b.n	8001f22 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <OD_get_u8>:
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f3e:	7af9      	ldrb	r1, [r7, #11]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff fee7 	bl	8001d1c <OD_get_value>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <OD_get_u16>:
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f68:	7af9      	ldrb	r1, [r7, #11]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff fed2 	bl	8001d1c <OD_get_value>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <OD_get_u32>:
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f92:	7af9      	ldrb	r1, [r7, #11]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2304      	movs	r3, #4
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff febd 	bl	8001d1c <OD_get_value>
 8001fa2:	4603      	mov	r3, r0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <OD_write_dummy+0x1a>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <OD_read_dummy+0x20>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <OD_read_dummy+0x20>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001ff4:	2309      	movs	r3, #9
 8001ff6:	e010      	b.n	800201a <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d902      	bls.n	8002008 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	2100      	movs	r1, #0
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f008 fce1 	bl	800a9d4 <memset>

    *countRead = count;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b092      	sub	sp, #72	@ 0x48
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800204a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3310      	adds	r3, #16
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002066:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800206a:	2b08      	cmp	r3, #8
 800206c:	d901      	bls.n	8002072 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800206e:	2307      	movs	r3, #7
 8002070:	e090      	b.n	8002194 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002072:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002076:	2b1f      	cmp	r3, #31
 8002078:	d81a      	bhi.n	80020b0 <PDOconfigMap+0x8c>
 800207a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002086:	2214      	movs	r2, #20
 8002088:	2100      	movs	r1, #0
 800208a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800208c:	f008 fca2 	bl	800a9d4 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002090:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209e:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 80020a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a2:	4a3e      	ldr	r2, [pc, #248]	@ (800219c <PDOconfigMap+0x178>)
 80020a4:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 80020a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a8:	4a3d      	ldr	r2, [pc, #244]	@ (80021a0 <PDOconfigMap+0x17c>)
 80020aa:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e071      	b.n	8002194 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 80020b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020b4:	4619      	mov	r1, r3
 80020b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020b8:	f7ff fcc4 	bl	8001a44 <OD_find>
 80020bc:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 80020be:	f107 0214 	add.w	r2, r7, #20
 80020c2:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 80020c6:	2300      	movs	r3, #0
 80020c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020ca:	f7ff fd17 	bl	8001afc <OD_getSub>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 80020d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <PDOconfigMap+0xbe>
        return odRet;
 80020dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020e0:	e058      	b.n	8002194 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <PDOconfigMap+0xc8>
 80020e8:	2308      	movs	r3, #8
 80020ea:	e000      	b.n	80020ee <PDOconfigMap+0xca>
 80020ec:	2304      	movs	r3, #4
 80020ee:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 80020f2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80020fa:	4013      	ands	r3, r2
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8002102:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002114:	429a      	cmp	r2, r3
 8002116:	d201      	bcs.n	800211c <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002118:	2306      	movs	r3, #6
 800211a:	e03b      	b.n	8002194 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 800211c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211e:	461d      	mov	r5, r3
 8002120:	f107 0414 	add.w	r4, r7, #20
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800212c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002130:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002136:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d129      	bne.n	8002192 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 800213e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002142:	2b1f      	cmp	r3, #31
 8002144:	d81f      	bhi.n	8002186 <PDOconfigMap+0x162>
 8002146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01b      	beq.n	8002186 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 800214e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 800215a:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 800215c:	3308      	adds	r3, #8
 800215e:	440b      	add	r3, r1
 8002160:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	323c      	adds	r2, #60	@ 0x3c
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800216a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	b2d1      	uxtb	r1, r2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	460a      	mov	r2, r1
 8002180:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 8002184:	e005      	b.n	8002192 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	323c      	adds	r2, #60	@ 0x3c
 800218c:	2100      	movs	r1, #0
 800218e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3748      	adds	r7, #72	@ 0x48
 8002198:	46bd      	mov	sp, r7
 800219a:	bdb0      	pop	{r4, r5, r7, pc}
 800219c:	08001fd5 	.word	0x08001fd5
 80021a0:	08001fad 	.word	0x08001fad

080021a4 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 80021ba:	f107 021b 	add.w	r2, r7, #27
 80021be:	2301      	movs	r3, #1
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff feb3 	bl	8001f2e <OD_get_u8>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80021ce:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 80021d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe81 	bl	8001ee4 <OD_getIndex>
 80021e2:	4603      	mov	r3, r0
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80021ea:	f06f 030b 	mvn.w	r3, #11
 80021ee:	e082      	b.n	80022f6 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021f6:	e05e      	b.n	80022b6 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80021f8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3310      	adds	r3, #16
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002214:	3301      	adds	r3, #1
 8002216:	b2d9      	uxtb	r1, r3
 8002218:	f107 0214 	add.w	r2, r7, #20
 800221c:	2301      	movs	r3, #1
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff feaf 	bl	8001f82 <OD_get_u32>
 8002224:	4603      	mov	r3, r0
 8002226:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800222a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800222e:	2b0e      	cmp	r3, #14
 8002230:	d03b      	beq.n	80022aa <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002232:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00f      	beq.n	800225a <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fe4f 	bl	8001ee4 <OD_getIndex>
 8002246:	4603      	mov	r3, r0
 8002248:	021a      	lsls	r2, r3, #8
 800224a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800224e:	431a      	orrs	r2, r3
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002254:	f06f 030b 	mvn.w	r3, #11
 8002258:	e04d      	b.n	80022f6 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff fedc 	bl	8002024 <PDOconfigMap>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002272:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	22ff      	movs	r2, #255	@ 0xff
 8002284:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <PDO_initMapping+0xf0>
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002294:	7efb      	ldrb	r3, [r7, #27]
 8002296:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800229a:	429a      	cmp	r2, r3
 800229c:	d206      	bcs.n	80022ac <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a4:	4413      	add	r3, r2
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a8:	e000      	b.n	80022ac <PDO_initMapping+0x108>
            continue;
 80022aa:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80022ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022b0:	3301      	adds	r3, #1
 80022b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d99c      	bls.n	80021f8 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d805      	bhi.n	80022d0 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <PDO_initMapping+0x13a>
 80022ca:	7efb      	ldrb	r3, [r7, #27]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <PDO_initMapping+0x13a>
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80022de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80022ee:	7efa      	ldrb	r2, [r7, #27]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3728      	adds	r7, #40	@ 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08e      	sub	sp, #56	@ 0x38
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <OD_write_PDO_mapping+0x28>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <OD_write_PDO_mapping+0x28>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	7c5b      	ldrb	r3, [r3, #17]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d901      	bls.n	800232a <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002326:	2309      	movs	r3, #9
 8002328:	e086      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <OD_write_PDO_mapping+0x4a>
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	7b5b      	ldrb	r3, [r3, #13]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <OD_write_PDO_mapping+0x4e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	7c5b      	ldrb	r3, [r3, #17]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002348:	2302      	movs	r3, #2
 800234a:	e075      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	7c5b      	ldrb	r3, [r3, #17]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d14d      	bne.n	80023f0 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	f7ff fd8b 	bl	8001e70 <CO_getUint8>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        size_t pdoDataLength = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002364:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002368:	2b08      	cmp	r3, #8
 800236a:	d901      	bls.n	8002370 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 800236c:	2307      	movs	r3, #7
 800236e:	e063      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002370:	2300      	movs	r3, #0
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002376:	e01e      	b.n	80023b6 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002378:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3310      	adds	r3, #16
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	4413      	add	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	429a      	cmp	r2, r3
 800239e:	d901      	bls.n	80023a4 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80023a0:	2306      	movs	r3, #6
 80023a2:	e049      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 80023a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4413      	add	r3, r2
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80023ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023b0:	3301      	adds	r3, #1
 80023b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023b6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80023ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3da      	bcc.n	8002378 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80023c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d901      	bls.n	80023cc <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 80023c8:	2307      	movs	r3, #7
 80023ca:	e035      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80023cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <OD_write_PDO_mapping+0xe0>
 80023d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 80023da:	230f      	movs	r3, #15
 80023dc:	e02c      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80023ec:	735a      	strb	r2, [r3, #13]
 80023ee:	e01c      	b.n	800242a <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f7ff fd5a 	bl	8001eaa <CO_getUint32>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	7c5b      	ldrb	r3, [r3, #17]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	460b      	mov	r3, r1
 800240e:	4601      	mov	r1, r0
 8002410:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002412:	f7ff fe07 	bl	8002024 <PDOconfigMap>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 800241c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <OD_write_PDO_mapping+0x12c>
            return odRet;
 8002424:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002428:	e006      	b.n	8002438 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fa8d 	bl	8001950 <OD_writeOriginal>
 8002436:	4603      	mov	r3, r0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3730      	adds	r7, #48	@ 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff fa23 	bl	80018a0 <OD_readOriginal>
 800245a:	4603      	mov	r3, r0
 800245c:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 800245e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d134      	bne.n	80024d0 <OD_read_PDO_commParam+0x90>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	7c5b      	ldrb	r3, [r3, #17]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d130      	bne.n	80024d0 <OD_read_PDO_commParam+0x90>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d12c      	bne.n	80024d0 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f7ff fd14 	bl	8001eaa <CO_getUint32>
 8002482:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248c:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 800248e:	8a7b      	ldrh	r3, [r7, #18]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d011      	beq.n	80024b8 <OD_read_PDO_commParam+0x78>
 8002494:	8a7a      	ldrh	r2, [r7, #18]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 800249c:	4619      	mov	r1, r3
 800249e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80024a2:	400b      	ands	r3, r1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f8b2 2122 	ldrh.w	r2, [r2, #290]	@ 0x122
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <OD_read_PDO_commParam+0x88>
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024c6:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 80024c8:	69f9      	ldr	r1, [r7, #28]
 80024ca:	68b8      	ldr	r0, [r7, #8]
 80024cc:	f7ff fcfb 	bl	8001ec6 <CO_setUint32>
    }

    return returnCode;
 80024d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	791b      	ldrb	r3, [r3, #4]
 80024f2:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	3305      	adds	r3, #5
 80024f8:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002500:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03e      	beq.n	8002588 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	7b1b      	ldrb	r3, [r3, #12]
 800250e:	7cfa      	ldrb	r2, [r7, #19]
 8002510:	429a      	cmp	r2, r3
 8002512:	d334      	bcc.n	800257e <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	7b1b      	ldrb	r3, [r3, #12]
 8002518:	7cfa      	ldrb	r2, [r7, #19]
 800251a:	429a      	cmp	r2, r3
 800251c:	d105      	bne.n	800252a <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <CO_PDO_receive+0x58>
 8002524:	230b      	movs	r3, #11
 8002526:	77fb      	strb	r3, [r7, #31]
 8002528:	e004      	b.n	8002534 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <CO_PDO_receive+0x58>
 8002530:	230d      	movs	r3, #13
 8002532:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <CO_PDO_receive+0x80>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002558:	2301      	movs	r3, #1
 800255a:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 800255c:	7fbb      	ldrb	r3, [r7, #30]
 800255e:	332a      	adds	r3, #42	@ 0x2a
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	2208      	movs	r2, #8
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	4618      	mov	r0, r3
 800256c:	f008 fabd 	bl	800aaea <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002570:	7fba      	ldrb	r2, [r7, #30]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	3252      	adds	r2, #82	@ 0x52
 8002576:	2101      	movs	r1, #1
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800257c:	e004      	b.n	8002588 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002584:	230c      	movs	r3, #12
 8002586:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	7ffa      	ldrb	r2, [r7, #31]
 800258c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b092      	sub	sp, #72	@ 0x48
 800259c:	af04      	add	r7, sp, #16
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <OD_write_14xx+0x26>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <OD_write_14xx+0x26>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <OD_write_14xx+0x26>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d901      	bls.n	80025c2 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80025be:	2309      	movs	r3, #9
 80025c0:	e0ff      	b.n	80027c2 <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f008 fa88 	bl	800aaea <memcpy>

    switch (stream->subIndex) {
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	7c5b      	ldrb	r3, [r3, #17]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	f000 80d4 	beq.w	800278c <OD_write_14xx+0x1f4>
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	f300 80e4 	bgt.w	80027b2 <OD_write_14xx+0x21a>
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <OD_write_14xx+0x5e>
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	f000 80a5 	beq.w	800273e <OD_write_14xx+0x1a6>
 80025f4:	e0dd      	b.n	80027b2 <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f7ff fc57 	bl	8001eaa <CO_getUint32>
 80025fc:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002606:	86fb      	strh	r3, [r7, #54]	@ 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	43db      	mvns	r3, r3
 800260c:	0fdb      	lsrs	r3, r3, #31
 800260e:	b2db      	uxtb	r3, r3
 8002610:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4b6d      	ldr	r3, [pc, #436]	@ (80027cc <OD_write_14xx+0x234>)
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d13d      	bne.n	8002698 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <OD_write_14xx+0x9e>
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <OD_write_14xx+0x9e>
 800262a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8002630:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002632:	429a      	cmp	r2, r3
 8002634:	d130      	bne.n	8002698 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d026      	beq.n	800268a <OD_write_14xx+0xf2>
 800263c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800263e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002640:	d92a      	bls.n	8002698 <OD_write_14xx+0x100>
 8002642:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002648:	d903      	bls.n	8002652 <OD_write_14xx+0xba>
 800264a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800264c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002650:	d922      	bls.n	8002698 <OD_write_14xx+0x100>
 8002652:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002654:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002658:	d903      	bls.n	8002662 <OD_write_14xx+0xca>
 800265a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800265c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002660:	d31a      	bcc.n	8002698 <OD_write_14xx+0x100>
 8002662:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002664:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002668:	d903      	bls.n	8002672 <OD_write_14xx+0xda>
 800266a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800266c:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002670:	d312      	bcc.n	8002698 <OD_write_14xx+0x100>
 8002672:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002674:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002678:	d303      	bcc.n	8002682 <OD_write_14xx+0xea>
 800267a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800267c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002680:	d30a      	bcc.n	8002698 <OD_write_14xx+0x100>
 8002682:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002688:	d806      	bhi.n	8002698 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <OD_write_14xx+0x104>
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002692:	7b5b      	ldrb	r3, [r3, #13]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002698:	230f      	movs	r3, #15
 800269a:	e092      	b.n	80027c2 <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d105      	bne.n	80026b2 <OD_write_14xx+0x11a>
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 80026ac:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d07e      	beq.n	80027b0 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 80026b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d108      	bne.n	80026d0 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fbfb 	bl	8001ec6 <CO_setUint32>
            }
            if (!valid) {
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <OD_write_14xx+0x142>
                CAN_ID = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	6858      	ldr	r0, [r3, #4]
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 80026e4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <OD_write_14xx+0x238>)
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026f6:	f004 f95f 	bl	80069b8 <CO_CANrxBufferInit>
 80026fa:	4603      	mov	r3, r0
 80026fc:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <OD_write_14xx+0x184>
 8002704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <OD_write_14xx+0x184>
                PDO->valid = true;
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	2201      	movs	r2, #1
 8002710:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002714:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002716:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 800271a:	e049      	b.n	80027b0 <OD_write_14xx+0x218>
                PDO->valid = false;
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	2200      	movs	r2, #0
 8002726:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	2200      	movs	r2, #0
 800272e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                if (ret != CO_ERROR_NO) {
 8002732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03a      	beq.n	80027b0 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 800273a:	2309      	movs	r3, #9
 800273c:	e041      	b.n	80027c2 <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800273e:	68b8      	ldr	r0, [r7, #8]
 8002740:	f7ff fb96 	bl	8001e70 <CO_getUint8>
 8002744:	4603      	mov	r3, r0
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800274a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800274e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002750:	d905      	bls.n	800275e <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002756:	2bfd      	cmp	r3, #253	@ 0xfd
 8002758:	d801      	bhi.n	800275e <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 800275a:	230f      	movs	r3, #15
 800275c:	e031      	b.n	80027c2 <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002762:	2bf0      	cmp	r3, #240	@ 0xf0
 8002764:	bf94      	ite	ls
 8002766:	2301      	movls	r3, #1
 8002768:	2300      	movhi	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	429a      	cmp	r2, r3
 8002778:	d003      	beq.n	8002782 <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	2200      	movs	r2, #0
 800277e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        }

        RPDO->synchronous = synchronous;
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 800278a:	e012      	b.n	80027b2 <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800278c:	68b8      	ldr	r0, [r7, #8]
 800278e:	f7ff fb7d 	bl	8001e8c <CO_getUint16>
 8002792:	4603      	mov	r3, r0
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800279c:	fb03 f202 	mul.w	r2, r3, r2
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        RPDO->timeoutTimer = 0;
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        break;
 80027ae:	e000      	b.n	80027b2 <OD_write_14xx+0x21a>
        break;
 80027b0:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80027b2:	f107 0110 	add.w	r1, r7, #16
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff f8c8 	bl	8001950 <OD_writeOriginal>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3738      	adds	r7, #56	@ 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	3ffff800 	.word	0x3ffff800
 80027d0:	080024dd 	.word	0x080024dd

080027d4 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b090      	sub	sp, #64	@ 0x40
 80027d8:	af04      	add	r7, sp, #16
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <CO_RPDO_init+0x36>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <CO_RPDO_init+0x36>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <CO_RPDO_init+0x36>
 80027f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80027fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <CO_RPDO_init+0x36>
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e118      	b.n	8002a42 <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002810:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8002814:	2100      	movs	r1, #0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f008 f8dc 	bl	800a9d4 <memset>

    /* Configure object variables */
    PDO->em = em;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002826:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800283e:	f7ff fcb1 	bl	80021a4 <PDO_initMapping>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002848:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <CO_RPDO_init+0x82>
        return ret;
 8002850:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002854:	e0f5      	b.n	8002a42 <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 800285a:	f107 0218 	add.w	r2, r7, #24
 800285e:	2301      	movs	r3, #1
 8002860:	2101      	movs	r1, #1
 8002862:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002864:	f7ff fb8d 	bl	8001f82 <OD_get_u32>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800286e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00e      	beq.n	8002894 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 800287c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800287e:	f7ff fb31 	bl	8001ee4 <OD_getIndex>
 8002882:	4603      	mov	r3, r0
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800288c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800288e:	f06f 030b 	mvn.w	r3, #11
 8002892:	e0d6      	b.n	8002a42 <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	43db      	mvns	r3, r3
 8002898:	0fdb      	lsrs	r3, r3, #31
 800289a:	b2db      	uxtb	r3, r3
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80028a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <CO_RPDO_init+0xf6>
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	7b5b      	ldrb	r3, [r3, #13]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <CO_RPDO_init+0xe8>
 80028b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <CO_RPDO_init+0xf6>
        valid = false;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <CO_RPDO_init+0xf6>
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <CO_RPDO_init+0x10a>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	e000      	b.n	80028e0 <CO_RPDO_init+0x10c>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80028e6:	221a      	movs	r2, #26
 80028e8:	2101      	movs	r1, #1
 80028ea:	f7fe f9c7 	bl	8000c7c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80028f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <CO_RPDO_init+0x13c>
 80028fe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002900:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002902:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002906:	400b      	ands	r3, r1
 8002908:	429a      	cmp	r2, r3
 800290a:	d101      	bne.n	8002910 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 800290c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800290e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(
 8002910:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002912:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002916:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <CO_RPDO_init+0x278>)
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002926:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002928:	f004 f846 	bl	80069b8 <CO_CANrxBufferInit>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002932:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <CO_RPDO_init+0x16c>
        return ret;
 800293a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800293e:	e080      	b.n	8002a42 <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002944:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002946:	23fe      	movs	r3, #254	@ 0xfe
 8002948:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 800294a:	f107 0217 	add.w	r2, r7, #23
 800294e:	2301      	movs	r3, #1
 8002950:	2102      	movs	r1, #2
 8002952:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002954:	f7ff faeb 	bl	8001f2e <OD_get_u8>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800295e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00e      	beq.n	8002984 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 800296c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800296e:	f7ff fab9 	bl	8001ee4 <OD_getIndex>
 8002972:	4603      	mov	r3, r0
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800297c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800297e:	f06f 030b 	mvn.w	r3, #11
 8002982:	e05e      	b.n	8002a42 <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002990:	bf94      	ite	ls
 8002992:	2301      	movls	r3, #1
 8002994:	2300      	movhi	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 80029a4:	f107 0214 	add.w	r2, r7, #20
 80029a8:	2301      	movs	r3, #1
 80029aa:	2105      	movs	r1, #5
 80029ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029ae:	f7ff fad3 	bl	8001f58 <OD_get_u16>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 80029b8:	8abb      	ldrh	r3, [r7, #20]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c0:	fb03 f202 	mul.w	r2, r3, r2
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	2201      	movs	r2, #1
 80029ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80029e0:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80029e8:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80029f0:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <CO_RPDO_init+0x27c>)
 8002a00:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <CO_RPDO_init+0x280>)
 8002a08:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <CO_RPDO_init+0x284>)
 8002a18:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a5c <CO_RPDO_init+0x288>)
 8002a20:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a2e:	f7ff fa6a 	bl	8001f06 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a3c:	f7ff fa63 	bl	8001f06 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3730      	adds	r7, #48	@ 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	080024dd 	.word	0x080024dd
 8002a50:	08002441 	.word	0x08002441
 8002a54:	08002599 	.word	0x08002599
 8002a58:	080018a1 	.word	0x080018a1
 8002a5c:	080022ff 	.word	0x080022ff

08002a60 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b093      	sub	sp, #76	@ 0x4c
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <OD_write_18xx+0x26>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <OD_write_18xx+0x26>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <OD_write_18xx+0x26>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d901      	bls.n	8002a8a <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002a86:	2309      	movs	r3, #9
 8002a88:	e136      	b.n	8002cf8 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f008 f824 	bl	800aaea <memcpy>

    switch (stream->subIndex) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7c5b      	ldrb	r3, [r3, #17]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	f200 811d 	bhi.w	8002ce8 <OD_write_18xx+0x288>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <OD_write_18xx+0x54>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002acd 	.word	0x08002acd
 8002ab8:	08002c03 	.word	0x08002c03
 8002abc:	08002c69 	.word	0x08002c69
 8002ac0:	08002ce9 	.word	0x08002ce9
 8002ac4:	08002c97 	.word	0x08002c97
 8002ac8:	08002cbb 	.word	0x08002cbb
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002acc:	68b8      	ldr	r0, [r7, #8]
 8002ace:	f7ff f9ec 	bl	8001eaa <CO_getUint32>
 8002ad2:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	0fdb      	lsrs	r3, r3, #31
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	4b85      	ldr	r3, [pc, #532]	@ (8002d00 <OD_write_18xx+0x2a0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d13d      	bne.n	8002b6e <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <OD_write_18xx+0xac>
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <OD_write_18xx+0xac>
 8002b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b02:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8002b06:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d130      	bne.n	8002b6e <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d026      	beq.n	8002b60 <OD_write_18xx+0x100>
 8002b12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b14:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b16:	d92a      	bls.n	8002b6e <OD_write_18xx+0x10e>
 8002b18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1e:	d903      	bls.n	8002b28 <OD_write_18xx+0xc8>
 8002b20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b22:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002b26:	d922      	bls.n	8002b6e <OD_write_18xx+0x10e>
 8002b28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b2a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002b2e:	d903      	bls.n	8002b38 <OD_write_18xx+0xd8>
 8002b30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b32:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b36:	d31a      	bcc.n	8002b6e <OD_write_18xx+0x10e>
 8002b38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b3a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b3e:	d903      	bls.n	8002b48 <OD_write_18xx+0xe8>
 8002b40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b42:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002b46:	d312      	bcc.n	8002b6e <OD_write_18xx+0x10e>
 8002b48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b4a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002b4e:	d303      	bcc.n	8002b58 <OD_write_18xx+0xf8>
 8002b50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b56:	d30a      	bcc.n	8002b6e <OD_write_18xx+0x10e>
 8002b58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b5e:	d806      	bhi.n	8002b6e <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <OD_write_18xx+0x112>
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	7b5b      	ldrb	r3, [r3, #13]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002b6e:	230f      	movs	r3, #15
 8002b70:	e0c2      	b.n	8002cf8 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d106      	bne.n	8002b8a <OD_write_18xx+0x12a>
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8002b82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f000 80ae 	beq.w	8002ce6 <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8002b90:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d108      	bne.n	8002ba8 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f98f 	bl	8001ec6 <CO_setUint32>
            }
            if (!valid) {
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	6858      	ldr	r0, [r3, #4]
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bbe:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002bc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bc2:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002bc6:	2af0      	cmp	r2, #240	@ 0xf0
 8002bc8:	bf94      	ite	ls
 8002bca:	2201      	movls	r2, #1
 8002bcc:	2200      	movhi	r2, #0
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002bd4:	9401      	str	r4, [sp, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f003 ff4b 	bl	8006a74 <CO_CANtxBufferInit>
 8002bde:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002be6:	2309      	movs	r3, #9
 8002be8:	e086      	b.n	8002cf8 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
            PDO->valid = valid;
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002bfc:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
        }
        break;
 8002c00:	e071      	b.n	8002ce6 <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002c02:	68b8      	ldr	r0, [r7, #8]
 8002c04:	f7ff f934 	bl	8001e70 <CO_getUint8>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c12:	2bf0      	cmp	r3, #240	@ 0xf0
 8002c14:	d905      	bls.n	8002c22 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002c16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c1a:	2bfd      	cmp	r3, #253	@ 0xfd
 8002c1c:	d801      	bhi.n	8002c22 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002c1e:	230f      	movs	r3, #15
 8002c20:	e06a      	b.n	8002cf8 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c26:	2bf0      	cmp	r3, #240	@ 0xf0
 8002c28:	bf94      	ite	ls
 8002c2a:	2301      	movls	r3, #1
 8002c2c:	2300      	movhi	r3, #0
 8002c2e:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c36:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3a:	22ff      	movs	r2, #255	@ 0xff
 8002c3c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c46:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        TPDO->sendRequest = true;
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8002c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c62:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
        break;
 8002c66:	e03f      	b.n	8002ce8 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002c70:	230f      	movs	r3, #15
 8002c72:	e041      	b.n	8002cf8 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f7ff f909 	bl	8001e8c <CO_getUint16>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	2264      	movs	r2, #100	@ 0x64
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        TPDO->inhibitTimer = 0;
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        break;
 8002c94:	e028      	b.n	8002ce8 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f7ff f8f8 	bl	8001e8c <CO_getUint16>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ca6:	fb03 f202 	mul.w	r2, r3, r2
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        TPDO->eventTimer = 0;
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        break;
 8002cb8:	e016      	b.n	8002ce8 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002cba:	68b8      	ldr	r0, [r7, #8]
 8002cbc:	f7ff f8d8 	bl	8001e70 <CO_getUint8>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <OD_write_18xx+0x276>
 8002cce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cd2:	2bf0      	cmp	r3, #240	@ 0xf0
 8002cd4:	d901      	bls.n	8002cda <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	e00e      	b.n	8002cf8 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002ce0:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
        break;
 8002ce4:	e000      	b.n	8002ce8 <OD_write_18xx+0x288>
        break;
 8002ce6:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002ce8:	f107 0114 	add.w	r1, r7, #20
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7fe fe2d 	bl	8001950 <OD_writeOriginal>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3744      	adds	r7, #68	@ 0x44
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	3ffff800 	.word	0x3ffff800

08002d04 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	@ 0x38
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <CO_TPDO_init+0x36>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <CO_TPDO_init+0x36>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <CO_TPDO_init+0x36>
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <CO_TPDO_init+0x36>
 8002d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	e14f      	b.n	8002fe0 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002d40:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8002d44:	2100      	movs	r1, #0
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f007 fe44 	bl	800a9d4 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d56:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d6e:	f7ff fa19 	bl	80021a4 <PDO_initMapping>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002d78:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <CO_TPDO_init+0x82>
        return ret;
 8002d80:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002d84:	e12c      	b.n	8002fe0 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002d86:	23fe      	movs	r3, #254	@ 0xfe
 8002d88:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002d8a:	f107 021b 	add.w	r2, r7, #27
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2102      	movs	r1, #2
 8002d92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d94:	f7ff f8cb 	bl	8001f2e <OD_get_u8>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002d9e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002dac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dae:	f7ff f899 	bl	8001ee4 <OD_getIndex>
 8002db2:	4603      	mov	r3, r0
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dbc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002dbe:	f06f 030b 	mvn.w	r3, #11
 8002dc2:	e10d      	b.n	8002fe0 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002dc4:	7efb      	ldrb	r3, [r7, #27]
 8002dc6:	2bfd      	cmp	r3, #253	@ 0xfd
 8002dc8:	d804      	bhi.n	8002dd4 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002dca:	7efb      	ldrb	r3, [r7, #27]
 8002dcc:	2bf0      	cmp	r3, #240	@ 0xf0
 8002dce:	d901      	bls.n	8002dd4 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002dd0:	23fe      	movs	r3, #254	@ 0xfe
 8002dd2:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002dd4:	7efa      	ldrb	r2, [r7, #27]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
    TPDO->sendRequest = true;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002de8:	f107 0214 	add.w	r2, r7, #20
 8002dec:	2301      	movs	r3, #1
 8002dee:	2101      	movs	r1, #1
 8002df0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002df2:	f7ff f8c6 	bl	8001f82 <OD_get_u32>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002dfc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00e      	beq.n	8002e22 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8002e0a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e0c:	f7ff f86a 	bl	8001ee4 <OD_getIndex>
 8002e10:	4603      	mov	r3, r0
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002e1c:	f06f 030b 	mvn.w	r3, #11
 8002e20:	e0de      	b.n	8002fe0 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	0fdb      	lsrs	r3, r3, #31
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e34:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <CO_TPDO_init+0x154>
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	7b5b      	ldrb	r3, [r3, #13]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <CO_TPDO_init+0x146>
 8002e44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <CO_TPDO_init+0x154>
        valid = false;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <CO_TPDO_init+0x154>
 8002e54:	2301      	movs	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <CO_TPDO_init+0x168>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	e000      	b.n	8002e6e <CO_TPDO_init+0x16a>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8002e74:	221a      	movs	r2, #26
 8002e76:	2101      	movs	r1, #1
 8002e78:	f7fd ff00 	bl	8000c7c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002e86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <CO_TPDO_init+0x19a>
 8002e8c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002e8e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002e90:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002e94:	400b      	ands	r3, r1
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d101      	bne.n	8002e9e <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002e9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002ea8:	2af0      	cmp	r2, #240	@ 0xf0
 8002eaa:	bf94      	ite	ls
 8002eac:	2201      	movls	r2, #1
 8002eae:	2200      	movhi	r2, #0
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002eb6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002eba:	9001      	str	r0, [sp, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ec2:	f003 fdd7 	bl	8006a74 <CO_CANtxBufferInit>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e080      	b.n	8002fe0 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee2:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002eec:	f107 0212 	add.w	r2, r7, #18
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ef6:	f7ff f82f 	bl	8001f58 <OD_get_u16>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002f00:	f107 0210 	add.w	r2, r7, #16
 8002f04:	2301      	movs	r3, #1
 8002f06:	2105      	movs	r1, #5
 8002f08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f0a:	f7ff f825 	bl	8001f58 <OD_get_u16>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 8002f14:	8a7b      	ldrh	r3, [r7, #18]
 8002f16:	461a      	mov	r2, r3
 8002f18:	2364      	movs	r3, #100	@ 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8002f26:	8a3b      	ldrh	r3, [r7, #16]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2106      	movs	r1, #6
 8002f4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f4e:	f7fe ffee 	bl	8001f2e <OD_get_u8>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->SYNC = SYNC;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    TPDO->syncCounter = 255;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	22ff      	movs	r2, #255	@ 0xff
 8002f64:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002f7e:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002f86:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002f8e:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <CO_TPDO_init+0x2e4>)
 8002f9e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	4a11      	ldr	r2, [pc, #68]	@ (8002fec <CO_TPDO_init+0x2e8>)
 8002fa6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff0 <CO_TPDO_init+0x2ec>)
 8002fb6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff4 <CO_TPDO_init+0x2f0>)
 8002fbe:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fcc:	f7fe ff9b 	bl	8001f06 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002fda:	f7fe ff94 	bl	8001f06 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3730      	adds	r7, #48	@ 0x30
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08002441 	.word	0x08002441
 8002fec:	08002a61 	.word	0x08002a61
 8002ff0:	080018a1 	.word	0x080018a1
 8002ff4:	080022ff 	.word	0x080022ff

08002ff8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <OD_getIndex+0x14>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	e000      	b.n	8003046 <OD_getIndex+0x16>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <OD_mappable+0x1e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7c1b      	ldrb	r3, [r3, #16]
 8003064:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <OD_mappable+0x1e>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <OD_mappable+0x20>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <OD_extension_init>:
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <OD_extension_init+0x14>
 800308e:	2305      	movs	r3, #5
 8003090:	e003      	b.n	800309a <OD_extension_init+0x1c>
    entry->extension = extension;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <OD_get_u8>:
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	460b      	mov	r3, r1
 80030b4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80030b6:	7af9      	ldrb	r1, [r7, #11]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2301      	movs	r3, #1
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fe fe2b 	bl	8001d1c <OD_get_value>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <OD_get_u32>:
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	460b      	mov	r3, r1
 80030de:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80030e0:	7af9      	ldrb	r1, [r7, #11]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2304      	movs	r3, #4
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7fe fe16 	bl	8001d1c <OD_get_value>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af02      	add	r7, sp, #8
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	460b      	mov	r3, r1
 8003108:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800310a:	1d3a      	adds	r2, r7, #4
 800310c:	7af9      	ldrb	r1, [r7, #11]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2304      	movs	r3, #4
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7fe fe37 	bl	8001d88 <OD_set_value>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	3305      	adds	r3, #5
 800313c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d115      	bne.n	8003170 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b80      	cmp	r3, #128	@ 0x80
 800314a:	d103      	bne.n	8003154 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003152:	e00d      	b.n	8003170 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	333c      	adds	r3, #60	@ 0x3c
 8003160:	7cfa      	ldrb	r2, [r7, #19]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	f007 fcc0 	bl	800aaea <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2201      	movs	r2, #1
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af04      	add	r7, sp, #16
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	460b      	mov	r3, r1
 8003188:	80fb      	strh	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319e:	429a      	cmp	r2, r3
 80031a0:	d101      	bne.n	80031a6 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e04e      	b.n	8003244 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db02      	blt.n	80031be <CO_SDOserver_init_canRxTx+0x46>
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	e000      	b.n	80031c0 <CO_SDOserver_init_canRxTx+0x48>
 80031be:	2300      	movs	r3, #0
 80031c0:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db02      	blt.n	80031ce <CO_SDOserver_init_canRxTx+0x56>
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	e000      	b.n	80031d0 <CO_SDOserver_init_canRxTx+0x58>
 80031ce:	2300      	movs	r3, #0
 80031d0:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 80031d2:	8afb      	ldrh	r3, [r7, #22]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <CO_SDOserver_init_canRxTx+0x6e>
 80031d8:	8abb      	ldrh	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	611a      	str	r2, [r3, #16]
 80031e4:	e006      	b.n	80031f4 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80031f4:	8afa      	ldrh	r2, [r7, #22]
 80031f6:	88f9      	ldrh	r1, [r7, #6]
 80031f8:	4b14      	ldr	r3, [pc, #80]	@ (800324c <CO_SDOserver_init_canRxTx+0xd4>)
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2300      	movs	r3, #0
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003208:	68b8      	ldr	r0, [r7, #8]
 800320a:	f003 fbd5 	bl	80069b8 <CO_CANrxBufferInit>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	8aba      	ldrh	r2, [r7, #20]
 8003218:	88b9      	ldrh	r1, [r7, #4]
 800321a:	2300      	movs	r3, #0
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2308      	movs	r3, #8
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	f003 fc26 	bl	8006a74 <CO_CANtxBufferInit>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003236:	23ff      	movs	r3, #255	@ 0xff
 8003238:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003240:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08003125 	.word	0x08003125

08003250 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b08f      	sub	sp, #60	@ 0x3c
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <OD_write_1201_additional+0x20>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <OD_write_1201_additional+0x20>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003270:	2309      	movs	r3, #9
 8003272:	e0f9      	b.n	8003468 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	7c5b      	ldrb	r3, [r3, #17]
 800327e:	2b03      	cmp	r3, #3
 8003280:	f200 80e8 	bhi.w	8003454 <OD_write_1201_additional+0x204>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <OD_write_1201_additional+0x3c>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a1 	.word	0x080032a1
 8003294:	08003365 	.word	0x08003365
 8003298:	0800342b 	.word	0x0800342b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800329c:	2304      	movs	r3, #4
 800329e:	e0e3      	b.n	8003468 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80032a0:	68b8      	ldr	r0, [r7, #8]
 80032a2:	f7ff feb7 	bl	8003014 <CO_getUint32>
 80032a6:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032bc:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	0fdb      	lsrs	r3, r3, #31
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4b69      	ldr	r3, [pc, #420]	@ (8003470 <OD_write_1201_additional+0x220>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d134      	bne.n	800333c <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <OD_write_1201_additional+0x98>
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <OD_write_1201_additional+0x98>
 80032e0:	8afa      	ldrh	r2, [r7, #22]
 80032e2:	8abb      	ldrh	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d129      	bne.n	800333c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d028      	beq.n	8003340 <OD_write_1201_additional+0xf0>
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80032f2:	d923      	bls.n	800333c <OD_write_1201_additional+0xec>
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d903      	bls.n	8003304 <OD_write_1201_additional+0xb4>
 80032fc:	8afb      	ldrh	r3, [r7, #22]
 80032fe:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003302:	d91b      	bls.n	800333c <OD_write_1201_additional+0xec>
 8003304:	8afb      	ldrh	r3, [r7, #22]
 8003306:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800330a:	d903      	bls.n	8003314 <OD_write_1201_additional+0xc4>
 800330c:	8afb      	ldrh	r3, [r7, #22]
 800330e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003312:	d313      	bcc.n	800333c <OD_write_1201_additional+0xec>
 8003314:	8afb      	ldrh	r3, [r7, #22]
 8003316:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800331a:	d903      	bls.n	8003324 <OD_write_1201_additional+0xd4>
 800331c:	8afb      	ldrh	r3, [r7, #22]
 800331e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003322:	d30b      	bcc.n	800333c <OD_write_1201_additional+0xec>
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800332a:	d303      	bcc.n	8003334 <OD_write_1201_additional+0xe4>
 800332c:	8afb      	ldrh	r3, [r7, #22]
 800332e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003332:	d303      	bcc.n	800333c <OD_write_1201_additional+0xec>
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800333a:	d901      	bls.n	8003340 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 800333c:	230f      	movs	r3, #15
 800333e:	e093      	b.n	8003468 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	@ 0x4a
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4603      	mov	r3, r0
 800335c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800335e:	f7ff ff0b 	bl	8003178 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8003362:	e07a      	b.n	800345a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003364:	68b8      	ldr	r0, [r7, #8]
 8003366:	f7ff fe55 	bl	8003014 <CO_getUint32>
 800336a:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	b29b      	uxth	r3, r3
 8003370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003374:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337a:	b29b      	uxth	r3, r3
 800337c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003380:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	43db      	mvns	r3, r3
 8003386:	0fdb      	lsrs	r3, r3, #31
 8003388:	b2db      	uxtb	r3, r3
 800338a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800338c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338e:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <OD_write_1201_additional+0x220>)
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d134      	bne.n	8003400 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <OD_write_1201_additional+0x15c>
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <OD_write_1201_additional+0x15c>
 80033a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80033a6:	8c3b      	ldrh	r3, [r7, #32]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d129      	bne.n	8003400 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <OD_write_1201_additional+0x1b4>
 80033b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80033b6:	d923      	bls.n	8003400 <OD_write_1201_additional+0x1b0>
 80033b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033be:	d903      	bls.n	80033c8 <OD_write_1201_additional+0x178>
 80033c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033c2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80033c6:	d91b      	bls.n	8003400 <OD_write_1201_additional+0x1b0>
 80033c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033ca:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80033ce:	d903      	bls.n	80033d8 <OD_write_1201_additional+0x188>
 80033d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033d6:	d313      	bcc.n	8003400 <OD_write_1201_additional+0x1b0>
 80033d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033de:	d903      	bls.n	80033e8 <OD_write_1201_additional+0x198>
 80033e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033e2:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80033e6:	d30b      	bcc.n	8003400 <OD_write_1201_additional+0x1b0>
 80033e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033ea:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80033ee:	d303      	bcc.n	80033f8 <OD_write_1201_additional+0x1a8>
 80033f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033f6:	d303      	bcc.n	8003400 <OD_write_1201_additional+0x1b0>
 80033f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80033fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033fe:	d901      	bls.n	8003404 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003400:	230f      	movs	r3, #15
 8003402:	e031      	b.n	8003468 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003406:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	f8b3 404a 	ldrh.w	r4, [r3, #74]	@ 0x4a
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341a:	9201      	str	r2, [sp, #4]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4623      	mov	r3, r4
 8003420:	4602      	mov	r2, r0
 8003422:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003424:	f7ff fea8 	bl	8003178 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8003428:	e017      	b.n	800345a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003430:	230b      	movs	r3, #11
 8003432:	e019      	b.n	8003468 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003434:	68b8      	ldr	r0, [r7, #8]
 8003436:	f7ff fddf 	bl	8002ff8 <CO_getUint8>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8003440:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <OD_write_1201_additional+0x200>
 8003448:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800344c:	2b00      	cmp	r3, #0
 800344e:	da03      	bge.n	8003458 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003450:	230f      	movs	r3, #15
 8003452:	e009      	b.n	8003468 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8003454:	230e      	movs	r3, #14
 8003456:	e007      	b.n	8003468 <OD_write_1201_additional+0x218>
            break;
 8003458:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7fe fa75 	bl	8001950 <OD_writeOriginal>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3734      	adds	r7, #52	@ 0x34
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	3ffff800 	.word	0x3ffff800

08003474 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	@ 0x30
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <CO_SDOserver_init+0x26>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <CO_SDOserver_init+0x26>
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <CO_SDOserver_init+0x26>
 8003494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	e0f5      	b.n	800368c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80034ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80034ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034b2:	fb03 f202 	mul.w	r2, r3, r2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	675a      	str	r2, [r3, #116]	@ 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d117      	bne.n	80034f6 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <CO_SDOserver_init+0x60>
 80034cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da02      	bge.n	80034da <CO_SDOserver_init+0x66>
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	e0d8      	b.n	800368c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80034e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80034ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	e0a4      	b.n	8003640 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fd9a 	bl	8003030 <OD_getIndex>
 80034fc:	4603      	mov	r3, r0
 80034fe:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8003500:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003502:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003506:	d123      	bne.n	8003550 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <CO_SDOserver_init+0xa2>
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da02      	bge.n	800351c <CO_SDOserver_init+0xa8>
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	e0b7      	b.n	800368c <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003524:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800352e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003536:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003538:	2301      	movs	r3, #1
 800353a:	2101      	movs	r1, #1
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fddc 	bl	80030fa <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003542:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003544:	2301      	movs	r3, #1
 8003546:	2102      	movs	r1, #2
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fdd6 	bl	80030fa <OD_set_u32>
 800354e:	e077      	b.n	8003640 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8003550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003552:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003556:	d96f      	bls.n	8003638 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8003558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800355a:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 800355e:	d26b      	bcs.n	8003638 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003560:	f107 021d 	add.w	r2, r7, #29
 8003564:	2301      	movs	r3, #1
 8003566:	2100      	movs	r1, #0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fd9c 	bl	80030a6 <OD_get_u8>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8003574:	f107 0218 	add.w	r2, r7, #24
 8003578:	2301      	movs	r3, #1
 800357a:	2101      	movs	r1, #1
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fda7 	bl	80030d0 <OD_get_u32>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8003588:	f107 0214 	add.w	r2, r7, #20
 800358c:	2301      	movs	r3, #1
 800358e:	2102      	movs	r1, #2
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fd9d 	bl	80030d0 <OD_get_u32>
 8003596:	4603      	mov	r3, r0
 8003598:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800359a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10d      	bne.n	80035be <CO_SDOserver_init+0x14a>
 80035a2:	7f7b      	ldrb	r3, [r7, #29]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d002      	beq.n	80035ae <CO_SDOserver_init+0x13a>
 80035a8:	7f7b      	ldrb	r3, [r7, #29]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 80035ae:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <CO_SDOserver_init+0x14a>
 80035b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80035be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <CO_SDOserver_init+0x156>
 80035c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80035c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c8:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80035ca:	f06f 030b 	mvn.w	r3, #11
 80035ce:	e05d      	b.n	800368c <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db05      	blt.n	80035e2 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80035da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035de:	b29b      	uxth	r3, r3
 80035e0:	e000      	b.n	80035e4 <CO_SDOserver_init+0x170>
 80035e2:	2300      	movs	r3, #0
 80035e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	db05      	blt.n	80035f8 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80035f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	e000      	b.n	80035fa <CO_SDOserver_init+0x186>
 80035f8:	2300      	movs	r3, #0
 80035fa:	84bb      	strh	r3, [r7, #36]	@ 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <CO_SDOserver_init+0x220>)
 8003606:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <CO_SDOserver_init+0x224>)
 800360c:	65da      	str	r2, [r3, #92]	@ 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3354      	adds	r3, #84	@ 0x54
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fd32 	bl	800307e <OD_extension_init>
 800361a:	4603      	mov	r3, r0
 800361c:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800361e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8003626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <CO_SDOserver_init+0x1be>
 800362c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800362e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003630:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003632:	f06f 030b 	mvn.w	r3, #11
 8003636:	e029      	b.n	800368c <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	e026      	b.n	800368c <CO_SDOserver_init+0x218>
        ) {
 800363e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	639a      	str	r2, [r3, #56]	@ 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003650:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800365a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = 0;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800366e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8003670:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003672:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003674:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8003678:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800367a:	9201      	str	r2, [sp, #4]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	4603      	mov	r3, r0
 8003680:	460a      	mov	r2, r1
 8003682:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fd77 	bl	8003178 <CO_SDOserver_init_canRxTx>
 800368a:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	@ 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	080018a1 	.word	0x080018a1
 8003698:	08003251 	.word	0x08003251

0800369c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08d      	sub	sp, #52	@ 0x34
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	460b      	mov	r3, r1
 80036ac:	71fb      	strb	r3, [r7, #7]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (SDO->finished) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d07b      	beq.n	80037ba <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <validateAndWriteToOD+0x5a>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d00f      	beq.n	80036f6 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80036de:	429a      	cmp	r2, r3
 80036e0:	d901      	bls.n	80036e6 <validateAndWriteToOD+0x4a>
 80036e2:	4a77      	ldr	r2, [pc, #476]	@ (80038c0 <validateAndWriteToOD+0x224>)
 80036e4:	e000      	b.n	80036e8 <validateAndWriteToOD+0x4c>
 80036e6:	4a77      	ldr	r2, [pc, #476]	@ (80038c4 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	751a      	strb	r2, [r3, #20]
            return false;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e0df      	b.n	80038b6 <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003702:	b25b      	sxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	da3c      	bge.n	8003782 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <validateAndWriteToOD+0x7c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003714:	429a      	cmp	r2, r3
 8003716:	d934      	bls.n	8003782 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800371e:	3302      	adds	r3, #2
 8003720:	2b20      	cmp	r3, #32
 8003722:	d82e      	bhi.n	8003782 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            SDO->sizeTran++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	669a      	str	r2, [r3, #104]	@ 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <validateAndWriteToOD+0xba>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800375c:	1c59      	adds	r1, r3, #1
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	2200      	movs	r2, #0
 800376a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                SDO->sizeTran++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e02d      	b.n	80037de <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	e025      	b.n	80037de <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003798:	429a      	cmp	r2, r3
 800379a:	d020      	beq.n	80037de <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80037a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d201      	bcs.n	80037aa <validateAndWriteToOD+0x10e>
 80037a6:	4a46      	ldr	r2, [pc, #280]	@ (80038c0 <validateAndWriteToOD+0x224>)
 80037a8:	e000      	b.n	80037ac <validateAndWriteToOD+0x110>
 80037aa:	4a46      	ldr	r2, [pc, #280]	@ (80038c4 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	751a      	strb	r2, [r3, #20]
            return false;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e07d      	b.n	80038b6 <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <validateAndWriteToOD+0x142>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d907      	bls.n	80037de <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a3b      	ldr	r2, [pc, #236]	@ (80038c0 <validateAndWriteToOD+0x224>)
 80037d2:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	751a      	strb	r2, [r3, #20]
            return false;
 80037da:	2300      	movs	r3, #0
 80037dc:	e06b      	b.n	80038b6 <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3318      	adds	r3, #24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fc33 	bl	8003052 <OD_mappable>
 80037ec:	6278      	str	r0, [r7, #36]	@ 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <validateAndWriteToOD+0x16a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f8:	f3ef 8210 	mrs	r2, PRIMASK
 80037fc:	61fa      	str	r2, [r7, #28]
  return(result);
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003802:	b672      	cpsid	i
}
 8003804:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f103 0018 	add.w	r0, r3, #24
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	47a0      	blx	r4
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <validateAndWriteToOD+0x1a2>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	bf00      	nop

    SDO->bufOffsetWr = 0;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003846:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800384a:	2b00      	cmp	r3, #0
 800384c:	d011      	beq.n	8003872 <validateAndWriteToOD+0x1d6>
 800384e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d00c      	beq.n	8003872 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003858:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fa3f 	bl	8001ce0 <OD_getSDOabCode>
 8003862:	4602      	mov	r2, r0
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	751a      	strb	r2, [r3, #20]
        return false;
 800386e:	2300      	movs	r3, #0
 8003870:	e021      	b.n	80038b6 <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <validateAndWriteToOD+0x1f8>
 800387a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d107      	bne.n	8003894 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <validateAndWriteToOD+0x228>)
 8003888:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	751a      	strb	r2, [r3, #20]
        return false;
 8003890:	2300      	movs	r3, #0
 8003892:	e010      	b.n	80038b6 <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <validateAndWriteToOD+0x218>
 800389c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a06      	ldr	r2, [pc, #24]	@ (80038c0 <validateAndWriteToOD+0x224>)
 80038a8:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	751a      	strb	r2, [r3, #20]
        return false;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <validateAndWriteToOD+0x21a>
    }

    return true;
 80038b4:	2301      	movs	r3, #1
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3734      	adds	r7, #52	@ 0x34
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop
 80038c0:	06070012 	.word	0x06070012
 80038c4:	06070013 	.word	0x06070013

080038c8 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b08f      	sub	sp, #60	@ 0x3c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 80b1 	bne.w	8003a52 <readFromOd+0x18a>
 80038f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f080 80ac 	bcs.w	8003a52 <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800390c:	4413      	add	r3, r2
 800390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003910:	4619      	mov	r1, r3
 8003912:	f007 f845 	bl	800a9a0 <memmove>
        SDO->bufOffsetRd = 0;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        SDO->bufOffsetWr = countRemain;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003922:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	f1c3 0320 	rsb	r3, r3, #32
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	4413      	add	r3, r2
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3318      	adds	r3, #24
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fb85 	bl	8003052 <OD_mappable>
 8003948:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <readFromOd+0x9a>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003954:	f3ef 8210 	mrs	r2, PRIMASK
 8003958:	61fa      	str	r2, [r7, #28]
  return(result);
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800395e:	b672      	cpsid	i
}
 8003960:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f103 0018 	add.w	r0, r3, #24
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003974:	47a0      	blx	r4
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <readFromOd+0xca>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003992:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003996:	2b00      	cmp	r3, #0
 8003998:	d011      	beq.n	80039be <readFromOd+0xf6>
 800399a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d00c      	beq.n	80039be <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80039a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe f999 	bl	8001ce0 <OD_getSDOabCode>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	751a      	strb	r2, [r3, #20]
            return false;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e04a      	b.n	8003a54 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d022      	beq.n	8003a0a <readFromOd+0x142>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039ca:	b25b      	sxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da1c      	bge.n	8003a0a <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d4:	4413      	add	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 80039da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039dc:	f7fc fbf8 	bl	80001d0 <strlen>
 80039e0:	6338      	str	r0, [r7, #48]	@ 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <readFromOd+0x124>
 80039e8:	2301      	movs	r3, #1
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
            if (countStr < countRd) {
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d20a      	bcs.n	8003a0a <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <readFromOd+0x162>
 8003a20:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d110      	bne.n	8003a4c <readFromOd+0x184>
            SDO->finished = false;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	671a      	str	r2, [r3, #112]	@ 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d90a      	bls.n	8003a52 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4a07      	ldr	r2, [pc, #28]	@ (8003a5c <readFromOd+0x194>)
 8003a40:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	751a      	strb	r2, [r3, #20]
                return false;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e003      	b.n	8003a54 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	671a      	str	r2, [r3, #112]	@ 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	373c      	adds	r7, #60	@ 0x3c
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	06040047 	.word	0x06040047

08003a60 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b09b      	sub	sp, #108	@ 0x6c
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003a74:	f06f 0301 	mvn.w	r3, #1
 8003a78:	f000 bcfc 	b.w	8004474 <CO_SDOserver_process+0xa14>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	657b      	str	r3, [r7, #84]	@ 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <CO_SDOserver_process+0x56>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	7d1b      	ldrb	r3, [r3, #20]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <CO_SDOserver_process+0x56>
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ab4:	e2d3      	b.n	800405e <CO_SDOserver_process+0x5fe>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <CO_SDOserver_process+0x64>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ad6:	e2c2      	b.n	800405e <CO_SDOserver_process+0x5fe>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 82bf 	beq.w	800405e <CO_SDOserver_process+0x5fe>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	7d1b      	ldrb	r3, [r3, #20]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80cf 	bne.w	8003c8a <CO_SDOserver_process+0x22a>
            bool_t upload = false;
 8003aec:	2300      	movs	r3, #0
 8003aee:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d103      	bne.n	8003b06 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2211      	movs	r2, #17
 8003b02:	751a      	strb	r2, [r3, #20]
 8003b04:	e00f      	b.n	8003b26 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d105      	bne.n	8003b1c <CO_SDOserver_process+0xbc>
                upload = true;
 8003b10:	2301      	movs	r3, #1
 8003b12:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	@ 0x21
 8003b18:	751a      	strb	r2, [r3, #20]
 8003b1a:	e004      	b.n	8003b26 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8003b1c:	4ba6      	ldr	r3, [pc, #664]	@ (8003db8 <CO_SDOserver_process+0x358>)
 8003b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d163      	bne.n	8003bf4 <CO_SDOserver_process+0x194>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
                             | SDO->CANrxData[1];
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	b21a      	sxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	869a      	strh	r2, [r3, #52]	@ 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fd ff6f 	bl	8001a44 <OD_find>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 1036 	ldrb.w	r1, [r3, #54]	@ 0x36
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f103 0218 	add.w	r2, r3, #24
 8003b72:	2300      	movs	r3, #0
 8003b74:	f7fd ffc2 	bl	8001afc <OD_getSub>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8003b7e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <CO_SDOserver_process+0x13c>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003b86:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe f8a8 	bl	8001ce0 <OD_getSDOabCode>
 8003b90:	4603      	mov	r3, r0
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	751a      	strb	r2, [r3, #20]
 8003b9a:	e02b      	b.n	8003bf4 <CO_SDOserver_process+0x194>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <CO_SDOserver_process+0x156>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003baa:	4b84      	ldr	r3, [pc, #528]	@ (8003dbc <CO_SDOserver_process+0x35c>)
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	751a      	strb	r2, [r3, #20]
 8003bb4:	e01e      	b.n	8003bf4 <CO_SDOserver_process+0x194>
                    }
                    else if (upload
 8003bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <CO_SDOserver_process+0x176>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <CO_SDOserver_process+0x176>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8003bca:	4b7d      	ldr	r3, [pc, #500]	@ (8003dc0 <CO_SDOserver_process+0x360>)
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	751a      	strb	r2, [r3, #20]
 8003bd4:	e00e      	b.n	8003bf4 <CO_SDOserver_process+0x194>
                    }
                    else if (!upload
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <CO_SDOserver_process+0x194>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <CO_SDOserver_process+0x194>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8003bea:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <CO_SDOserver_process+0x364>)
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8003bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d047      	beq.n	8003c8a <CO_SDOserver_process+0x22a>
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d144      	bne.n	8003c8a <CO_SDOserver_process+0x22a>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	669a      	str	r2, [r3, #104]	@ 0x68
                SDO->finished = false;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	671a      	str	r2, [r3, #112]	@ 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8003c20:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003c24:	2300      	movs	r3, #0
 8003c26:	2207      	movs	r2, #7
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff fe4d 	bl	80038c8 <readFromOd>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02a      	beq.n	8003c8a <CO_SDOserver_process+0x22a>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <CO_SDOserver_process+0x212>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	665a      	str	r2, [r3, #100]	@ 0x64

                        if (SDO->sizeInd == 0) {
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <CO_SDOserver_process+0x1f8>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	665a      	str	r2, [r3, #100]	@ 0x64
 8003c56:	e018      	b.n	8003c8a <CO_SDOserver_process+0x22a>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d011      	beq.n	8003c8a <CO_SDOserver_process+0x22a>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003c66:	4b58      	ldr	r3, [pc, #352]	@ (8003dc8 <CO_SDOserver_process+0x368>)
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	751a      	strb	r2, [r3, #20]
 8003c70:	e00b      	b.n	8003c8a <CO_SDOserver_process+0x22a>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c78:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db02      	blt.n	8003c84 <CO_SDOserver_process+0x224>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	e000      	b.n	8003c86 <CO_SDOserver_process+0x226>
 8003c84:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	6653      	str	r3, [r2, #100]	@ 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	7d1b      	ldrb	r3, [r3, #20]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 81dc 	beq.w	800404e <CO_SDOserver_process+0x5ee>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	7d1b      	ldrb	r3, [r3, #20]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f000 81d6 	beq.w	800404e <CO_SDOserver_process+0x5ee>
        switch (SDO->state) {
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	7d1b      	ldrb	r3, [r3, #20]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3b11      	subs	r3, #17
 8003caa:	2b12      	cmp	r3, #18
 8003cac:	f200 81bf 	bhi.w	800402e <CO_SDOserver_process+0x5ce>
 8003cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <CO_SDOserver_process+0x258>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	0800402f 	.word	0x0800402f
 8003cc0:	08003ee7 	.word	0x08003ee7
 8003cc4:	0800402f 	.word	0x0800402f
 8003cc8:	0800402f 	.word	0x0800402f
 8003ccc:	0800402f 	.word	0x0800402f
 8003cd0:	0800402f 	.word	0x0800402f
 8003cd4:	0800402f 	.word	0x0800402f
 8003cd8:	0800402f 	.word	0x0800402f
 8003cdc:	0800402f 	.word	0x0800402f
 8003ce0:	0800402f 	.word	0x0800402f
 8003ce4:	0800402f 	.word	0x0800402f
 8003ce8:	0800402f 	.word	0x0800402f
 8003cec:	0800402f 	.word	0x0800402f
 8003cf0:	0800402f 	.word	0x0800402f
 8003cf4:	0800402f 	.word	0x0800402f
 8003cf8:	08003fdd 	.word	0x08003fdd
 8003cfc:	0800402f 	.word	0x0800402f
 8003d00:	08003fe5 	.word	0x08003fe5
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80af 	beq.w	8003e72 <CO_SDOserver_process+0x412>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <CO_SDOserver_process+0x2e2>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d40:	e007      	b.n	8003d52 <CO_SDOserver_process+0x2f2>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8003d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <CO_SDOserver_process+0x2f2>
 8003d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d801      	bhi.n	8003d52 <CO_SDOserver_process+0x2f2>
                    dataSizeToWrite = sizeInOd;
 8003d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8003d52:	f107 0320 	add.w	r3, r7, #32
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	809a      	strh	r2, [r3, #4]
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003d62:	f107 0320 	add.w	r3, r7, #32
 8003d66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f006 febe 	bl	800aaea <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da17      	bge.n	8003daa <CO_SDOserver_process+0x34a>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8003d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <CO_SDOserver_process+0x328>
 8003d80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d210      	bcs.n	8003daa <CO_SDOserver_process+0x34a>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8003d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	643b      	str	r3, [r7, #64]	@ 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8003d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <CO_SDOserver_process+0x33a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <CO_SDOserver_process+0x33c>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d9e:	4413      	add	r3, r2
 8003da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003da6:	621a      	str	r2, [r3, #32]
                ) {
 8003da8:	e020      	b.n	8003dec <CO_SDOserver_process+0x38c>
                }
                else if (sizeInOd == 0) {
 8003daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <CO_SDOserver_process+0x36c>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003db4:	621a      	str	r2, [r3, #32]
 8003db6:	e019      	b.n	8003dec <CO_SDOserver_process+0x38c>
 8003db8:	05040001 	.word	0x05040001
 8003dbc:	06010000 	.word	0x06010000
 8003dc0:	06010001 	.word	0x06010001
 8003dc4:	06010002 	.word	0x06010002
 8003dc8:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8003dcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d00b      	beq.n	8003dec <CO_SDOserver_process+0x38c>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003dd4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d901      	bls.n	8003de0 <CO_SDOserver_process+0x380>
 8003ddc:	4b97      	ldr	r3, [pc, #604]	@ (800403c <CO_SDOserver_process+0x5dc>)
 8003dde:	e000      	b.n	8003de2 <CO_SDOserver_process+0x382>
 8003de0:	4b97      	ldr	r3, [pc, #604]	@ (8004040 <CO_SDOserver_process+0x5e0>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	751a      	strb	r2, [r3, #20]
                    break;
 8003dea:	e130      	b.n	800404e <CO_SDOserver_process+0x5ee>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3318      	adds	r3, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff f92c 	bl	8003052 <OD_mappable>
 8003dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <CO_SDOserver_process+0x3b4>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e06:	f3ef 8210 	mrs	r2, PRIMASK
 8003e0a:	633a      	str	r2, [r7, #48]	@ 0x30
  return(result);
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e0e:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003e10:	b672      	cpsid	i
}
 8003e12:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f103 0018 	add.w	r0, r3, #24
 8003e1e:	f107 031c 	add.w	r3, r7, #28
 8003e22:	f107 0120 	add.w	r1, r7, #32
 8003e26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e28:	47a0      	blx	r4
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <CO_SDOserver_process+0x3e6>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	bf00      	nop

                if (odRet != ODR_OK) {
 8003e46:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <CO_SDOserver_process+0x404>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003e4e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd ff44 	bl	8001ce0 <OD_getSDOabCode>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	751a      	strb	r2, [r3, #20]
                    break;
 8003e62:	e0f4      	b.n	800404e <CO_SDOserver_process+0x5ee>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2212      	movs	r2, #18
 8003e68:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	671a      	str	r2, [r3, #112]	@ 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8003e70:	e0ed      	b.n	800404e <CO_SDOserver_process+0x5ee>
                if (SDO->CANrxData[0] & 0x01) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <CO_SDOserver_process+0x472>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3340      	adds	r3, #64	@ 0x40
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	665a      	str	r2, [r3, #100]	@ 0x64
                    if (sizeInOd > 0) {
 8003e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <CO_SDOserver_process+0x478>
                        if (SDO->sizeInd > sizeInOd) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d205      	bcs.n	8003eb0 <CO_SDOserver_process+0x450>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8003ea4:	4b65      	ldr	r3, [pc, #404]	@ (800403c <CO_SDOserver_process+0x5dc>)
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	751a      	strb	r2, [r3, #20]
                            break;
 8003eae:	e0ce      	b.n	800404e <CO_SDOserver_process+0x5ee>
                        else if (SDO->sizeInd < sizeInOd
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d90e      	bls.n	8003ed8 <CO_SDOserver_process+0x478>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db08      	blt.n	8003ed8 <CO_SDOserver_process+0x478>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8003ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8004040 <CO_SDOserver_process+0x5e0>)
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	751a      	strb	r2, [r3, #20]
                            break;
 8003ed0:	e0bd      	b.n	800404e <CO_SDOserver_process+0x5ee>
                    SDO->sizeInd = 0;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	665a      	str	r2, [r3, #100]	@ 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2212      	movs	r2, #18
 8003edc:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	671a      	str	r2, [r3, #112]	@ 0x70
            break;
 8003ee4:	e0b3      	b.n	800404e <CO_SDOserver_process+0x5ee>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d16d      	bne.n	8003fd0 <CO_SDOserver_process+0x570>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	671a      	str	r2, [r3, #112]	@ 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (toggle != SDO->toggle) {
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003f22:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d005      	beq.n	8003f36 <CO_SDOserver_process+0x4d6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8003f2a:	4b46      	ldr	r3, [pc, #280]	@ (8004044 <CO_SDOserver_process+0x5e4>)
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	751a      	strb	r2, [r3, #20]
                    break;
 8003f34:	e08b      	b.n	800404e <CO_SDOserver_process+0x5ee>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f54:	18d0      	adds	r0, r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	333d      	adds	r3, #61	@ 0x3d
 8003f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f006 fdc4 	bl	800aaea <memcpy>
                SDO->bufOffsetWr += count;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                SDO->sizeTran += count;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f78:	441a      	add	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <CO_SDOserver_process+0x53e>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d905      	bls.n	8003f9e <CO_SDOserver_process+0x53e>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <CO_SDOserver_process+0x5dc>)
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	751a      	strb	r2, [r3, #20]
                    break;
 8003f9c:	e057      	b.n	800404e <CO_SDOserver_process+0x5ee>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <CO_SDOserver_process+0x554>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fac:	f1c3 0320 	rsb	r3, r3, #32
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d809      	bhi.n	8003fc8 <CO_SDOserver_process+0x568>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8003fb4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fb6d 	bl	800369c <validateAndWriteToOD>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d041      	beq.n	800404c <CO_SDOserver_process+0x5ec>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2214      	movs	r2, #20
 8003fcc:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8003fce:	e03e      	b.n	800404e <CO_SDOserver_process+0x5ee>
                abortCode = CO_SDO_AB_CMD;
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <CO_SDOserver_process+0x5e8>)
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	751a      	strb	r2, [r3, #20]
            break;
 8003fda:	e038      	b.n	800404e <CO_SDOserver_process+0x5ee>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2222      	movs	r2, #34	@ 0x22
 8003fe0:	751a      	strb	r2, [r3, #20]
            break;
 8003fe2:	e034      	b.n	800404e <CO_SDOserver_process+0x5ee>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fea:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8003fee:	2b60      	cmp	r3, #96	@ 0x60
 8003ff0:	d117      	bne.n	8004022 <CO_SDOserver_process+0x5c2>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                if (toggle != SDO->toggle) {
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8004006:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800400a:	429a      	cmp	r2, r3
 800400c:	d005      	beq.n	800401a <CO_SDOserver_process+0x5ba>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <CO_SDOserver_process+0x5e4>)
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	751a      	strb	r2, [r3, #20]
                    break;
 8004018:	e019      	b.n	800404e <CO_SDOserver_process+0x5ee>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2224      	movs	r2, #36	@ 0x24
 800401e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004020:	e015      	b.n	800404e <CO_SDOserver_process+0x5ee>
                abortCode = CO_SDO_AB_CMD;
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <CO_SDOserver_process+0x5e8>)
 8004024:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	751a      	strb	r2, [r3, #20]
            break;
 800402c:	e00f      	b.n	800404e <CO_SDOserver_process+0x5ee>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <CO_SDOserver_process+0x5e8>)
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	751a      	strb	r2, [r3, #20]
 8004038:	e009      	b.n	800404e <CO_SDOserver_process+0x5ee>
 800403a:	bf00      	nop
 800403c:	06070012 	.word	0x06070012
 8004040:	06070013 	.word	0x06070013
 8004044:	05030000 	.word	0x05030000
 8004048:	05040001 	.word	0x05040001
                        break;
 800404c:	bf00      	nop
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
        timeDifference_us = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 800405e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004062:	2b01      	cmp	r3, #1
 8004064:	d11e      	bne.n	80040a4 <CO_SDOserver_process+0x644>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406e:	429a      	cmp	r2, r3
 8004070:	d205      	bcs.n	800407e <CO_SDOserver_process+0x61e>
            SDO->timeoutTimer += timeDifference_us;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	441a      	add	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	679a      	str	r2, [r3, #120]	@ 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004086:	429a      	cmp	r2, r3
 8004088:	d304      	bcc.n	8004094 <CO_SDOserver_process+0x634>
            abortCode = CO_SDO_AB_TIMEOUT;
 800408a:	4b9c      	ldr	r3, [pc, #624]	@ (80042fc <CO_SDOserver_process+0x89c>)
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
            SDO->state = CO_SDO_ST_ABORT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <CO_SDOserver_process+0x644>
            ret = CO_SDO_RT_transmittBufferFull;
 800409e:	2304      	movs	r3, #4
 80040a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80040a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 81ab 	bne.w	8004404 <CO_SDOserver_process+0x9a4>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	3305      	adds	r3, #5
 80040b4:	2208      	movs	r2, #8
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f006 fc8b 	bl	800a9d4 <memset>

        switch (SDO->state) {
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	7d1b      	ldrb	r3, [r3, #20]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3b12      	subs	r3, #18
 80040c6:	2b12      	cmp	r3, #18
 80040c8:	f200 8199 	bhi.w	80043fe <CO_SDOserver_process+0x99e>
 80040cc:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <CO_SDOserver_process+0x674>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004121 	.word	0x08004121
 80040d8:	080043ff 	.word	0x080043ff
 80040dc:	080041a3 	.word	0x080041a3
 80040e0:	080043ff 	.word	0x080043ff
 80040e4:	080043ff 	.word	0x080043ff
 80040e8:	080043ff 	.word	0x080043ff
 80040ec:	080043ff 	.word	0x080043ff
 80040f0:	080043ff 	.word	0x080043ff
 80040f4:	080043ff 	.word	0x080043ff
 80040f8:	080043ff 	.word	0x080043ff
 80040fc:	080043ff 	.word	0x080043ff
 8004100:	080043ff 	.word	0x080043ff
 8004104:	080043ff 	.word	0x080043ff
 8004108:	080043ff 	.word	0x080043ff
 800410c:	080043ff 	.word	0x080043ff
 8004110:	080043ff 	.word	0x080043ff
 8004114:	080041ff 	.word	0x080041ff
 8004118:	080043ff 	.word	0x080043ff
 800411c:	080042cd 	.word	0x080042cd
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2260      	movs	r2, #96	@ 0x60
 8004126:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800414e:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f002 fd01 	bl	8006b68 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <CO_SDOserver_process+0x71c>
                SDO->state = CO_SDO_ST_IDLE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 800417a:	e143      	b.n	8004404 <CO_SDOserver_process+0x9a4>
                SDO->toggle = 0x00;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
                SDO->sizeTran = 0;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	669a      	str	r2, [r3, #104]	@ 0x68
                SDO->bufOffsetWr = 0;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                SDO->bufOffsetRd = 0;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2213      	movs	r2, #19
 800419e:	751a      	strb	r2, [r3, #20]
            break;
 80041a0:	e130      	b.n	8004404 <CO_SDOserver_process+0x9a4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 206c 	ldrb.w	r2, [r3, #108]	@ 0x6c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f042 0220 	orr.w	r2, r2, #32
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <CO_SDOserver_process+0x762>
 80041be:	2210      	movs	r2, #16
 80041c0:	e000      	b.n	80041c4 <CO_SDOserver_process+0x764>
 80041c2:	2200      	movs	r2, #0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	679a      	str	r2, [r3, #120]	@ 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f002 fcc4 	bl	8006b68 <CO_CANsend>
            if (SDO->finished) {
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <CO_SDOserver_process+0x796>
                SDO->state = CO_SDO_ST_IDLE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 80041f4:	e106      	b.n	8004404 <CO_SDOserver_process+0x9a4>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2213      	movs	r2, #19
 80041fa:	751a      	strb	r2, [r3, #20]
            break;
 80041fc:	e102      	b.n	8004404 <CO_SDOserver_process+0x9a4>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004202:	2b00      	cmp	r3, #0
 8004204:	d024      	beq.n	8004250 <CO_SDOserver_process+0x7f0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800420a:	2b04      	cmp	r3, #4
 800420c:	d820      	bhi.n	8004250 <CO_SDOserver_process+0x7f0>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f1c3 0304 	rsb	r3, r3, #4
 8004218:	b2db      	uxtb	r3, r3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f103 0009 	add.w	r0, r3, #9
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800423c:	461a      	mov	r2, r3
 800423e:	f006 fc54 	bl	800aaea <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800424e:	e020      	b.n	8004292 <CO_SDOserver_process+0x832>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <CO_SDOserver_process+0x816>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800425e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004260:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2241      	movs	r2, #65	@ 0x41
 8004268:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	3309      	adds	r3, #9
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e003      	b.n	800427e <CO_SDOserver_process+0x81e>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2240      	movs	r2, #64	@ 0x40
 800427c:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
                SDO->timeoutTimer = 0;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	679a      	str	r2, [r3, #120]	@ 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2223      	movs	r2, #35	@ 0x23
 8004290:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80042b8:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f002 fc4f 	bl	8006b68 <CO_CANsend>
            break;
 80042ca:	e09b      	b.n	8004404 <CO_SDOserver_process+0x9a4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 80042cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80042d0:	2300      	movs	r3, #0
 80042d2:	2207      	movs	r2, #7
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff faf7 	bl	80038c8 <readFromOd>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8090 	beq.w	8004402 <CO_SDOserver_process+0x9a2>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 80042ec:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <CO_SDOserver_process+0x8a0>
 80042f8:	2210      	movs	r2, #16
 80042fa:	e002      	b.n	8004302 <CO_SDOserver_process+0x8a2>
 80042fc:	05040000 	.word	0x05040000
 8004300:	2200      	movs	r2, #0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	65bb      	str	r3, [r7, #88]	@ 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8004318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431a:	2b06      	cmp	r3, #6
 800431c:	d906      	bls.n	800432c <CO_SDOserver_process+0x8cc>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01b      	beq.n	800435e <CO_SDOserver_process+0x8fe>
 8004326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004328:	2b07      	cmp	r3, #7
 800432a:	d118      	bne.n	800435e <CO_SDOserver_process+0x8fe>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	795a      	ldrb	r2, [r3, #5]
 8004332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	b2db      	uxtb	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800435c:	e007      	b.n	800436e <CO_SDOserver_process+0x90e>
            }
            else {
                SDO->timeoutTimer = 0;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	679a      	str	r2, [r3, #120]	@ 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2223      	movs	r2, #35	@ 0x23
 8004368:	751a      	strb	r2, [r3, #20]
                count = 7;
 800436a:	2307      	movs	r3, #7
 800436c:	65bb      	str	r3, [r7, #88]	@ 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	1d98      	adds	r0, r3, #6
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004380:	4413      	add	r3, r2
 8004382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004384:	4619      	mov	r1, r3
 8004386:	f006 fbb0 	bl	800aaea <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004392:	441a      	add	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran += count;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800439e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a0:	441a      	add	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	669a      	str	r2, [r3, #104]	@ 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01e      	beq.n	80043ec <CO_SDOserver_process+0x98c>
                if (SDO->sizeTran > SDO->sizeInd) {
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d905      	bls.n	80043c6 <CO_SDOserver_process+0x966>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80043ba:	4b30      	ldr	r3, [pc, #192]	@ (800447c <CO_SDOserver_process+0xa1c>)
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	751a      	strb	r2, [r3, #20]
                    break;
 80043c4:	e01e      	b.n	8004404 <CO_SDOserver_process+0x9a4>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 80043c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <CO_SDOserver_process+0x98c>
                         && SDO->sizeTran < SDO->sizeInd
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d208      	bcs.n	80043ec <CO_SDOserver_process+0x98c>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <CO_SDOserver_process+0xa20>)
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    ret = CO_SDO_RT_waitingResponse;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	751a      	strb	r2, [r3, #20]
                    break;
 80043ea:	e00b      	b.n	8004404 <CO_SDOserver_process+0x9a4>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f002 fbb6 	bl	8006b68 <CO_CANsend>
            break;
 80043fc:	e002      	b.n	8004404 <CO_SDOserver_process+0x9a4>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <CO_SDOserver_process+0x9a4>
                break;
 8004402:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004404:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004408:	2b01      	cmp	r3, #1
 800440a:	d131      	bne.n	8004470 <CO_SDOserver_process+0xa10>
        if (SDO->state == CO_SDO_ST_ABORT) {
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	7d1b      	ldrb	r3, [r3, #20]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d12c      	bne.n	8004470 <CO_SDOserver_process+0xa10>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8004448:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	3309      	adds	r3, #9
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f002 fb82 	bl	8006b68 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800446a:	23f6      	movs	r3, #246	@ 0xf6
 800446c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004470:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004474:	4618      	mov	r0, r3
 8004476:	376c      	adds	r7, #108	@ 0x6c
 8004478:	46bd      	mov	sp, r7
 800447a:	bd90      	pop	{r4, r7, pc}
 800447c:	06070012 	.word	0x06070012
 8004480:	06070013 	.word	0x06070013

08004484 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <OD_getIndex+0x14>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	e000      	b.n	80044d2 <OD_getIndex+0x16>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <OD_extension_init>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <OD_extension_init+0x14>
 80044ee:	2305      	movs	r3, #5
 80044f0:	e003      	b.n	80044fa <OD_extension_init+0x1c>
    entry->extension = extension;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <OD_get_u8>:
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af02      	add	r7, sp, #8
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	460b      	mov	r3, r1
 8004514:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004516:	7af9      	ldrb	r1, [r7, #11]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2301      	movs	r3, #1
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7fd fbfb 	bl	8001d1c <OD_get_value>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <OD_get_u32>:
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004540:	7af9      	ldrb	r1, [r7, #11]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2304      	movs	r3, #4
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7fd fbe6 	bl	8001d1c <OD_get_value>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	791b      	ldrb	r3, [r3, #4]
 800456c:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	7c5b      	ldrb	r3, [r3, #17]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10c      	bne.n	8004594 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004580:	2301      	movs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e019      	b.n	80045ba <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458c:	b2da      	uxtb	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	721a      	strb	r2, [r3, #8]
 8004592:	e012      	b.n	80045ba <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d109      	bne.n	80045ae <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3305      	adds	r3, #5
 800459e:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 80045a8:	2301      	movs	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e005      	b.n	80045ba <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2201      	movs	r2, #1
 80045d8:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08f      	sub	sp, #60	@ 0x3c
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <OD_write_1005+0x2e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	7c5b      	ldrb	r3, [r3, #17]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <OD_write_1005+0x2e>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d102      	bne.n	8004616 <OD_write_1005+0x2e>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004616:	2309      	movs	r3, #9
 8004618:	e0a3      	b.n	8004762 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f7ff ff3d 	bl	80044a0 <CO_getUint32>
 8004626:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004630:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	4b49      	ldr	r3, [pc, #292]	@ (800476c <OD_write_1005+0x184>)
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d133      	bne.n	80046b6 <OD_write_1005+0xce>
 800464e:	8bfb      	ldrh	r3, [r7, #30]
 8004650:	2b7f      	cmp	r3, #127	@ 0x7f
 8004652:	d930      	bls.n	80046b6 <OD_write_1005+0xce>
 8004654:	8bfb      	ldrh	r3, [r7, #30]
 8004656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465a:	d903      	bls.n	8004664 <OD_write_1005+0x7c>
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004662:	d928      	bls.n	80046b6 <OD_write_1005+0xce>
 8004664:	8bfb      	ldrh	r3, [r7, #30]
 8004666:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800466a:	d903      	bls.n	8004674 <OD_write_1005+0x8c>
 800466c:	8bfb      	ldrh	r3, [r7, #30]
 800466e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004672:	d320      	bcc.n	80046b6 <OD_write_1005+0xce>
 8004674:	8bfb      	ldrh	r3, [r7, #30]
 8004676:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800467a:	d903      	bls.n	8004684 <OD_write_1005+0x9c>
 800467c:	8bfb      	ldrh	r3, [r7, #30]
 800467e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004682:	d318      	bcc.n	80046b6 <OD_write_1005+0xce>
 8004684:	8bfb      	ldrh	r3, [r7, #30]
 8004686:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800468a:	d303      	bcc.n	8004694 <OD_write_1005+0xac>
 800468c:	8bfb      	ldrh	r3, [r7, #30]
 800468e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004692:	d310      	bcc.n	80046b6 <OD_write_1005+0xce>
 8004694:	8bfb      	ldrh	r3, [r7, #30]
 8004696:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800469a:	d80c      	bhi.n	80046b6 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <OD_write_1005+0xd2>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <OD_write_1005+0xd2>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046b0:	8bfa      	ldrh	r2, [r7, #30]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 80046b6:	230f      	movs	r3, #15
 80046b8:	e053      	b.n	8004762 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046c0:	8bfa      	ldrh	r2, [r7, #30]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d03a      	beq.n	800473c <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 80046ce:	8bfa      	ldrh	r2, [r7, #30]
 80046d0:	4b27      	ldr	r3, [pc, #156]	@ (8004770 <OD_write_1005+0x188>)
 80046d2:	9302      	str	r3, [sp, #8]
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	2300      	movs	r3, #0
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80046e0:	f002 f96a 	bl	80069b8 <CO_CANrxBufferInit>
 80046e4:	4603      	mov	r3, r0
 80046e6:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 80046e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80046f0:	2309      	movs	r3, #9
 80046f2:	e036      	b.n	8004762 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461c      	mov	r4, r3
 800470e:	8bfa      	ldrh	r2, [r7, #30]
 8004710:	2300      	movs	r3, #0
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	9400      	str	r4, [sp, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	f002 f9ac 	bl	8006a74 <CO_CANtxBufferInit>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	629a      	str	r2, [r3, #40]	@ 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	2200      	movs	r2, #0
 800472e:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 8004730:	2309      	movs	r3, #9
 8004732:	e016      	b.n	8004762 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	8bfa      	ldrh	r2, [r7, #30]
 8004738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	2200      	movs	r2, #0
 800474c:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	2200      	movs	r2, #0
 8004752:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7fd f8f8 	bl	8001950 <OD_writeOriginal>
 8004760:	4603      	mov	r3, r0
}
 8004762:	4618      	mov	r0, r3
 8004764:	372c      	adds	r7, #44	@ 0x2c
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	bffff800 	.word	0xbffff800
 8004770:	0800455b 	.word	0x0800455b

08004774 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <OD_write_1019+0x2e>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	7c5b      	ldrb	r3, [r3, #17]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <OD_write_1019+0x2e>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <OD_write_1019+0x2e>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80047a2:	2309      	movs	r3, #9
 80047a4:	e041      	b.n	800482a <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80047ac:	68b8      	ldr	r0, [r7, #8]
 80047ae:	f7ff fe69 	bl	8004484 <CO_getUint8>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d002      	beq.n	80047c2 <OD_write_1019+0x4e>
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2bf0      	cmp	r3, #240	@ 0xf0
 80047c0:	d901      	bls.n	80047c6 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80047c2:	230f      	movs	r3, #15
 80047c4:	e031      	b.n	800482a <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80047d0:	2317      	movs	r3, #23
 80047d2:	e02a      	b.n	800482a <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461c      	mov	r4, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	9400      	str	r4, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	f002 f93b 	bl	8006a74 <CO_CANtxBufferInit>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8004812:	2309      	movs	r3, #9
 8004814:	e009      	b.n	800482a <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	7cfa      	ldrb	r2, [r7, #19]
 800481a:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7fd f894 	bl	8001950 <OD_writeOriginal>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
	...

08004834 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	@ 0x30
 8004838:	af04      	add	r7, sp, #16
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <CO_SYNC_init+0x32>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <CO_SYNC_init+0x32>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <CO_SYNC_init+0x32>
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	e0fe      	b.n	8004a6a <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 800486c:	2260      	movs	r2, #96	@ 0x60
 800486e:	2100      	movs	r1, #0
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f006 f8af 	bl	800a9d4 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800487a:	f107 0218 	add.w	r2, r7, #24
 800487e:	2301      	movs	r3, #1
 8004880:	2100      	movs	r1, #0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fe54 	bl	8004530 <OD_get_u32>
 8004888:	4603      	mov	r3, r0
 800488a:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800488c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <CO_SYNC_init+0x74>
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff fe0e 	bl	80044bc <OD_getIndex>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80048a8:	f06f 030b 	mvn.w	r3, #11
 80048ac:	e0dd      	b.n	8004a6a <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	635a      	str	r2, [r3, #52]	@ 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004a74 <CO_SYNC_init+0x240>)
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a78 <CO_SYNC_init+0x244>)
 80048be:	63da      	str	r2, [r3, #60]	@ 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3334      	adds	r3, #52	@ 0x34
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fe09 	bl	80044de <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 80048cc:	2300      	movs	r3, #0
 80048ce:	2204      	movs	r2, #4
 80048d0:	2100      	movs	r1, #0
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f7fd fa89 	bl	8001dea <OD_getPtr>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80048e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <CO_SYNC_init+0xc6>
 80048ec:	6838      	ldr	r0, [r7, #0]
 80048ee:	f7ff fde5 	bl	80044bc <OD_getIndex>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80048fa:	f06f 030b 	mvn.w	r3, #11
 80048fe:	e0b4      	b.n	8004a6a <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004900:	2300      	movs	r3, #0
 8004902:	2204      	movs	r2, #4
 8004904:	2100      	movs	r1, #0
 8004906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004908:	f7fd fa6f 	bl	8001dea <OD_getPtr>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <CO_SYNC_init+0x106>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10c      	bne.n	800493a <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <CO_SYNC_init+0x100>
 8004926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004928:	f7ff fdc8 	bl	80044bc <OD_getIndex>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004932:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004934:	f06f 030b 	mvn.w	r3, #11
 8004938:	e097      	b.n	8004a6a <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d033      	beq.n	80049ac <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004944:	f107 0217 	add.w	r2, r7, #23
 8004948:	2301      	movs	r3, #1
 800494a:	2100      	movs	r1, #0
 800494c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800494e:	f7ff fdda 	bl	8004506 <OD_get_u8>
 8004952:	4603      	mov	r3, r0
 8004954:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800495e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d006      	beq.n	8004972 <CO_SYNC_init+0x13e>
 8004964:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004966:	f7ff fda9 	bl	80044bc <OD_getIndex>
 800496a:	4603      	mov	r3, r0
 800496c:	461a      	mov	r2, r3
 800496e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004970:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004972:	f06f 030b 	mvn.w	r3, #11
 8004976:	e078      	b.n	8004a6a <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d102      	bne.n	8004984 <CO_SYNC_init+0x150>
 800497e:	2302      	movs	r3, #2
 8004980:	75fb      	strb	r3, [r7, #23]
 8004982:	e004      	b.n	800498e <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2bf0      	cmp	r3, #240	@ 0xf0
 8004988:	d901      	bls.n	800498e <CO_SYNC_init+0x15a>
 800498a:	23f0      	movs	r3, #240	@ 0xf0
 800498c:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a37      	ldr	r2, [pc, #220]	@ (8004a74 <CO_SYNC_init+0x240>)
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a37      	ldr	r2, [pc, #220]	@ (8004a7c <CO_SYNC_init+0x248>)
 800499e:	659a      	str	r2, [r3, #88]	@ 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3350      	adds	r3, #80	@ 0x50
 80049a4:	4619      	mov	r1, r3
 80049a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049a8:	f7ff fd99 	bl	80044de <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80049ac:	7dfa      	ldrb	r2, [r7, #23]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    SYNC->CANdevRx = CANdevRx;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80049e8:	861a      	strh	r2, [r3, #48]	@ 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049ee:	649a      	str	r2, [r3, #72]	@ 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80049f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8004a04:	4b1e      	ldr	r3, [pc, #120]	@ (8004a80 <CO_SYNC_init+0x24c>)
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a16:	f001 ffcf 	bl	80069b8 <CO_CANrxBufferInit>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8004a1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <CO_SYNC_init+0x1f8>
        return ret;
 8004a26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004a2a:	e01e      	b.n	8004a6a <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4618      	mov	r0, r3
 8004a44:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8004a46:	2300      	movs	r3, #0
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	9000      	str	r0, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a50:	f002 f810 	bl	8006a74 <CO_CANtxBufferInit>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295
 8004a66:	e000      	b.n	8004a6a <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	080018a1 	.word	0x080018a1
 8004a78:	080045e9 	.word	0x080045e9
 8004a7c:	08004775 	.word	0x08004775
 8004a80:	0800455b 	.word	0x0800455b

08004a84 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	81fb      	strh	r3, [r7, #14]
 8004a94:	89fb      	ldrh	r3, [r7, #14]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <OD_getIndex+0x14>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	e000      	b.n	8004ad4 <OD_getIndex+0x16>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <OD_extension_init>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <OD_extension_init+0x14>
 8004af0:	2305      	movs	r3, #5
 8004af2:	e003      	b.n	8004afc <OD_extension_init+0x1c>
    entry->extension = extension;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <OD_get_u32>:
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	460b      	mov	r3, r1
 8004b16:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004b18:	7af9      	ldrb	r1, [r7, #11]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	2304      	movs	r3, #4
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7fd f8fa 	bl	8001d1c <OD_get_value>
 8004b28:	4603      	mov	r3, r0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	3305      	adds	r3, #5
 8004b4a:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d108      	bne.n	8004b64 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2206      	movs	r2, #6
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f005 ffc6 	bl	800aaea <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2201      	movs	r2, #1
 8004b62:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <OD_write_1012+0x2e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	7c5b      	ldrb	r3, [r3, #17]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d108      	bne.n	8004b9a <OD_write_1012+0x2e>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d102      	bne.n	8004b9a <OD_write_1012+0x2e>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004b9a:	2309      	movs	r3, #9
 8004b9c:	e051      	b.n	8004c42 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8004ba4:	68b8      	ldr	r0, [r7, #8]
 8004ba6:	f7ff ff7c 	bl	8004aa2 <CO_getUint32>
 8004baa:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bb4:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <OD_write_1012+0xe0>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d126      	bne.n	8004c0e <OD_write_1012+0xa2>
 8004bc0:	8afb      	ldrh	r3, [r7, #22]
 8004bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc4:	d923      	bls.n	8004c0e <OD_write_1012+0xa2>
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bcc:	d903      	bls.n	8004bd6 <OD_write_1012+0x6a>
 8004bce:	8afb      	ldrh	r3, [r7, #22]
 8004bd0:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004bd4:	d91b      	bls.n	8004c0e <OD_write_1012+0xa2>
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004bdc:	d903      	bls.n	8004be6 <OD_write_1012+0x7a>
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004be4:	d313      	bcc.n	8004c0e <OD_write_1012+0xa2>
 8004be6:	8afb      	ldrh	r3, [r7, #22]
 8004be8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004bec:	d903      	bls.n	8004bf6 <OD_write_1012+0x8a>
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004bf4:	d30b      	bcc.n	8004c0e <OD_write_1012+0xa2>
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004bfc:	d303      	bcc.n	8004c06 <OD_write_1012+0x9a>
 8004bfe:	8afb      	ldrh	r3, [r7, #22]
 8004c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c04:	d303      	bcc.n	8004c0e <OD_write_1012+0xa2>
 8004c06:	8afb      	ldrh	r3, [r7, #22]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c0c:	d901      	bls.n	8004c12 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8004c0e:	230f      	movs	r3, #15
 8004c10:	e017      	b.n	8004c42 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	0fdb      	lsrs	r3, r3, #31
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7fc fe88 	bl	8001950 <OD_writeOriginal>
 8004c40:	4603      	mov	r3, r0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	3ffff800 	.word	0x3ffff800

08004c50 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	@ 0x30
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <CO_TIME_init+0x20>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <CO_TIME_init+0x20>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e061      	b.n	8004d3a <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8004c76:	222c      	movs	r2, #44	@ 0x2c
 8004c78:	2100      	movs	r1, #0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f005 feaa 	bl	800a9d4 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8004c80:	f107 0214 	add.w	r2, r7, #20
 8004c84:	2301      	movs	r3, #1
 8004c86:	2100      	movs	r1, #0
 8004c88:	68b8      	ldr	r0, [r7, #8]
 8004c8a:	f7ff ff3d 	bl	8004b08 <OD_get_u32>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d006      	beq.n	8004cae <CO_TIME_init+0x5e>
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f7ff ff0c 	bl	8004abe <OD_getIndex>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004cae:	f06f 030b 	mvn.w	r3, #11
 8004cb2:	e042      	b.n	8004d3a <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a21      	ldr	r2, [pc, #132]	@ (8004d44 <CO_TIME_init+0xf4>)
 8004cbe:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	@ (8004d48 <CO_TIME_init+0xf8>)
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	331c      	adds	r3, #28
 8004cca:	4619      	mov	r1, r3
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f7ff ff07 	bl	8004ae0 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cda:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	0fdb      	lsrs	r3, r3, #31
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004d0c:	8bba      	ldrh	r2, [r7, #28]
 8004d0e:	8879      	ldrh	r1, [r7, #2]
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <CO_TIME_init+0xfc>)
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fe49 	bl	80069b8 <CO_CANrxBufferInit>
 8004d26:	4603      	mov	r3, r0
 8004d28:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8004d2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <CO_TIME_init+0xe8>
            return ret;
 8004d32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d36:	e000      	b.n	8004d3a <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	080018a1 	.word	0x080018a1
 8004d48:	08004b6d 	.word	0x08004b6d
 8004d4c:	08004b33 	.word	0x08004b33

08004d50 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d024      	beq.n	8004db0 <CO_TIME_process+0x60>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01f      	beq.n	8004db6 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fe92 	bl	8004aa2 <CO_getUint32>
 8004d7e:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fe7d 	bl	8004a84 <CO_getUint16>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8bfa      	ldrh	r2, [r7, #30]
 8004d9c:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8004da4:	2301      	movs	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8004dae:	e002      	b.n	8004db6 <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d132      	bne.n	8004e26 <CO_TIME_process+0xd6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02f      	beq.n	8004e26 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	89db      	ldrh	r3, [r3, #14]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	@ (8004e30 <CO_TIME_process+0xe0>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <CO_TIME_process+0xe0>)
 8004de2:	fba3 1302 	umull	r1, r3, r3, r2
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a0a      	ldr	r2, [pc, #40]	@ (8004e34 <CO_TIME_process+0xe4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d90b      	bls.n	8004e26 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <CO_TIME_process+0xe8>)
 8004e14:	4413      	add	r3, r2
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	899b      	ldrh	r3, [r3, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	@ 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	10624dd3 	.word	0x10624dd3
 8004e34:	05265bff 	.word	0x05265bff
 8004e38:	fad9a400 	.word	0xfad9a400

08004e3c <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	e006      	b.n	8004e62 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8004e54:	220c      	movs	r2, #12
 8004e56:	2100      	movs	r1, #0
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f005 fdbb 	bl	800a9d4 <memset>

    return ret;
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8004e94:	e112      	b.n	80050bc <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	7a5b      	ldrb	r3, [r3, #9]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	613b      	str	r3, [r7, #16]

        tick = true;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8004eb6:	3b50      	subs	r3, #80	@ 0x50
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	791b      	ldrb	r3, [r3, #4]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	711a      	strb	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	791b      	ldrb	r3, [r3, #4]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	f240 80dd 	bls.w	800508c <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77bb      	strb	r3, [r7, #30]
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
 8004ede:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	7a5b      	ldrb	r3, [r3, #9]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <CO_LEDs_process+0x8a>
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e003      	b.n	8004efe <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 8004ef6:	7fbb      	ldrb	r3, [r7, #30]
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	795b      	ldrb	r3, [r3, #5]
 8004f02:	3301      	adds	r3, #1
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	715a      	strb	r2, [r3, #5]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	795b      	ldrb	r3, [r3, #5]
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d010      	beq.n	8004f34 <CO_LEDs_process+0xc8>
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	dc12      	bgt.n	8004f3c <CO_LEDs_process+0xd0>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d002      	beq.n	8004f20 <CO_LEDs_process+0xb4>
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d005      	beq.n	8004f2a <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8004f1e:	e00d      	b.n	8004f3c <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e009      	b.n	8004f3e <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8004f2a:	7fbb      	ldrb	r3, [r7, #30]
 8004f2c:	f043 0304 	orr.w	r3, r3, #4
 8004f30:	77bb      	strb	r3, [r7, #30]
 8004f32:	e004      	b.n	8004f3e <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	715a      	strb	r2, [r3, #5]
 8004f3a:	e000      	b.n	8004f3e <CO_LEDs_process+0xd2>
                default: break;
 8004f3c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	799b      	ldrb	r3, [r3, #6]
 8004f42:	3301      	adds	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	719a      	strb	r2, [r3, #6]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	799b      	ldrb	r3, [r3, #6]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	d821      	bhi.n	8004f98 <CO_LEDs_process+0x12c>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <CO_LEDs_process+0xf0>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f87 	.word	0x08004f87
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f87 	.word	0x08004f87
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004f91 	.word	0x08004f91
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	f043 0308 	orr.w	r3, r3, #8
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e009      	b.n	8004f9a <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8004f86:	7fbb      	ldrb	r3, [r7, #30]
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	77bb      	strb	r3, [r7, #30]
 8004f8e:	e004      	b.n	8004f9a <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	719a      	strb	r2, [r3, #6]
 8004f96:	e000      	b.n	8004f9a <CO_LEDs_process+0x12e>
                default: break;
 8004f98:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	79db      	ldrb	r3, [r3, #7]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	71da      	strb	r2, [r3, #7]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	79db      	ldrb	r3, [r3, #7]
 8004faa:	2b0a      	cmp	r3, #10
 8004fac:	bf8c      	ite	hi
 8004fae:	2201      	movhi	r2, #1
 8004fb0:	2200      	movls	r2, #0
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	d12c      	bne.n	8005012 <CO_LEDs_process+0x1a6>
 8004fb8:	2201      	movs	r2, #1
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2201      	movne	r2, #1
 8004fc8:	2200      	moveq	r2, #0
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d117      	bne.n	8005000 <CO_LEDs_process+0x194>
 8004fd0:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	2201      	movne	r2, #1
 8004fda:	2200      	moveq	r2, #0
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d109      	bne.n	8004ff6 <CO_LEDs_process+0x18a>
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <CO_LEDs_process+0x19e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 8004ff4:	e00d      	b.n	8005012 <CO_LEDs_process+0x1a6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e009      	b.n	8005014 <CO_LEDs_process+0x1a8>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005000:	7fbb      	ldrb	r3, [r7, #30]
 8005002:	f043 0310 	orr.w	r3, r3, #16
 8005006:	77bb      	strb	r3, [r7, #30]
 8005008:	e004      	b.n	8005014 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	71da      	strb	r2, [r3, #7]
 8005010:	e000      	b.n	8005014 <CO_LEDs_process+0x1a8>
                default: break;
 8005012:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	7a1b      	ldrb	r3, [r3, #8]
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	721a      	strb	r2, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	7a1b      	ldrb	r3, [r3, #8]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	bf8c      	ite	hi
 8005028:	2201      	movhi	r2, #1
 800502a:	2200      	movls	r2, #0
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	2a00      	cmp	r2, #0
 8005030:	d137      	bne.n	80050a2 <CO_LEDs_process+0x236>
 8005032:	2201      	movs	r2, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 800503c:	2a00      	cmp	r2, #0
 800503e:	bf14      	ite	ne
 8005040:	2201      	movne	r2, #1
 8005042:	2200      	moveq	r2, #0
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	2a00      	cmp	r2, #0
 8005048:	d117      	bne.n	800507a <CO_LEDs_process+0x20e>
 800504a:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 800504e:	2a00      	cmp	r2, #0
 8005050:	bf14      	ite	ne
 8005052:	2201      	movne	r2, #1
 8005054:	2200      	moveq	r2, #0
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	2a00      	cmp	r2, #0
 800505a:	d109      	bne.n	8005070 <CO_LEDs_process+0x204>
 800505c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <CO_LEDs_process+0x218>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 800506e:	e018      	b.n	80050a2 <CO_LEDs_process+0x236>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8005070:	7ffb      	ldrb	r3, [r7, #31]
 8005072:	f043 0320 	orr.w	r3, r3, #32
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e014      	b.n	80050a4 <CO_LEDs_process+0x238>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 800507a:	7fbb      	ldrb	r3, [r7, #30]
 800507c:	f043 0320 	orr.w	r3, r3, #32
 8005080:	77bb      	strb	r3, [r7, #30]
 8005082:	e00f      	b.n	80050a4 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	721a      	strb	r2, [r3, #8]
 800508a:	e00b      	b.n	80050a4 <CO_LEDs_process+0x238>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	7a5b      	ldrb	r3, [r3, #9]
 8005090:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005094:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	7a9b      	ldrb	r3, [r3, #10]
 800509a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800509e:	77bb      	strb	r3, [r7, #30]
 80050a0:	e000      	b.n	80050a4 <CO_LEDs_process+0x238>
                default: break;
 80050a2:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <CO_LEDs_process+0x248>
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e003      	b.n	80050bc <CO_LEDs_process+0x250>
        else               gr |= CO_LED_flicker;
 80050b4:	7fbb      	ldrb	r3, [r7, #30]
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80050c4:	4293      	cmp	r3, r2
 80050c6:	f63f aee6 	bhi.w	8004e96 <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d077      	beq.n	80051c0 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <CO_LEDs_process+0x270>
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
 80050da:	e032      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 80050dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <CO_LEDs_process+0x282>
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
 80050ec:	e029      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <CO_LEDs_process+0x292>
 80050f4:	7ffb      	ldrb	r3, [r7, #31]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	75fb      	strb	r3, [r7, #23]
 80050fc:	e021      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <CO_LEDs_process+0x2a2>
 8005104:	7ffb      	ldrb	r3, [r7, #31]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e019      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <CO_LEDs_process+0x2b2>
 8005114:	7ffb      	ldrb	r3, [r7, #31]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	75fb      	strb	r3, [r7, #23]
 800511c:	e011      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <CO_LEDs_process+0x2c2>
 8005124:	7ffb      	ldrb	r3, [r7, #31]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	75fb      	strb	r3, [r7, #23]
 800512c:	e009      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <CO_LEDs_process+0x2d2>
 8005134:	7ffb      	ldrb	r3, [r7, #31]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	75fb      	strb	r3, [r7, #23]
 800513c:	e001      	b.n	8005142 <CO_LEDs_process+0x2d6>
        else                                        rd_co = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <CO_LEDs_process+0x2e6>
 8005148:	7fbb      	ldrb	r3, [r7, #30]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	75bb      	strb	r3, [r7, #22]
 8005150:	e022      	b.n	8005198 <CO_LEDs_process+0x32c>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 8005152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <CO_LEDs_process+0x2f6>
 8005158:	7fbb      	ldrb	r3, [r7, #30]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	75bb      	strb	r3, [r7, #22]
 8005160:	e01a      	b.n	8005198 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d104      	bne.n	8005174 <CO_LEDs_process+0x308>
 800516a:	7fbb      	ldrb	r3, [r7, #30]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	75bb      	strb	r3, [r7, #22]
 8005172:	e011      	b.n	8005198 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8005174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005178:	2b7f      	cmp	r3, #127	@ 0x7f
 800517a:	d104      	bne.n	8005186 <CO_LEDs_process+0x31a>
 800517c:	7fbb      	ldrb	r3, [r7, #30]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	75bb      	strb	r3, [r7, #22]
 8005184:	e008      	b.n	8005198 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	2b05      	cmp	r3, #5
 800518c:	d102      	bne.n	8005194 <CO_LEDs_process+0x328>
 800518e:	2301      	movs	r3, #1
 8005190:	75bb      	strb	r3, [r7, #22]
 8005192:	e001      	b.n	8005198 <CO_LEDs_process+0x32c>
        else                                        gr_co = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <CO_LEDs_process+0x33a>
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051a4:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <CO_LEDs_process+0x348>
 80051ac:	7fbb      	ldrb	r3, [r7, #30]
 80051ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051b2:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	7ffa      	ldrb	r2, [r7, #31]
 80051b8:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	7fba      	ldrb	r2, [r7, #30]
 80051be:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 80051c0:	bf00      	nop
 80051c2:	3724      	adds	r7, #36	@ 0x24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b090      	sub	sp, #64	@ 0x40
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80051e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	f040 814c 	bne.w	8005484 <CO_LSSslave_receive+0x2b8>
 80051ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8147 	bne.w	8005484 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 80051f6:	2300      	movs	r3, #0
 80051f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3305      	adds	r3, #5
 80051fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005208:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800520c:	2b04      	cmp	r3, #4
 800520e:	d12c      	bne.n	800526a <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <CO_LSSslave_receive+0x56>
 800521c:	2b01      	cmp	r3, #1
 800521e:	d020      	beq.n	8005262 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005220:	e12a      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d110      	bne.n	800524c <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005230:	2bff      	cmp	r3, #255	@ 0xff
 8005232:	d10b      	bne.n	800524c <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800523a:	2bff      	cmp	r3, #255	@ 0xff
 800523c:	d006      	beq.n	800524c <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005248:	2301      	movs	r3, #1
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	2200      	movs	r2, #0
 8005250:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	3314      	adds	r3, #20
 8005256:	2210      	movs	r2, #16
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f005 fbba 	bl	800a9d4 <memset>
                    break;
 8005260:	e10a      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	2201      	movs	r2, #1
 8005266:	741a      	strb	r2, [r3, #16]
                    break;
 8005268:	e106      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800526a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526c:	7c1b      	ldrb	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 80ee 	bne.w	8005450 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8005274:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005278:	3b40      	subs	r3, #64	@ 0x40
 800527a:	2b11      	cmp	r3, #17
 800527c:	f200 80f7 	bhi.w	800546e <CO_LSSslave_receive+0x2a2>
 8005280:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <CO_LSSslave_receive+0xbc>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052e1 	.word	0x080052e1
 8005290:	080052f1 	.word	0x080052f1
 8005294:	08005301 	.word	0x08005301
 8005298:	0800546f 	.word	0x0800546f
 800529c:	0800546f 	.word	0x0800546f
 80052a0:	0800546f 	.word	0x0800546f
 80052a4:	0800546f 	.word	0x0800546f
 80052a8:	0800546f 	.word	0x0800546f
 80052ac:	0800546f 	.word	0x0800546f
 80052b0:	0800546f 	.word	0x0800546f
 80052b4:	0800546f 	.word	0x0800546f
 80052b8:	0800546f 	.word	0x0800546f
 80052bc:	0800546f 	.word	0x0800546f
 80052c0:	0800546f 	.word	0x0800546f
 80052c4:	0800546f 	.word	0x0800546f
 80052c8:	0800546f 	.word	0x0800546f
 80052cc:	0800535d 	.word	0x0800535d
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d2:	3301      	adds	r3, #1
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	615a      	str	r2, [r3, #20]
                break;
 80052de:	e0cb      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80052e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e2:	3301      	adds	r3, #1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	619a      	str	r2, [r3, #24]
                break;
 80052ee:	e0c3      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	3301      	adds	r3, #1
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	61da      	str	r2, [r3, #28]
                break;
 80052fe:	e0bb      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	3301      	adds	r3, #1
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530c:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	429a      	cmp	r2, r3
 8005318:	f040 80ab 	bne.w	8005472 <CO_LSSslave_receive+0x2a6>
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	429a      	cmp	r2, r3
 8005326:	f040 80a4 	bne.w	8005472 <CO_LSSslave_receive+0x2a6>
 800532a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	429a      	cmp	r2, r3
 8005334:	f040 809d 	bne.w	8005472 <CO_LSSslave_receive+0x2a6>
 8005338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	429a      	cmp	r2, r3
 8005342:	f040 8096 	bne.w	8005472 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	2201      	movs	r2, #1
 800534a:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 800534c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005352:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    request_LSSslave_process = true;
 8005356:	2301      	movs	r3, #1
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                break;
 800535a:	e08a      	b.n	8005472 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800535c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2bff      	cmp	r3, #255	@ 0xff
 8005364:	f040 8087 	bne.w	8005476 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800536e:	2bff      	cmp	r3, #255	@ 0xff
 8005370:	f040 8081 	bne.w	8005476 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	795b      	ldrb	r3, [r3, #5]
 8005378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    uint8_t lssSub = data[6];
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	799b      	ldrb	r3, [r3, #6]
 8005380:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    uint8_t lssNext = data[7];
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	79db      	ldrb	r3, [r3, #7]
 8005388:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 800538c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005390:	2b1f      	cmp	r3, #31
 8005392:	d903      	bls.n	800539c <CO_LSSslave_receive+0x1d0>
 8005394:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d16d      	bne.n	8005478 <CO_LSSslave_receive+0x2ac>
 800539c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d869      	bhi.n	8005478 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80053a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d865      	bhi.n	8005478 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	3301      	adds	r3, #1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
                    ack = false;
 80053b8:	2300      	movs	r3, #0
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 80053bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80053c0:	2b80      	cmp	r3, #128	@ 0x80
 80053c2:	d10d      	bne.n	80053e0 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 80053c4:	2301      	movs	r3, #1
 80053c6:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80053c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        memset(&LSSslave->lssFastscan, 0,
 80053d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d2:	3324      	adds	r3, #36	@ 0x24
 80053d4:	2210      	movs	r2, #16
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f005 fafb 	bl	800a9d4 <memset>
 80053de:	e02c      	b.n	800543a <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053e6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d125      	bne.n	800543a <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 80053ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 80053fc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	405a      	eors	r2, r3
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800540e:	2b00      	cmp	r3, #0
 8005410:	d113      	bne.n	800543a <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005412:	2301      	movs	r3, #1
 8005414:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = lssNext;
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800541c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005420:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <CO_LSSslave_receive+0x26e>
 8005428:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800542c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005430:	429a      	cmp	r2, r3
 8005432:	d202      	bcs.n	800543a <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005436:	2201      	movs	r2, #1
 8005438:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 800543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01a      	beq.n	8005476 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005442:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 800544a:	2301      	movs	r3, #1
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                    }
                }
                break;
 800544e:	e012      	b.n	8005476 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005452:	3349      	adds	r3, #73	@ 0x49
 8005454:	2208      	movs	r2, #8
 8005456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005458:	4618      	mov	r0, r3
 800545a:	f005 fb46 	bl	800aaea <memcpy>
            LSSslave->service = cs;
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005464:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 8005468:	2301      	movs	r3, #1
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546c:	e004      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
                break;
 800546e:	bf00      	nop
 8005470:	e002      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
                break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <CO_LSSslave_receive+0x2ac>
                break;
 8005476:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 800547e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005480:	2201      	movs	r2, #1
 8005482:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005484:	bf00      	nop
 8005486:	3740      	adds	r7, #64	@ 0x40
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af04      	add	r7, sp, #16
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d018      	beq.n	80054d6 <CO_LSSslave_init+0x4a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d015      	beq.n	80054d6 <CO_LSSslave_init+0x4a>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d012      	beq.n	80054d6 <CO_LSSslave_init+0x4a>
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00f      	beq.n	80054d6 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d004      	beq.n	80054ce <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da06      	bge.n	80054dc <CO_LSSslave_init+0x50>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2bff      	cmp	r3, #255	@ 0xff
 80054d4:	d002      	beq.n	80054dc <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
 80054da:	e046      	b.n	800556a <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 80054dc:	2274      	movs	r2, #116	@ 0x74
 80054de:	2100      	movs	r1, #0
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f005 fa77 	bl	800a9d4 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2210      	movs	r2, #16
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f005 fafc 	bl	800aaea <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 800551c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800551e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005520:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <CO_LSSslave_init+0xe8>)
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005530:	6a38      	ldr	r0, [r7, #32]
 8005532:	f001 fa41 	bl	80069b8 <CO_CANrxBufferInit>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800553e:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005540:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005542:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005544:	2300      	movs	r3, #0
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	2308      	movs	r3, #8
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005550:	f001 fa90 	bl	8006a74 <CO_CANtxBufferInit>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	671a      	str	r2, [r3, #112]	@ 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005562:	23ff      	movs	r3, #255	@ 0xff
 8005564:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	080051cd 	.word	0x080051cd

08005578 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	@ 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8202 	beq.w	8005992 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005596:	3305      	adds	r3, #5
 8005598:	2208      	movs	r2, #8
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f005 fa19 	bl	800a9d4 <memset>

        switch (LSSslave->service) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80055a8:	3b04      	subs	r3, #4
 80055aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80055ac:	f200 81dc 	bhi.w	8005968 <CO_LSSslave_process+0x3f0>
 80055b0:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <CO_LSSslave_process+0x40>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	08005725 	.word	0x08005725
 80055bc:	08005969 	.word	0x08005969
 80055c0:	08005969 	.word	0x08005969
 80055c4:	08005969 	.word	0x08005969
 80055c8:	08005969 	.word	0x08005969
 80055cc:	08005969 	.word	0x08005969
 80055d0:	08005969 	.word	0x08005969
 80055d4:	08005969 	.word	0x08005969
 80055d8:	08005969 	.word	0x08005969
 80055dc:	08005969 	.word	0x08005969
 80055e0:	08005969 	.word	0x08005969
 80055e4:	08005969 	.word	0x08005969
 80055e8:	08005969 	.word	0x08005969
 80055ec:	08005739 	.word	0x08005739
 80055f0:	08005969 	.word	0x08005969
 80055f4:	08005787 	.word	0x08005787
 80055f8:	08005969 	.word	0x08005969
 80055fc:	08005823 	.word	0x08005823
 8005600:	08005969 	.word	0x08005969
 8005604:	0800585f 	.word	0x0800585f
 8005608:	08005969 	.word	0x08005969
 800560c:	08005969 	.word	0x08005969
 8005610:	08005969 	.word	0x08005969
 8005614:	08005969 	.word	0x08005969
 8005618:	08005969 	.word	0x08005969
 800561c:	08005969 	.word	0x08005969
 8005620:	08005969 	.word	0x08005969
 8005624:	08005969 	.word	0x08005969
 8005628:	08005969 	.word	0x08005969
 800562c:	08005969 	.word	0x08005969
 8005630:	08005969 	.word	0x08005969
 8005634:	08005969 	.word	0x08005969
 8005638:	08005969 	.word	0x08005969
 800563c:	08005969 	.word	0x08005969
 8005640:	08005969 	.word	0x08005969
 8005644:	08005969 	.word	0x08005969
 8005648:	08005969 	.word	0x08005969
 800564c:	08005969 	.word	0x08005969
 8005650:	08005969 	.word	0x08005969
 8005654:	08005969 	.word	0x08005969
 8005658:	08005969 	.word	0x08005969
 800565c:	08005969 	.word	0x08005969
 8005660:	08005969 	.word	0x08005969
 8005664:	08005969 	.word	0x08005969
 8005668:	08005969 	.word	0x08005969
 800566c:	08005969 	.word	0x08005969
 8005670:	08005969 	.word	0x08005969
 8005674:	08005969 	.word	0x08005969
 8005678:	08005969 	.word	0x08005969
 800567c:	08005969 	.word	0x08005969
 8005680:	08005969 	.word	0x08005969
 8005684:	08005969 	.word	0x08005969
 8005688:	08005969 	.word	0x08005969
 800568c:	08005969 	.word	0x08005969
 8005690:	08005969 	.word	0x08005969
 8005694:	08005969 	.word	0x08005969
 8005698:	08005969 	.word	0x08005969
 800569c:	08005969 	.word	0x08005969
 80056a0:	08005969 	.word	0x08005969
 80056a4:	08005969 	.word	0x08005969
 80056a8:	08005969 	.word	0x08005969
 80056ac:	08005969 	.word	0x08005969
 80056b0:	08005969 	.word	0x08005969
 80056b4:	0800572b 	.word	0x0800572b
 80056b8:	08005969 	.word	0x08005969
 80056bc:	08005969 	.word	0x08005969
 80056c0:	08005969 	.word	0x08005969
 80056c4:	08005969 	.word	0x08005969
 80056c8:	08005969 	.word	0x08005969
 80056cc:	08005969 	.word	0x08005969
 80056d0:	08005969 	.word	0x08005969
 80056d4:	08005969 	.word	0x08005969
 80056d8:	08005969 	.word	0x08005969
 80056dc:	08005969 	.word	0x08005969
 80056e0:	08005969 	.word	0x08005969
 80056e4:	08005969 	.word	0x08005969
 80056e8:	08005969 	.word	0x08005969
 80056ec:	0800595b 	.word	0x0800595b
 80056f0:	08005969 	.word	0x08005969
 80056f4:	08005969 	.word	0x08005969
 80056f8:	08005969 	.word	0x08005969
 80056fc:	08005969 	.word	0x08005969
 8005700:	08005969 	.word	0x08005969
 8005704:	08005969 	.word	0x08005969
 8005708:	08005969 	.word	0x08005969
 800570c:	08005969 	.word	0x08005969
 8005710:	080058b5 	.word	0x080058b5
 8005714:	080058d7 	.word	0x080058d7
 8005718:	080058f9 	.word	0x080058f9
 800571c:	0800591b 	.word	0x0800591b
 8005720:	0800593d 	.word	0x0800593d
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8005724:	2301      	movs	r3, #1
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005728:	e125      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	2244      	movs	r2, #68	@ 0x44
 8005730:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005732:	2301      	movs	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005736:	e11e      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800573e:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <CO_LSSslave_process+0x1dc>
 800574c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da02      	bge.n	800575a <CO_LSSslave_process+0x1e2>
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2bff      	cmp	r3, #255	@ 0xff
 8005758:	d104      	bne.n	8005764 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575e:	7cfa      	ldrb	r2, [r7, #19]
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e002      	b.n	800576a <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005774:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800577e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8005780:	2301      	movs	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005784:	e0f7      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80ee 	beq.w	800596c <CO_LSSslave_process+0x3f4>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005796:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800579e:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80057ac:	7f7b      	ldrb	r3, [r7, #29]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d121      	bne.n	80057f6 <CO_LSSslave_process+0x27e>
 80057b2:	7f3b      	ldrb	r3, [r7, #28]
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d01e      	beq.n	80057f6 <CO_LSSslave_process+0x27e>
 80057b8:	7f3b      	ldrb	r3, [r7, #28]
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d81b      	bhi.n	80057f6 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 80057be:	7f3b      	ldrb	r3, [r7, #28]
 80057c0:	4a76      	ldr	r2, [pc, #472]	@ (800599c <CO_LSSslave_process+0x424>)
 80057c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c6:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80057d0:	8b79      	ldrh	r1, [r7, #26]
 80057d2:	4610      	mov	r0, r2
 80057d4:	4798      	blx	r3
 80057d6:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e2:	8b7a      	ldrh	r2, [r7, #26]
 80057e4:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80057e6:	e009      	b.n	80057fc <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80057e8:	23ff      	movs	r3, #255	@ 0xff
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80057f4:	e002      	b.n	80057fc <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005806:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005810:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005816:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800581a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 800581c:	2301      	movs	r3, #1
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005820:	e0a9      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80a2 	beq.w	8005970 <CO_LSSslave_process+0x3f8>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 809f 	beq.w	8005974 <CO_LSSslave_process+0x3fc>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005846:	461a      	mov	r2, r3
 8005848:	8bfb      	ldrh	r3, [r7, #30]
 800584a:	4313      	orrs	r3, r2
 800584c:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8005856:	8bf9      	ldrh	r1, [r7, #30]
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 800585c:	e08a      	b.n	8005974 <CO_LSSslave_process+0x3fc>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <CO_LSSslave_process+0x2fc>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005872:	e011      	b.n	8005898 <CO_LSSslave_process+0x320>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
                                               *LSSslave->pendingNodeID,
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005880:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005886:	8812      	ldrh	r2, [r2, #0]
 8005888:	4798      	blx	r3
 800588a:	6238      	str	r0, [r7, #32]
                if (!result) {
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <CO_LSSslave_process+0x320>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8005892:	2302      	movs	r3, #2
 8005894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80058a2:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80058ac:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80058ae:	2301      	movs	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058b2:	e060      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80058be:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	3306      	adds	r3, #6
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80058d0:	2301      	movs	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058d4:	e04f      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80058e0:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ec:	3306      	adds	r3, #6
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80058f2:	2301      	movs	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058f6:	e03e      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005902:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590e:	3306      	adds	r3, #6
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005914:	2301      	movs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005918:	e02d      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005924:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005930:	3306      	adds	r3, #6
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005936:	2301      	movs	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800593a:	e01c      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005946:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8005952:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8005954:	2301      	movs	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005958:	e00d      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595e:	224f      	movs	r2, #79	@ 0x4f
 8005960:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005962:	2301      	movs	r3, #1
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005966:	e006      	b.n	8005976 <CO_LSSslave_process+0x3fe>
        }
        default: {
            break;
 8005968:	bf00      	nop
 800596a:	e004      	b.n	8005976 <CO_LSSslave_process+0x3fe>
                break;
 800596c:	bf00      	nop
 800596e:	e002      	b.n	8005976 <CO_LSSslave_process+0x3fe>
                break;
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <CO_LSSslave_process+0x3fe>
            break;
 8005974:	bf00      	nop
        }
        }

        if(CANsend) {
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <CO_LSSslave_process+0x414>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f001 f8ee 	bl	8006b68 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005994:	4618      	mov	r0, r3
 8005996:	3730      	adds	r7, #48	@ 0x30
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	0800b488 	.word	0x0800b488

080059a0 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	2201      	movs	r2, #1
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b09      	cmp	r3, #9
 80059ca:	d807      	bhi.n	80059dc <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	5cd2      	ldrb	r2, [r2, r3]
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	4013      	ands	r3, r2
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <CO_isError+0x40>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <CO_isError+0x42>
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <CO_getErrorRegister+0x1e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <CO_getErrorRegister+0x1e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	e000      	b.n	8005a0e <CO_getErrorRegister+0x20>
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <CO_NMT_getInternalState+0x16>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8005a2e:	e000      	b.n	8005a32 <CO_NMT_getInternalState+0x18>
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <CO_LSSslave_getState+0x14>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c1b      	ldrb	r3, [r3, #16]
 8005a50:	e000      	b.n	8005a54 <CO_LSSslave_getState+0x16>
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8005a76:	2140      	movs	r1, #64	@ 0x40
 8005a78:	2001      	movs	r0, #1
 8005a7a:	f004 fbf5 	bl	800a268 <calloc>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8101 	beq.w	8005c8c <CO_new+0x22c>
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3340      	adds	r3, #64	@ 0x40
 8005a8e:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005a90:	212c      	movs	r1, #44	@ 0x2c
 8005a92:	2001      	movs	r0, #1
 8005a94:	f004 fbe8 	bl	800a268 <calloc>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	611a      	str	r2, [r3, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80f1 	beq.w	8005c8c <CO_new+0x22c>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	332c      	adds	r3, #44	@ 0x2c
 8005aae:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8005ab4:	2130      	movs	r1, #48	@ 0x30
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f004 fbd6 	bl	800a268 <calloc>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	615a      	str	r2, [r3, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80df 	beq.w	8005c8c <CO_new+0x22c>
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3330      	adds	r3, #48	@ 0x30
 8005ad2:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	2110      	movs	r1, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 fbc5 	bl	800a268 <calloc>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	619a      	str	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80ce 	beq.w	8005c8c <CO_new+0x22c>
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005afa:	2150      	movs	r1, #80	@ 0x50
 8005afc:	2001      	movs	r0, #1
 8005afe:	f004 fbb3 	bl	800a268 <calloc>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	61da      	str	r2, [r3, #28]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80bc 	beq.w	8005c8c <CO_new+0x22c>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	3350      	adds	r3, #80	@ 0x50
 8005b18:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8005b1a:	2311      	movs	r3, #17
 8005b1c:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8005b1e:	7abb      	ldrb	r3, [r7, #10]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d912      	bls.n	8005b4a <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005b24:	7abb      	ldrb	r3, [r7, #10]
 8005b26:	2108      	movs	r1, #8
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f004 fb9d 	bl	800a268 <calloc>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80a6 	beq.w	8005c8c <CO_new+0x22c>
 8005b40:	7abb      	ldrb	r3, [r7, #10]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8005b4a:	21a8      	movs	r1, #168	@ 0xa8
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f004 fb8b 	bl	800a268 <calloc>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8094 	beq.w	8005c8c <CO_new+0x22c>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	33a8      	adds	r3, #168	@ 0xa8
 8005b68:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8005b6a:	212c      	movs	r1, #44	@ 0x2c
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	f004 fb7b 	bl	800a268 <calloc>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8084 	beq.w	8005c8c <CO_new+0x22c>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	332c      	adds	r3, #44	@ 0x2c
 8005b88:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005b8a:	2160      	movs	r1, #96	@ 0x60
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f004 fb6b 	bl	800a268 <calloc>
 8005b92:	4603      	mov	r3, r0
 8005b94:	461a      	mov	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d074      	beq.n	8005c8c <CO_new+0x22c>
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3360      	adds	r3, #96	@ 0x60
 8005ba6:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8005ba8:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8005bac:	2004      	movs	r0, #4
 8005bae:	f004 fb5b 	bl	800a268 <calloc>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d064      	beq.n	8005c8c <CO_new+0x22c>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8005bc8:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8005bca:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8005bce:	2004      	movs	r0, #4
 8005bd0:	f004 fb4a 	bl	800a268 <calloc>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d053      	beq.n	8005c8c <CO_new+0x22c>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8005bea:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8005bec:	210c      	movs	r1, #12
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f004 fb3a 	bl	800a268 <calloc>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d043      	beq.n	8005c8c <CO_new+0x22c>
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	330c      	adds	r3, #12
 8005c08:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8005c0a:	2174      	movs	r1, #116	@ 0x74
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f004 fb2b 	bl	800a268 <calloc>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d034      	beq.n	8005c8c <CO_new+0x22c>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3374      	adds	r3, #116	@ 0x74
 8005c26:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8005c28:	2138      	movs	r1, #56	@ 0x38
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f004 fb1c 	bl	800a268 <calloc>
 8005c30:	4603      	mov	r3, r0
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d025      	beq.n	8005c8c <CO_new+0x22c>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3338      	adds	r3, #56	@ 0x38
 8005c44:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005c46:	210c      	movs	r1, #12
 8005c48:	2011      	movs	r0, #17
 8005c4a:	f004 fb0d 	bl	800a268 <calloc>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <CO_new+0x22c>
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	33cc      	adds	r3, #204	@ 0xcc
 8005c62:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8005c64:	2118      	movs	r1, #24
 8005c66:	2009      	movs	r0, #9
 8005c68:	f004 fafe 	bl	800a268 <calloc>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <CO_new+0x22c>
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	33d8      	adds	r3, #216	@ 0xd8
 8005c80:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <CO_new+0x238>
        CO_delete(co);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f80b 	bl	8005cae <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <CO_new+0x244>
        *heapMemoryUsed = mem;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8005ca4:	697b      	ldr	r3, [r7, #20]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <CO_delete>:

void CO_delete(CO_t *co) {
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d053      	beq.n	8005d64 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fe63 	bl	800698c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f004 fae8 	bl	800a2a0 <free>
    CO_free(co->CANrx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f004 fae3 	bl	800a2a0 <free>
    CO_free(co->CANmodule);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f004 fade 	bl	800a2a0 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f004 fad9 	bl	800a2a0 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f004 fad4 	bl	800a2a0 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f004 facf 	bl	800a2a0 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	4618      	mov	r0, r3
 8005d08:	f004 faca 	bl	800a2a0 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4618      	mov	r0, r3
 8005d12:	f004 fac5 	bl	800a2a0 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f004 fac0 	bl	800a2a0 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 fabb 	bl	800a2a0 <free>

    /* Emergency */
    CO_free(co->em);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f004 fab6 	bl	800a2a0 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f004 fab1 	bl	800a2a0 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f004 faac 	bl	800a2a0 <free>
    CO_free(co->HBcons);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f004 faa7 	bl	800a2a0 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f004 faa2 	bl	800a2a0 <free>

    /* CANopen object */
    CO_free(co);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f004 fa9f 	bl	800a2a0 <free>
 8005d62:	e000      	b.n	8005d66 <CO_delete+0xb8>
        return;
 8005d64:	bf00      	nop
}
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	@ 0x28
 8005d70:	af04      	add	r7, sp, #16
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <CO_CANinit+0x1a>
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	e01a      	b.n	8005dbc <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8005d8e:	68b8      	ldr	r0, [r7, #8]
 8005d90:	f000 fd18 	bl	80067c4 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6858      	ldr	r0, [r3, #4]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6899      	ldr	r1, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	2209      	movs	r2, #9
 8005da6:	9201      	str	r2, [sp, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	2311      	movs	r3, #17
 8005dac:	460a      	mov	r2, r1
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	f000 fd30 	bl	8006814 <CO_CANmodule_init>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8005db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08c      	sub	sp, #48	@ 0x30
 8005dc8:	af06      	add	r7, sp, #24
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	e01a      	b.n	8005e14 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	6852      	ldr	r2, [r2, #4]
 8005dea:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 8005dee:	9105      	str	r1, [sp, #20]
 8005df0:	2108      	movs	r1, #8
 8005df2:	9104      	str	r1, [sp, #16]
 8005df4:	9203      	str	r2, [sp, #12]
 8005df6:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8005dfa:	9202      	str	r2, [sp, #8]
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	9201      	str	r2, [sp, #4]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	f7ff fb40 	bl	800548c <CO_LSSslave_init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8005e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	b091      	sub	sp, #68	@ 0x44
 8005e20:	af0a      	add	r7, sp, #40	@ 0x28
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	e134      	b.n	80060a0 <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <CO_CANopenInit+0x26>
        em = co->em;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8005e48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005e4c:	2bff      	cmp	r3, #255	@ 0xff
 8005e4e:	d103      	bne.n	8005e58 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e00a      	b.n	8005e6e <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8005e58:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <CO_CANopenInit+0x4c>
 8005e60:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	da02      	bge.n	8005e6e <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6c:	e118      	b.n	80060a0 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe ffe2 	bl	8004e3c <CO_LEDs_init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8005e7c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <CO_CANopenInit+0x6e>
 8005e84:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005e88:	e10a      	b.n	80060a0 <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8005e92:	f06f 0312 	mvn.w	r3, #18
 8005e96:	e103      	b.n	80060a0 <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	69d8      	ldr	r0, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8005ea0:	4b81      	ldr	r3, [pc, #516]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8005eae:	4b7e      	ldr	r3, [pc, #504]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8005eb4:	336c      	adds	r3, #108	@ 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8005eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8005ebc:	3218      	adds	r2, #24
 8005ebe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005ec0:	9105      	str	r1, [sp, #20]
 8005ec2:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8005ec6:	9104      	str	r1, [sp, #16]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	9202      	str	r2, [sp, #8]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	2311      	movs	r3, #17
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4633      	mov	r3, r6
 8005ed6:	462a      	mov	r2, r5
 8005ed8:	4621      	mov	r1, r4
 8005eda:	f7fa fca5 	bl	8000828 <CO_EM_init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8005ee2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <CO_CANopenInit+0xd4>
 8005eea:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005eee:	e0d7      	b.n	80060a0 <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8005ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8005efa:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	6852      	ldr	r2, [r2, #4]
 8005f06:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8005f0a:	b289      	uxth	r1, r1
 8005f0c:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 8005f10:	b289      	uxth	r1, r1
 8005f12:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 8005f16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005f18:	9008      	str	r0, [sp, #32]
 8005f1a:	9107      	str	r1, [sp, #28]
 8005f1c:	2107      	movs	r1, #7
 8005f1e:	9106      	str	r1, [sp, #24]
 8005f20:	9205      	str	r2, [sp, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	9204      	str	r2, [sp, #16]
 8005f26:	2200      	movs	r2, #0
 8005f28:	9203      	str	r2, [sp, #12]
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4633      	mov	r3, r6
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7fb fb04 	bl	8001548 <CO_NMT_init>
 8005f40:	4603      	mov	r3, r0
 8005f42:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8005f44:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <CO_CANopenInit+0x136>
 8005f4c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f50:	e0a6      	b.n	80060a0 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6958      	ldr	r0, [r3, #20]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8005f5a:	4b53      	ldr	r3, [pc, #332]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8005f60:	3384      	adds	r3, #132	@ 0x84
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	6852      	ldr	r2, [r2, #4]
 8005f66:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005f68:	9103      	str	r1, [sp, #12]
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	9102      	str	r1, [sp, #8]
 8005f6e:	9201      	str	r2, [sp, #4]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	2308      	movs	r3, #8
 8005f74:	4622      	mov	r2, r4
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	f7fa ffea 	bl	8000f50 <CO_HBconsumer_init>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8005f80:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <CO_CANopenInit+0x172>
 8005f88:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f8c:	e088      	b.n	80060a0 <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8005f8e:	4b46      	ldr	r3, [pc, #280]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	33b4      	adds	r3, #180	@ 0xb4
 8005f96:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005f98:	2300      	movs	r3, #0
 8005f9a:	827b      	strh	r3, [r7, #18]
 8005f9c:	e033      	b.n	8006006 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fa2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fa6:	21a8      	movs	r1, #168	@ 0xa8
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	18d6      	adds	r6, r2, r3
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	f102 030c 	add.w	r3, r2, #12
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	8a79      	ldrh	r1, [r7, #18]
 8005fbc:	3107      	adds	r1, #7
 8005fbe:	b289      	uxth	r1, r1
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	6840      	ldr	r0, [r0, #4]
 8005fc4:	8a7c      	ldrh	r4, [r7, #18]
 8005fc6:	3406      	adds	r4, #6
 8005fc8:	b2a4      	uxth	r4, r4
 8005fca:	f897 c048 	ldrb.w	ip, [r7, #72]	@ 0x48
 8005fce:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8005fd0:	9505      	str	r5, [sp, #20]
 8005fd2:	9404      	str	r4, [sp, #16]
 8005fd4:	9003      	str	r0, [sp, #12]
 8005fd6:	9102      	str	r1, [sp, #8]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4663      	mov	r3, ip
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7fd fa46 	bl	8003474 <CO_SDOserver_init>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8005fec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <CO_CANopenInit+0x1de>
 8005ff4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ff8:	e052      	b.n	80060a0 <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005ffa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3301      	adds	r3, #1
 8006002:	b29b      	uxth	r3, r3
 8006004:	827b      	strh	r3, [r7, #18]
 8006006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800600a:	2b00      	cmp	r3, #0
 800600c:	ddc7      	ble.n	8005f9e <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a98      	ldr	r0, [r3, #40]	@ 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8006012:	4b25      	ldr	r3, [pc, #148]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006018:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2302      	movs	r3, #2
 8006026:	f7fe fe13 	bl	8004c50 <CO_TIME_init>
 800602a:	4603      	mov	r3, r0
 800602c:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800602e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <CO_CANopenInit+0x220>
 8006036:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800603a:	e031      	b.n	80060a0 <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006046:	f103 0624 	add.w	r6, r3, #36	@ 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800604a:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <CO_CANopenInit+0x28c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006050:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8006054:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <CO_CANopenInit+0x28c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800605a:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800605c:	4a12      	ldr	r2, [pc, #72]	@ (80060a8 <CO_CANopenInit+0x28c>)
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8006062:	32a8      	adds	r2, #168	@ 0xa8
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	6849      	ldr	r1, [r1, #4]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	6840      	ldr	r0, [r0, #4]
 800606c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800606e:	9406      	str	r4, [sp, #24]
 8006070:	2400      	movs	r4, #0
 8006072:	9405      	str	r4, [sp, #20]
 8006074:	9004      	str	r0, [sp, #16]
 8006076:	2001      	movs	r0, #1
 8006078:	9003      	str	r0, [sp, #12]
 800607a:	9102      	str	r1, [sp, #8]
 800607c:	9201      	str	r2, [sp, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4663      	mov	r3, ip
 8006082:	4632      	mov	r2, r6
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4628      	mov	r0, r5
 8006088:	f7fe fbd4 	bl	8004834 <CO_SYNC_init>
 800608c:	4603      	mov	r3, r0
 800608e:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8006090:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <CO_CANopenInit+0x282>
 8006098:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800609c:	e000      	b.n	80060a0 <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a8:	200003cc 	.word	0x200003cc

080060ac <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b093      	sub	sp, #76	@ 0x4c
 80060b0:	af06      	add	r7, sp, #24
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	e0c3      	b.n	800624e <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <CO_CANopenInitPDO+0x30>
 80060cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db03      	blt.n	80060dc <CO_CANopenInitPDO+0x30>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <CO_CANopenInitPDO+0x3e>
 80060e4:	f06f 0312 	mvn.w	r3, #18
 80060e8:	e0b1      	b.n	800624e <CO_CANopenInitPDO+0x1a2>
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	e0ae      	b.n	800624e <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 80060f0:	4b59      	ldr	r3, [pc, #356]	@ (8006258 <CO_CANopenInitPDO+0x1ac>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	33cc      	adds	r3, #204	@ 0xcc
 80060f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80060fa:	4b57      	ldr	r3, [pc, #348]	@ (8006258 <CO_CANopenInitPDO+0x1ac>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	33fc      	adds	r3, #252	@ 0xfc
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006104:	2300      	movs	r3, #0
 8006106:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006108:	e044      	b.n	8006194 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800610e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006112:	2b03      	cmp	r3, #3
 8006114:	dc09      	bgt.n	800612a <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006116:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800611a:	3302      	adds	r3, #2
 800611c:	b29b      	uxth	r3, r3
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	b29a      	uxth	r2, r3
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4413      	add	r3, r2
 8006128:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800612e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006132:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	18d5      	adds	r5, r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	f103 020c 	add.w	r2, r3, #12
 8006146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800614a:	f102 010c 	add.w	r1, r2, #12
 800614e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	6849      	ldr	r1, [r1, #4]
 8006154:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8006156:	3003      	adds	r0, #3
 8006158:	b280      	uxth	r0, r0
 800615a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800615c:	9405      	str	r4, [sp, #20]
 800615e:	9004      	str	r0, [sp, #16]
 8006160:	9103      	str	r1, [sp, #12]
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4633      	mov	r3, r6
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4628      	mov	r0, r5
 8006172:	f7fc fb2f 	bl	80027d4 <CO_RPDO_init>
 8006176:	4603      	mov	r3, r0
 8006178:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 800617a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <CO_CANopenInitPDO+0xdc>
 8006182:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006186:	e062      	b.n	800624e <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006188:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800618c:	b29b      	uxth	r3, r3
 800618e:	3301      	adds	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006194:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006198:	2b03      	cmp	r3, #3
 800619a:	ddb6      	ble.n	800610a <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 800619c:	4b2e      	ldr	r3, [pc, #184]	@ (8006258 <CO_CANopenInitPDO+0x1ac>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80061a6:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80061a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006258 <CO_CANopenInitPDO+0x1ac>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80061b2:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80061b4:	2300      	movs	r3, #0
 80061b6:	837b      	strh	r3, [r7, #26]
 80061b8:	e044      	b.n	8006244 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80061be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	dc09      	bgt.n	80061da <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 80061c6:	8b7b      	ldrh	r3, [r7, #26]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80061d8:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061e2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	18d5      	adds	r5, r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f103 020c 	add.w	r2, r3, #12
 80061f6:	623a      	str	r2, [r7, #32]
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	f102 010c 	add.w	r1, r2, #12
 80061fe:	61f9      	str	r1, [r7, #28]
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	6849      	ldr	r1, [r1, #4]
 8006204:	8b78      	ldrh	r0, [r7, #26]
 8006206:	3002      	adds	r0, #2
 8006208:	b280      	uxth	r0, r0
 800620a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800620c:	9405      	str	r4, [sp, #20]
 800620e:	9004      	str	r0, [sp, #16]
 8006210:	9103      	str	r1, [sp, #12]
 8006212:	9202      	str	r2, [sp, #8]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	8b3b      	ldrh	r3, [r7, #24]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4633      	mov	r3, r6
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4628      	mov	r0, r5
 8006222:	f7fc fd6f 	bl	8002d04 <CO_TPDO_init>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 800622a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <CO_CANopenInitPDO+0x18c>
 8006232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006236:	e00a      	b.n	800624e <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006238:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800623c:	b29b      	uxth	r3, r3
 800623e:	3301      	adds	r3, #1
 8006240:	b29b      	uxth	r3, r3
 8006242:	837b      	strh	r3, [r7, #26]
 8006244:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006248:	2b03      	cmp	r3, #3
 800624a:	ddb6      	ble.n	80061ba <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3734      	adds	r7, #52	@ 0x34
 8006252:	46bd      	mov	sp, r7
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	bf00      	nop
 8006258:	200003cc 	.word	0x200003cc

0800625c <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625e:	b097      	sub	sp, #92	@ 0x5c
 8006260:	af08      	add	r7, sp, #32
 8006262:	61f8      	str	r0, [r7, #28]
 8006264:	61b9      	str	r1, [r7, #24]
 8006266:	617a      	str	r2, [r7, #20]
 8006268:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fbd0 	bl	8005a1a <CO_NMT_getInternalState>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006280:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8006284:	2b7f      	cmp	r3, #127	@ 0x7f
 8006286:	d003      	beq.n	8006290 <CO_process+0x34>
 8006288:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800628c:	2b05      	cmp	r3, #5
 800628e:	d101      	bne.n	8006294 <CO_process+0x38>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <CO_process+0x3a>
 8006294:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006296:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fca6 	bl	8006bee <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff f966 	bl	8005578 <CO_LSSslave_process>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	8a5b      	ldrh	r3, [r3, #18]
 80062c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    bool_t LSSslave_configuration = false;
 80062c6:	2300      	movs	r3, #0
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fbb5 	bl	8005a3e <CO_LSSslave_getState>
 80062d4:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 80062da:	2301      	movs	r3, #1
 80062dc:	633b      	str	r3, [r7, #48]	@ 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <CO_process+0x92>
 80062e8:	f997 4021 	ldrsb.w	r4, [r7, #33]	@ 0x21
 80062ec:	e000      	b.n	80062f0 <CO_process+0x94>
 80062ee:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 80062f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062f2:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8006302:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006304:	f240 3303 	movw	r3, #771	@ 0x303
 8006308:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf14      	ite	ne
 800630e:	2301      	movne	r3, #1
 8006310:	2300      	moveq	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	2118      	movs	r1, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fb3c 	bl	80059a0 <CO_isError>
 8006328:	4605      	mov	r5, r0
 800632a:	e000      	b.n	800632e <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 800632c:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d113      	bne.n	800635c <CO_process+0x100>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	211b      	movs	r1, #27
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fb30 	bl	80059a0 <CO_isError>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d108      	bne.n	8006358 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	211c      	movs	r1, #28
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fb27 	bl	80059a0 <CO_isError>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <CO_process+0x102>
 800635c:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 800635e:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fb42 	bl	80059ee <CO_getErrorRegister>
 800636a:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	2300      	movs	r3, #0
 800637e:	9306      	str	r3, [sp, #24]
 8006380:	9205      	str	r2, [sp, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	9503      	str	r5, [sp, #12]
 8006388:	2300      	movs	r3, #0
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	4622      	mov	r2, r4
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	4630      	mov	r0, r6
 800639c:	f7fe fd66 	bl	8004e6c <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <CO_process+0x152>
        return reset;
 80063a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063ac:	e047      	b.n	800643e <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	69d8      	ldr	r0, [r3, #28]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b8:	f7fa fb16 	bl	80009e8 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	6918      	ldr	r0, [r3, #16]
 80063c0:	f107 0121 	add.w	r1, r7, #33	@ 0x21
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	f7fb f97c 	bl	80016c4 <CO_NMT_process>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80063d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 80063d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d8:	d003      	beq.n	80063e2 <CO_process+0x186>
 80063da:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d101      	bne.n	80063e6 <CO_process+0x18a>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <CO_process+0x18c>
 80063e6:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80063f0:	e011      	b.n	8006416 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063fa:	21a8      	movs	r1, #168	@ 0xa8
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	18d0      	adds	r0, r2, r3
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006408:	f7fd fb2a 	bl	8003a60 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800640c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006410:	3301      	adds	r3, #1
 8006412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0e9      	beq.n	80063f2 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	6958      	ldr	r0, [r3, #20]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006428:	f7fa fed6 	bl	80011d8 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fc8b 	bl	8004d50 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 800643a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800643e:	4618      	mov	r0, r3
 8006440:	373c      	adds	r7, #60	@ 0x3c
 8006442:	46bd      	mov	sp, r7
 8006444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006448 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006450:	4a13      	ldr	r2, [pc, #76]	@ (80064a0 <canopen_app_init+0x58>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fafd 	bl	8005a60 <CO_new>
 8006466:	4603      	mov	r3, r0
 8006468:	4a0e      	ldr	r2, [pc, #56]	@ (80064a4 <canopen_app_init+0x5c>)
 800646a:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <canopen_app_init+0x5c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006474:	480c      	ldr	r0, [pc, #48]	@ (80064a8 <canopen_app_init+0x60>)
 8006476:	f004 f9b3 	bl	800a7e0 <puts>
        return 1;
 800647a:	2301      	movs	r3, #1
 800647c:	e00c      	b.n	8006498 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4619      	mov	r1, r3
 8006482:	480a      	ldr	r0, [pc, #40]	@ (80064ac <canopen_app_init+0x64>)
 8006484:	f004 f944 	bl	800a710 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006488:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <canopen_app_init+0x58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <canopen_app_init+0x5c>)
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006492:	f000 f80d 	bl	80064b0 <canopen_app_resetCommunication>
    return 0;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000454 	.word	0x20000454
 80064a4:	20000458 	.word	0x20000458
 80064a8:	0800b258 	.word	0x0800b258
 80064ac:	0800b278 	.word	0x0800b278

080064b0 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b08f      	sub	sp, #60	@ 0x3c
 80064b4:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80064b6:	487d      	ldr	r0, [pc, #500]	@ (80066ac <canopen_app_resetCommunication+0x1fc>)
 80064b8:	f004 f992 	bl	800a7e0 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80064bc:	4b7c      	ldr	r3, [pc, #496]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80064c6:	4b7b      	ldr	r3, [pc, #492]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f97a 	bl	80067c4 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80064d0:	4b77      	ldr	r3, [pc, #476]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fa58 	bl	800698c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80064dc:	4b74      	ldr	r3, [pc, #464]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a74      	ldr	r2, [pc, #464]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 80064e2:	6811      	ldr	r1, [r2, #0]
 80064e4:	2200      	movs	r2, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff fc40 	bl	8005d6c <CO_CANinit>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b71      	ldr	r3, [pc, #452]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80064f2:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80064f4:	4b70      	ldr	r3, [pc, #448]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80064f6:	f993 3000 	ldrsb.w	r3, [r3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80064fe:	4b6e      	ldr	r3, [pc, #440]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 8006500:	f993 3000 	ldrsb.w	r3, [r3]
 8006504:	4619      	mov	r1, r3
 8006506:	486d      	ldr	r0, [pc, #436]	@ (80066bc <canopen_app_resetCommunication+0x20c>)
 8006508:	f004 f902 	bl	800a710 <iprintf>
        return 1;
 800650c:	2301      	movs	r3, #1
 800650e:	e0c8      	b.n	80066a2 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006510:	4b6b      	ldr	r3, [pc, #428]	@ (80066c0 <canopen_app_resetCommunication+0x210>)
 8006512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006514:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006516:	4b6a      	ldr	r3, [pc, #424]	@ (80066c0 <canopen_app_resetCommunication+0x210>)
 8006518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800651a:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 800651c:	4b68      	ldr	r3, [pc, #416]	@ (80066c0 <canopen_app_resetCommunication+0x210>)
 800651e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006520:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006522:	4b67      	ldr	r3, [pc, #412]	@ (80066c0 <canopen_app_resetCommunication+0x210>)
 8006524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006526:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006528:	4b61      	ldr	r3, [pc, #388]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	4b61      	ldr	r3, [pc, #388]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	4b60      	ldr	r3, [pc, #384]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3302      	adds	r3, #2
 8006538:	f107 0108 	add.w	r1, r7, #8
 800653c:	f7ff fc42 	bl	8005dc4 <CO_LSSinit>
 8006540:	4603      	mov	r3, r0
 8006542:	461a      	mov	r2, r3
 8006544:	4b5c      	ldr	r3, [pc, #368]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 8006546:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006548:	4b5b      	ldr	r3, [pc, #364]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 800654a:	f993 3000 	ldrsb.w	r3, [r3]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006552:	4b59      	ldr	r3, [pc, #356]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 8006554:	f993 3000 	ldrsb.w	r3, [r3]
 8006558:	4619      	mov	r1, r3
 800655a:	485a      	ldr	r0, [pc, #360]	@ (80066c4 <canopen_app_resetCommunication+0x214>)
 800655c:	f004 f8d8 	bl	800a710 <iprintf>
        return 2;
 8006560:	2302      	movs	r3, #2
 8006562:	e09e      	b.n	80066a2 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006564:	4b53      	ldr	r3, [pc, #332]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b52      	ldr	r3, [pc, #328]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	7812      	ldrb	r2, [r2, #0]
 800656e:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006574:	4b4e      	ldr	r3, [pc, #312]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	4b53      	ldr	r3, [pc, #332]	@ (80066c8 <canopen_app_resetCommunication+0x218>)
 800657a:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 800657c:	4b4d      	ldr	r3, [pc, #308]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 800657e:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	1d3a      	adds	r2, r7, #4
 8006584:	9207      	str	r2, [sp, #28]
 8006586:	9306      	str	r3, [sp, #24]
 8006588:	2300      	movs	r3, #0
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	f242 1311 	movw	r3, #8465	@ 0x2111
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	460b      	mov	r3, r1
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	f7ff fc35 	bl	8005e1c <CO_CANopenInit>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b40      	ldr	r3, [pc, #256]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80065b8:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80065ba:	4b3f      	ldr	r3, [pc, #252]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80065bc:	f993 3000 	ldrsb.w	r3, [r3]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <canopen_app_resetCommunication+0x14a>
 80065c4:	4b3c      	ldr	r3, [pc, #240]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80065c6:	f993 3000 	ldrsb.w	r3, [r3]
 80065ca:	f113 0f13 	cmn.w	r3, #19
 80065ce:	d014      	beq.n	80065fa <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80065d0:	4b39      	ldr	r3, [pc, #228]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80065d2:	f993 3000 	ldrsb.w	r3, [r3]
 80065d6:	f113 0f0c 	cmn.w	r3, #12
 80065da:	d105      	bne.n	80065e8 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	483a      	ldr	r0, [pc, #232]	@ (80066cc <canopen_app_resetCommunication+0x21c>)
 80065e2:	f004 f895 	bl	800a710 <iprintf>
 80065e6:	e006      	b.n	80065f6 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80065e8:	4b33      	ldr	r3, [pc, #204]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 80065ea:	f993 3000 	ldrsb.w	r3, [r3]
 80065ee:	4619      	mov	r1, r3
 80065f0:	4837      	ldr	r0, [pc, #220]	@ (80066d0 <canopen_app_resetCommunication+0x220>)
 80065f2:	f004 f88d 	bl	800a710 <iprintf>
        }
        return 3;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e053      	b.n	80066a2 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80065fa:	4b2d      	ldr	r3, [pc, #180]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	4b2c      	ldr	r3, [pc, #176]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	4b30      	ldr	r3, [pc, #192]	@ (80066c8 <canopen_app_resetCommunication+0x218>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b2a      	ldr	r3, [pc, #168]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	785c      	ldrb	r4, [r3, #1]
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4623      	mov	r3, r4
 8006614:	f7ff fd4a 	bl	80060ac <CO_CANopenInitPDO>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	4b26      	ldr	r3, [pc, #152]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 800661e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006620:	4b25      	ldr	r3, [pc, #148]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 8006622:	f993 3000 	ldrsb.w	r3, [r3]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d014      	beq.n	8006654 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800662a:	4b23      	ldr	r3, [pc, #140]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 800662c:	f993 3000 	ldrsb.w	r3, [r3]
 8006630:	f113 0f0c 	cmn.w	r3, #12
 8006634:	d105      	bne.n	8006642 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4619      	mov	r1, r3
 800663a:	4824      	ldr	r0, [pc, #144]	@ (80066cc <canopen_app_resetCommunication+0x21c>)
 800663c:	f004 f868 	bl	800a710 <iprintf>
 8006640:	e006      	b.n	8006650 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006642:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <canopen_app_resetCommunication+0x208>)
 8006644:	f993 3000 	ldrsb.w	r3, [r3]
 8006648:	4619      	mov	r1, r3
 800664a:	4822      	ldr	r0, [pc, #136]	@ (80066d4 <canopen_app_resetCommunication+0x224>)
 800664c:	f004 f860 	bl	800a710 <iprintf>
        }
        return 4;
 8006650:	2304      	movs	r3, #4
 8006652:	e026      	b.n	80066a2 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006654:	4b17      	ldr	r3, [pc, #92]	@ (80066b4 <canopen_app_resetCommunication+0x204>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	4618      	mov	r0, r3
 800665c:	f002 ff28 	bl	80094b0 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006660:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 800666a:	481b      	ldr	r0, [pc, #108]	@ (80066d8 <canopen_app_resetCommunication+0x228>)
 800666c:	f004 f8b8 	bl	800a7e0 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <canopen_app_resetCommunication+0x200>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f8b4 	bl	80067e4 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 800667c:	4817      	ldr	r0, [pc, #92]	@ (80066dc <canopen_app_resetCommunication+0x22c>)
 800667e:	f004 f8af 	bl	800a7e0 <puts>
    fflush(stdout);
 8006682:	4b17      	ldr	r3, [pc, #92]	@ (80066e0 <canopen_app_resetCommunication+0x230>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f003 ff6b 	bl	800a564 <fflush>
    time_old = time_current = HAL_GetTick();
 800668e:	f000 ff07 	bl	80074a0 <HAL_GetTick>
 8006692:	4603      	mov	r3, r0
 8006694:	4a13      	ldr	r2, [pc, #76]	@ (80066e4 <canopen_app_resetCommunication+0x234>)
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <canopen_app_resetCommunication+0x234>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <canopen_app_resetCommunication+0x238>)
 800669e:	6013      	str	r3, [r2, #0]
    return 0;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd90      	pop	{r4, r7, pc}
 80066aa:	bf00      	nop
 80066ac:	0800b2a0 	.word	0x0800b2a0
 80066b0:	20000458 	.word	0x20000458
 80066b4:	20000454 	.word	0x20000454
 80066b8:	20000464 	.word	0x20000464
 80066bc:	0800b2c8 	.word	0x0800b2c8
 80066c0:	20000000 	.word	0x20000000
 80066c4:	0800b2f0 	.word	0x0800b2f0
 80066c8:	200003cc 	.word	0x200003cc
 80066cc:	0800b31c 	.word	0x0800b31c
 80066d0:	0800b344 	.word	0x0800b344
 80066d4:	0800b370 	.word	0x0800b370
 80066d8:	0800b398 	.word	0x0800b398
 80066dc:	0800b3c0 	.word	0x0800b3c0
 80066e0:	200003e8 	.word	0x200003e8
 80066e4:	20000460 	.word	0x20000460
 80066e8:	2000045c 	.word	0x2000045c

080066ec <canopen_app_process>:

void
canopen_app_process() {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80066f2:	f000 fed5 	bl	80074a0 <HAL_GetTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <canopen_app_process+0xc0>)
 80066fa:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80066fc:	4b2b      	ldr	r3, [pc, #172]	@ (80067ac <canopen_app_process+0xc0>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b2b      	ldr	r3, [pc, #172]	@ (80067b0 <canopen_app_process+0xc4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d04c      	beq.n	80067a2 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <canopen_app_process+0xc0>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b28      	ldr	r3, [pc, #160]	@ (80067b0 <canopen_app_process+0xc4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 800671c:	4b23      	ldr	r3, [pc, #140]	@ (80067ac <canopen_app_process+0xc0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <canopen_app_process+0xc4>)
 8006722:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006724:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <canopen_app_process+0xc8>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	2300      	movs	r3, #0
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	2100      	movs	r1, #0
 800672e:	f7ff fd95 	bl	800625c <CO_process>
 8006732:	4603      	mov	r3, r0
 8006734:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006736:	4b1f      	ldr	r3, [pc, #124]	@ (80067b4 <canopen_app_process+0xc8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	7a5a      	ldrb	r2, [r3, #9]
 800673e:	4b1e      	ldr	r3, [pc, #120]	@ (80067b8 <canopen_app_process+0xcc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	09d2      	lsrs	r2, r2, #7
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <canopen_app_process+0xc8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	7a9a      	ldrb	r2, [r3, #10]
 8006750:	4b19      	ldr	r3, [pc, #100]	@ (80067b8 <canopen_app_process+0xcc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	09d2      	lsrs	r2, r2, #7
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d118      	bne.n	8006792 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8006760:	4b15      	ldr	r3, [pc, #84]	@ (80067b8 <canopen_app_process+0xcc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 fef6 	bl	8009558 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800676c:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <canopen_app_process+0xcc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f827 	bl	80067c4 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8006776:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <canopen_app_process+0xc8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fa97 	bl	8005cae <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8006780:	480e      	ldr	r0, [pc, #56]	@ (80067bc <canopen_app_process+0xd0>)
 8006782:	f004 f82d 	bl	800a7e0 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8006786:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <canopen_app_process+0xcc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fe5c 	bl	8006448 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8006790:	e007      	b.n	80067a2 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d104      	bne.n	80067a2 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8006798:	4809      	ldr	r0, [pc, #36]	@ (80067c0 <canopen_app_process+0xd4>)
 800679a:	f004 f821 	bl	800a7e0 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 800679e:	f001 faf8 	bl	8007d92 <HAL_NVIC_SystemReset>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000460 	.word	0x20000460
 80067b0:	2000045c 	.word	0x2000045c
 80067b4:	20000458 	.word	0x20000458
 80067b8:	20000454 	.word	0x20000454
 80067bc:	0800b3dc 	.word	0x0800b3dc
 80067c0:	0800b404 	.word	0x0800b404

080067c4 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f877 	bl	80078ca <HAL_CAN_Stop>
#endif
    }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 f821 	bl	8007842 <HAL_CAN_Start>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	615a      	str	r2, [r3, #20]
        }
    }
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b090      	sub	sp, #64	@ 0x40
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <CO_CANmodule_init+0x20>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <CO_CANmodule_init+0x20>
 800682e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	e0a1      	b.n	800697e <CO_CANmodule_init+0x16a>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8006840:	4a51      	ldr	r2, [pc, #324]	@ (8006988 <CO_CANmodule_init+0x174>)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006856:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800685e:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 800688a:	2300      	movs	r3, #0
 800688c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800688e:	e02b      	b.n	80068e8 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8006890:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80068a4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80068a6:	4613      	mov	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068b8:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80068ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80068bc:	4613      	mov	r3, r2
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 80068ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	2200      	movs	r2, #0
 80068e0:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 80068e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80068e4:	3301      	adds	r3, #1
 80068e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80068e8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80068ea:	887b      	ldrh	r3, [r7, #2]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d3cf      	bcc.n	8006890 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 80068f0:	2300      	movs	r3, #0
 80068f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80068f4:	e00c      	b.n	8006910 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 80068f6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	461a      	mov	r2, r3
 8006902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006904:	4413      	add	r3, r2
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800690a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800690c:	3301      	adds	r3, #1
 800690e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006910:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006912:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006916:	429a      	cmp	r2, r3
 8006918:	d3ed      	bcc.n	80068f6 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4798      	blx	r3
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	62bb      	str	r3, [r7, #40]	@ 0x28
        FilterConfig.FilterBank = 0;
    } else {
        FilterConfig.FilterBank = 14;
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006924:	2300      	movs	r3, #0
 8006926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006928:	2301      	movs	r3, #1
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8006938:	2300      	movs	r3, #0
 800693a:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800693c:	2300      	movs	r3, #0
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8006940:	2301      	movs	r3, #1
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8006944:	230e      	movs	r3, #14
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f107 0214 	add.w	r2, r7, #20
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f000 feab 	bl	80076ae <HAL_CAN_ConfigFilter>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <CO_CANmodule_init+0x150>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	e00c      	b.n	800697e <CO_CANmodule_init+0x16a>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2113      	movs	r1, #19
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f8fb 	bl	8007b66 <HAL_CAN_ActivateNotification>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <CO_CANmodule_init+0x168>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295
 800697a:	e000      	b.n	800697e <CO_CANmodule_init+0x16a>
    }
#endif

    return CO_ERROR_NO;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3740      	adds	r7, #64	@ 0x40
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000468 	.word	0x20000468

0800698c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <CO_CANmodule_disable+0x22>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 ff8e 	bl	80078ca <HAL_CAN_Stop>
#endif
    }
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	817b      	strh	r3, [r7, #10]
 80069ca:	460b      	mov	r3, r1
 80069cc:	813b      	strh	r3, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03c      	beq.n	8006a56 <CO_CANrxBufferInit+0x9e>
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d039      	beq.n	8006a56 <CO_CANrxBufferInit+0x9e>
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d036      	beq.n	8006a56 <CO_CANrxBufferInit+0x9e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	891b      	ldrh	r3, [r3, #8]
 80069ec:	897a      	ldrh	r2, [r7, #10]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d231      	bcs.n	8006a56 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6859      	ldr	r1, [r3, #4]
 80069f6:	897a      	ldrh	r2, [r7, #10]
 80069f8:	4613      	mov	r3, r2
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a0e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8006a10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d001      	beq.n	8006a24 <CO_CANrxBufferInit+0x6c>
 8006a20:	4a13      	ldr	r2, [pc, #76]	@ (8006a70 <CO_CANrxBufferInit+0xb8>)
 8006a22:	e000      	b.n	8006a26 <CO_CANrxBufferInit+0x6e>
 8006a24:	2200      	movs	r2, #0
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b21b      	sxth	r3, r3
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8006a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a38:	b21b      	sxth	r3, r3
 8006a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a42:	b21b      	sxth	r3, r3
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <CO_CANrxBufferInit+0xa4>
            __NOP();
 8006a52:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006a54:	e002      	b.n	8006a5c <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006a56:	23ff      	movs	r3, #255	@ 0xff
 8006a58:	75fb      	strb	r3, [r7, #23]
 8006a5a:	e000      	b.n	8006a5e <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006a5c:	bf00      	nop
    }

    return ret;
 8006a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	ffff8000 	.word	0xffff8000

08006a74 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	817b      	strh	r3, [r7, #10]
 8006a82:	4613      	mov	r3, r2
 8006a84:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d024      	beq.n	8006ada <CO_CANtxBufferInit+0x66>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8a1b      	ldrh	r3, [r3, #16]
 8006a94:	897a      	ldrh	r2, [r7, #10]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d21f      	bcs.n	8006ada <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68d9      	ldr	r1, [r3, #12]
 8006a9e:	897a      	ldrh	r2, [r7, #10]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	440b      	add	r3, r1
 8006aaa:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8006aac:	893b      	ldrh	r3, [r7, #8]
 8006aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d002      	beq.n	8006abe <CO_CANtxBufferInit+0x4a>
 8006ab8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006abc:	e000      	b.n	8006ac0 <CO_CANtxBufferInit+0x4c>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006acc:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad8:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8006ada:	697b      	ldr	r3, [r7, #20]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fffd 	bl	8007afc <HAL_CAN_GetTxMailboxesFreeLevel>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d028      	beq.n	8006b5a <prv_send_can_message+0x72>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.ExtId = 0u;
 8006b08:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b1c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b26:	4a0f      	ldr	r2, [pc, #60]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b28:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	0b9b      	lsrs	r3, r3, #14
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	4a0b      	ldr	r2, [pc, #44]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b36:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6898      	ldr	r0, [r3, #8]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	1d5a      	adds	r2, r3, #5
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	4907      	ldr	r1, [pc, #28]	@ (8006b64 <prv_send_can_message+0x7c>)
 8006b48:	f000 ff08 	bl	800795c <HAL_CAN_AddTxMessage>
 8006b4c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8006b58:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2000046c 	.word	0x2000046c

08006b68 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8a5b      	ldrh	r3, [r3, #18]
 8006b8a:	f043 0308 	orr.w	r3, r3, #8
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8006b94:	23f7      	movs	r3, #247	@ 0xf7
 8006b96:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b98:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b9e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006ba4:	b672      	cpsid	i
}
 8006ba6:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff9c 	bl	8006ae8 <prv_send_can_message>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	61da      	str	r2, [r3, #28]
 8006bbe:	e009      	b.n	8006bd4 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3301      	adds	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f383 8810 	msr	PRIMASK, r3
}
 8006be0:	bf00      	nop

    return err;
 8006be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d02e      	beq.n	8006c72 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8a5b      	ldrh	r3, [r3, #18]
 8006c18:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	f043 0304 	orr.w	r3, r3, #4
 8006c30:	81fb      	strh	r3, [r7, #14]
 8006c32:	e01b      	b.n	8006c6c <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8006c34:	89fb      	ldrh	r3, [r7, #14]
 8006c36:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8006c60:	89fb      	ldrh	r3, [r7, #14]
 8006c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c66:	f043 0302 	orr.w	r3, r3, #2
 8006c6a:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	89fa      	ldrh	r2, [r7, #14]
 8006c70:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c86:	f000 fba2 	bl	80073ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c8a:	f000 f81f 	bl	8006ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c8e:	f000 f90d 	bl	8006eac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006c92:	f000 f8db 	bl	8006e4c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8006c96:	f000 f87b 	bl	8006d90 <MX_CAN1_Init>
  MX_TIM16_Init();
 8006c9a:	f000 f8b1 	bl	8006e00 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8006c9e:	4b08      	ldr	r3, [pc, #32]	@ (8006cc0 <main+0x40>)
 8006ca0:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8006ca2:	4b08      	ldr	r3, [pc, #32]	@ (8006cc4 <main+0x44>)
 8006ca4:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim16;
 8006ca6:	4b08      	ldr	r3, [pc, #32]	@ (8006cc8 <main+0x48>)
 8006ca8:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 125;
 8006cae:	237d      	movs	r3, #125	@ 0x7d
 8006cb0:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fbc7 	bl	8006448 <canopen_app_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	canopen_app_process();
 8006cba:	f7ff fd17 	bl	80066ec <canopen_app_process>
 8006cbe:	e7fc      	b.n	8006cba <main+0x3a>
 8006cc0:	20000484 	.word	0x20000484
 8006cc4:	08006d91 	.word	0x08006d91
 8006cc8:	200004ac 	.word	0x200004ac

08006ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b096      	sub	sp, #88	@ 0x58
 8006cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cd2:	f107 0314 	add.w	r3, r7, #20
 8006cd6:	2244      	movs	r2, #68	@ 0x44
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f003 fe7a 	bl	800a9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
 8006cea:	60da      	str	r2, [r3, #12]
 8006cec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006cee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006cf2:	f001 f9ff 	bl	80080f4 <HAL_PWREx_ControlVoltageScaling>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006cfc:	f000 f920 	bl	8006f40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006d00:	f001 f9da 	bl	80080b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006d04:	4b21      	ldr	r3, [pc, #132]	@ (8006d8c <SystemClock_Config+0xc0>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	4a20      	ldr	r2, [pc, #128]	@ (8006d8c <SystemClock_Config+0xc0>)
 8006d0c:	f023 0318 	bic.w	r3, r3, #24
 8006d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8006d14:	2314      	movs	r3, #20
 8006d16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006d24:	2360      	movs	r3, #96	@ 0x60
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006d30:	2301      	movs	r3, #1
 8006d32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8006d34:	2310      	movs	r3, #16
 8006d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006d38:	2307      	movs	r3, #7
 8006d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006d40:	2302      	movs	r3, #2
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fa29 	bl	80081a0 <HAL_RCC_OscConfig>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8006d54:	f000 f8f4 	bl	8006f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d58:	230f      	movs	r3, #15
 8006d5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fe29 	bl	80089c8 <HAL_RCC_ClockConfig>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8006d7c:	f000 f8e0 	bl	8006f40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8006d80:	f002 fa3c 	bl	80091fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8006d84:	bf00      	nop
 8006d86:	3758      	adds	r7, #88	@ 0x58
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000

08006d90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006d94:	4b18      	ldr	r3, [pc, #96]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006d96:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <MX_CAN1_Init+0x6c>)
 8006d98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8006d9a:	4b17      	ldr	r3, [pc, #92]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006da0:	4b15      	ldr	r3, [pc, #84]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8006da6:	4b14      	ldr	r3, [pc, #80]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006da8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006dae:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006db0:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8006db4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006db6:	4b10      	ldr	r3, [pc, #64]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006db8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006dbc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006dd0:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8006dd6:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006de2:	4805      	ldr	r0, [pc, #20]	@ (8006df8 <MX_CAN1_Init+0x68>)
 8006de4:	f000 fb68 	bl	80074b8 <HAL_CAN_Init>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8006dee:	f000 f8a7 	bl	8006f40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000484 	.word	0x20000484
 8006dfc:	40006400 	.word	0x40006400

08006e00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006e04:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e06:	4a10      	ldr	r2, [pc, #64]	@ (8006e48 <MX_TIM16_Init+0x48>)
 8006e08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8006e16:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006e1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e1e:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006e24:	4b07      	ldr	r3, [pc, #28]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006e30:	4804      	ldr	r0, [pc, #16]	@ (8006e44 <MX_TIM16_Init+0x44>)
 8006e32:	f002 fae5 	bl	8009400 <HAL_TIM_Base_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006e3c:	f000 f880 	bl	8006f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006e40:	bf00      	nop
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200004ac 	.word	0x200004ac
 8006e48:	40014400 	.word	0x40014400

08006e4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006e50:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <MX_USART2_UART_Init+0x5c>)
 8006e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e72:	220c      	movs	r2, #12
 8006e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e82:	4b08      	ldr	r3, [pc, #32]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e88:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006e8e:	4805      	ldr	r0, [pc, #20]	@ (8006ea4 <MX_USART2_UART_Init+0x58>)
 8006e90:	f002 fc02 	bl	8009698 <HAL_UART_Init>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006e9a:	f000 f851 	bl	8006f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e9e:	bf00      	nop
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200004f8 	.word	0x200004f8
 8006ea8:	40004400 	.word	0x40004400

08006eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	605a      	str	r2, [r3, #4]
 8006ebc:	609a      	str	r2, [r3, #8]
 8006ebe:	60da      	str	r2, [r3, #12]
 8006ec0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ec8:	f043 0304 	orr.w	r3, r3, #4
 8006ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ece:	4b1a      	ldr	r3, [pc, #104]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eda:	4b17      	ldr	r3, [pc, #92]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ede:	4a16      	ldr	r2, [pc, #88]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ee6:	4b14      	ldr	r3, [pc, #80]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ef2:	4b11      	ldr	r3, [pc, #68]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef6:	4a10      	ldr	r2, [pc, #64]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006efe:	4b0e      	ldr	r3, [pc, #56]	@ (8006f38 <MX_GPIO_Init+0x8c>)
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	480b      	ldr	r0, [pc, #44]	@ (8006f3c <MX_GPIO_Init+0x90>)
 8006f10:	f001 f8ba 	bl	8008088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006f14:	2308      	movs	r3, #8
 8006f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006f24:	f107 030c 	add.w	r3, r7, #12
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4804      	ldr	r0, [pc, #16]	@ (8006f3c <MX_GPIO_Init+0x90>)
 8006f2c:	f000 ff42 	bl	8007db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8006f30:	bf00      	nop
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	48000400 	.word	0x48000400

08006f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006f44:	b672      	cpsid	i
}
 8006f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <Error_Handler+0x8>

08006f4c <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db04      	blt.n	8006f64 <_isatty+0x18>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	dc01      	bgt.n	8006f64 <_isatty+0x18>
    return 1;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e005      	b.n	8006f70 <_isatty+0x24>

  errno = EBADF;
 8006f64:	f003 fd94 	bl	800aa90 <__errno>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2209      	movs	r2, #9
 8006f6c:	601a      	str	r2, [r3, #0]
  return 0;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_write>:

int _write(int fd, char* ptr, int len) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d002      	beq.n	8006f90 <_write+0x18>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d111      	bne.n	8006fb4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006f90:	4b0e      	ldr	r3, [pc, #56]	@ (8006fcc <_write+0x54>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	f002 fbc9 	bl	8009734 <HAL_UART_Transmit>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <_write+0x38>
      return len;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	e008      	b.n	8006fc2 <_write+0x4a>
    else
      return EIO;
 8006fb0:	2305      	movs	r3, #5
 8006fb2:	e006      	b.n	8006fc2 <_write+0x4a>
  }
  errno = EBADF;
 8006fb4:	f003 fd6c 	bl	800aa90 <__errno>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2209      	movs	r2, #9
 8006fbc:	601a      	str	r2, [r3, #0]
  return -1;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000580 	.word	0x20000580

08006fd0 <_close>:

int _close(int fd) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	db04      	blt.n	8006fe8 <_close+0x18>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	dc01      	bgt.n	8006fe8 <_close+0x18>
    return 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e006      	b.n	8006ff6 <_close+0x26>

  errno = EBADF;
 8006fe8:	f003 fd52 	bl	800aa90 <__errno>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2209      	movs	r2, #9
 8006ff0:	601a      	str	r2, [r3, #0]
  return -1;
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800700a:	f003 fd41 	bl	800aa90 <__errno>
 800700e:	4603      	mov	r3, r0
 8007010:	2209      	movs	r2, #9
 8007012:	601a      	str	r2, [r3, #0]
  return -1;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_read>:

int _read(int fd, char* ptr, int len) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d110      	bne.n	8007054 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8007032:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <_read+0x4c>)
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f04f 33ff 	mov.w	r3, #4294967295
 800703a:	2201      	movs	r2, #1
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	f002 fc02 	bl	8009846 <HAL_UART_Receive>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <_read+0x30>
      return 1;
 800704c:	2301      	movs	r3, #1
 800704e:	e008      	b.n	8007062 <_read+0x42>
    else
      return EIO;
 8007050:	2305      	movs	r3, #5
 8007052:	e006      	b.n	8007062 <_read+0x42>
  }
  errno = EBADF;
 8007054:	f003 fd1c 	bl	800aa90 <__errno>
 8007058:	4603      	mov	r3, r0
 800705a:	2209      	movs	r2, #9
 800705c:	601a      	str	r2, [r3, #0]
  return -1;
 800705e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000580 	.word	0x20000580

08007070 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	db08      	blt.n	8007092 <_fstat+0x22>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b02      	cmp	r3, #2
 8007084:	dc05      	bgt.n	8007092 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800708c:	605a      	str	r2, [r3, #4]
    return 0;
 800708e:	2300      	movs	r3, #0
 8007090:	e005      	b.n	800709e <_fstat+0x2e>
  }

  errno = EBADF;
 8007092:	f003 fcfd 	bl	800aa90 <__errno>
 8007096:	4603      	mov	r3, r0
 8007098:	2209      	movs	r2, #9
 800709a:	601a      	str	r2, [r3, #0]
  return 0;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <HAL_MspInit+0x44>)
 80070b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b2:	4a0e      	ldr	r2, [pc, #56]	@ (80070ec <HAL_MspInit+0x44>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80070ba:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <HAL_MspInit+0x44>)
 80070bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	607b      	str	r3, [r7, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070c6:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <HAL_MspInit+0x44>)
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <HAL_MspInit+0x44>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_MspInit+0x44>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40021000 	.word	0x40021000

080070f0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	@ 0x28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a18      	ldr	r2, [pc, #96]	@ (8007170 <HAL_CAN_MspInit+0x80>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d129      	bne.n	8007166 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007112:	4b18      	ldr	r3, [pc, #96]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	4a17      	ldr	r2, [pc, #92]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 8007118:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800711c:	6593      	str	r3, [r2, #88]	@ 0x58
 800711e:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800712a:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 800712c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712e:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007136:	4b0f      	ldr	r3, [pc, #60]	@ (8007174 <HAL_CAN_MspInit+0x84>)
 8007138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007142:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007148:	2302      	movs	r3, #2
 800714a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007150:	2303      	movs	r3, #3
 8007152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007154:	2309      	movs	r3, #9
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	4619      	mov	r1, r3
 800715e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007162:	f000 fe27 	bl	8007db4 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8007166:	bf00      	nop
 8007168:	3728      	adds	r7, #40	@ 0x28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40006400 	.word	0x40006400
 8007174:	40021000 	.word	0x40021000

08007178 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <HAL_TIM_Base_MspInit+0x38>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10b      	bne.n	80071a2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800718a:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <HAL_TIM_Base_MspInit+0x3c>)
 800718c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800718e:	4a09      	ldr	r2, [pc, #36]	@ (80071b4 <HAL_TIM_Base_MspInit+0x3c>)
 8007190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007194:	6613      	str	r3, [r2, #96]	@ 0x60
 8007196:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <HAL_TIM_Base_MspInit+0x3c>)
 8007198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40021000 	.word	0x40021000

080071b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b09e      	sub	sp, #120	@ 0x78
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	60da      	str	r2, [r3, #12]
 80071ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	2254      	movs	r2, #84	@ 0x54
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f003 fbfb 	bl	800a9d4 <memset>
  if(huart->Instance==USART2)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a28      	ldr	r2, [pc, #160]	@ (8007284 <HAL_UART_MspInit+0xcc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d148      	bne.n	800727a <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80071e8:	2302      	movs	r3, #2
 80071ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80071ec:	2300      	movs	r3, #0
 80071ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071f0:	f107 0310 	add.w	r3, r7, #16
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 fe0b 	bl	8008e10 <HAL_RCCEx_PeriphCLKConfig>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007200:	f7ff fe9e 	bl	8006f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007204:	4b20      	ldr	r3, [pc, #128]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007208:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 800720a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007210:	4b1d      	ldr	r3, [pc, #116]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800721c:	4b1a      	ldr	r3, [pc, #104]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 800721e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007220:	4a19      	ldr	r2, [pc, #100]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007228:	4b17      	ldr	r3, [pc, #92]	@ (8007288 <HAL_UART_MspInit+0xd0>)
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8007234:	2304      	movs	r3, #4
 8007236:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007238:	2302      	movs	r3, #2
 800723a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723c:	2300      	movs	r3, #0
 800723e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007240:	2303      	movs	r3, #3
 8007242:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007244:	2307      	movs	r3, #7
 8007246:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8007248:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800724c:	4619      	mov	r1, r3
 800724e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007252:	f000 fdaf 	bl	8007db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8007256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800725a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800725c:	2302      	movs	r3, #2
 800725e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	2300      	movs	r3, #0
 8007262:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007264:	2303      	movs	r3, #3
 8007266:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8007268:	2303      	movs	r3, #3
 800726a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800726c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007276:	f000 fd9d 	bl	8007db4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800727a:	bf00      	nop
 800727c:	3778      	adds	r7, #120	@ 0x78
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40004400 	.word	0x40004400
 8007288:	40021000 	.word	0x40021000

0800728c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <NMI_Handler+0x4>

08007294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <HardFault_Handler+0x4>

0800729c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <MemManage_Handler+0x4>

080072a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <BusFault_Handler+0x4>

080072ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <UsageFault_Handler+0x4>

080072b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072e2:	f000 f8c9 	bl	8007478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072e6:	bf00      	nop
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072f4:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <_sbrk+0x5c>)
 80072f6:	4b15      	ldr	r3, [pc, #84]	@ (800734c <_sbrk+0x60>)
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <_sbrk+0x64>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007308:	4b11      	ldr	r3, [pc, #68]	@ (8007350 <_sbrk+0x64>)
 800730a:	4a12      	ldr	r2, [pc, #72]	@ (8007354 <_sbrk+0x68>)
 800730c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800730e:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <_sbrk+0x64>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d207      	bcs.n	800732c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800731c:	f003 fbb8 	bl	800aa90 <__errno>
 8007320:	4603      	mov	r3, r0
 8007322:	220c      	movs	r2, #12
 8007324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007326:	f04f 33ff 	mov.w	r3, #4294967295
 800732a:	e009      	b.n	8007340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800732c:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <_sbrk+0x64>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <_sbrk+0x64>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4413      	add	r3, r2
 800733a:	4a05      	ldr	r2, [pc, #20]	@ (8007350 <_sbrk+0x64>)
 800733c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800733e:	68fb      	ldr	r3, [r7, #12]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	2000c000 	.word	0x2000c000
 800734c:	00000400 	.word	0x00000400
 8007350:	20000584 	.word	0x20000584
 8007354:	200006d8 	.word	0x200006d8

08007358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <SystemInit+0x20>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	4a05      	ldr	r2, [pc, #20]	@ (8007378 <SystemInit+0x20>)
 8007364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800736c:	bf00      	nop
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000ed00 	.word	0xe000ed00

0800737c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800737c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80073b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007380:	f7ff ffea 	bl	8007358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007384:	480c      	ldr	r0, [pc, #48]	@ (80073b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007386:	490d      	ldr	r1, [pc, #52]	@ (80073bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007388:	4a0d      	ldr	r2, [pc, #52]	@ (80073c0 <LoopForever+0xe>)
  movs r3, #0
 800738a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800738c:	e002      	b.n	8007394 <LoopCopyDataInit>

0800738e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800738e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007392:	3304      	adds	r3, #4

08007394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007398:	d3f9      	bcc.n	800738e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800739a:	4a0a      	ldr	r2, [pc, #40]	@ (80073c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800739c:	4c0a      	ldr	r4, [pc, #40]	@ (80073c8 <LoopForever+0x16>)
  movs r3, #0
 800739e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073a0:	e001      	b.n	80073a6 <LoopFillZerobss>

080073a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073a4:	3204      	adds	r2, #4

080073a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073a8:	d3fb      	bcc.n	80073a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80073aa:	f003 fb77 	bl	800aa9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80073ae:	f7ff fc67 	bl	8006c80 <main>

080073b2 <LoopForever>:

LoopForever:
    b LoopForever
 80073b2:	e7fe      	b.n	80073b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80073b4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80073b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80073bc:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80073c0:	0800bbc0 	.word	0x0800bbc0
  ldr r2, =_sbss
 80073c4:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80073c8:	200006d8 	.word	0x200006d8

080073cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80073cc:	e7fe      	b.n	80073cc <ADC1_IRQHandler>

080073ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073d8:	2003      	movs	r0, #3
 80073da:	f000 fcb3 	bl	8007d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073de:	2000      	movs	r0, #0
 80073e0:	f000 f80e 	bl	8007400 <HAL_InitTick>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	71fb      	strb	r3, [r7, #7]
 80073ee:	e001      	b.n	80073f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80073f0:	f7ff fe5a 	bl	80070a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80073f4:	79fb      	ldrb	r3, [r7, #7]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800740c:	4b17      	ldr	r3, [pc, #92]	@ (800746c <HAL_InitTick+0x6c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d023      	beq.n	800745c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007414:	4b16      	ldr	r3, [pc, #88]	@ (8007470 <HAL_InitTick+0x70>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	4b14      	ldr	r3, [pc, #80]	@ (800746c <HAL_InitTick+0x6c>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	4619      	mov	r1, r3
 800741e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007422:	fbb3 f3f1 	udiv	r3, r3, r1
 8007426:	fbb2 f3f3 	udiv	r3, r2, r3
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fcb5 	bl	8007d9a <HAL_SYSTICK_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10f      	bne.n	8007456 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d809      	bhi.n	8007450 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800743c:	2200      	movs	r2, #0
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	f000 fc89 	bl	8007d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007448:	4a0a      	ldr	r2, [pc, #40]	@ (8007474 <HAL_InitTick+0x74>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	e007      	b.n	8007460 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e004      	b.n	8007460 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e001      	b.n	8007460 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200003d8 	.word	0x200003d8
 8007470:	200003d0 	.word	0x200003d0
 8007474:	200003d4 	.word	0x200003d4

08007478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800747c:	4b06      	ldr	r3, [pc, #24]	@ (8007498 <HAL_IncTick+0x20>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_IncTick+0x24>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4413      	add	r3, r2
 8007488:	4a04      	ldr	r2, [pc, #16]	@ (800749c <HAL_IncTick+0x24>)
 800748a:	6013      	str	r3, [r2, #0]
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	200003d8 	.word	0x200003d8
 800749c:	20000588 	.word	0x20000588

080074a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return uwTick;
 80074a4:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <HAL_GetTick+0x14>)
 80074a6:	681b      	ldr	r3, [r3, #0]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000588 	.word	0x20000588

080074b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0ed      	b.n	80076a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fe0a 	bl	80070f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074ec:	f7ff ffd8 	bl	80074a0 <HAL_GetTick>
 80074f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80074f2:	e012      	b.n	800751a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80074f4:	f7ff ffd4 	bl	80074a0 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b0a      	cmp	r3, #10
 8007500:	d90b      	bls.n	800751a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2205      	movs	r2, #5
 8007512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e0c5      	b.n	80076a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0e5      	beq.n	80074f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0202 	bic.w	r2, r2, #2
 8007536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007538:	f7ff ffb2 	bl	80074a0 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800753e:	e012      	b.n	8007566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007540:	f7ff ffae 	bl	80074a0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b0a      	cmp	r3, #10
 800754c:	d90b      	bls.n	8007566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2205      	movs	r2, #5
 800755e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e09f      	b.n	80076a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7e1b      	ldrb	r3, [r3, #24]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d108      	bne.n	800758e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e007      	b.n	800759e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800759c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	7e5b      	ldrb	r3, [r3, #25]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d108      	bne.n	80075b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e007      	b.n	80075c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e9b      	ldrb	r3, [r3, #26]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d108      	bne.n	80075e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0220 	orr.w	r2, r2, #32
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e007      	b.n	80075f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0220 	bic.w	r2, r2, #32
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7edb      	ldrb	r3, [r3, #27]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d108      	bne.n	800760c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0210 	bic.w	r2, r2, #16
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e007      	b.n	800761c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0210 	orr.w	r2, r2, #16
 800761a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7f1b      	ldrb	r3, [r3, #28]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d108      	bne.n	8007636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0208 	orr.w	r2, r2, #8
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e007      	b.n	8007646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0208 	bic.w	r2, r2, #8
 8007644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7f5b      	ldrb	r3, [r3, #29]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d108      	bne.n	8007660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0204 	orr.w	r2, r2, #4
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e007      	b.n	8007670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0204 	bic.w	r2, r2, #4
 800766e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	ea42 0103 	orr.w	r1, r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	1e5a      	subs	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80076c6:	7cfb      	ldrb	r3, [r7, #19]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d003      	beq.n	80076d4 <HAL_CAN_ConfigFilter+0x26>
 80076cc:	7cfb      	ldrb	r3, [r7, #19]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	f040 80aa 	bne.w	8007828 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80076da:	f043 0201 	orr.w	r2, r3, #1
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	2201      	movs	r2, #1
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	43db      	mvns	r3, r3
 80076fe:	401a      	ands	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d123      	bne.n	8007756 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	43db      	mvns	r3, r3
 8007718:	401a      	ands	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	3248      	adds	r2, #72	@ 0x48
 8007736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800774a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800774c:	6979      	ldr	r1, [r7, #20]
 800774e:	3348      	adds	r3, #72	@ 0x48
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d122      	bne.n	80077a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	431a      	orrs	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800777e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3248      	adds	r2, #72	@ 0x48
 8007784:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007798:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	3348      	adds	r3, #72	@ 0x48
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	440b      	add	r3, r1
 80077a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80077be:	e007      	b.n	80077d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	431a      	orrs	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	401a      	ands	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80077ea:	e007      	b.n	80077fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d107      	bne.n	8007814 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	431a      	orrs	r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800781a:	f023 0201 	bic.w	r2, r3, #1
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	e006      	b.n	8007836 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
  }
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d12e      	bne.n	80078b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800786e:	f7ff fe17 	bl	80074a0 <HAL_GetTick>
 8007872:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007874:	e012      	b.n	800789c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007876:	f7ff fe13 	bl	80074a0 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b0a      	cmp	r3, #10
 8007882:	d90b      	bls.n	800789c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007888:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2205      	movs	r2, #5
 8007894:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e012      	b.n	80078c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e006      	b.n	80078c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d133      	bne.n	8007946 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078ee:	f7ff fdd7 	bl	80074a0 <HAL_GetTick>
 80078f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078f4:	e012      	b.n	800791c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078f6:	f7ff fdd3 	bl	80074a0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b0a      	cmp	r3, #10
 8007902:	d90b      	bls.n	800791c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2205      	movs	r2, #5
 8007914:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e01b      	b.n	8007954 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0e5      	beq.n	80078f6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0202 	bic.w	r2, r2, #2
 8007938:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e006      	b.n	8007954 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
  }
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	@ 0x24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007970:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800797a:	7ffb      	ldrb	r3, [r7, #31]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d003      	beq.n	8007988 <HAL_CAN_AddTxMessage+0x2c>
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	2b02      	cmp	r3, #2
 8007984:	f040 80ad 	bne.w	8007ae2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8095 	beq.w	8007ad2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	0e1b      	lsrs	r3, r3, #24
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80079b2:	2201      	movs	r2, #1
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	409a      	lsls	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10d      	bne.n	80079e0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	6809      	ldr	r1, [r1, #0]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3318      	adds	r3, #24
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	440b      	add	r3, r1
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e00f      	b.n	8007a00 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80079f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3318      	adds	r3, #24
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	440b      	add	r3, r1
 80079fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	3318      	adds	r3, #24
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	440b      	add	r3, r1
 8007a10:	3304      	adds	r3, #4
 8007a12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	7d1b      	ldrb	r3, [r3, #20]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d111      	bne.n	8007a40 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3318      	adds	r3, #24
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4413      	add	r3, r2
 8007a28:	3304      	adds	r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	6811      	ldr	r1, [r2, #0]
 8007a30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	3318      	adds	r3, #24
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3307      	adds	r3, #7
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	061a      	lsls	r2, r3, #24
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3306      	adds	r3, #6
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3305      	adds	r3, #5
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	3204      	adds	r2, #4
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	4610      	mov	r0, r2
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6811      	ldr	r1, [r2, #0]
 8007a68:	ea43 0200 	orr.w	r2, r3, r0
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	440b      	add	r3, r1
 8007a72:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007a76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3303      	adds	r3, #3
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	061a      	lsls	r2, r3, #24
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3302      	adds	r3, #2
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	041b      	lsls	r3, r3, #16
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	4313      	orrs	r3, r2
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	4610      	mov	r0, r2
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	6811      	ldr	r1, [r2, #0]
 8007a9e:	ea43 0200 	orr.w	r2, r3, r0
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8007aac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	3318      	adds	r3, #24
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	440b      	add	r3, r1
 8007acc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e00e      	b.n	8007af0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e006      	b.n	8007af0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3724      	adds	r7, #36	@ 0x24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b0e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d002      	beq.n	8007b1c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d11d      	bne.n	8007b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b76:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d002      	beq.n	8007b84 <HAL_CAN_ActivateNotification+0x1e>
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d109      	bne.n	8007b98 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6959      	ldr	r1, [r3, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e006      	b.n	8007ba6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007be6:	4a04      	ldr	r2, [pc, #16]	@ (8007bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	60d3      	str	r3, [r2, #12]
}
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	e000ed00 	.word	0xe000ed00

08007bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c00:	4b04      	ldr	r3, [pc, #16]	@ (8007c14 <__NVIC_GetPriorityGrouping+0x18>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	0a1b      	lsrs	r3, r3, #8
 8007c06:	f003 0307 	and.w	r3, r3, #7
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000ed00 	.word	0xe000ed00

08007c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	db0a      	blt.n	8007c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	490c      	ldr	r1, [pc, #48]	@ (8007c64 <__NVIC_SetPriority+0x4c>)
 8007c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c36:	0112      	lsls	r2, r2, #4
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c40:	e00a      	b.n	8007c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	4908      	ldr	r1, [pc, #32]	@ (8007c68 <__NVIC_SetPriority+0x50>)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	3b04      	subs	r3, #4
 8007c50:	0112      	lsls	r2, r2, #4
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	440b      	add	r3, r1
 8007c56:	761a      	strb	r2, [r3, #24]
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	e000e100 	.word	0xe000e100
 8007c68:	e000ed00 	.word	0xe000ed00

08007c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	@ 0x24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f1c3 0307 	rsb	r3, r3, #7
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	bf28      	it	cs
 8007c8a:	2304      	movcs	r3, #4
 8007c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2b06      	cmp	r3, #6
 8007c94:	d902      	bls.n	8007c9c <NVIC_EncodePriority+0x30>
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	3b03      	subs	r3, #3
 8007c9a:	e000      	b.n	8007c9e <NVIC_EncodePriority+0x32>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43da      	mvns	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	401a      	ands	r2, r3
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbe:	43d9      	mvns	r1, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc4:	4313      	orrs	r3, r2
         );
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3724      	adds	r7, #36	@ 0x24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007cd8:	f3bf 8f4f 	dsb	sy
}
 8007cdc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007cde:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <__NVIC_SystemReset+0x24>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007ce6:	4904      	ldr	r1, [pc, #16]	@ (8007cf8 <__NVIC_SystemReset+0x24>)
 8007ce8:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <__NVIC_SystemReset+0x28>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007cee:	f3bf 8f4f 	dsb	sy
}
 8007cf2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <__NVIC_SystemReset+0x20>
 8007cf8:	e000ed00 	.word	0xe000ed00
 8007cfc:	05fa0004 	.word	0x05fa0004

08007d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d10:	d301      	bcc.n	8007d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d12:	2301      	movs	r3, #1
 8007d14:	e00f      	b.n	8007d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d16:	4a0a      	ldr	r2, [pc, #40]	@ (8007d40 <SysTick_Config+0x40>)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d1e:	210f      	movs	r1, #15
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	f7ff ff78 	bl	8007c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d28:	4b05      	ldr	r3, [pc, #20]	@ (8007d40 <SysTick_Config+0x40>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d2e:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <SysTick_Config+0x40>)
 8007d30:	2207      	movs	r2, #7
 8007d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000e010 	.word	0xe000e010

08007d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff31 	bl	8007bb4 <__NVIC_SetPriorityGrouping>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	4603      	mov	r3, r0
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d6c:	f7ff ff46 	bl	8007bfc <__NVIC_GetPriorityGrouping>
 8007d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f7ff ff78 	bl	8007c6c <NVIC_EncodePriority>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff ff47 	bl	8007c18 <__NVIC_SetPriority>
}
 8007d8a:	bf00      	nop
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007d96:	f7ff ff9d 	bl	8007cd4 <__NVIC_SystemReset>

08007d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff ffac 	bl	8007d00 <SysTick_Config>
 8007da8:	4603      	mov	r3, r0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dc2:	e148      	b.n	8008056 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	2101      	movs	r1, #1
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 813a 	beq.w	8008050 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d005      	beq.n	8007df4 <HAL_GPIO_Init+0x40>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f003 0303 	and.w	r3, r3, #3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d130      	bne.n	8007e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	2203      	movs	r2, #3
 8007e00:	fa02 f303 	lsl.w	r3, r2, r3
 8007e04:	43db      	mvns	r3, r3
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4013      	ands	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	f003 0201 	and.w	r2, r3, #1
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d017      	beq.n	8007e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	43db      	mvns	r3, r3
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4013      	ands	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d123      	bne.n	8007ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	08da      	lsrs	r2, r3, #3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3208      	adds	r2, #8
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	220f      	movs	r2, #15
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	08da      	lsrs	r2, r3, #3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3208      	adds	r2, #8
 8007ee0:	6939      	ldr	r1, [r7, #16]
 8007ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4013      	ands	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f003 0203 	and.w	r2, r3, #3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8094 	beq.w	8008050 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f28:	4b52      	ldr	r3, [pc, #328]	@ (8008074 <HAL_GPIO_Init+0x2c0>)
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2c:	4a51      	ldr	r2, [pc, #324]	@ (8008074 <HAL_GPIO_Init+0x2c0>)
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	6613      	str	r3, [r2, #96]	@ 0x60
 8007f34:	4b4f      	ldr	r3, [pc, #316]	@ (8008074 <HAL_GPIO_Init+0x2c0>)
 8007f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	60bb      	str	r3, [r7, #8]
 8007f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f40:	4a4d      	ldr	r2, [pc, #308]	@ (8008078 <HAL_GPIO_Init+0x2c4>)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	089b      	lsrs	r3, r3, #2
 8007f46:	3302      	adds	r3, #2
 8007f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	220f      	movs	r2, #15
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4013      	ands	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007f6a:	d00d      	beq.n	8007f88 <HAL_GPIO_Init+0x1d4>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a43      	ldr	r2, [pc, #268]	@ (800807c <HAL_GPIO_Init+0x2c8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <HAL_GPIO_Init+0x1d0>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a42      	ldr	r2, [pc, #264]	@ (8008080 <HAL_GPIO_Init+0x2cc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d101      	bne.n	8007f80 <HAL_GPIO_Init+0x1cc>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e004      	b.n	8007f8a <HAL_GPIO_Init+0x1d6>
 8007f80:	2307      	movs	r3, #7
 8007f82:	e002      	b.n	8007f8a <HAL_GPIO_Init+0x1d6>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <HAL_GPIO_Init+0x1d6>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	f002 0203 	and.w	r2, r2, #3
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	4093      	lsls	r3, r2
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f9a:	4937      	ldr	r1, [pc, #220]	@ (8008078 <HAL_GPIO_Init+0x2c4>)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	089b      	lsrs	r3, r3, #2
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fa8:	4b36      	ldr	r3, [pc, #216]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ff6:	4a23      	ldr	r2, [pc, #140]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007ffc:	4b21      	ldr	r3, [pc, #132]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	43db      	mvns	r3, r3
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4013      	ands	r3, r2
 800800a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008020:	4a18      	ldr	r2, [pc, #96]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008026:	4b17      	ldr	r3, [pc, #92]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	43db      	mvns	r3, r3
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4013      	ands	r3, r2
 8008034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800804a:	4a0e      	ldr	r2, [pc, #56]	@ (8008084 <HAL_GPIO_Init+0x2d0>)
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	3301      	adds	r3, #1
 8008054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	f47f aeaf 	bne.w	8007dc4 <HAL_GPIO_Init+0x10>
  }
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	40021000 	.word	0x40021000
 8008078:	40010000 	.word	0x40010000
 800807c:	48000400 	.word	0x48000400
 8008080:	48000800 	.word	0x48000800
 8008084:	40010400 	.word	0x40010400

08008088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	807b      	strh	r3, [r7, #2]
 8008094:	4613      	mov	r3, r2
 8008096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008098:	787b      	ldrb	r3, [r7, #1]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800809e:	887a      	ldrh	r2, [r7, #2]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080a4:	e002      	b.n	80080ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080a6:	887a      	ldrh	r2, [r7, #2]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a04      	ldr	r2, [pc, #16]	@ (80080d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080c6:	6013      	str	r3, [r2, #0]
}
 80080c8:	bf00      	nop
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40007000 	.word	0x40007000

080080d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40007000 	.word	0x40007000

080080f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008102:	d130      	bne.n	8008166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008104:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800810c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008110:	d038      	beq.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008112:	4b20      	ldr	r3, [pc, #128]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800811a:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800811c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008122:	4b1d      	ldr	r3, [pc, #116]	@ (8008198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2232      	movs	r2, #50	@ 0x32
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	4a1b      	ldr	r2, [pc, #108]	@ (800819c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	0c9b      	lsrs	r3, r3, #18
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008138:	e002      	b.n	8008140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3b01      	subs	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008140:	4b14      	ldr	r3, [pc, #80]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814c:	d102      	bne.n	8008154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f2      	bne.n	800813a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008154:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008160:	d110      	bne.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e00f      	b.n	8008186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800816e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008172:	d007      	beq.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008174:	4b07      	ldr	r3, [pc, #28]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800817c:	4a05      	ldr	r2, [pc, #20]	@ (8008194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800817e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40007000 	.word	0x40007000
 8008198:	200003d0 	.word	0x200003d0
 800819c:	431bde83 	.word	0x431bde83

080081a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f000 bc02 	b.w	80089b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081b4:	4b96      	ldr	r3, [pc, #600]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 030c 	and.w	r3, r3, #12
 80081bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081be:	4b94      	ldr	r3, [pc, #592]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80e4 	beq.w	800839e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <HAL_RCC_OscConfig+0x4c>
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b0c      	cmp	r3, #12
 80081e0:	f040 808b 	bne.w	80082fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	f040 8087 	bne.w	80082fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80081ec:	4b88      	ldr	r3, [pc, #544]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCC_OscConfig+0x64>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e3d9      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	4b81      	ldr	r3, [pc, #516]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_RCC_OscConfig+0x7e>
 8008214:	4b7e      	ldr	r3, [pc, #504]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800821c:	e005      	b.n	800822a <HAL_RCC_OscConfig+0x8a>
 800821e:	4b7c      	ldr	r3, [pc, #496]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800822a:	4293      	cmp	r3, r2
 800822c:	d223      	bcs.n	8008276 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fd8c 	bl	8008d50 <RCC_SetFlashLatencyFromMSIRange>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e3ba      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008242:	4b73      	ldr	r3, [pc, #460]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a72      	ldr	r2, [pc, #456]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008248:	f043 0308 	orr.w	r3, r3, #8
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	4b70      	ldr	r3, [pc, #448]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	496d      	ldr	r1, [pc, #436]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008260:	4b6b      	ldr	r3, [pc, #428]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	4968      	ldr	r1, [pc, #416]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008270:	4313      	orrs	r3, r2
 8008272:	604b      	str	r3, [r1, #4]
 8008274:	e025      	b.n	80082c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008276:	4b66      	ldr	r3, [pc, #408]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a65      	ldr	r2, [pc, #404]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800827c:	f043 0308 	orr.w	r3, r3, #8
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	4b63      	ldr	r3, [pc, #396]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	4960      	ldr	r1, [pc, #384]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008290:	4313      	orrs	r3, r2
 8008292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008294:	4b5e      	ldr	r3, [pc, #376]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	495b      	ldr	r1, [pc, #364]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fd4c 	bl	8008d50 <RCC_SetFlashLatencyFromMSIRange>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e37a      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082c2:	f000 fc81 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 80082c6:	4602      	mov	r2, r0
 80082c8:	4b51      	ldr	r3, [pc, #324]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	4950      	ldr	r1, [pc, #320]	@ (8008414 <HAL_RCC_OscConfig+0x274>)
 80082d4:	5ccb      	ldrb	r3, [r1, r3]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	fa22 f303 	lsr.w	r3, r2, r3
 80082de:	4a4e      	ldr	r2, [pc, #312]	@ (8008418 <HAL_RCC_OscConfig+0x278>)
 80082e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80082e2:	4b4e      	ldr	r3, [pc, #312]	@ (800841c <HAL_RCC_OscConfig+0x27c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f88a 	bl	8007400 <HAL_InitTick>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d052      	beq.n	800839c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	e35e      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d032      	beq.n	8008368 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008302:	4b43      	ldr	r3, [pc, #268]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a42      	ldr	r2, [pc, #264]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008308:	f043 0301 	orr.w	r3, r3, #1
 800830c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800830e:	f7ff f8c7 	bl	80074a0 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008316:	f7ff f8c3 	bl	80074a0 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e347      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008328:	4b39      	ldr	r3, [pc, #228]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008334:	4b36      	ldr	r3, [pc, #216]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a35      	ldr	r2, [pc, #212]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800833a:	f043 0308 	orr.w	r3, r3, #8
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	4b33      	ldr	r3, [pc, #204]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	4930      	ldr	r1, [pc, #192]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800834e:	4313      	orrs	r3, r2
 8008350:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008352:	4b2f      	ldr	r3, [pc, #188]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	492b      	ldr	r1, [pc, #172]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008362:	4313      	orrs	r3, r2
 8008364:	604b      	str	r3, [r1, #4]
 8008366:	e01a      	b.n	800839e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008368:	4b29      	ldr	r3, [pc, #164]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a28      	ldr	r2, [pc, #160]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008374:	f7ff f894 	bl	80074a0 <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800837c:	f7ff f890 	bl	80074a0 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e314      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800838e:	4b20      	ldr	r3, [pc, #128]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f0      	bne.n	800837c <HAL_RCC_OscConfig+0x1dc>
 800839a:	e000      	b.n	800839e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800839c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d073      	beq.n	8008492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d005      	beq.n	80083bc <HAL_RCC_OscConfig+0x21c>
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	2b0c      	cmp	r3, #12
 80083b4:	d10e      	bne.n	80083d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d10b      	bne.n	80083d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083bc:	4b14      	ldr	r3, [pc, #80]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d063      	beq.n	8008490 <HAL_RCC_OscConfig+0x2f0>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d15f      	bne.n	8008490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e2f1      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083dc:	d106      	bne.n	80083ec <HAL_RCC_OscConfig+0x24c>
 80083de:	4b0c      	ldr	r3, [pc, #48]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a0b      	ldr	r2, [pc, #44]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e025      	b.n	8008438 <HAL_RCC_OscConfig+0x298>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083f4:	d114      	bne.n	8008420 <HAL_RCC_OscConfig+0x280>
 80083f6:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a05      	ldr	r2, [pc, #20]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 80083fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4b03      	ldr	r3, [pc, #12]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a02      	ldr	r2, [pc, #8]	@ (8008410 <HAL_RCC_OscConfig+0x270>)
 8008408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e013      	b.n	8008438 <HAL_RCC_OscConfig+0x298>
 8008410:	40021000 	.word	0x40021000
 8008414:	0800bb34 	.word	0x0800bb34
 8008418:	200003d0 	.word	0x200003d0
 800841c:	200003d4 	.word	0x200003d4
 8008420:	4ba0      	ldr	r3, [pc, #640]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a9f      	ldr	r2, [pc, #636]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	4b9d      	ldr	r3, [pc, #628]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a9c      	ldr	r2, [pc, #624]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d013      	beq.n	8008468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7ff f82e 	bl	80074a0 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008448:	f7ff f82a 	bl	80074a0 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b64      	cmp	r3, #100	@ 0x64
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e2ae      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800845a:	4b92      	ldr	r3, [pc, #584]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f0      	beq.n	8008448 <HAL_RCC_OscConfig+0x2a8>
 8008466:	e014      	b.n	8008492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008468:	f7ff f81a 	bl	80074a0 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008470:	f7ff f816 	bl	80074a0 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b64      	cmp	r3, #100	@ 0x64
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e29a      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008482:	4b88      	ldr	r3, [pc, #544]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x2d0>
 800848e:	e000      	b.n	8008492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d060      	beq.n	8008560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d005      	beq.n	80084b0 <HAL_RCC_OscConfig+0x310>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	d119      	bne.n	80084de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d116      	bne.n	80084de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084b0:	4b7c      	ldr	r3, [pc, #496]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_RCC_OscConfig+0x328>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e277      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c8:	4b76      	ldr	r3, [pc, #472]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	061b      	lsls	r3, r3, #24
 80084d6:	4973      	ldr	r1, [pc, #460]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084dc:	e040      	b.n	8008560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d023      	beq.n	800852e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084e6:	4b6f      	ldr	r3, [pc, #444]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a6e      	ldr	r2, [pc, #440]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80084ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f2:	f7fe ffd5 	bl	80074a0 <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084f8:	e008      	b.n	800850c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084fa:	f7fe ffd1 	bl	80074a0 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e255      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850c:	4b65      	ldr	r3, [pc, #404]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0f0      	beq.n	80084fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008518:	4b62      	ldr	r3, [pc, #392]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	495f      	ldr	r1, [pc, #380]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008528:	4313      	orrs	r3, r2
 800852a:	604b      	str	r3, [r1, #4]
 800852c:	e018      	b.n	8008560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800852e:	4b5d      	ldr	r3, [pc, #372]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a5c      	ldr	r2, [pc, #368]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853a:	f7fe ffb1 	bl	80074a0 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008542:	f7fe ffad 	bl	80074a0 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e231      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008554:	4b53      	ldr	r3, [pc, #332]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f0      	bne.n	8008542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d03c      	beq.n	80085e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01c      	beq.n	80085ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008574:	4b4b      	ldr	r3, [pc, #300]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800857a:	4a4a      	ldr	r2, [pc, #296]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800857c:	f043 0301 	orr.w	r3, r3, #1
 8008580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008584:	f7fe ff8c 	bl	80074a0 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800858c:	f7fe ff88 	bl	80074a0 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e20c      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800859e:	4b41      	ldr	r3, [pc, #260]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80085a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0ef      	beq.n	800858c <HAL_RCC_OscConfig+0x3ec>
 80085ac:	e01b      	b.n	80085e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ae:	4b3d      	ldr	r3, [pc, #244]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80085b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b4:	4a3b      	ldr	r2, [pc, #236]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085be:	f7fe ff6f 	bl	80074a0 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085c6:	f7fe ff6b 	bl	80074a0 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e1ef      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085d8:	4b32      	ldr	r3, [pc, #200]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80085da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1ef      	bne.n	80085c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80a6 	beq.w	8008740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085f4:	2300      	movs	r3, #0
 80085f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085f8:	4b2a      	ldr	r3, [pc, #168]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 80085fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10d      	bne.n	8008620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008604:	4b27      	ldr	r3, [pc, #156]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008608:	4a26      	ldr	r2, [pc, #152]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800860a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800860e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008610:	4b24      	ldr	r3, [pc, #144]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800861c:	2301      	movs	r3, #1
 800861e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008620:	4b21      	ldr	r3, [pc, #132]	@ (80086a8 <HAL_RCC_OscConfig+0x508>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008628:	2b00      	cmp	r3, #0
 800862a:	d118      	bne.n	800865e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800862c:	4b1e      	ldr	r3, [pc, #120]	@ (80086a8 <HAL_RCC_OscConfig+0x508>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1d      	ldr	r2, [pc, #116]	@ (80086a8 <HAL_RCC_OscConfig+0x508>)
 8008632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008638:	f7fe ff32 	bl	80074a0 <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008640:	f7fe ff2e 	bl	80074a0 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e1b2      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008652:	4b15      	ldr	r3, [pc, #84]	@ (80086a8 <HAL_RCC_OscConfig+0x508>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d108      	bne.n	8008678 <HAL_RCC_OscConfig+0x4d8>
 8008666:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866c:	4a0d      	ldr	r2, [pc, #52]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008676:	e029      	b.n	80086cc <HAL_RCC_OscConfig+0x52c>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b05      	cmp	r3, #5
 800867e:	d115      	bne.n	80086ac <HAL_RCC_OscConfig+0x50c>
 8008680:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008686:	4a07      	ldr	r2, [pc, #28]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008688:	f043 0304 	orr.w	r3, r3, #4
 800868c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008690:	4b04      	ldr	r3, [pc, #16]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008696:	4a03      	ldr	r2, [pc, #12]	@ (80086a4 <HAL_RCC_OscConfig+0x504>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80086a0:	e014      	b.n	80086cc <HAL_RCC_OscConfig+0x52c>
 80086a2:	bf00      	nop
 80086a4:	40021000 	.word	0x40021000
 80086a8:	40007000 	.word	0x40007000
 80086ac:	4b9a      	ldr	r3, [pc, #616]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b2:	4a99      	ldr	r2, [pc, #612]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80086b4:	f023 0301 	bic.w	r3, r3, #1
 80086b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80086bc:	4b96      	ldr	r3, [pc, #600]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c2:	4a95      	ldr	r2, [pc, #596]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80086c4:	f023 0304 	bic.w	r3, r3, #4
 80086c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d016      	beq.n	8008702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d4:	f7fe fee4 	bl	80074a0 <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086da:	e00a      	b.n	80086f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086dc:	f7fe fee0 	bl	80074a0 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e162      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086f2:	4b89      	ldr	r3, [pc, #548]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0ed      	beq.n	80086dc <HAL_RCC_OscConfig+0x53c>
 8008700:	e015      	b.n	800872e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008702:	f7fe fecd 	bl	80074a0 <HAL_GetTick>
 8008706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008708:	e00a      	b.n	8008720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800870a:	f7fe fec9 	bl	80074a0 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008718:	4293      	cmp	r3, r2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e14b      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008720:	4b7d      	ldr	r3, [pc, #500]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1ed      	bne.n	800870a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800872e:	7ffb      	ldrb	r3, [r7, #31]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d105      	bne.n	8008740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008734:	4b78      	ldr	r3, [pc, #480]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008738:	4a77      	ldr	r2, [pc, #476]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 800873a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800873e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03c      	beq.n	80087c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01c      	beq.n	800878e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008754:	4b70      	ldr	r3, [pc, #448]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008756:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800875a:	4a6f      	ldr	r2, [pc, #444]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008764:	f7fe fe9c 	bl	80074a0 <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800876c:	f7fe fe98 	bl	80074a0 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e11c      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800877e:	4b66      	ldr	r3, [pc, #408]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0ef      	beq.n	800876c <HAL_RCC_OscConfig+0x5cc>
 800878c:	e01b      	b.n	80087c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800878e:	4b62      	ldr	r3, [pc, #392]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008790:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008794:	4a60      	ldr	r2, [pc, #384]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879e:	f7fe fe7f 	bl	80074a0 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087a6:	f7fe fe7b 	bl	80074a0 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0ff      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087b8:	4b57      	ldr	r3, [pc, #348]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80087ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1ef      	bne.n	80087a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80f3 	beq.w	80089b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	f040 80c9 	bne.w	800896c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80087da:	4b4f      	ldr	r3, [pc, #316]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f003 0203 	and.w	r2, r3, #3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d12c      	bne.n	8008848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f8:	3b01      	subs	r3, #1
 80087fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d123      	bne.n	8008848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800880a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d11b      	bne.n	8008848 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800881c:	429a      	cmp	r2, r3
 800881e:	d113      	bne.n	8008848 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	3b01      	subs	r3, #1
 800882e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d109      	bne.n	8008848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	3b01      	subs	r3, #1
 8008842:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d06b      	beq.n	8008920 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b0c      	cmp	r3, #12
 800884c:	d062      	beq.n	8008914 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800884e:	4b32      	ldr	r3, [pc, #200]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e0ac      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800885e:	4b2e      	ldr	r3, [pc, #184]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2d      	ldr	r2, [pc, #180]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008868:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800886a:	f7fe fe19 	bl	80074a0 <HAL_GetTick>
 800886e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008872:	f7fe fe15 	bl	80074a0 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e099      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008884:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f0      	bne.n	8008872 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008890:	4b21      	ldr	r3, [pc, #132]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	4b21      	ldr	r3, [pc, #132]	@ (800891c <HAL_RCC_OscConfig+0x77c>)
 8008896:	4013      	ands	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80088a0:	3a01      	subs	r2, #1
 80088a2:	0112      	lsls	r2, r2, #4
 80088a4:	4311      	orrs	r1, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80088aa:	0212      	lsls	r2, r2, #8
 80088ac:	4311      	orrs	r1, r2
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088b2:	0852      	lsrs	r2, r2, #1
 80088b4:	3a01      	subs	r2, #1
 80088b6:	0552      	lsls	r2, r2, #21
 80088b8:	4311      	orrs	r1, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80088be:	0852      	lsrs	r2, r2, #1
 80088c0:	3a01      	subs	r2, #1
 80088c2:	0652      	lsls	r2, r2, #25
 80088c4:	4311      	orrs	r1, r2
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088ca:	06d2      	lsls	r2, r2, #27
 80088cc:	430a      	orrs	r2, r1
 80088ce:	4912      	ldr	r1, [pc, #72]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80088d4:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80088da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 80088e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80088ec:	f7fe fdd8 	bl	80074a0 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088f4:	f7fe fdd4 	bl	80074a0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e058      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008906:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008912:	e050      	b.n	80089b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e04f      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
 8008918:	40021000 	.word	0x40021000
 800891c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008920:	4b27      	ldr	r3, [pc, #156]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d144      	bne.n	80089b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800892c:	4b24      	ldr	r3, [pc, #144]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a23      	ldr	r2, [pc, #140]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 8008932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008938:	4b21      	ldr	r3, [pc, #132]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	4a20      	ldr	r2, [pc, #128]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 800893e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008944:	f7fe fdac 	bl	80074a0 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800894c:	f7fe fda8 	bl	80074a0 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e02c      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800895e:	4b18      	ldr	r3, [pc, #96]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x7ac>
 800896a:	e024      	b.n	80089b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b0c      	cmp	r3, #12
 8008970:	d01f      	beq.n	80089b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008972:	4b13      	ldr	r3, [pc, #76]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a12      	ldr	r2, [pc, #72]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 8008978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800897c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897e:	f7fe fd8f 	bl	80074a0 <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008986:	f7fe fd8b 	bl	80074a0 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e00f      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008998:	4b09      	ldr	r3, [pc, #36]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1f0      	bne.n	8008986 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80089a4:	4b06      	ldr	r3, [pc, #24]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	4905      	ldr	r1, [pc, #20]	@ (80089c0 <HAL_RCC_OscConfig+0x820>)
 80089aa:	4b06      	ldr	r3, [pc, #24]	@ (80089c4 <HAL_RCC_OscConfig+0x824>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60cb      	str	r3, [r1, #12]
 80089b0:	e001      	b.n	80089b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40021000 	.word	0x40021000
 80089c4:	feeefffc 	.word	0xfeeefffc

080089c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0e7      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089dc:	4b75      	ldr	r3, [pc, #468]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d910      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ea:	4b72      	ldr	r3, [pc, #456]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f023 0207 	bic.w	r2, r3, #7
 80089f2:	4970      	ldr	r1, [pc, #448]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089fa:	4b6e      	ldr	r3, [pc, #440]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d001      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e0cf      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d010      	beq.n	8008a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	4b66      	ldr	r3, [pc, #408]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d908      	bls.n	8008a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a28:	4b63      	ldr	r3, [pc, #396]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4960      	ldr	r1, [pc, #384]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d04c      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d121      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e0a6      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d107      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a66:	4b54      	ldr	r3, [pc, #336]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d115      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e09a      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e08e      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e086      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a9e:	4b46      	ldr	r3, [pc, #280]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f023 0203 	bic.w	r2, r3, #3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	4943      	ldr	r1, [pc, #268]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab0:	f7fe fcf6 	bl	80074a0 <HAL_GetTick>
 8008ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab6:	e00a      	b.n	8008ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab8:	f7fe fcf2 	bl	80074a0 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e06e      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ace:	4b3a      	ldr	r3, [pc, #232]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 020c 	and.w	r2, r3, #12
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1eb      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d010      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	4b31      	ldr	r3, [pc, #196]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d208      	bcs.n	8008b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008afc:	4b2e      	ldr	r3, [pc, #184]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	492b      	ldr	r1, [pc, #172]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b0e:	4b29      	ldr	r3, [pc, #164]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d210      	bcs.n	8008b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b1c:	4b25      	ldr	r3, [pc, #148]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f023 0207 	bic.w	r2, r3, #7
 8008b24:	4923      	ldr	r1, [pc, #140]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b2c:	4b21      	ldr	r3, [pc, #132]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d001      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e036      	b.n	8008bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	4918      	ldr	r1, [pc, #96]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b68:	4b13      	ldr	r3, [pc, #76]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4910      	ldr	r1, [pc, #64]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b7c:	f000 f824 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	490b      	ldr	r1, [pc, #44]	@ (8008bbc <HAL_RCC_ClockConfig+0x1f4>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	4a09      	ldr	r2, [pc, #36]	@ (8008bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8008b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b9c:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fc2d 	bl	8007400 <HAL_InitTick>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8008baa:	7afb      	ldrb	r3, [r7, #11]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40022000 	.word	0x40022000
 8008bb8:	40021000 	.word	0x40021000
 8008bbc:	0800bb34 	.word	0x0800bb34
 8008bc0:	200003d0 	.word	0x200003d0
 8008bc4:	200003d4 	.word	0x200003d4

08008bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b089      	sub	sp, #36	@ 0x24
 8008bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 030c 	and.w	r3, r3, #12
 8008bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008be0:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <HAL_RCC_GetSysClockFreq+0x34>
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b0c      	cmp	r3, #12
 8008bf4:	d121      	bne.n	8008c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d11e      	bne.n	8008c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008bfc:	4b34      	ldr	r3, [pc, #208]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0308 	and.w	r3, r3, #8
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008c08:	4b31      	ldr	r3, [pc, #196]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e005      	b.n	8008c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008c18:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	091b      	lsrs	r3, r3, #4
 8008c1e:	f003 030f 	and.w	r3, r3, #15
 8008c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008c24:	4a2b      	ldr	r2, [pc, #172]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10d      	bne.n	8008c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d102      	bne.n	8008c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c40:	4b25      	ldr	r3, [pc, #148]	@ (8008cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e004      	b.n	8008c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d101      	bne.n	8008c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c4c:	4b23      	ldr	r3, [pc, #140]	@ (8008cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8008c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d134      	bne.n	8008cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c56:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d003      	beq.n	8008c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d003      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0xac>
 8008c6c:	e005      	b.n	8008c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c70:	617b      	str	r3, [r7, #20]
      break;
 8008c72:	e005      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008c74:	4b19      	ldr	r3, [pc, #100]	@ (8008cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8008c76:	617b      	str	r3, [r7, #20]
      break;
 8008c78:	e002      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	617b      	str	r3, [r7, #20]
      break;
 8008c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c80:	4b13      	ldr	r3, [pc, #76]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	091b      	lsrs	r3, r3, #4
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c8e:	4b10      	ldr	r3, [pc, #64]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	fb03 f202 	mul.w	r2, r3, r2
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	0e5b      	lsrs	r3, r3, #25
 8008cac:	f003 0303 	and.w	r3, r3, #3
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3724      	adds	r7, #36	@ 0x24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	0800bb4c 	.word	0x0800bb4c
 8008cd8:	00f42400 	.word	0x00f42400
 8008cdc:	007a1200 	.word	0x007a1200

08008ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ce4:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200003d0 	.word	0x200003d0

08008cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008cfc:	f7ff fff0 	bl	8008ce0 <HAL_RCC_GetHCLKFreq>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b06      	ldr	r3, [pc, #24]	@ (8008d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	4904      	ldr	r1, [pc, #16]	@ (8008d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d0e:	5ccb      	ldrb	r3, [r1, r3]
 8008d10:	f003 031f 	and.w	r3, r3, #31
 8008d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	0800bb44 	.word	0x0800bb44

08008d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d28:	f7ff ffda 	bl	8008ce0 <HAL_RCC_GetHCLKFreq>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	4b06      	ldr	r3, [pc, #24]	@ (8008d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	0adb      	lsrs	r3, r3, #11
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	4904      	ldr	r1, [pc, #16]	@ (8008d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d3a:	5ccb      	ldrb	r3, [r1, r3]
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	0800bb44 	.word	0x0800bb44

08008d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008d68:	f7ff f9b6 	bl	80080d8 <HAL_PWREx_GetVoltageRange>
 8008d6c:	6178      	str	r0, [r7, #20]
 8008d6e:	e014      	b.n	8008d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d70:	4b25      	ldr	r3, [pc, #148]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d74:	4a24      	ldr	r2, [pc, #144]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d7c:	4b22      	ldr	r3, [pc, #136]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d88:	f7ff f9a6 	bl	80080d8 <HAL_PWREx_GetVoltageRange>
 8008d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d92:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da0:	d10b      	bne.n	8008dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b80      	cmp	r3, #128	@ 0x80
 8008da6:	d919      	bls.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2ba0      	cmp	r3, #160	@ 0xa0
 8008dac:	d902      	bls.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008dae:	2302      	movs	r3, #2
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	e013      	b.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008db4:	2301      	movs	r3, #1
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	e010      	b.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b80      	cmp	r3, #128	@ 0x80
 8008dbe:	d902      	bls.n	8008dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	e00a      	b.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b80      	cmp	r3, #128	@ 0x80
 8008dca:	d102      	bne.n	8008dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008dcc:	2302      	movs	r3, #2
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	e004      	b.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b70      	cmp	r3, #112	@ 0x70
 8008dd6:	d101      	bne.n	8008ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008dd8:	2301      	movs	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f023 0207 	bic.w	r2, r3, #7
 8008de4:	4909      	ldr	r1, [pc, #36]	@ (8008e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d001      	beq.n	8008dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	40022000 	.word	0x40022000

08008e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e18:	2300      	movs	r3, #0
 8008e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d031      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e34:	d01a      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008e36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e3a:	d814      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d009      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e44:	d10f      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008e46:	4b5d      	ldr	r3, [pc, #372]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e52:	e00c      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f9de 	bl	800921c <RCCEx_PLLSAI1_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e64:	e003      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	74fb      	strb	r3, [r7, #19]
      break;
 8008e6a:	e000      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e6e:	7cfb      	ldrb	r3, [r7, #19]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e74:	4b51      	ldr	r3, [pc, #324]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	494e      	ldr	r1, [pc, #312]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008e8a:	e001      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8c:	7cfb      	ldrb	r3, [r7, #19]
 8008e8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 809e 	beq.w	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ea2:	4b46      	ldr	r3, [pc, #280]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00d      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eb8:	4b40      	ldr	r3, [pc, #256]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ecc:	60bb      	str	r3, [r7, #8]
 8008ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a39      	ldr	r2, [pc, #228]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ee0:	f7fe fade 	bl	80074a0 <HAL_GetTick>
 8008ee4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ee6:	e009      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee8:	f7fe fada 	bl	80074a0 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d902      	bls.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	74fb      	strb	r3, [r7, #19]
        break;
 8008efa:	e005      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008efc:	4b30      	ldr	r3, [pc, #192]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0ef      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008f08:	7cfb      	ldrb	r3, [r7, #19]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d15a      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d019      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f2a:	4b24      	ldr	r3, [pc, #144]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f36:	4b21      	ldr	r3, [pc, #132]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f46:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f56:	4a19      	ldr	r2, [pc, #100]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d016      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f68:	f7fe fa9a 	bl	80074a0 <HAL_GetTick>
 8008f6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f6e:	e00b      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f70:	f7fe fa96 	bl	80074a0 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d902      	bls.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	74fb      	strb	r3, [r7, #19]
            break;
 8008f86:	e006      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f88:	4b0c      	ldr	r3, [pc, #48]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0ec      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008f96:	7cfb      	ldrb	r3, [r7, #19]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10b      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f9c:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008faa:	4904      	ldr	r1, [pc, #16]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008fb2:	e009      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fb4:	7cfb      	ldrb	r3, [r7, #19]
 8008fb6:	74bb      	strb	r3, [r7, #18]
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	7cfb      	ldrb	r3, [r7, #19]
 8008fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fc8:	7c7b      	ldrb	r3, [r7, #17]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d105      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fce:	4b8a      	ldr	r3, [pc, #552]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd2:	4a89      	ldr	r2, [pc, #548]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fe6:	4b84      	ldr	r3, [pc, #528]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fec:	f023 0203 	bic.w	r2, r3, #3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	4980      	ldr	r1, [pc, #512]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009008:	4b7b      	ldr	r3, [pc, #492]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900e:	f023 020c 	bic.w	r2, r3, #12
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	4978      	ldr	r1, [pc, #480]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009018:	4313      	orrs	r3, r2
 800901a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800902a:	4b73      	ldr	r3, [pc, #460]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800902c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009030:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009038:	496f      	ldr	r1, [pc, #444]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800904c:	4b6a      	ldr	r3, [pc, #424]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009052:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800905a:	4967      	ldr	r1, [pc, #412]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800906e:	4b62      	ldr	r3, [pc, #392]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009074:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	495e      	ldr	r1, [pc, #376]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800907e:	4313      	orrs	r3, r2
 8009080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009090:	4b59      	ldr	r3, [pc, #356]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009096:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	4956      	ldr	r1, [pc, #344]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80090b2:	4b51      	ldr	r3, [pc, #324]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c0:	494d      	ldr	r1, [pc, #308]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d028      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090d4:	4b48      	ldr	r3, [pc, #288]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e2:	4945      	ldr	r1, [pc, #276]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090f2:	d106      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090f4:	4b40      	ldr	r3, [pc, #256]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	4a3f      	ldr	r2, [pc, #252]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090fe:	60d3      	str	r3, [r2, #12]
 8009100:	e011      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800910a:	d10c      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3304      	adds	r3, #4
 8009110:	2101      	movs	r1, #1
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f882 	bl	800921c <RCCEx_PLLSAI1_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800911c:	7cfb      	ldrb	r3, [r7, #19]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009122:	7cfb      	ldrb	r3, [r7, #19]
 8009124:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d028      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009132:	4b31      	ldr	r3, [pc, #196]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009138:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009140:	492d      	ldr	r1, [pc, #180]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009150:	d106      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009152:	4b29      	ldr	r3, [pc, #164]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	4a28      	ldr	r2, [pc, #160]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800915c:	60d3      	str	r3, [r2, #12]
 800915e:	e011      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009168:	d10c      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f000 f853 	bl	800921c <RCCEx_PLLSAI1_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800917a:	7cfb      	ldrb	r3, [r7, #19]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009180:	7cfb      	ldrb	r3, [r7, #19]
 8009182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01c      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009190:	4b19      	ldr	r3, [pc, #100]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009196:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800919e:	4916      	ldr	r1, [pc, #88]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ae:	d10c      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3304      	adds	r3, #4
 80091b4:	2102      	movs	r1, #2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f830 	bl	800921c <RCCEx_PLLSAI1_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091c0:	7cfb      	ldrb	r3, [r7, #19]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80091c6:	7cfb      	ldrb	r3, [r7, #19]
 80091c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091d6:	4b08      	ldr	r3, [pc, #32]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091e4:	4904      	ldr	r1, [pc, #16]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80091ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40021000 	.word	0x40021000

080091fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009200:	4b05      	ldr	r3, [pc, #20]	@ (8009218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a04      	ldr	r2, [pc, #16]	@ (8009218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009206:	f043 0304 	orr.w	r3, r3, #4
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40021000 	.word	0x40021000

0800921c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800922a:	4b74      	ldr	r3, [pc, #464]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d018      	beq.n	8009268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009236:	4b71      	ldr	r3, [pc, #452]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0203 	and.w	r2, r3, #3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d10d      	bne.n	8009262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
       ||
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800924e:	4b6b      	ldr	r3, [pc, #428]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	091b      	lsrs	r3, r3, #4
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
       ||
 800925e:	429a      	cmp	r2, r3
 8009260:	d047      	beq.n	80092f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
 8009266:	e044      	b.n	80092f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d018      	beq.n	80092a2 <RCCEx_PLLSAI1_Config+0x86>
 8009270:	2b03      	cmp	r3, #3
 8009272:	d825      	bhi.n	80092c0 <RCCEx_PLLSAI1_Config+0xa4>
 8009274:	2b01      	cmp	r3, #1
 8009276:	d002      	beq.n	800927e <RCCEx_PLLSAI1_Config+0x62>
 8009278:	2b02      	cmp	r3, #2
 800927a:	d009      	beq.n	8009290 <RCCEx_PLLSAI1_Config+0x74>
 800927c:	e020      	b.n	80092c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800927e:	4b5f      	ldr	r3, [pc, #380]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11d      	bne.n	80092c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800928e:	e01a      	b.n	80092c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009290:	4b5a      	ldr	r3, [pc, #360]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009298:	2b00      	cmp	r3, #0
 800929a:	d116      	bne.n	80092ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092a0:	e013      	b.n	80092ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80092a2:	4b56      	ldr	r3, [pc, #344]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10f      	bne.n	80092ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80092ae:	4b53      	ldr	r3, [pc, #332]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092be:	e006      	b.n	80092ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
      break;
 80092c4:	e004      	b.n	80092d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092c6:	bf00      	nop
 80092c8:	e002      	b.n	80092d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092ca:	bf00      	nop
 80092cc:	e000      	b.n	80092d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10d      	bne.n	80092f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80092d6:	4b49      	ldr	r3, [pc, #292]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	430b      	orrs	r3, r1
 80092ec:	4943      	ldr	r1, [pc, #268]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d17c      	bne.n	80093f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80092f8:	4b40      	ldr	r3, [pc, #256]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a3f      	ldr	r2, [pc, #252]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80092fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009304:	f7fe f8cc 	bl	80074a0 <HAL_GetTick>
 8009308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800930a:	e009      	b.n	8009320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800930c:	f7fe f8c8 	bl	80074a0 <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	2b02      	cmp	r3, #2
 8009318:	d902      	bls.n	8009320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	73fb      	strb	r3, [r7, #15]
        break;
 800931e:	e005      	b.n	800932c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009320:	4b36      	ldr	r3, [pc, #216]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1ef      	bne.n	800930c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d15f      	bne.n	80093f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d110      	bne.n	800935a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009338:	4b30      	ldr	r3, [pc, #192]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8009340:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6892      	ldr	r2, [r2, #8]
 8009348:	0211      	lsls	r1, r2, #8
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68d2      	ldr	r2, [r2, #12]
 800934e:	06d2      	lsls	r2, r2, #27
 8009350:	430a      	orrs	r2, r1
 8009352:	492a      	ldr	r1, [pc, #168]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009354:	4313      	orrs	r3, r2
 8009356:	610b      	str	r3, [r1, #16]
 8009358:	e027      	b.n	80093aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d112      	bne.n	8009386 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009360:	4b26      	ldr	r3, [pc, #152]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009368:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6892      	ldr	r2, [r2, #8]
 8009370:	0211      	lsls	r1, r2, #8
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6912      	ldr	r2, [r2, #16]
 8009376:	0852      	lsrs	r2, r2, #1
 8009378:	3a01      	subs	r2, #1
 800937a:	0552      	lsls	r2, r2, #21
 800937c:	430a      	orrs	r2, r1
 800937e:	491f      	ldr	r1, [pc, #124]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009380:	4313      	orrs	r3, r2
 8009382:	610b      	str	r3, [r1, #16]
 8009384:	e011      	b.n	80093aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009386:	4b1d      	ldr	r3, [pc, #116]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800938e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6892      	ldr	r2, [r2, #8]
 8009396:	0211      	lsls	r1, r2, #8
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6952      	ldr	r2, [r2, #20]
 800939c:	0852      	lsrs	r2, r2, #1
 800939e:	3a01      	subs	r2, #1
 80093a0:	0652      	lsls	r2, r2, #25
 80093a2:	430a      	orrs	r2, r1
 80093a4:	4915      	ldr	r1, [pc, #84]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80093aa:	4b14      	ldr	r3, [pc, #80]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a13      	ldr	r2, [pc, #76]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80093b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b6:	f7fe f873 	bl	80074a0 <HAL_GetTick>
 80093ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093bc:	e009      	b.n	80093d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093be:	f7fe f86f 	bl	80074a0 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d902      	bls.n	80093d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
          break;
 80093d0:	e005      	b.n	80093de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093d2:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0ef      	beq.n	80093be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	4903      	ldr	r1, [pc, #12]	@ (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40021000 	.word	0x40021000

08009400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e049      	b.n	80094a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fd fea6 	bl	8007178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f000 f8ba 	bl	80095b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d001      	beq.n	80094c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e03b      	b.n	8009540 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a19      	ldr	r2, [pc, #100]	@ (800954c <HAL_TIM_Base_Start_IT+0x9c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d009      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x4e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f2:	d004      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x4e>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a15      	ldr	r2, [pc, #84]	@ (8009550 <HAL_TIM_Base_Start_IT+0xa0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d115      	bne.n	800952a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <HAL_TIM_Base_Start_IT+0xa4>)
 8009506:	4013      	ands	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b06      	cmp	r3, #6
 800950e:	d015      	beq.n	800953c <HAL_TIM_Base_Start_IT+0x8c>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009516:	d011      	beq.n	800953c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009528:	e008      	b.n	800953c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	e000      	b.n	800953e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	40012c00 	.word	0x40012c00
 8009550:	40014000 	.word	0x40014000
 8009554:	00010007 	.word	0x00010007

08009558 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10f      	bne.n	80095a0 <HAL_TIM_Base_Stop_IT+0x48>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6a1a      	ldr	r2, [r3, #32]
 8009586:	f240 4344 	movw	r3, #1092	@ 0x444
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <HAL_TIM_Base_Stop_IT+0x48>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0201 	bic.w	r2, r2, #1
 800959e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a30      	ldr	r2, [pc, #192]	@ (800968c <TIM_Base_SetConfig+0xd4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_Base_SetConfig+0x20>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095d6:	d108      	bne.n	80095ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a27      	ldr	r2, [pc, #156]	@ (800968c <TIM_Base_SetConfig+0xd4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00b      	beq.n	800960a <TIM_Base_SetConfig+0x52>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f8:	d007      	beq.n	800960a <TIM_Base_SetConfig+0x52>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a24      	ldr	r2, [pc, #144]	@ (8009690 <TIM_Base_SetConfig+0xd8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <TIM_Base_SetConfig+0x52>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a23      	ldr	r2, [pc, #140]	@ (8009694 <TIM_Base_SetConfig+0xdc>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d108      	bne.n	800961c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a12      	ldr	r2, [pc, #72]	@ (800968c <TIM_Base_SetConfig+0xd4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d007      	beq.n	8009658 <TIM_Base_SetConfig+0xa0>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a11      	ldr	r2, [pc, #68]	@ (8009690 <TIM_Base_SetConfig+0xd8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_Base_SetConfig+0xa0>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a10      	ldr	r2, [pc, #64]	@ (8009694 <TIM_Base_SetConfig+0xdc>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d103      	bne.n	8009660 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b01      	cmp	r3, #1
 8009670:	d105      	bne.n	800967e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	611a      	str	r2, [r3, #16]
  }
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400

08009698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e040      	b.n	800972c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fd fd7c 	bl	80071b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2224      	movs	r2, #36	@ 0x24
 80096c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fba6 	bl	8009e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f977 	bl	80099d8 <UART_SetConfig>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e01b      	b.n	800972c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc25 	bl	8009f74 <UART_CheckIdleState>
 800972a:	4603      	mov	r3, r0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	@ 0x28
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	4613      	mov	r3, r2
 8009742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009748:	2b20      	cmp	r3, #32
 800974a:	d177      	bne.n	800983c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <HAL_UART_Transmit+0x24>
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e070      	b.n	800983e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2221      	movs	r2, #33	@ 0x21
 8009768:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800976a:	f7fd fe99 	bl	80074a0 <HAL_GetTick>
 800976e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009788:	d108      	bne.n	800979c <HAL_UART_Transmit+0x68>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	e003      	b.n	80097a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097a4:	e02f      	b.n	8009806 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2200      	movs	r2, #0
 80097ae:	2180      	movs	r1, #128	@ 0x80
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fc87 	bl	800a0c4 <UART_WaitOnFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2220      	movs	r2, #32
 80097c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e03b      	b.n	800983e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	881a      	ldrh	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097d8:	b292      	uxth	r2, r2
 80097da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	3302      	adds	r3, #2
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e007      	b.n	80097f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	3301      	adds	r3, #1
 80097f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800980c:	b29b      	uxth	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1c9      	bne.n	80097a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2200      	movs	r2, #0
 800981a:	2140      	movs	r1, #64	@ 0x40
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 fc51 	bl	800a0c4 <UART_WaitOnFlagUntilTimeout>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2220      	movs	r2, #32
 800982c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e005      	b.n	800983e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	e000      	b.n	800983e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800983c:	2302      	movs	r3, #2
  }
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b08a      	sub	sp, #40	@ 0x28
 800984a:	af02      	add	r7, sp, #8
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	603b      	str	r3, [r7, #0]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985c:	2b20      	cmp	r3, #32
 800985e:	f040 80b6 	bne.w	80099ce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <HAL_UART_Receive+0x28>
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e0ae      	b.n	80099d0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2222      	movs	r2, #34	@ 0x22
 800987e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009888:	f7fd fe0a 	bl	80074a0 <HAL_GetTick>
 800988c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	88fa      	ldrh	r2, [r7, #6]
 8009892:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a6:	d10e      	bne.n	80098c6 <HAL_UART_Receive+0x80>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <HAL_UART_Receive+0x76>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80098b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80098ba:	e02d      	b.n	8009918 <HAL_UART_Receive+0xd2>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	22ff      	movs	r2, #255	@ 0xff
 80098c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80098c4:	e028      	b.n	8009918 <HAL_UART_Receive+0xd2>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <HAL_UART_Receive+0xa4>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d104      	bne.n	80098e0 <HAL_UART_Receive+0x9a>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	22ff      	movs	r2, #255	@ 0xff
 80098da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80098de:	e01b      	b.n	8009918 <HAL_UART_Receive+0xd2>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	227f      	movs	r2, #127	@ 0x7f
 80098e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80098e8:	e016      	b.n	8009918 <HAL_UART_Receive+0xd2>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f2:	d10d      	bne.n	8009910 <HAL_UART_Receive+0xca>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_UART_Receive+0xc0>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	227f      	movs	r2, #127	@ 0x7f
 8009900:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009904:	e008      	b.n	8009918 <HAL_UART_Receive+0xd2>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	223f      	movs	r2, #63	@ 0x3f
 800990a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800990e:	e003      	b.n	8009918 <HAL_UART_Receive+0xd2>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800991e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009928:	d108      	bne.n	800993c <HAL_UART_Receive+0xf6>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	61bb      	str	r3, [r7, #24]
 800993a:	e003      	b.n	8009944 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009940:	2300      	movs	r3, #0
 8009942:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009944:	e037      	b.n	80099b6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2200      	movs	r2, #0
 800994e:	2120      	movs	r1, #32
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fbb7 	bl	800a0c4 <UART_WaitOnFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e033      	b.n	80099d0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10c      	bne.n	8009988 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009974:	b29a      	uxth	r2, r3
 8009976:	8a7b      	ldrh	r3, [r7, #18]
 8009978:	4013      	ands	r3, r2
 800997a:	b29a      	uxth	r2, r3
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	3302      	adds	r3, #2
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	e00d      	b.n	80099a4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800998e:	b29b      	uxth	r3, r3
 8009990:	b2da      	uxtb	r2, r3
 8009992:	8a7b      	ldrh	r3, [r7, #18]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4013      	ands	r3, r2
 8009998:	b2da      	uxtb	r2, r3
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	3301      	adds	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1c1      	bne.n	8009946 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e000      	b.n	80099d0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80099ce:	2302      	movs	r3, #2
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099dc:	b08a      	sub	sp, #40	@ 0x28
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	4bb4      	ldr	r3, [pc, #720]	@ (8009cd8 <UART_SetConfig+0x300>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4aa9      	ldr	r2, [pc, #676]	@ (8009cdc <UART_SetConfig+0x304>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a40:	4313      	orrs	r3, r2
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a54:	430a      	orrs	r2, r1
 8009a56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4aa0      	ldr	r2, [pc, #640]	@ (8009ce0 <UART_SetConfig+0x308>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d126      	bne.n	8009ab0 <UART_SetConfig+0xd8>
 8009a62:	4ba0      	ldr	r3, [pc, #640]	@ (8009ce4 <UART_SetConfig+0x30c>)
 8009a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a68:	f003 0303 	and.w	r3, r3, #3
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d81b      	bhi.n	8009aa8 <UART_SetConfig+0xd0>
 8009a70:	a201      	add	r2, pc, #4	@ (adr r2, 8009a78 <UART_SetConfig+0xa0>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a8e:	e080      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a96:	e07c      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a9e:	e078      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aa6:	e074      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aae:	e070      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a8c      	ldr	r2, [pc, #560]	@ (8009ce8 <UART_SetConfig+0x310>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d138      	bne.n	8009b2c <UART_SetConfig+0x154>
 8009aba:	4b8a      	ldr	r3, [pc, #552]	@ (8009ce4 <UART_SetConfig+0x30c>)
 8009abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac0:	f003 030c 	and.w	r3, r3, #12
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	d82d      	bhi.n	8009b24 <UART_SetConfig+0x14c>
 8009ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0xf8>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009b05 	.word	0x08009b05
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b25 	.word	0x08009b25
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b25 	.word	0x08009b25
 8009ae8:	08009b25 	.word	0x08009b25
 8009aec:	08009b25 	.word	0x08009b25
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b25 	.word	0x08009b25
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b0a:	e042      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b12:	e03e      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b1a:	e03a      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b22:	e036      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b2a:	e032      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a6a      	ldr	r2, [pc, #424]	@ (8009cdc <UART_SetConfig+0x304>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d12a      	bne.n	8009b8c <UART_SetConfig+0x1b4>
 8009b36:	4b6b      	ldr	r3, [pc, #428]	@ (8009ce4 <UART_SetConfig+0x30c>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b44:	d01a      	beq.n	8009b7c <UART_SetConfig+0x1a4>
 8009b46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b4a:	d81b      	bhi.n	8009b84 <UART_SetConfig+0x1ac>
 8009b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b50:	d00c      	beq.n	8009b6c <UART_SetConfig+0x194>
 8009b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b56:	d815      	bhi.n	8009b84 <UART_SetConfig+0x1ac>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <UART_SetConfig+0x18c>
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b60:	d008      	beq.n	8009b74 <UART_SetConfig+0x19c>
 8009b62:	e00f      	b.n	8009b84 <UART_SetConfig+0x1ac>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b6a:	e012      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b72:	e00e      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b74:	2304      	movs	r3, #4
 8009b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b7a:	e00a      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b82:	e006      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b84:	2310      	movs	r3, #16
 8009b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b8a:	e002      	b.n	8009b92 <UART_SetConfig+0x1ba>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a51      	ldr	r2, [pc, #324]	@ (8009cdc <UART_SetConfig+0x304>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d17a      	bne.n	8009c92 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d824      	bhi.n	8009bee <UART_SetConfig+0x216>
 8009ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <UART_SetConfig+0x1d4>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009bd1 	.word	0x08009bd1
 8009bb0:	08009bef 	.word	0x08009bef
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009bef 	.word	0x08009bef
 8009bbc:	08009bdf 	.word	0x08009bdf
 8009bc0:	08009bef 	.word	0x08009bef
 8009bc4:	08009bef 	.word	0x08009bef
 8009bc8:	08009bef 	.word	0x08009bef
 8009bcc:	08009be7 	.word	0x08009be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd0:	f7ff f892 	bl	8008cf8 <HAL_RCC_GetPCLK1Freq>
 8009bd4:	61f8      	str	r0, [r7, #28]
        break;
 8009bd6:	e010      	b.n	8009bfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd8:	4b44      	ldr	r3, [pc, #272]	@ (8009cec <UART_SetConfig+0x314>)
 8009bda:	61fb      	str	r3, [r7, #28]
        break;
 8009bdc:	e00d      	b.n	8009bfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bde:	f7fe fff3 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 8009be2:	61f8      	str	r0, [r7, #28]
        break;
 8009be4:	e009      	b.n	8009bfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bea:	61fb      	str	r3, [r7, #28]
        break;
 8009bec:	e005      	b.n	8009bfa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 8107 	beq.w	8009e10 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	4413      	add	r3, r2
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d305      	bcc.n	8009c1e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d903      	bls.n	8009c26 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c24:	e0f4      	b.n	8009e10 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	022b      	lsls	r3, r5, #8
 8009c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009c3c:	0222      	lsls	r2, r4, #8
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	6849      	ldr	r1, [r1, #4]
 8009c42:	0849      	lsrs	r1, r1, #1
 8009c44:	2000      	movs	r0, #0
 8009c46:	4688      	mov	r8, r1
 8009c48:	4681      	mov	r9, r0
 8009c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8009c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	f7f6 fb0c 	bl	8000280 <__aeabi_uldivmod>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c76:	d308      	bcc.n	8009c8a <UART_SetConfig+0x2b2>
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7e:	d204      	bcs.n	8009c8a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	60da      	str	r2, [r3, #12]
 8009c88:	e0c2      	b.n	8009e10 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c90:	e0be      	b.n	8009e10 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c9a:	d16a      	bne.n	8009d72 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d834      	bhi.n	8009d0e <UART_SetConfig+0x336>
 8009ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cac <UART_SetConfig+0x2d4>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cf1 	.word	0x08009cf1
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009d0f 	.word	0x08009d0f
 8009cbc:	08009cff 	.word	0x08009cff
 8009cc0:	08009d0f 	.word	0x08009d0f
 8009cc4:	08009d0f 	.word	0x08009d0f
 8009cc8:	08009d0f 	.word	0x08009d0f
 8009ccc:	08009d07 	.word	0x08009d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cd0:	f7ff f812 	bl	8008cf8 <HAL_RCC_GetPCLK1Freq>
 8009cd4:	61f8      	str	r0, [r7, #28]
        break;
 8009cd6:	e020      	b.n	8009d1a <UART_SetConfig+0x342>
 8009cd8:	efff69f3 	.word	0xefff69f3
 8009cdc:	40008000 	.word	0x40008000
 8009ce0:	40013800 	.word	0x40013800
 8009ce4:	40021000 	.word	0x40021000
 8009ce8:	40004400 	.word	0x40004400
 8009cec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf0:	f7ff f818 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 8009cf4:	61f8      	str	r0, [r7, #28]
        break;
 8009cf6:	e010      	b.n	8009d1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8009e2c <UART_SetConfig+0x454>)
 8009cfa:	61fb      	str	r3, [r7, #28]
        break;
 8009cfc:	e00d      	b.n	8009d1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cfe:	f7fe ff63 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 8009d02:	61f8      	str	r0, [r7, #28]
        break;
 8009d04:	e009      	b.n	8009d1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0a:	61fb      	str	r3, [r7, #28]
        break;
 8009d0c:	e005      	b.n	8009d1a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d077      	beq.n	8009e10 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	005a      	lsls	r2, r3, #1
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	441a      	add	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b0f      	cmp	r3, #15
 8009d3a:	d916      	bls.n	8009d6a <UART_SetConfig+0x392>
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d42:	d212      	bcs.n	8009d6a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f023 030f 	bic.w	r3, r3, #15
 8009d4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	085b      	lsrs	r3, r3, #1
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	8afb      	ldrh	r3, [r7, #22]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	8afa      	ldrh	r2, [r7, #22]
 8009d66:	60da      	str	r2, [r3, #12]
 8009d68:	e052      	b.n	8009e10 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009d70:	e04e      	b.n	8009e10 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d76:	2b08      	cmp	r3, #8
 8009d78:	d827      	bhi.n	8009dca <UART_SetConfig+0x3f2>
 8009d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <UART_SetConfig+0x3a8>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009da5 	.word	0x08009da5
 8009d84:	08009dad 	.word	0x08009dad
 8009d88:	08009db5 	.word	0x08009db5
 8009d8c:	08009dcb 	.word	0x08009dcb
 8009d90:	08009dbb 	.word	0x08009dbb
 8009d94:	08009dcb 	.word	0x08009dcb
 8009d98:	08009dcb 	.word	0x08009dcb
 8009d9c:	08009dcb 	.word	0x08009dcb
 8009da0:	08009dc3 	.word	0x08009dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da4:	f7fe ffa8 	bl	8008cf8 <HAL_RCC_GetPCLK1Freq>
 8009da8:	61f8      	str	r0, [r7, #28]
        break;
 8009daa:	e014      	b.n	8009dd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dac:	f7fe ffba 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 8009db0:	61f8      	str	r0, [r7, #28]
        break;
 8009db2:	e010      	b.n	8009dd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009db4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <UART_SetConfig+0x454>)
 8009db6:	61fb      	str	r3, [r7, #28]
        break;
 8009db8:	e00d      	b.n	8009dd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dba:	f7fe ff05 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 8009dbe:	61f8      	str	r0, [r7, #28]
        break;
 8009dc0:	e009      	b.n	8009dd6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dc6:	61fb      	str	r3, [r7, #28]
        break;
 8009dc8:	e005      	b.n	8009dd6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d019      	beq.n	8009e10 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	085a      	lsrs	r2, r3, #1
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	441a      	add	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d909      	bls.n	8009e0a <UART_SetConfig+0x432>
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dfc:	d205      	bcs.n	8009e0a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e002      	b.n	8009e10 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3728      	adds	r7, #40	@ 0x28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e2a:	bf00      	nop
 8009e2c:	00f42400 	.word	0x00f42400

08009e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01a      	beq.n	8009f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f2e:	d10a      	bne.n	8009f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	605a      	str	r2, [r3, #4]
  }
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b098      	sub	sp, #96	@ 0x60
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f84:	f7fd fa8c 	bl	80074a0 <HAL_GetTick>
 8009f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d12e      	bne.n	8009ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f88c 	bl	800a0c4 <UART_WaitOnFlagUntilTimeout>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d021      	beq.n	8009ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	e853 3f00 	ldrex	r3, [r3]
 8009fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fd8:	e841 2300 	strex	r3, r2, [r1]
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1e6      	bne.n	8009fb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e062      	b.n	800a0bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b04      	cmp	r3, #4
 800a002:	d149      	bne.n	800a098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a00c:	2200      	movs	r2, #0
 800a00e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f856 	bl	800a0c4 <UART_WaitOnFlagUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d03c      	beq.n	800a098 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	623b      	str	r3, [r7, #32]
   return(result);
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e6      	bne.n	800a01e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3308      	adds	r3, #8
 800a056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0301 	bic.w	r3, r3, #1
 800a066:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3308      	adds	r3, #8
 800a06e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a070:	61fa      	str	r2, [r7, #28]
 800a072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	69b9      	ldr	r1, [r7, #24]
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	617b      	str	r3, [r7, #20]
   return(result);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e011      	b.n	800a0bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3758      	adds	r7, #88	@ 0x58
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d4:	e04f      	b.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d04b      	beq.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0de:	f7fd f9df 	bl	80074a0 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d302      	bcc.n	800a0f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e04e      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d037      	beq.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b80      	cmp	r3, #128	@ 0x80
 800a10a:	d034      	beq.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b40      	cmp	r3, #64	@ 0x40
 800a110:	d031      	beq.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d110      	bne.n	800a142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2208      	movs	r2, #8
 800a126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f838 	bl	800a19e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2208      	movs	r2, #8
 800a132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e029      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a14c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a150:	d111      	bne.n	800a176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a15a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 f81e 	bl	800a19e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e00f      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4013      	ands	r3, r2
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	429a      	cmp	r2, r3
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	461a      	mov	r2, r3
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	429a      	cmp	r2, r3
 800a192:	d0a0      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b095      	sub	sp, #84	@ 0x54
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e5      	bne.n	800a1d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a210:	2b01      	cmp	r3, #1
 800a212:	d118      	bne.n	800a246 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	60bb      	str	r3, [r7, #8]
   return(result);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	647b      	str	r3, [r7, #68]	@ 0x44
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6979      	ldr	r1, [r7, #20]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	613b      	str	r3, [r7, #16]
   return(result);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a25a:	bf00      	nop
 800a25c:	3754      	adds	r7, #84	@ 0x54
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <calloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <calloc+0xc>)
 800a26a:	460a      	mov	r2, r1
 800a26c:	4601      	mov	r1, r0
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	f000 b802 	b.w	800a278 <_calloc_r>
 800a274:	200003e8 	.word	0x200003e8

0800a278 <_calloc_r>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	fba1 5402 	umull	r5, r4, r1, r2
 800a27e:	b934      	cbnz	r4, 800a28e <_calloc_r+0x16>
 800a280:	4629      	mov	r1, r5
 800a282:	f000 f837 	bl	800a2f4 <_malloc_r>
 800a286:	4606      	mov	r6, r0
 800a288:	b928      	cbnz	r0, 800a296 <_calloc_r+0x1e>
 800a28a:	4630      	mov	r0, r6
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
 800a28e:	220c      	movs	r2, #12
 800a290:	6002      	str	r2, [r0, #0]
 800a292:	2600      	movs	r6, #0
 800a294:	e7f9      	b.n	800a28a <_calloc_r+0x12>
 800a296:	462a      	mov	r2, r5
 800a298:	4621      	mov	r1, r4
 800a29a:	f000 fb9b 	bl	800a9d4 <memset>
 800a29e:	e7f4      	b.n	800a28a <_calloc_r+0x12>

0800a2a0 <free>:
 800a2a0:	4b02      	ldr	r3, [pc, #8]	@ (800a2ac <free+0xc>)
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	f000 bc2f 	b.w	800ab08 <_free_r>
 800a2aa:	bf00      	nop
 800a2ac:	200003e8 	.word	0x200003e8

0800a2b0 <sbrk_aligned>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f0 <sbrk_aligned+0x40>)
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6831      	ldr	r1, [r6, #0]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	b911      	cbnz	r1, 800a2c2 <sbrk_aligned+0x12>
 800a2bc:	f000 fbc6 	bl	800aa4c <_sbrk_r>
 800a2c0:	6030      	str	r0, [r6, #0]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f000 fbc1 	bl	800aa4c <_sbrk_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d103      	bne.n	800a2d6 <sbrk_aligned+0x26>
 800a2ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d0f8      	beq.n	800a2d2 <sbrk_aligned+0x22>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fbb2 	bl	800aa4c <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d1f2      	bne.n	800a2d2 <sbrk_aligned+0x22>
 800a2ec:	e7ef      	b.n	800a2ce <sbrk_aligned+0x1e>
 800a2ee:	bf00      	nop
 800a2f0:	2000058c 	.word	0x2000058c

0800a2f4 <_malloc_r>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	1ccd      	adds	r5, r1, #3
 800a2fa:	f025 0503 	bic.w	r5, r5, #3
 800a2fe:	3508      	adds	r5, #8
 800a300:	2d0c      	cmp	r5, #12
 800a302:	bf38      	it	cc
 800a304:	250c      	movcc	r5, #12
 800a306:	2d00      	cmp	r5, #0
 800a308:	4606      	mov	r6, r0
 800a30a:	db01      	blt.n	800a310 <_malloc_r+0x1c>
 800a30c:	42a9      	cmp	r1, r5
 800a30e:	d904      	bls.n	800a31a <_malloc_r+0x26>
 800a310:	230c      	movs	r3, #12
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	2000      	movs	r0, #0
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f0 <_malloc_r+0xfc>
 800a31e:	f000 f869 	bl	800a3f4 <__malloc_lock>
 800a322:	f8d8 3000 	ldr.w	r3, [r8]
 800a326:	461c      	mov	r4, r3
 800a328:	bb44      	cbnz	r4, 800a37c <_malloc_r+0x88>
 800a32a:	4629      	mov	r1, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ffbf 	bl	800a2b0 <sbrk_aligned>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	4604      	mov	r4, r0
 800a336:	d158      	bne.n	800a3ea <_malloc_r+0xf6>
 800a338:	f8d8 4000 	ldr.w	r4, [r8]
 800a33c:	4627      	mov	r7, r4
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d143      	bne.n	800a3ca <_malloc_r+0xd6>
 800a342:	2c00      	cmp	r4, #0
 800a344:	d04b      	beq.n	800a3de <_malloc_r+0xea>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	4639      	mov	r1, r7
 800a34a:	4630      	mov	r0, r6
 800a34c:	eb04 0903 	add.w	r9, r4, r3
 800a350:	f000 fb7c 	bl	800aa4c <_sbrk_r>
 800a354:	4581      	cmp	r9, r0
 800a356:	d142      	bne.n	800a3de <_malloc_r+0xea>
 800a358:	6821      	ldr	r1, [r4, #0]
 800a35a:	1a6d      	subs	r5, r5, r1
 800a35c:	4629      	mov	r1, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ffa6 	bl	800a2b0 <sbrk_aligned>
 800a364:	3001      	adds	r0, #1
 800a366:	d03a      	beq.n	800a3de <_malloc_r+0xea>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	442b      	add	r3, r5
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	f8d8 3000 	ldr.w	r3, [r8]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	bb62      	cbnz	r2, 800a3d0 <_malloc_r+0xdc>
 800a376:	f8c8 7000 	str.w	r7, [r8]
 800a37a:	e00f      	b.n	800a39c <_malloc_r+0xa8>
 800a37c:	6822      	ldr	r2, [r4, #0]
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	d420      	bmi.n	800a3c4 <_malloc_r+0xd0>
 800a382:	2a0b      	cmp	r2, #11
 800a384:	d917      	bls.n	800a3b6 <_malloc_r+0xc2>
 800a386:	1961      	adds	r1, r4, r5
 800a388:	42a3      	cmp	r3, r4
 800a38a:	6025      	str	r5, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	6059      	strne	r1, [r3, #4]
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	bf08      	it	eq
 800a394:	f8c8 1000 	streq.w	r1, [r8]
 800a398:	5162      	str	r2, [r4, r5]
 800a39a:	604b      	str	r3, [r1, #4]
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 f82f 	bl	800a400 <__malloc_unlock>
 800a3a2:	f104 000b 	add.w	r0, r4, #11
 800a3a6:	1d23      	adds	r3, r4, #4
 800a3a8:	f020 0007 	bic.w	r0, r0, #7
 800a3ac:	1ac2      	subs	r2, r0, r3
 800a3ae:	bf1c      	itt	ne
 800a3b0:	1a1b      	subne	r3, r3, r0
 800a3b2:	50a3      	strne	r3, [r4, r2]
 800a3b4:	e7af      	b.n	800a316 <_malloc_r+0x22>
 800a3b6:	6862      	ldr	r2, [r4, #4]
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	bf0c      	ite	eq
 800a3bc:	f8c8 2000 	streq.w	r2, [r8]
 800a3c0:	605a      	strne	r2, [r3, #4]
 800a3c2:	e7eb      	b.n	800a39c <_malloc_r+0xa8>
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	6864      	ldr	r4, [r4, #4]
 800a3c8:	e7ae      	b.n	800a328 <_malloc_r+0x34>
 800a3ca:	463c      	mov	r4, r7
 800a3cc:	687f      	ldr	r7, [r7, #4]
 800a3ce:	e7b6      	b.n	800a33e <_malloc_r+0x4a>
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d1fb      	bne.n	800a3d0 <_malloc_r+0xdc>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6053      	str	r3, [r2, #4]
 800a3dc:	e7de      	b.n	800a39c <_malloc_r+0xa8>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	6033      	str	r3, [r6, #0]
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f80c 	bl	800a400 <__malloc_unlock>
 800a3e8:	e794      	b.n	800a314 <_malloc_r+0x20>
 800a3ea:	6005      	str	r5, [r0, #0]
 800a3ec:	e7d6      	b.n	800a39c <_malloc_r+0xa8>
 800a3ee:	bf00      	nop
 800a3f0:	20000590 	.word	0x20000590

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	@ (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f000 bb76 	b.w	800aae6 <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	200006d4 	.word	0x200006d4

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	@ (800a408 <__malloc_unlock+0x8>)
 800a402:	f000 bb71 	b.w	800aae8 <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	200006d4 	.word	0x200006d4

0800a40c <__sflush_r>:
 800a40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a414:	0716      	lsls	r6, r2, #28
 800a416:	4605      	mov	r5, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	d454      	bmi.n	800a4c6 <__sflush_r+0xba>
 800a41c:	684b      	ldr	r3, [r1, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dc02      	bgt.n	800a428 <__sflush_r+0x1c>
 800a422:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	dd48      	ble.n	800a4ba <__sflush_r+0xae>
 800a428:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	d045      	beq.n	800a4ba <__sflush_r+0xae>
 800a42e:	2300      	movs	r3, #0
 800a430:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a434:	682f      	ldr	r7, [r5, #0]
 800a436:	6a21      	ldr	r1, [r4, #32]
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	d030      	beq.n	800a49e <__sflush_r+0x92>
 800a43c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	0759      	lsls	r1, r3, #29
 800a442:	d505      	bpl.n	800a450 <__sflush_r+0x44>
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	1ad2      	subs	r2, r2, r3
 800a448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a44a:	b10b      	cbz	r3, 800a450 <__sflush_r+0x44>
 800a44c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	2300      	movs	r3, #0
 800a452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	4628      	mov	r0, r5
 800a458:	47b0      	blx	r6
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	d106      	bne.n	800a46e <__sflush_r+0x62>
 800a460:	6829      	ldr	r1, [r5, #0]
 800a462:	291d      	cmp	r1, #29
 800a464:	d82b      	bhi.n	800a4be <__sflush_r+0xb2>
 800a466:	4a2a      	ldr	r2, [pc, #168]	@ (800a510 <__sflush_r+0x104>)
 800a468:	40ca      	lsrs	r2, r1
 800a46a:	07d6      	lsls	r6, r2, #31
 800a46c:	d527      	bpl.n	800a4be <__sflush_r+0xb2>
 800a46e:	2200      	movs	r2, #0
 800a470:	6062      	str	r2, [r4, #4]
 800a472:	04d9      	lsls	r1, r3, #19
 800a474:	6922      	ldr	r2, [r4, #16]
 800a476:	6022      	str	r2, [r4, #0]
 800a478:	d504      	bpl.n	800a484 <__sflush_r+0x78>
 800a47a:	1c42      	adds	r2, r0, #1
 800a47c:	d101      	bne.n	800a482 <__sflush_r+0x76>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b903      	cbnz	r3, 800a484 <__sflush_r+0x78>
 800a482:	6560      	str	r0, [r4, #84]	@ 0x54
 800a484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a486:	602f      	str	r7, [r5, #0]
 800a488:	b1b9      	cbz	r1, 800a4ba <__sflush_r+0xae>
 800a48a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a48e:	4299      	cmp	r1, r3
 800a490:	d002      	beq.n	800a498 <__sflush_r+0x8c>
 800a492:	4628      	mov	r0, r5
 800a494:	f000 fb38 	bl	800ab08 <_free_r>
 800a498:	2300      	movs	r3, #0
 800a49a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a49c:	e00d      	b.n	800a4ba <__sflush_r+0xae>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b0      	blx	r6
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	1c50      	adds	r0, r2, #1
 800a4a8:	d1c9      	bne.n	800a43e <__sflush_r+0x32>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0c6      	beq.n	800a43e <__sflush_r+0x32>
 800a4b0:	2b1d      	cmp	r3, #29
 800a4b2:	d001      	beq.n	800a4b8 <__sflush_r+0xac>
 800a4b4:	2b16      	cmp	r3, #22
 800a4b6:	d11e      	bne.n	800a4f6 <__sflush_r+0xea>
 800a4b8:	602f      	str	r7, [r5, #0]
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e022      	b.n	800a504 <__sflush_r+0xf8>
 800a4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	e01b      	b.n	800a4fe <__sflush_r+0xf2>
 800a4c6:	690f      	ldr	r7, [r1, #16]
 800a4c8:	2f00      	cmp	r7, #0
 800a4ca:	d0f6      	beq.n	800a4ba <__sflush_r+0xae>
 800a4cc:	0793      	lsls	r3, r2, #30
 800a4ce:	680e      	ldr	r6, [r1, #0]
 800a4d0:	bf08      	it	eq
 800a4d2:	694b      	ldreq	r3, [r1, #20]
 800a4d4:	600f      	str	r7, [r1, #0]
 800a4d6:	bf18      	it	ne
 800a4d8:	2300      	movne	r3, #0
 800a4da:	eba6 0807 	sub.w	r8, r6, r7
 800a4de:	608b      	str	r3, [r1, #8]
 800a4e0:	f1b8 0f00 	cmp.w	r8, #0
 800a4e4:	dde9      	ble.n	800a4ba <__sflush_r+0xae>
 800a4e6:	6a21      	ldr	r1, [r4, #32]
 800a4e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4ea:	4643      	mov	r3, r8
 800a4ec:	463a      	mov	r2, r7
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b0      	blx	r6
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	dc08      	bgt.n	800a508 <__sflush_r+0xfc>
 800a4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	4407      	add	r7, r0
 800a50a:	eba8 0800 	sub.w	r8, r8, r0
 800a50e:	e7e7      	b.n	800a4e0 <__sflush_r+0xd4>
 800a510:	20400001 	.word	0x20400001

0800a514 <_fflush_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	690b      	ldr	r3, [r1, #16]
 800a518:	4605      	mov	r5, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	b913      	cbnz	r3, 800a524 <_fflush_r+0x10>
 800a51e:	2500      	movs	r5, #0
 800a520:	4628      	mov	r0, r5
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	b118      	cbz	r0, 800a52e <_fflush_r+0x1a>
 800a526:	6a03      	ldr	r3, [r0, #32]
 800a528:	b90b      	cbnz	r3, 800a52e <_fflush_r+0x1a>
 800a52a:	f000 f8bb 	bl	800a6a4 <__sinit>
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0f3      	beq.n	800a51e <_fflush_r+0xa>
 800a536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a538:	07d0      	lsls	r0, r2, #31
 800a53a:	d404      	bmi.n	800a546 <_fflush_r+0x32>
 800a53c:	0599      	lsls	r1, r3, #22
 800a53e:	d402      	bmi.n	800a546 <_fflush_r+0x32>
 800a540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a542:	f000 fad0 	bl	800aae6 <__retarget_lock_acquire_recursive>
 800a546:	4628      	mov	r0, r5
 800a548:	4621      	mov	r1, r4
 800a54a:	f7ff ff5f 	bl	800a40c <__sflush_r>
 800a54e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a550:	07da      	lsls	r2, r3, #31
 800a552:	4605      	mov	r5, r0
 800a554:	d4e4      	bmi.n	800a520 <_fflush_r+0xc>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	059b      	lsls	r3, r3, #22
 800a55a:	d4e1      	bmi.n	800a520 <_fflush_r+0xc>
 800a55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a55e:	f000 fac3 	bl	800aae8 <__retarget_lock_release_recursive>
 800a562:	e7dd      	b.n	800a520 <_fflush_r+0xc>

0800a564 <fflush>:
 800a564:	4601      	mov	r1, r0
 800a566:	b920      	cbnz	r0, 800a572 <fflush+0xe>
 800a568:	4a04      	ldr	r2, [pc, #16]	@ (800a57c <fflush+0x18>)
 800a56a:	4905      	ldr	r1, [pc, #20]	@ (800a580 <fflush+0x1c>)
 800a56c:	4805      	ldr	r0, [pc, #20]	@ (800a584 <fflush+0x20>)
 800a56e:	f000 b8b1 	b.w	800a6d4 <_fwalk_sglue>
 800a572:	4b05      	ldr	r3, [pc, #20]	@ (800a588 <fflush+0x24>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f7ff bfcd 	b.w	800a514 <_fflush_r>
 800a57a:	bf00      	nop
 800a57c:	200003dc 	.word	0x200003dc
 800a580:	0800a515 	.word	0x0800a515
 800a584:	200003ec 	.word	0x200003ec
 800a588:	200003e8 	.word	0x200003e8

0800a58c <std>:
 800a58c:	2300      	movs	r3, #0
 800a58e:	b510      	push	{r4, lr}
 800a590:	4604      	mov	r4, r0
 800a592:	e9c0 3300 	strd	r3, r3, [r0]
 800a596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a59a:	6083      	str	r3, [r0, #8]
 800a59c:	8181      	strh	r1, [r0, #12]
 800a59e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5a0:	81c2      	strh	r2, [r0, #14]
 800a5a2:	6183      	str	r3, [r0, #24]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	305c      	adds	r0, #92	@ 0x5c
 800a5aa:	f000 fa13 	bl	800a9d4 <memset>
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <std+0x58>)
 800a5b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e8 <std+0x5c>)
 800a5b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x60>)
 800a5b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <std+0x64>)
 800a5bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <std+0x68>)
 800a5c0:	6224      	str	r4, [r4, #32]
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d006      	beq.n	800a5d4 <std+0x48>
 800a5c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5ca:	4294      	cmp	r4, r2
 800a5cc:	d002      	beq.n	800a5d4 <std+0x48>
 800a5ce:	33d0      	adds	r3, #208	@ 0xd0
 800a5d0:	429c      	cmp	r4, r3
 800a5d2:	d105      	bne.n	800a5e0 <std+0x54>
 800a5d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	f000 ba82 	b.w	800aae4 <__retarget_lock_init_recursive>
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800a7f1 	.word	0x0800a7f1
 800a5e8:	0800a813 	.word	0x0800a813
 800a5ec:	0800a84b 	.word	0x0800a84b
 800a5f0:	0800a86f 	.word	0x0800a86f
 800a5f4:	20000594 	.word	0x20000594

0800a5f8 <stdio_exit_handler>:
 800a5f8:	4a02      	ldr	r2, [pc, #8]	@ (800a604 <stdio_exit_handler+0xc>)
 800a5fa:	4903      	ldr	r1, [pc, #12]	@ (800a608 <stdio_exit_handler+0x10>)
 800a5fc:	4803      	ldr	r0, [pc, #12]	@ (800a60c <stdio_exit_handler+0x14>)
 800a5fe:	f000 b869 	b.w	800a6d4 <_fwalk_sglue>
 800a602:	bf00      	nop
 800a604:	200003dc 	.word	0x200003dc
 800a608:	0800a515 	.word	0x0800a515
 800a60c:	200003ec 	.word	0x200003ec

0800a610 <cleanup_stdio>:
 800a610:	6841      	ldr	r1, [r0, #4]
 800a612:	4b0c      	ldr	r3, [pc, #48]	@ (800a644 <cleanup_stdio+0x34>)
 800a614:	4299      	cmp	r1, r3
 800a616:	b510      	push	{r4, lr}
 800a618:	4604      	mov	r4, r0
 800a61a:	d001      	beq.n	800a620 <cleanup_stdio+0x10>
 800a61c:	f7ff ff7a 	bl	800a514 <_fflush_r>
 800a620:	68a1      	ldr	r1, [r4, #8]
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <cleanup_stdio+0x38>)
 800a624:	4299      	cmp	r1, r3
 800a626:	d002      	beq.n	800a62e <cleanup_stdio+0x1e>
 800a628:	4620      	mov	r0, r4
 800a62a:	f7ff ff73 	bl	800a514 <_fflush_r>
 800a62e:	68e1      	ldr	r1, [r4, #12]
 800a630:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <cleanup_stdio+0x3c>)
 800a632:	4299      	cmp	r1, r3
 800a634:	d004      	beq.n	800a640 <cleanup_stdio+0x30>
 800a636:	4620      	mov	r0, r4
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63c:	f7ff bf6a 	b.w	800a514 <_fflush_r>
 800a640:	bd10      	pop	{r4, pc}
 800a642:	bf00      	nop
 800a644:	20000594 	.word	0x20000594
 800a648:	200005fc 	.word	0x200005fc
 800a64c:	20000664 	.word	0x20000664

0800a650 <global_stdio_init.part.0>:
 800a650:	b510      	push	{r4, lr}
 800a652:	4b0b      	ldr	r3, [pc, #44]	@ (800a680 <global_stdio_init.part.0+0x30>)
 800a654:	4c0b      	ldr	r4, [pc, #44]	@ (800a684 <global_stdio_init.part.0+0x34>)
 800a656:	4a0c      	ldr	r2, [pc, #48]	@ (800a688 <global_stdio_init.part.0+0x38>)
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	4620      	mov	r0, r4
 800a65c:	2200      	movs	r2, #0
 800a65e:	2104      	movs	r1, #4
 800a660:	f7ff ff94 	bl	800a58c <std>
 800a664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a668:	2201      	movs	r2, #1
 800a66a:	2109      	movs	r1, #9
 800a66c:	f7ff ff8e 	bl	800a58c <std>
 800a670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a674:	2202      	movs	r2, #2
 800a676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67a:	2112      	movs	r1, #18
 800a67c:	f7ff bf86 	b.w	800a58c <std>
 800a680:	200006cc 	.word	0x200006cc
 800a684:	20000594 	.word	0x20000594
 800a688:	0800a5f9 	.word	0x0800a5f9

0800a68c <__sfp_lock_acquire>:
 800a68c:	4801      	ldr	r0, [pc, #4]	@ (800a694 <__sfp_lock_acquire+0x8>)
 800a68e:	f000 ba2a 	b.w	800aae6 <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	200006d5 	.word	0x200006d5

0800a698 <__sfp_lock_release>:
 800a698:	4801      	ldr	r0, [pc, #4]	@ (800a6a0 <__sfp_lock_release+0x8>)
 800a69a:	f000 ba25 	b.w	800aae8 <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	200006d5 	.word	0x200006d5

0800a6a4 <__sinit>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	f7ff fff0 	bl	800a68c <__sfp_lock_acquire>
 800a6ac:	6a23      	ldr	r3, [r4, #32]
 800a6ae:	b11b      	cbz	r3, 800a6b8 <__sinit+0x14>
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	f7ff bff0 	b.w	800a698 <__sfp_lock_release>
 800a6b8:	4b04      	ldr	r3, [pc, #16]	@ (800a6cc <__sinit+0x28>)
 800a6ba:	6223      	str	r3, [r4, #32]
 800a6bc:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <__sinit+0x2c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1f5      	bne.n	800a6b0 <__sinit+0xc>
 800a6c4:	f7ff ffc4 	bl	800a650 <global_stdio_init.part.0>
 800a6c8:	e7f2      	b.n	800a6b0 <__sinit+0xc>
 800a6ca:	bf00      	nop
 800a6cc:	0800a611 	.word	0x0800a611
 800a6d0:	200006cc 	.word	0x200006cc

0800a6d4 <_fwalk_sglue>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4607      	mov	r7, r0
 800a6da:	4688      	mov	r8, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	2600      	movs	r6, #0
 800a6e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e4:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e8:	d505      	bpl.n	800a6f6 <_fwalk_sglue+0x22>
 800a6ea:	6824      	ldr	r4, [r4, #0]
 800a6ec:	2c00      	cmp	r4, #0
 800a6ee:	d1f7      	bne.n	800a6e0 <_fwalk_sglue+0xc>
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d907      	bls.n	800a70c <_fwalk_sglue+0x38>
 800a6fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a700:	3301      	adds	r3, #1
 800a702:	d003      	beq.n	800a70c <_fwalk_sglue+0x38>
 800a704:	4629      	mov	r1, r5
 800a706:	4638      	mov	r0, r7
 800a708:	47c0      	blx	r8
 800a70a:	4306      	orrs	r6, r0
 800a70c:	3568      	adds	r5, #104	@ 0x68
 800a70e:	e7e9      	b.n	800a6e4 <_fwalk_sglue+0x10>

0800a710 <iprintf>:
 800a710:	b40f      	push	{r0, r1, r2, r3}
 800a712:	b507      	push	{r0, r1, r2, lr}
 800a714:	4906      	ldr	r1, [pc, #24]	@ (800a730 <iprintf+0x20>)
 800a716:	ab04      	add	r3, sp, #16
 800a718:	6808      	ldr	r0, [r1, #0]
 800a71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71e:	6881      	ldr	r1, [r0, #8]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	f000 fa65 	bl	800abf0 <_vfiprintf_r>
 800a726:	b003      	add	sp, #12
 800a728:	f85d eb04 	ldr.w	lr, [sp], #4
 800a72c:	b004      	add	sp, #16
 800a72e:	4770      	bx	lr
 800a730:	200003e8 	.word	0x200003e8

0800a734 <_puts_r>:
 800a734:	6a03      	ldr	r3, [r0, #32]
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	6884      	ldr	r4, [r0, #8]
 800a73a:	4605      	mov	r5, r0
 800a73c:	460e      	mov	r6, r1
 800a73e:	b90b      	cbnz	r3, 800a744 <_puts_r+0x10>
 800a740:	f7ff ffb0 	bl	800a6a4 <__sinit>
 800a744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d405      	bmi.n	800a756 <_puts_r+0x22>
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	0598      	lsls	r0, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_puts_r+0x22>
 800a750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a752:	f000 f9c8 	bl	800aae6 <__retarget_lock_acquire_recursive>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	0719      	lsls	r1, r3, #28
 800a75a:	d502      	bpl.n	800a762 <_puts_r+0x2e>
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d135      	bne.n	800a7ce <_puts_r+0x9a>
 800a762:	4621      	mov	r1, r4
 800a764:	4628      	mov	r0, r5
 800a766:	f000 f8c5 	bl	800a8f4 <__swsetup_r>
 800a76a:	b380      	cbz	r0, 800a7ce <_puts_r+0x9a>
 800a76c:	f04f 35ff 	mov.w	r5, #4294967295
 800a770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a772:	07da      	lsls	r2, r3, #31
 800a774:	d405      	bmi.n	800a782 <_puts_r+0x4e>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_puts_r+0x4e>
 800a77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a77e:	f000 f9b3 	bl	800aae8 <__retarget_lock_release_recursive>
 800a782:	4628      	mov	r0, r5
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	2b00      	cmp	r3, #0
 800a788:	da04      	bge.n	800a794 <_puts_r+0x60>
 800a78a:	69a2      	ldr	r2, [r4, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	dc17      	bgt.n	800a7c0 <_puts_r+0x8c>
 800a790:	290a      	cmp	r1, #10
 800a792:	d015      	beq.n	800a7c0 <_puts_r+0x8c>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	7019      	strb	r1, [r3, #0]
 800a79c:	68a3      	ldr	r3, [r4, #8]
 800a79e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	60a3      	str	r3, [r4, #8]
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d1ed      	bne.n	800a786 <_puts_r+0x52>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	da11      	bge.n	800a7d2 <_puts_r+0x9e>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	210a      	movs	r1, #10
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 f85f 	bl	800a876 <__swbuf_r>
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d0d7      	beq.n	800a76c <_puts_r+0x38>
 800a7bc:	250a      	movs	r5, #10
 800a7be:	e7d7      	b.n	800a770 <_puts_r+0x3c>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 f857 	bl	800a876 <__swbuf_r>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d1e7      	bne.n	800a79c <_puts_r+0x68>
 800a7cc:	e7ce      	b.n	800a76c <_puts_r+0x38>
 800a7ce:	3e01      	subs	r6, #1
 800a7d0:	e7e4      	b.n	800a79c <_puts_r+0x68>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	1c5a      	adds	r2, r3, #1
 800a7d6:	6022      	str	r2, [r4, #0]
 800a7d8:	220a      	movs	r2, #10
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e7ee      	b.n	800a7bc <_puts_r+0x88>
	...

0800a7e0 <puts>:
 800a7e0:	4b02      	ldr	r3, [pc, #8]	@ (800a7ec <puts+0xc>)
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	6818      	ldr	r0, [r3, #0]
 800a7e6:	f7ff bfa5 	b.w	800a734 <_puts_r>
 800a7ea:	bf00      	nop
 800a7ec:	200003e8 	.word	0x200003e8

0800a7f0 <__sread>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f8:	f000 f916 	bl	800aa28 <_read_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	bfab      	itete	ge
 800a800:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a802:	89a3      	ldrhlt	r3, [r4, #12]
 800a804:	181b      	addge	r3, r3, r0
 800a806:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a80a:	bfac      	ite	ge
 800a80c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a80e:	81a3      	strhlt	r3, [r4, #12]
 800a810:	bd10      	pop	{r4, pc}

0800a812 <__swrite>:
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	461f      	mov	r7, r3
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	05db      	lsls	r3, r3, #23
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	4616      	mov	r6, r2
 800a822:	d505      	bpl.n	800a830 <__swrite+0x1e>
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	2302      	movs	r3, #2
 800a82a:	2200      	movs	r2, #0
 800a82c:	f000 f8ea 	bl	800aa04 <_lseek_r>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	4628      	mov	r0, r5
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f000 b911 	b.w	800aa6c <_write_r>

0800a84a <__sseek>:
 800a84a:	b510      	push	{r4, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a852:	f000 f8d7 	bl	800aa04 <_lseek_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	bf15      	itete	ne
 800a85c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a85e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a862:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a866:	81a3      	strheq	r3, [r4, #12]
 800a868:	bf18      	it	ne
 800a86a:	81a3      	strhne	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__sclose>:
 800a86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a872:	f000 b8b7 	b.w	800a9e4 <_close_r>

0800a876 <__swbuf_r>:
 800a876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a878:	460e      	mov	r6, r1
 800a87a:	4614      	mov	r4, r2
 800a87c:	4605      	mov	r5, r0
 800a87e:	b118      	cbz	r0, 800a888 <__swbuf_r+0x12>
 800a880:	6a03      	ldr	r3, [r0, #32]
 800a882:	b90b      	cbnz	r3, 800a888 <__swbuf_r+0x12>
 800a884:	f7ff ff0e 	bl	800a6a4 <__sinit>
 800a888:	69a3      	ldr	r3, [r4, #24]
 800a88a:	60a3      	str	r3, [r4, #8]
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	071a      	lsls	r2, r3, #28
 800a890:	d501      	bpl.n	800a896 <__swbuf_r+0x20>
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	b943      	cbnz	r3, 800a8a8 <__swbuf_r+0x32>
 800a896:	4621      	mov	r1, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	f000 f82b 	bl	800a8f4 <__swsetup_r>
 800a89e:	b118      	cbz	r0, 800a8a8 <__swbuf_r+0x32>
 800a8a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	6922      	ldr	r2, [r4, #16]
 800a8ac:	1a98      	subs	r0, r3, r2
 800a8ae:	6963      	ldr	r3, [r4, #20]
 800a8b0:	b2f6      	uxtb	r6, r6
 800a8b2:	4283      	cmp	r3, r0
 800a8b4:	4637      	mov	r7, r6
 800a8b6:	dc05      	bgt.n	800a8c4 <__swbuf_r+0x4e>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f7ff fe2a 	bl	800a514 <_fflush_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d1ed      	bne.n	800a8a0 <__swbuf_r+0x2a>
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	60a3      	str	r3, [r4, #8]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	6022      	str	r2, [r4, #0]
 800a8d0:	701e      	strb	r6, [r3, #0]
 800a8d2:	6962      	ldr	r2, [r4, #20]
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d004      	beq.n	800a8e4 <__swbuf_r+0x6e>
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	07db      	lsls	r3, r3, #31
 800a8de:	d5e1      	bpl.n	800a8a4 <__swbuf_r+0x2e>
 800a8e0:	2e0a      	cmp	r6, #10
 800a8e2:	d1df      	bne.n	800a8a4 <__swbuf_r+0x2e>
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7ff fe14 	bl	800a514 <_fflush_r>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d0d9      	beq.n	800a8a4 <__swbuf_r+0x2e>
 800a8f0:	e7d6      	b.n	800a8a0 <__swbuf_r+0x2a>
	...

0800a8f4 <__swsetup_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4b29      	ldr	r3, [pc, #164]	@ (800a99c <__swsetup_r+0xa8>)
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	b118      	cbz	r0, 800a908 <__swsetup_r+0x14>
 800a900:	6a03      	ldr	r3, [r0, #32]
 800a902:	b90b      	cbnz	r3, 800a908 <__swsetup_r+0x14>
 800a904:	f7ff fece 	bl	800a6a4 <__sinit>
 800a908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90c:	0719      	lsls	r1, r3, #28
 800a90e:	d422      	bmi.n	800a956 <__swsetup_r+0x62>
 800a910:	06da      	lsls	r2, r3, #27
 800a912:	d407      	bmi.n	800a924 <__swsetup_r+0x30>
 800a914:	2209      	movs	r2, #9
 800a916:	602a      	str	r2, [r5, #0]
 800a918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a91c:	81a3      	strh	r3, [r4, #12]
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295
 800a922:	e033      	b.n	800a98c <__swsetup_r+0x98>
 800a924:	0758      	lsls	r0, r3, #29
 800a926:	d512      	bpl.n	800a94e <__swsetup_r+0x5a>
 800a928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a92a:	b141      	cbz	r1, 800a93e <__swsetup_r+0x4a>
 800a92c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <__swsetup_r+0x46>
 800a934:	4628      	mov	r0, r5
 800a936:	f000 f8e7 	bl	800ab08 <_free_r>
 800a93a:	2300      	movs	r3, #0
 800a93c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	2300      	movs	r3, #0
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0308 	orr.w	r3, r3, #8
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	b94b      	cbnz	r3, 800a96e <__swsetup_r+0x7a>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a964:	d003      	beq.n	800a96e <__swsetup_r+0x7a>
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f000 fc0b 	bl	800b184 <__smakebuf_r>
 800a96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a972:	f013 0201 	ands.w	r2, r3, #1
 800a976:	d00a      	beq.n	800a98e <__swsetup_r+0x9a>
 800a978:	2200      	movs	r2, #0
 800a97a:	60a2      	str	r2, [r4, #8]
 800a97c:	6962      	ldr	r2, [r4, #20]
 800a97e:	4252      	negs	r2, r2
 800a980:	61a2      	str	r2, [r4, #24]
 800a982:	6922      	ldr	r2, [r4, #16]
 800a984:	b942      	cbnz	r2, 800a998 <__swsetup_r+0xa4>
 800a986:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a98a:	d1c5      	bne.n	800a918 <__swsetup_r+0x24>
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	0799      	lsls	r1, r3, #30
 800a990:	bf58      	it	pl
 800a992:	6962      	ldrpl	r2, [r4, #20]
 800a994:	60a2      	str	r2, [r4, #8]
 800a996:	e7f4      	b.n	800a982 <__swsetup_r+0x8e>
 800a998:	2000      	movs	r0, #0
 800a99a:	e7f7      	b.n	800a98c <__swsetup_r+0x98>
 800a99c:	200003e8 	.word	0x200003e8

0800a9a0 <memmove>:
 800a9a0:	4288      	cmp	r0, r1
 800a9a2:	b510      	push	{r4, lr}
 800a9a4:	eb01 0402 	add.w	r4, r1, r2
 800a9a8:	d902      	bls.n	800a9b0 <memmove+0x10>
 800a9aa:	4284      	cmp	r4, r0
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	d807      	bhi.n	800a9c0 <memmove+0x20>
 800a9b0:	1e43      	subs	r3, r0, #1
 800a9b2:	42a1      	cmp	r1, r4
 800a9b4:	d008      	beq.n	800a9c8 <memmove+0x28>
 800a9b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9be:	e7f8      	b.n	800a9b2 <memmove+0x12>
 800a9c0:	4402      	add	r2, r0
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	428a      	cmp	r2, r1
 800a9c6:	d100      	bne.n	800a9ca <memmove+0x2a>
 800a9c8:	bd10      	pop	{r4, pc}
 800a9ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9d2:	e7f7      	b.n	800a9c4 <memmove+0x24>

0800a9d4 <memset>:
 800a9d4:	4402      	add	r2, r0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d100      	bne.n	800a9de <memset+0xa>
 800a9dc:	4770      	bx	lr
 800a9de:	f803 1b01 	strb.w	r1, [r3], #1
 800a9e2:	e7f9      	b.n	800a9d8 <memset+0x4>

0800a9e4 <_close_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d06      	ldr	r5, [pc, #24]	@ (800aa00 <_close_r+0x1c>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7fc faee 	bl	8006fd0 <_close>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_close_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_close_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	200006d0 	.word	0x200006d0

0800aa04 <_lseek_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	@ (800aa24 <_lseek_r+0x20>)
 800aa08:	4604      	mov	r4, r0
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	2200      	movs	r2, #0
 800aa10:	602a      	str	r2, [r5, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f7fc faf3 	bl	8006ffe <_lseek>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_lseek_r+0x1e>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_lseek_r+0x1e>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	200006d0 	.word	0x200006d0

0800aa28 <_read_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	@ (800aa48 <_read_r+0x20>)
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7fc faf2 	bl	8007020 <_read>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_read_r+0x1e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_read_r+0x1e>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	200006d0 	.word	0x200006d0

0800aa4c <_sbrk_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	@ (800aa68 <_sbrk_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7fc fc48 	bl	80072ec <_sbrk>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_sbrk_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_sbrk_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	200006d0 	.word	0x200006d0

0800aa6c <_write_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	@ (800aa8c <_write_r+0x20>)
 800aa70:	4604      	mov	r4, r0
 800aa72:	4608      	mov	r0, r1
 800aa74:	4611      	mov	r1, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f7fc fa7c 	bl	8006f78 <_write>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_write_r+0x1e>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_write_r+0x1e>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	200006d0 	.word	0x200006d0

0800aa90 <__errno>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	@ (800aa98 <__errno+0x8>)
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	200003e8 	.word	0x200003e8

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d0d      	ldr	r5, [pc, #52]	@ (800aad4 <__libc_init_array+0x38>)
 800aaa0:	4c0d      	ldr	r4, [pc, #52]	@ (800aad8 <__libc_init_array+0x3c>)
 800aaa2:	1b64      	subs	r4, r4, r5
 800aaa4:	10a4      	asrs	r4, r4, #2
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	4d0b      	ldr	r5, [pc, #44]	@ (800aadc <__libc_init_array+0x40>)
 800aaae:	4c0c      	ldr	r4, [pc, #48]	@ (800aae0 <__libc_init_array+0x44>)
 800aab0:	f000 fbc6 	bl	800b240 <_init>
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	2600      	movs	r6, #0
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800bbb8 	.word	0x0800bbb8
 800aad8:	0800bbb8 	.word	0x0800bbb8
 800aadc:	0800bbb8 	.word	0x0800bbb8
 800aae0:	0800bbbc 	.word	0x0800bbbc

0800aae4 <__retarget_lock_init_recursive>:
 800aae4:	4770      	bx	lr

0800aae6 <__retarget_lock_acquire_recursive>:
 800aae6:	4770      	bx	lr

0800aae8 <__retarget_lock_release_recursive>:
 800aae8:	4770      	bx	lr

0800aaea <memcpy>:
 800aaea:	440a      	add	r2, r1
 800aaec:	4291      	cmp	r1, r2
 800aaee:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaf2:	d100      	bne.n	800aaf6 <memcpy+0xc>
 800aaf4:	4770      	bx	lr
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab00:	4291      	cmp	r1, r2
 800ab02:	d1f9      	bne.n	800aaf8 <memcpy+0xe>
 800ab04:	bd10      	pop	{r4, pc}
	...

0800ab08 <_free_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	d041      	beq.n	800ab94 <_free_r+0x8c>
 800ab10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab14:	1f0c      	subs	r4, r1, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	18e4      	addlt	r4, r4, r3
 800ab1c:	f7ff fc6a 	bl	800a3f4 <__malloc_lock>
 800ab20:	4a1d      	ldr	r2, [pc, #116]	@ (800ab98 <_free_r+0x90>)
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	b933      	cbnz	r3, 800ab34 <_free_r+0x2c>
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	6014      	str	r4, [r2, #0]
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab30:	f7ff bc66 	b.w	800a400 <__malloc_unlock>
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d908      	bls.n	800ab4a <_free_r+0x42>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	1821      	adds	r1, r4, r0
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	bf01      	itttt	eq
 800ab40:	6819      	ldreq	r1, [r3, #0]
 800ab42:	685b      	ldreq	r3, [r3, #4]
 800ab44:	1809      	addeq	r1, r1, r0
 800ab46:	6021      	streq	r1, [r4, #0]
 800ab48:	e7ed      	b.n	800ab26 <_free_r+0x1e>
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	b10b      	cbz	r3, 800ab54 <_free_r+0x4c>
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d9fa      	bls.n	800ab4a <_free_r+0x42>
 800ab54:	6811      	ldr	r1, [r2, #0]
 800ab56:	1850      	adds	r0, r2, r1
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d10b      	bne.n	800ab74 <_free_r+0x6c>
 800ab5c:	6820      	ldr	r0, [r4, #0]
 800ab5e:	4401      	add	r1, r0
 800ab60:	1850      	adds	r0, r2, r1
 800ab62:	4283      	cmp	r3, r0
 800ab64:	6011      	str	r1, [r2, #0]
 800ab66:	d1e0      	bne.n	800ab2a <_free_r+0x22>
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	6053      	str	r3, [r2, #4]
 800ab6e:	4408      	add	r0, r1
 800ab70:	6010      	str	r0, [r2, #0]
 800ab72:	e7da      	b.n	800ab2a <_free_r+0x22>
 800ab74:	d902      	bls.n	800ab7c <_free_r+0x74>
 800ab76:	230c      	movs	r3, #12
 800ab78:	602b      	str	r3, [r5, #0]
 800ab7a:	e7d6      	b.n	800ab2a <_free_r+0x22>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	1821      	adds	r1, r4, r0
 800ab80:	428b      	cmp	r3, r1
 800ab82:	bf04      	itt	eq
 800ab84:	6819      	ldreq	r1, [r3, #0]
 800ab86:	685b      	ldreq	r3, [r3, #4]
 800ab88:	6063      	str	r3, [r4, #4]
 800ab8a:	bf04      	itt	eq
 800ab8c:	1809      	addeq	r1, r1, r0
 800ab8e:	6021      	streq	r1, [r4, #0]
 800ab90:	6054      	str	r4, [r2, #4]
 800ab92:	e7ca      	b.n	800ab2a <_free_r+0x22>
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	20000590 	.word	0x20000590

0800ab9c <__sfputc_r>:
 800ab9c:	6893      	ldr	r3, [r2, #8]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	b410      	push	{r4}
 800aba4:	6093      	str	r3, [r2, #8]
 800aba6:	da08      	bge.n	800abba <__sfputc_r+0x1e>
 800aba8:	6994      	ldr	r4, [r2, #24]
 800abaa:	42a3      	cmp	r3, r4
 800abac:	db01      	blt.n	800abb2 <__sfputc_r+0x16>
 800abae:	290a      	cmp	r1, #10
 800abb0:	d103      	bne.n	800abba <__sfputc_r+0x1e>
 800abb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb6:	f7ff be5e 	b.w	800a876 <__swbuf_r>
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	1c58      	adds	r0, r3, #1
 800abbe:	6010      	str	r0, [r2, #0]
 800abc0:	7019      	strb	r1, [r3, #0]
 800abc2:	4608      	mov	r0, r1
 800abc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <__sfputs_r>:
 800abca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	4614      	mov	r4, r2
 800abd2:	18d5      	adds	r5, r2, r3
 800abd4:	42ac      	cmp	r4, r5
 800abd6:	d101      	bne.n	800abdc <__sfputs_r+0x12>
 800abd8:	2000      	movs	r0, #0
 800abda:	e007      	b.n	800abec <__sfputs_r+0x22>
 800abdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe0:	463a      	mov	r2, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ffda 	bl	800ab9c <__sfputc_r>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d1f3      	bne.n	800abd4 <__sfputs_r+0xa>
 800abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abf0 <_vfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	460d      	mov	r5, r1
 800abf6:	b09d      	sub	sp, #116	@ 0x74
 800abf8:	4614      	mov	r4, r2
 800abfa:	4698      	mov	r8, r3
 800abfc:	4606      	mov	r6, r0
 800abfe:	b118      	cbz	r0, 800ac08 <_vfiprintf_r+0x18>
 800ac00:	6a03      	ldr	r3, [r0, #32]
 800ac02:	b90b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x18>
 800ac04:	f7ff fd4e 	bl	800a6a4 <__sinit>
 800ac08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac0a:	07d9      	lsls	r1, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac16:	f7ff ff66 	bl	800aae6 <__retarget_lock_acquire_recursive>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	071b      	lsls	r3, r3, #28
 800ac1e:	d501      	bpl.n	800ac24 <_vfiprintf_r+0x34>
 800ac20:	692b      	ldr	r3, [r5, #16]
 800ac22:	b99b      	cbnz	r3, 800ac4c <_vfiprintf_r+0x5c>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7ff fe64 	bl	800a8f4 <__swsetup_r>
 800ac2c:	b170      	cbz	r0, 800ac4c <_vfiprintf_r+0x5c>
 800ac2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac30:	07dc      	lsls	r4, r3, #31
 800ac32:	d504      	bpl.n	800ac3e <_vfiprintf_r+0x4e>
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	b01d      	add	sp, #116	@ 0x74
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	0598      	lsls	r0, r3, #22
 800ac42:	d4f7      	bmi.n	800ac34 <_vfiprintf_r+0x44>
 800ac44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac46:	f7ff ff4f 	bl	800aae8 <__retarget_lock_release_recursive>
 800ac4a:	e7f3      	b.n	800ac34 <_vfiprintf_r+0x44>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac50:	2320      	movs	r3, #32
 800ac52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5a:	2330      	movs	r3, #48	@ 0x30
 800ac5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae0c <_vfiprintf_r+0x21c>
 800ac60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac64:	f04f 0901 	mov.w	r9, #1
 800ac68:	4623      	mov	r3, r4
 800ac6a:	469a      	mov	sl, r3
 800ac6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac70:	b10a      	cbz	r2, 800ac76 <_vfiprintf_r+0x86>
 800ac72:	2a25      	cmp	r2, #37	@ 0x25
 800ac74:	d1f9      	bne.n	800ac6a <_vfiprintf_r+0x7a>
 800ac76:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7a:	d00b      	beq.n	800ac94 <_vfiprintf_r+0xa4>
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	4622      	mov	r2, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffa1 	bl	800abca <__sfputs_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f000 80a7 	beq.w	800addc <_vfiprintf_r+0x1ec>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac90:	445a      	add	r2, fp
 800ac92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac94:	f89a 3000 	ldrb.w	r3, [sl]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 809f 	beq.w	800addc <_vfiprintf_r+0x1ec>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca8:	f10a 0a01 	add.w	sl, sl, #1
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800acb6:	4654      	mov	r4, sl
 800acb8:	2205      	movs	r2, #5
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	4853      	ldr	r0, [pc, #332]	@ (800ae0c <_vfiprintf_r+0x21c>)
 800acc0:	f7f5 fa8e 	bl	80001e0 <memchr>
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	b9d8      	cbnz	r0, 800ad00 <_vfiprintf_r+0x110>
 800acc8:	06d1      	lsls	r1, r2, #27
 800acca:	bf44      	itt	mi
 800accc:	2320      	movmi	r3, #32
 800acce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acd2:	0713      	lsls	r3, r2, #28
 800acd4:	bf44      	itt	mi
 800acd6:	232b      	movmi	r3, #43	@ 0x2b
 800acd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ace0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace2:	d015      	beq.n	800ad10 <_vfiprintf_r+0x120>
 800ace4:	9a07      	ldr	r2, [sp, #28]
 800ace6:	4654      	mov	r4, sl
 800ace8:	2000      	movs	r0, #0
 800acea:	f04f 0c0a 	mov.w	ip, #10
 800acee:	4621      	mov	r1, r4
 800acf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf4:	3b30      	subs	r3, #48	@ 0x30
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d94b      	bls.n	800ad92 <_vfiprintf_r+0x1a2>
 800acfa:	b1b0      	cbz	r0, 800ad2a <_vfiprintf_r+0x13a>
 800acfc:	9207      	str	r2, [sp, #28]
 800acfe:	e014      	b.n	800ad2a <_vfiprintf_r+0x13a>
 800ad00:	eba0 0308 	sub.w	r3, r0, r8
 800ad04:	fa09 f303 	lsl.w	r3, r9, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	46a2      	mov	sl, r4
 800ad0e:	e7d2      	b.n	800acb6 <_vfiprintf_r+0xc6>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1d19      	adds	r1, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	9103      	str	r1, [sp, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfbb      	ittet	lt
 800ad1c:	425b      	neglt	r3, r3
 800ad1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad22:	9307      	strge	r3, [sp, #28]
 800ad24:	9307      	strlt	r3, [sp, #28]
 800ad26:	bfb8      	it	lt
 800ad28:	9204      	strlt	r2, [sp, #16]
 800ad2a:	7823      	ldrb	r3, [r4, #0]
 800ad2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad2e:	d10a      	bne.n	800ad46 <_vfiprintf_r+0x156>
 800ad30:	7863      	ldrb	r3, [r4, #1]
 800ad32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad34:	d132      	bne.n	800ad9c <_vfiprintf_r+0x1ac>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9203      	str	r2, [sp, #12]
 800ad3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad42:	3402      	adds	r4, #2
 800ad44:	9305      	str	r3, [sp, #20]
 800ad46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae1c <_vfiprintf_r+0x22c>
 800ad4a:	7821      	ldrb	r1, [r4, #0]
 800ad4c:	2203      	movs	r2, #3
 800ad4e:	4650      	mov	r0, sl
 800ad50:	f7f5 fa46 	bl	80001e0 <memchr>
 800ad54:	b138      	cbz	r0, 800ad66 <_vfiprintf_r+0x176>
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	eba0 000a 	sub.w	r0, r0, sl
 800ad5c:	2240      	movs	r2, #64	@ 0x40
 800ad5e:	4082      	lsls	r2, r0
 800ad60:	4313      	orrs	r3, r2
 800ad62:	3401      	adds	r4, #1
 800ad64:	9304      	str	r3, [sp, #16]
 800ad66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6a:	4829      	ldr	r0, [pc, #164]	@ (800ae10 <_vfiprintf_r+0x220>)
 800ad6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad70:	2206      	movs	r2, #6
 800ad72:	f7f5 fa35 	bl	80001e0 <memchr>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d03f      	beq.n	800adfa <_vfiprintf_r+0x20a>
 800ad7a:	4b26      	ldr	r3, [pc, #152]	@ (800ae14 <_vfiprintf_r+0x224>)
 800ad7c:	bb1b      	cbnz	r3, 800adc6 <_vfiprintf_r+0x1d6>
 800ad7e:	9b03      	ldr	r3, [sp, #12]
 800ad80:	3307      	adds	r3, #7
 800ad82:	f023 0307 	bic.w	r3, r3, #7
 800ad86:	3308      	adds	r3, #8
 800ad88:	9303      	str	r3, [sp, #12]
 800ad8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8c:	443b      	add	r3, r7
 800ad8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad90:	e76a      	b.n	800ac68 <_vfiprintf_r+0x78>
 800ad92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad96:	460c      	mov	r4, r1
 800ad98:	2001      	movs	r0, #1
 800ad9a:	e7a8      	b.n	800acee <_vfiprintf_r+0xfe>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	3401      	adds	r4, #1
 800ada0:	9305      	str	r3, [sp, #20]
 800ada2:	4619      	mov	r1, r3
 800ada4:	f04f 0c0a 	mov.w	ip, #10
 800ada8:	4620      	mov	r0, r4
 800adaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adae:	3a30      	subs	r2, #48	@ 0x30
 800adb0:	2a09      	cmp	r2, #9
 800adb2:	d903      	bls.n	800adbc <_vfiprintf_r+0x1cc>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0c6      	beq.n	800ad46 <_vfiprintf_r+0x156>
 800adb8:	9105      	str	r1, [sp, #20]
 800adba:	e7c4      	b.n	800ad46 <_vfiprintf_r+0x156>
 800adbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc0:	4604      	mov	r4, r0
 800adc2:	2301      	movs	r3, #1
 800adc4:	e7f0      	b.n	800ada8 <_vfiprintf_r+0x1b8>
 800adc6:	ab03      	add	r3, sp, #12
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	462a      	mov	r2, r5
 800adcc:	4b12      	ldr	r3, [pc, #72]	@ (800ae18 <_vfiprintf_r+0x228>)
 800adce:	a904      	add	r1, sp, #16
 800add0:	4630      	mov	r0, r6
 800add2:	f3af 8000 	nop.w
 800add6:	4607      	mov	r7, r0
 800add8:	1c78      	adds	r0, r7, #1
 800adda:	d1d6      	bne.n	800ad8a <_vfiprintf_r+0x19a>
 800addc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adde:	07d9      	lsls	r1, r3, #31
 800ade0:	d405      	bmi.n	800adee <_vfiprintf_r+0x1fe>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d402      	bmi.n	800adee <_vfiprintf_r+0x1fe>
 800ade8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adea:	f7ff fe7d 	bl	800aae8 <__retarget_lock_release_recursive>
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	065b      	lsls	r3, r3, #25
 800adf2:	f53f af1f 	bmi.w	800ac34 <_vfiprintf_r+0x44>
 800adf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adf8:	e71e      	b.n	800ac38 <_vfiprintf_r+0x48>
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	462a      	mov	r2, r5
 800ae00:	4b05      	ldr	r3, [pc, #20]	@ (800ae18 <_vfiprintf_r+0x228>)
 800ae02:	a904      	add	r1, sp, #16
 800ae04:	4630      	mov	r0, r6
 800ae06:	f000 f879 	bl	800aefc <_printf_i>
 800ae0a:	e7e4      	b.n	800add6 <_vfiprintf_r+0x1e6>
 800ae0c:	0800bb7c 	.word	0x0800bb7c
 800ae10:	0800bb86 	.word	0x0800bb86
 800ae14:	00000000 	.word	0x00000000
 800ae18:	0800abcb 	.word	0x0800abcb
 800ae1c:	0800bb82 	.word	0x0800bb82

0800ae20 <_printf_common>:
 800ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	4616      	mov	r6, r2
 800ae26:	4698      	mov	r8, r3
 800ae28:	688a      	ldr	r2, [r1, #8]
 800ae2a:	690b      	ldr	r3, [r1, #16]
 800ae2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae30:	4293      	cmp	r3, r2
 800ae32:	bfb8      	it	lt
 800ae34:	4613      	movlt	r3, r2
 800ae36:	6033      	str	r3, [r6, #0]
 800ae38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b10a      	cbz	r2, 800ae46 <_printf_common+0x26>
 800ae42:	3301      	adds	r3, #1
 800ae44:	6033      	str	r3, [r6, #0]
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	0699      	lsls	r1, r3, #26
 800ae4a:	bf42      	ittt	mi
 800ae4c:	6833      	ldrmi	r3, [r6, #0]
 800ae4e:	3302      	addmi	r3, #2
 800ae50:	6033      	strmi	r3, [r6, #0]
 800ae52:	6825      	ldr	r5, [r4, #0]
 800ae54:	f015 0506 	ands.w	r5, r5, #6
 800ae58:	d106      	bne.n	800ae68 <_printf_common+0x48>
 800ae5a:	f104 0a19 	add.w	sl, r4, #25
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	6832      	ldr	r2, [r6, #0]
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	42ab      	cmp	r3, r5
 800ae66:	dc26      	bgt.n	800aeb6 <_printf_common+0x96>
 800ae68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae6c:	6822      	ldr	r2, [r4, #0]
 800ae6e:	3b00      	subs	r3, #0
 800ae70:	bf18      	it	ne
 800ae72:	2301      	movne	r3, #1
 800ae74:	0692      	lsls	r2, r2, #26
 800ae76:	d42b      	bmi.n	800aed0 <_printf_common+0xb0>
 800ae78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae7c:	4641      	mov	r1, r8
 800ae7e:	4638      	mov	r0, r7
 800ae80:	47c8      	blx	r9
 800ae82:	3001      	adds	r0, #1
 800ae84:	d01e      	beq.n	800aec4 <_printf_common+0xa4>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	6922      	ldr	r2, [r4, #16]
 800ae8a:	f003 0306 	and.w	r3, r3, #6
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	bf02      	ittt	eq
 800ae92:	68e5      	ldreq	r5, [r4, #12]
 800ae94:	6833      	ldreq	r3, [r6, #0]
 800ae96:	1aed      	subeq	r5, r5, r3
 800ae98:	68a3      	ldr	r3, [r4, #8]
 800ae9a:	bf0c      	ite	eq
 800ae9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aea0:	2500      	movne	r5, #0
 800aea2:	4293      	cmp	r3, r2
 800aea4:	bfc4      	itt	gt
 800aea6:	1a9b      	subgt	r3, r3, r2
 800aea8:	18ed      	addgt	r5, r5, r3
 800aeaa:	2600      	movs	r6, #0
 800aeac:	341a      	adds	r4, #26
 800aeae:	42b5      	cmp	r5, r6
 800aeb0:	d11a      	bne.n	800aee8 <_printf_common+0xc8>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e008      	b.n	800aec8 <_printf_common+0xa8>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4652      	mov	r2, sl
 800aeba:	4641      	mov	r1, r8
 800aebc:	4638      	mov	r0, r7
 800aebe:	47c8      	blx	r9
 800aec0:	3001      	adds	r0, #1
 800aec2:	d103      	bne.n	800aecc <_printf_common+0xac>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aecc:	3501      	adds	r5, #1
 800aece:	e7c6      	b.n	800ae5e <_printf_common+0x3e>
 800aed0:	18e1      	adds	r1, r4, r3
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	2030      	movs	r0, #48	@ 0x30
 800aed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aeda:	4422      	add	r2, r4
 800aedc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aee4:	3302      	adds	r3, #2
 800aee6:	e7c7      	b.n	800ae78 <_printf_common+0x58>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4622      	mov	r2, r4
 800aeec:	4641      	mov	r1, r8
 800aeee:	4638      	mov	r0, r7
 800aef0:	47c8      	blx	r9
 800aef2:	3001      	adds	r0, #1
 800aef4:	d0e6      	beq.n	800aec4 <_printf_common+0xa4>
 800aef6:	3601      	adds	r6, #1
 800aef8:	e7d9      	b.n	800aeae <_printf_common+0x8e>
	...

0800aefc <_printf_i>:
 800aefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	7e0f      	ldrb	r7, [r1, #24]
 800af02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af04:	2f78      	cmp	r7, #120	@ 0x78
 800af06:	4691      	mov	r9, r2
 800af08:	4680      	mov	r8, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	469a      	mov	sl, r3
 800af0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af12:	d807      	bhi.n	800af24 <_printf_i+0x28>
 800af14:	2f62      	cmp	r7, #98	@ 0x62
 800af16:	d80a      	bhi.n	800af2e <_printf_i+0x32>
 800af18:	2f00      	cmp	r7, #0
 800af1a:	f000 80d1 	beq.w	800b0c0 <_printf_i+0x1c4>
 800af1e:	2f58      	cmp	r7, #88	@ 0x58
 800af20:	f000 80b8 	beq.w	800b094 <_printf_i+0x198>
 800af24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af2c:	e03a      	b.n	800afa4 <_printf_i+0xa8>
 800af2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af32:	2b15      	cmp	r3, #21
 800af34:	d8f6      	bhi.n	800af24 <_printf_i+0x28>
 800af36:	a101      	add	r1, pc, #4	@ (adr r1, 800af3c <_printf_i+0x40>)
 800af38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af3c:	0800af95 	.word	0x0800af95
 800af40:	0800afa9 	.word	0x0800afa9
 800af44:	0800af25 	.word	0x0800af25
 800af48:	0800af25 	.word	0x0800af25
 800af4c:	0800af25 	.word	0x0800af25
 800af50:	0800af25 	.word	0x0800af25
 800af54:	0800afa9 	.word	0x0800afa9
 800af58:	0800af25 	.word	0x0800af25
 800af5c:	0800af25 	.word	0x0800af25
 800af60:	0800af25 	.word	0x0800af25
 800af64:	0800af25 	.word	0x0800af25
 800af68:	0800b0a7 	.word	0x0800b0a7
 800af6c:	0800afd3 	.word	0x0800afd3
 800af70:	0800b061 	.word	0x0800b061
 800af74:	0800af25 	.word	0x0800af25
 800af78:	0800af25 	.word	0x0800af25
 800af7c:	0800b0c9 	.word	0x0800b0c9
 800af80:	0800af25 	.word	0x0800af25
 800af84:	0800afd3 	.word	0x0800afd3
 800af88:	0800af25 	.word	0x0800af25
 800af8c:	0800af25 	.word	0x0800af25
 800af90:	0800b069 	.word	0x0800b069
 800af94:	6833      	ldr	r3, [r6, #0]
 800af96:	1d1a      	adds	r2, r3, #4
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6032      	str	r2, [r6, #0]
 800af9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afa4:	2301      	movs	r3, #1
 800afa6:	e09c      	b.n	800b0e2 <_printf_i+0x1e6>
 800afa8:	6833      	ldr	r3, [r6, #0]
 800afaa:	6820      	ldr	r0, [r4, #0]
 800afac:	1d19      	adds	r1, r3, #4
 800afae:	6031      	str	r1, [r6, #0]
 800afb0:	0606      	lsls	r6, r0, #24
 800afb2:	d501      	bpl.n	800afb8 <_printf_i+0xbc>
 800afb4:	681d      	ldr	r5, [r3, #0]
 800afb6:	e003      	b.n	800afc0 <_printf_i+0xc4>
 800afb8:	0645      	lsls	r5, r0, #25
 800afba:	d5fb      	bpl.n	800afb4 <_printf_i+0xb8>
 800afbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	da03      	bge.n	800afcc <_printf_i+0xd0>
 800afc4:	232d      	movs	r3, #45	@ 0x2d
 800afc6:	426d      	negs	r5, r5
 800afc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afcc:	4858      	ldr	r0, [pc, #352]	@ (800b130 <_printf_i+0x234>)
 800afce:	230a      	movs	r3, #10
 800afd0:	e011      	b.n	800aff6 <_printf_i+0xfa>
 800afd2:	6821      	ldr	r1, [r4, #0]
 800afd4:	6833      	ldr	r3, [r6, #0]
 800afd6:	0608      	lsls	r0, r1, #24
 800afd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800afdc:	d402      	bmi.n	800afe4 <_printf_i+0xe8>
 800afde:	0649      	lsls	r1, r1, #25
 800afe0:	bf48      	it	mi
 800afe2:	b2ad      	uxthmi	r5, r5
 800afe4:	2f6f      	cmp	r7, #111	@ 0x6f
 800afe6:	4852      	ldr	r0, [pc, #328]	@ (800b130 <_printf_i+0x234>)
 800afe8:	6033      	str	r3, [r6, #0]
 800afea:	bf14      	ite	ne
 800afec:	230a      	movne	r3, #10
 800afee:	2308      	moveq	r3, #8
 800aff0:	2100      	movs	r1, #0
 800aff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aff6:	6866      	ldr	r6, [r4, #4]
 800aff8:	60a6      	str	r6, [r4, #8]
 800affa:	2e00      	cmp	r6, #0
 800affc:	db05      	blt.n	800b00a <_printf_i+0x10e>
 800affe:	6821      	ldr	r1, [r4, #0]
 800b000:	432e      	orrs	r6, r5
 800b002:	f021 0104 	bic.w	r1, r1, #4
 800b006:	6021      	str	r1, [r4, #0]
 800b008:	d04b      	beq.n	800b0a2 <_printf_i+0x1a6>
 800b00a:	4616      	mov	r6, r2
 800b00c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b010:	fb03 5711 	mls	r7, r3, r1, r5
 800b014:	5dc7      	ldrb	r7, [r0, r7]
 800b016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b01a:	462f      	mov	r7, r5
 800b01c:	42bb      	cmp	r3, r7
 800b01e:	460d      	mov	r5, r1
 800b020:	d9f4      	bls.n	800b00c <_printf_i+0x110>
 800b022:	2b08      	cmp	r3, #8
 800b024:	d10b      	bne.n	800b03e <_printf_i+0x142>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	07df      	lsls	r7, r3, #31
 800b02a:	d508      	bpl.n	800b03e <_printf_i+0x142>
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	6861      	ldr	r1, [r4, #4]
 800b030:	4299      	cmp	r1, r3
 800b032:	bfde      	ittt	le
 800b034:	2330      	movle	r3, #48	@ 0x30
 800b036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b03a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b03e:	1b92      	subs	r2, r2, r6
 800b040:	6122      	str	r2, [r4, #16]
 800b042:	f8cd a000 	str.w	sl, [sp]
 800b046:	464b      	mov	r3, r9
 800b048:	aa03      	add	r2, sp, #12
 800b04a:	4621      	mov	r1, r4
 800b04c:	4640      	mov	r0, r8
 800b04e:	f7ff fee7 	bl	800ae20 <_printf_common>
 800b052:	3001      	adds	r0, #1
 800b054:	d14a      	bne.n	800b0ec <_printf_i+0x1f0>
 800b056:	f04f 30ff 	mov.w	r0, #4294967295
 800b05a:	b004      	add	sp, #16
 800b05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	f043 0320 	orr.w	r3, r3, #32
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	4832      	ldr	r0, [pc, #200]	@ (800b134 <_printf_i+0x238>)
 800b06a:	2778      	movs	r7, #120	@ 0x78
 800b06c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	6831      	ldr	r1, [r6, #0]
 800b074:	061f      	lsls	r7, r3, #24
 800b076:	f851 5b04 	ldr.w	r5, [r1], #4
 800b07a:	d402      	bmi.n	800b082 <_printf_i+0x186>
 800b07c:	065f      	lsls	r7, r3, #25
 800b07e:	bf48      	it	mi
 800b080:	b2ad      	uxthmi	r5, r5
 800b082:	6031      	str	r1, [r6, #0]
 800b084:	07d9      	lsls	r1, r3, #31
 800b086:	bf44      	itt	mi
 800b088:	f043 0320 	orrmi.w	r3, r3, #32
 800b08c:	6023      	strmi	r3, [r4, #0]
 800b08e:	b11d      	cbz	r5, 800b098 <_printf_i+0x19c>
 800b090:	2310      	movs	r3, #16
 800b092:	e7ad      	b.n	800aff0 <_printf_i+0xf4>
 800b094:	4826      	ldr	r0, [pc, #152]	@ (800b130 <_printf_i+0x234>)
 800b096:	e7e9      	b.n	800b06c <_printf_i+0x170>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	f023 0320 	bic.w	r3, r3, #32
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	e7f6      	b.n	800b090 <_printf_i+0x194>
 800b0a2:	4616      	mov	r6, r2
 800b0a4:	e7bd      	b.n	800b022 <_printf_i+0x126>
 800b0a6:	6833      	ldr	r3, [r6, #0]
 800b0a8:	6825      	ldr	r5, [r4, #0]
 800b0aa:	6961      	ldr	r1, [r4, #20]
 800b0ac:	1d18      	adds	r0, r3, #4
 800b0ae:	6030      	str	r0, [r6, #0]
 800b0b0:	062e      	lsls	r6, r5, #24
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	d501      	bpl.n	800b0ba <_printf_i+0x1be>
 800b0b6:	6019      	str	r1, [r3, #0]
 800b0b8:	e002      	b.n	800b0c0 <_printf_i+0x1c4>
 800b0ba:	0668      	lsls	r0, r5, #25
 800b0bc:	d5fb      	bpl.n	800b0b6 <_printf_i+0x1ba>
 800b0be:	8019      	strh	r1, [r3, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	4616      	mov	r6, r2
 800b0c6:	e7bc      	b.n	800b042 <_printf_i+0x146>
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	1d1a      	adds	r2, r3, #4
 800b0cc:	6032      	str	r2, [r6, #0]
 800b0ce:	681e      	ldr	r6, [r3, #0]
 800b0d0:	6862      	ldr	r2, [r4, #4]
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7f5 f883 	bl	80001e0 <memchr>
 800b0da:	b108      	cbz	r0, 800b0e0 <_printf_i+0x1e4>
 800b0dc:	1b80      	subs	r0, r0, r6
 800b0de:	6060      	str	r0, [r4, #4]
 800b0e0:	6863      	ldr	r3, [r4, #4]
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0ea:	e7aa      	b.n	800b042 <_printf_i+0x146>
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	4632      	mov	r2, r6
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	47d0      	blx	sl
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	d0ad      	beq.n	800b056 <_printf_i+0x15a>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	079b      	lsls	r3, r3, #30
 800b0fe:	d413      	bmi.n	800b128 <_printf_i+0x22c>
 800b100:	68e0      	ldr	r0, [r4, #12]
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	4298      	cmp	r0, r3
 800b106:	bfb8      	it	lt
 800b108:	4618      	movlt	r0, r3
 800b10a:	e7a6      	b.n	800b05a <_printf_i+0x15e>
 800b10c:	2301      	movs	r3, #1
 800b10e:	4632      	mov	r2, r6
 800b110:	4649      	mov	r1, r9
 800b112:	4640      	mov	r0, r8
 800b114:	47d0      	blx	sl
 800b116:	3001      	adds	r0, #1
 800b118:	d09d      	beq.n	800b056 <_printf_i+0x15a>
 800b11a:	3501      	adds	r5, #1
 800b11c:	68e3      	ldr	r3, [r4, #12]
 800b11e:	9903      	ldr	r1, [sp, #12]
 800b120:	1a5b      	subs	r3, r3, r1
 800b122:	42ab      	cmp	r3, r5
 800b124:	dcf2      	bgt.n	800b10c <_printf_i+0x210>
 800b126:	e7eb      	b.n	800b100 <_printf_i+0x204>
 800b128:	2500      	movs	r5, #0
 800b12a:	f104 0619 	add.w	r6, r4, #25
 800b12e:	e7f5      	b.n	800b11c <_printf_i+0x220>
 800b130:	0800bb8d 	.word	0x0800bb8d
 800b134:	0800bb9e 	.word	0x0800bb9e

0800b138 <__swhatbuf_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	2900      	cmp	r1, #0
 800b142:	b096      	sub	sp, #88	@ 0x58
 800b144:	4615      	mov	r5, r2
 800b146:	461e      	mov	r6, r3
 800b148:	da0d      	bge.n	800b166 <__swhatbuf_r+0x2e>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b150:	f04f 0100 	mov.w	r1, #0
 800b154:	bf14      	ite	ne
 800b156:	2340      	movne	r3, #64	@ 0x40
 800b158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b15c:	2000      	movs	r0, #0
 800b15e:	6031      	str	r1, [r6, #0]
 800b160:	602b      	str	r3, [r5, #0]
 800b162:	b016      	add	sp, #88	@ 0x58
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	466a      	mov	r2, sp
 800b168:	f000 f848 	bl	800b1fc <_fstat_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	dbec      	blt.n	800b14a <__swhatbuf_r+0x12>
 800b170:	9901      	ldr	r1, [sp, #4]
 800b172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b17a:	4259      	negs	r1, r3
 800b17c:	4159      	adcs	r1, r3
 800b17e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b182:	e7eb      	b.n	800b15c <__swhatbuf_r+0x24>

0800b184 <__smakebuf_r>:
 800b184:	898b      	ldrh	r3, [r1, #12]
 800b186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b188:	079d      	lsls	r5, r3, #30
 800b18a:	4606      	mov	r6, r0
 800b18c:	460c      	mov	r4, r1
 800b18e:	d507      	bpl.n	800b1a0 <__smakebuf_r+0x1c>
 800b190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	2301      	movs	r3, #1
 800b19a:	6163      	str	r3, [r4, #20]
 800b19c:	b003      	add	sp, #12
 800b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a0:	ab01      	add	r3, sp, #4
 800b1a2:	466a      	mov	r2, sp
 800b1a4:	f7ff ffc8 	bl	800b138 <__swhatbuf_r>
 800b1a8:	9f00      	ldr	r7, [sp, #0]
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7ff f8a0 	bl	800a2f4 <_malloc_r>
 800b1b4:	b948      	cbnz	r0, 800b1ca <__smakebuf_r+0x46>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	059a      	lsls	r2, r3, #22
 800b1bc:	d4ee      	bmi.n	800b19c <__smakebuf_r+0x18>
 800b1be:	f023 0303 	bic.w	r3, r3, #3
 800b1c2:	f043 0302 	orr.w	r3, r3, #2
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	e7e2      	b.n	800b190 <__smakebuf_r+0xc>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	6020      	str	r0, [r4, #0]
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1da:	b15b      	cbz	r3, 800b1f4 <__smakebuf_r+0x70>
 800b1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f81d 	bl	800b220 <_isatty_r>
 800b1e6:	b128      	cbz	r0, 800b1f4 <__smakebuf_r+0x70>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	431d      	orrs	r5, r3
 800b1f8:	81a5      	strh	r5, [r4, #12]
 800b1fa:	e7cf      	b.n	800b19c <__smakebuf_r+0x18>

0800b1fc <_fstat_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	@ (800b21c <_fstat_r+0x20>)
 800b200:	2300      	movs	r3, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7fb ff31 	bl	8007070 <_fstat>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_fstat_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_fstat_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	200006d0 	.word	0x200006d0

0800b220 <_isatty_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_isatty_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7fb fe8e 	bl	8006f4c <_isatty>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_isatty_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_isatty_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	200006d0 	.word	0x200006d0

0800b240 <_init>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

0800b24c <_fini>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr
