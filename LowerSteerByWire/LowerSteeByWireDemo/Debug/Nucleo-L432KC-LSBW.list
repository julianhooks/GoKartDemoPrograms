
Nucleo-L432KC-LSBW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a24c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a3e0  0800a3e0  0000b3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a854  0800a854  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a85c  0800a85c  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a85c  0800a85c  0000b85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a860  0800a860  0000b860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a864  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001e0  0800aa44  0000c1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800aa44  0000c75c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138a5  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  0001fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00022450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3d  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023161  00000000  00000000  000244cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f3  00000000  00000000  0004762e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa12  00000000  00000000  0005c921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  0012c378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00132594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3c4 	.word	0x0800a3c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a3c4 	.word	0x0800a3c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <is_parity_even_16>:
 * i.e., the number of 1s (in the binary representation) is even.
 * @see https://stackoverflow.com/a/21618038
 * @param x data (16 bits)
 * @return true if if the given value (16 bits) has even parity
 */
static bool is_parity_even_16(uint16_t x) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	x ^= x >> 8;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b29a      	uxth	r2, r3
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	4053      	eors	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
	x ^= x >> 4;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	b29a      	uxth	r2, r3
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4053      	eors	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	x ^= x >> 2;
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	b29a      	uxth	r2, r3
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	4053      	eors	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	x ^= x >> 1;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	085b      	lsrs	r3, r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4053      	eors	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
	return (~x) & 1;
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <spi_as5047p_blocking_read>:

int spi_as5047p_blocking_read(double *angle, as5047p_spi_comm_stats_t *stats) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]

	// CSn signal (SS) (chip select)
	// logical zero means active
	// uint32_t t1 = htim1.Instance->CNT;
	HAL_GPIO_WritePin(SPI1_NSS_MANUAL_GPIO_Port, SPI1_NSS_MANUAL_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2110      	movs	r1, #16
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108a:	f001 fb33 	bl	80026f4 <HAL_GPIO_WritePin>

	// note that there needs to be at least 50 ns delay between CSn falling edge and first clock rising edge
	// but no need to add explict delay here (implicit delay caused by our MCU/bus speed adds ~ 1000 ns)

	__HAL_SPI_ENABLE(&hspi1);
 800108e:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800109c:	601a      	str	r2, [r3, #0]

	// wait for 16 bits
	while (SPI_CHECK_FLAG(hspi1.Instance->SR, SPI_FLAG_RXNE) != SET);
 800109e:	bf00      	nop
 80010a0:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d1f8      	bne.n	80010a0 <spi_as5047p_blocking_read+0x28>

	bool overrun = SPI_CHECK_FLAG(hspi1.Instance->SR, SPI_FLAG_OVR) == SET;
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b8:	2b40      	cmp	r3, #64	@ 0x40
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	747b      	strb	r3, [r7, #17]

	__HAL_SPI_DISABLE(&hspi1);
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010d0:	601a      	str	r2, [r3, #0]

	// do the correct disable procedure for receive only mode (see the Reference Manual)
	while (SPI_CHECK_FLAG(hspi1.Instance->SR, SPI_FLAG_BSY) != RESET);
 80010d2:	bf00      	nop
 80010d4:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	2b80      	cmp	r3, #128	@ 0x80
 80010e0:	d0f8      	beq.n	80010d4 <spi_as5047p_blocking_read+0x5c>
	int num_frames = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
	uint16_t frame;
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_FRLVL) != SPI_FRLVL_EMPTY) {
 80010e6:	e006      	b.n	80010f6 <spi_as5047p_blocking_read+0x7e>
		frame = (uint16_t) hspi1.Instance->DR;
 80010e8:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	827b      	strh	r3, [r7, #18]
		num_frames++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_FRLVL) != SPI_FRLVL_EMPTY) {
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <spi_as5047p_blocking_read+0x140>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001100:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001104:	d101      	bne.n	800110a <spi_as5047p_blocking_read+0x92>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <spi_as5047p_blocking_read+0x94>
 800110a:	2300      	movs	r3, #0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1eb      	bne.n	80010e8 <spi_as5047p_blocking_read+0x70>

	// note that there needs to be at least 50 ns delay between CSn falling edge and first clock rising edge
	// but no need to add explict delay here

	// deselect device (logical high means inactive)
	HAL_GPIO_WritePin(SPI1_NSS_MANUAL_GPIO_Port, SPI1_NSS_MANUAL_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f001 faec 	bl	80026f4 <HAL_GPIO_WritePin>

	// printf("diff = %lu" nl, diff);

	// save stats (for debugging)

	if (overrun) {
 800111c:	7c7b      	ldrb	r3, [r7, #17]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <spi_as5047p_blocking_read+0xb4>
		stats->num_overruns++;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	605a      	str	r2, [r3, #4]
	}

	if (num_frames != 1) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d009      	beq.n	8001146 <spi_as5047p_blocking_read+0xce>
		stats->num_unexpected_frames_occurred++;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	609a      	str	r2, [r3, #8]
		if (num_frames == 0) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <spi_as5047p_blocking_read+0xce>
			return 1;
 8001142:	2301      	movs	r3, #1
 8001144:	e02e      	b.n	80011a4 <spi_as5047p_blocking_read+0x12c>
		}
	}

	// check parity
	bool parity_ok = is_parity_even_16(frame);
 8001146:	8a7b      	ldrh	r3, [r7, #18]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff69 	bl	8001020 <is_parity_even_16>
 800114e:	4603      	mov	r3, r0
 8001150:	743b      	strb	r3, [r7, #16]

	if (!parity_ok) {
 8001152:	7c3b      	ldrb	r3, [r7, #16]
 8001154:	f083 0301 	eor.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <spi_as5047p_blocking_read+0xf4>
		stats->num_parity_errors++;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
		return 2;
 8001168:	2302      	movs	r3, #2
 800116a:	e01b      	b.n	80011a4 <spi_as5047p_blocking_read+0x12c>
	}

	// extract angle raw value (0 - 0x3FFF)
	uint16_t raw_value = 0x3FFF & frame;
 800116c:	8a7b      	ldrh	r3, [r7, #18]
 800116e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001172:	81fb      	strh	r3, [r7, #14]

	// convert to degrees (0 - 360)
	*angle = ((double) raw_value * 360) / 0x3FFF;
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9c4 	bl	8000504 <__aeabi_ui2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <spi_as5047p_blocking_read+0x144>)
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	a308      	add	r3, pc, #32	@ (adr r3, 80011b0 <spi_as5047p_blocking_read+0x138>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fb5a 	bl	800084c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	e9c1 2300 	strd	r2, r3, [r1]

	return 0;
 80011a2:	2300      	movs	r3, #0

}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40cfff80 	.word	0x40cfff80
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	40768000 	.word	0x40768000

080011c0 <_write>:
int dutyMax = 200;
int dutyMin = 100;


// uart print to serial terminal for debugging purpose
int _write(int file, char *ptr, int len){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <_write+0x28>)
 80011d8:	f003 fd4e 	bl	8004c78 <HAL_UART_Transmit>
	return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000390 	.word	0x20000390

080011ec <read_steer>:
double steerSum = 0.0;
const int steerLength = 55;
double steerBuffer[55] = {0};
int steerIndex = 0;
bool steerFilled = false;
void read_steer(){
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
	as5047p_spi_comm_stats_t as5047p;

    if (spi_as5047p_blocking_read(&steerRaw, &as5047p) == HAL_OK) {
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4843      	ldr	r0, [pc, #268]	@ (8001304 <read_steer+0x118>)
 80011f8:	f7ff ff3e 	bl	8001078 <spi_as5047p_blocking_read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d17c      	bne.n	80012fc <read_steer+0x110>
    	steerRaw += steer_offset;
 8001202:	4b40      	ldr	r3, [pc, #256]	@ (8001304 <read_steer+0x118>)
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <read_steer+0x11c>)
 800120e:	f7ff f83d 	bl	800028c <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	493b      	ldr	r1, [pc, #236]	@ (8001304 <read_steer+0x118>)
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
    	if (steerRaw <0) steerRaw += 360;
 800121c:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <read_steer+0x118>)
 800121e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	f7ff fc57 	bl	8000adc <__aeabi_dcmplt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00c      	beq.n	800124e <read_steer+0x62>
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <read_steer+0x118>)
 8001236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <read_steer+0x120>)
 8001240:	f7ff f824 	bl	800028c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	492e      	ldr	r1, [pc, #184]	@ (8001304 <read_steer+0x118>)
 800124a:	e9c1 2300 	strd	r2, r3, [r1]
    	//rolling average
    	double newSample = steerRaw;
 800124e:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <read_steer+0x118>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	e9c7 2304 	strd	r2, r3, [r7, #16]

    	        // Remove oldest value
    	        steerSum -= steerBuffer[steerIndex];
 8001258:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <read_steer+0x124>)
 800125a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125e:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <read_steer+0x128>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2d      	ldr	r2, [pc, #180]	@ (8001318 <read_steer+0x12c>)
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f80c 	bl	8000288 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4926      	ldr	r1, [pc, #152]	@ (8001310 <read_steer+0x124>)
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
    	        // Add new value
    	        steerBuffer[steerIndex] = newSample;
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <read_steer+0x128>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <read_steer+0x12c>)
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	18d1      	adds	r1, r2, r3
 8001284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001288:	e9c1 2300 	strd	r2, r3, [r1]
    	        steerSum += newSample;
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <read_steer+0x124>)
 800128e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001292:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001296:	f7fe fff9 	bl	800028c <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	491c      	ldr	r1, [pc, #112]	@ (8001310 <read_steer+0x124>)
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]

    	        // Advance index
    	        steerIndex = (steerIndex + 1) % steerLength;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <read_steer+0x128>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	2237      	movs	r2, #55	@ 0x37
 80012ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <read_steer+0x128>)
 80012b8:	6013      	str	r3, [r2, #0]

    	        // Compute average
    	        int divisor = steerFilled ? steerLength : steerIndex;
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <read_steer+0x130>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <read_steer+0xda>
 80012c2:	2337      	movs	r3, #55	@ 0x37
 80012c4:	e001      	b.n	80012ca <read_steer+0xde>
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <read_steer+0x128>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
    	        if (steerIndex == 0) steerFilled = true;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <read_steer+0x128>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <read_steer+0xee>
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <read_steer+0x130>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]

    	        steer_measured = steerSum / (double)divisor;
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <read_steer+0x124>)
 80012dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_i2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	f7ff faad 	bl	800084c <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	490a      	ldr	r1, [pc, #40]	@ (8001320 <read_steer+0x134>)
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	20000428 	.word	0x20000428
 8001308:	c0640000 	.word	0xc0640000
 800130c:	40768000 	.word	0x40768000
 8001310:	20000440 	.word	0x20000440
 8001314:	20000600 	.word	0x20000600
 8001318:	20000448 	.word	0x20000448
 800131c:	20000604 	.word	0x20000604
 8001320:	20000430 	.word	0x20000430
 8001324:	00000000 	.word	0x00000000

08001328 <computeDutyCycle>:

// modified PID control for steering current
void computeDutyCycle(){
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b08a      	sub	sp, #40	@ 0x28
 800132e:	af00      	add	r7, sp, #0

	if (steer_desired > steer_right || steer_desired < steer_left)
 8001330:	4b97      	ldr	r3, [pc, #604]	@ (8001590 <computeDutyCycle+0x268>)
 8001332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001336:	a38e      	add	r3, pc, #568	@ (adr r3, 8001570 <computeDutyCycle+0x248>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <computeDutyCycle+0x34>
 8001346:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <computeDutyCycle+0x268>)
 8001348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b90      	ldr	r3, [pc, #576]	@ (8001594 <computeDutyCycle+0x26c>)
 8001352:	f7ff fbc3 	bl	8000adc <__aeabi_dcmplt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00b      	beq.n	8001374 <computeDutyCycle+0x4c>
	{
		dutyCycle = (dutyMax + dutyMin) / 2;
 800135c:	4b8e      	ldr	r3, [pc, #568]	@ (8001598 <computeDutyCycle+0x270>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b8e      	ldr	r3, [pc, #568]	@ (800159c <computeDutyCycle+0x274>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4413      	add	r3, r2
 8001366:	0fda      	lsrs	r2, r3, #31
 8001368:	4413      	add	r3, r2
 800136a:	105b      	asrs	r3, r3, #1
 800136c:	461a      	mov	r2, r3
 800136e:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <computeDutyCycle+0x278>)
 8001370:	601a      	str	r2, [r3, #0]
		return;
 8001372:	e0f9      	b.n	8001568 <computeDutyCycle+0x240>
	}
	if (steer_measured > steer_right || steer_measured < steer_left)
 8001374:	4b8b      	ldr	r3, [pc, #556]	@ (80015a4 <computeDutyCycle+0x27c>)
 8001376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137a:	a37d      	add	r3, pc, #500	@ (adr r3, 8001570 <computeDutyCycle+0x248>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <computeDutyCycle+0x78>
 800138a:	4b86      	ldr	r3, [pc, #536]	@ (80015a4 <computeDutyCycle+0x27c>)
 800138c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b7f      	ldr	r3, [pc, #508]	@ (8001594 <computeDutyCycle+0x26c>)
 8001396:	f7ff fba1 	bl	8000adc <__aeabi_dcmplt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <computeDutyCycle+0x90>
	{
		dutyCycle = (dutyMax + dutyMin) / 2;
 80013a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001598 <computeDutyCycle+0x270>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b7d      	ldr	r3, [pc, #500]	@ (800159c <computeDutyCycle+0x274>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	0fda      	lsrs	r2, r3, #31
 80013ac:	4413      	add	r3, r2
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <computeDutyCycle+0x278>)
 80013b4:	601a      	str	r2, [r3, #0]
		return;
 80013b6:	e0d7      	b.n	8001568 <computeDutyCycle+0x240>
	}

    error = steer_desired - steer_measured;
 80013b8:	4b75      	ldr	r3, [pc, #468]	@ (8001590 <computeDutyCycle+0x268>)
 80013ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013be:	4b79      	ldr	r3, [pc, #484]	@ (80015a4 <computeDutyCycle+0x27c>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7fe ff60 	bl	8000288 <__aeabi_dsub>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4976      	ldr	r1, [pc, #472]	@ (80015a8 <computeDutyCycle+0x280>)
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
    //positive = turn left, negative = right

    // ignore small error to avoid oscillation
    if (fabs(error) < 0.1)
 80013d2:	4b75      	ldr	r3, [pc, #468]	@ (80015a8 <computeDutyCycle+0x280>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	4692      	mov	sl, r2
 80013da:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80013de:	a366      	add	r3, pc, #408	@ (adr r3, 8001578 <computeDutyCycle+0x250>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	4650      	mov	r0, sl
 80013e6:	4659      	mov	r1, fp
 80013e8:	f7ff fb78 	bl	8000adc <__aeabi_dcmplt>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d018      	beq.n	8001424 <computeDutyCycle+0xfc>
    {
    	error = error_prev = 0.0;
 80013f2:	496e      	ldr	r1, [pc, #440]	@ (80015ac <computeDutyCycle+0x284>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
 8001400:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <computeDutyCycle+0x284>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	4968      	ldr	r1, [pc, #416]	@ (80015a8 <computeDutyCycle+0x280>)
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
    	dutyCycle = (dutyMax + dutyMin) / 2;
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <computeDutyCycle+0x270>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b62      	ldr	r3, [pc, #392]	@ (800159c <computeDutyCycle+0x274>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4413      	add	r3, r2
 8001416:	0fda      	lsrs	r2, r3, #31
 8001418:	4413      	add	r3, r2
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	461a      	mov	r2, r3
 800141e:	4b60      	ldr	r3, [pc, #384]	@ (80015a0 <computeDutyCycle+0x278>)
 8001420:	601a      	str	r2, [r3, #0]
    	return;
 8001422:	e0a1      	b.n	8001568 <computeDutyCycle+0x240>
    }

    double limit = fabs(steer_right - steer_left) * 0.7 * 3; //the minimum error value for which the duty cycle is maximized.
 8001424:	a152      	add	r1, pc, #328	@ (adr r1, 8001570 <computeDutyCycle+0x248>)
 8001426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b59      	ldr	r3, [pc, #356]	@ (8001594 <computeDutyCycle+0x26c>)
 8001430:	f7fe ff2a 	bl	8000288 <__aeabi_dsub>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4690      	mov	r8, r2
 800143a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800143e:	a350      	add	r3, pc, #320	@ (adr r3, 8001580 <computeDutyCycle+0x258>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	4640      	mov	r0, r8
 8001446:	4649      	mov	r1, r9
 8001448:	f7ff f8d6 	bl	80005f8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <computeDutyCycle+0x288>)
 800145a:	f7ff f8cd 	bl	80005f8 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int m = (dutyMax + dutyMin)/2;
 8001466:	4b4c      	ldr	r3, [pc, #304]	@ (8001598 <computeDutyCycle+0x270>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b4c      	ldr	r3, [pc, #304]	@ (800159c <computeDutyCycle+0x274>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	0fda      	lsrs	r2, r3, #31
 8001472:	4413      	add	r3, r2
 8001474:	105b      	asrs	r3, r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    double minOffset = m / 25;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4a4e      	ldr	r2, [pc, #312]	@ (80015b4 <computeDutyCycle+0x28c>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	10d2      	asrs	r2, r2, #3
 8001482:	17db      	asrs	r3, r3, #31
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double sign = error / fabs(error);
 8001494:	4b44      	ldr	r3, [pc, #272]	@ (80015a8 <computeDutyCycle+0x280>)
 8001496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149a:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <computeDutyCycle+0x280>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	4614      	mov	r4, r2
 80014a2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014a6:	4622      	mov	r2, r4
 80014a8:	462b      	mov	r3, r5
 80014aa:	f7ff f9cf 	bl	800084c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int duty = m -(error * m/(limit*1.136)) - sign*minOffset; //1.5 fixes the shift from minOffset
 80014b6:	69f8      	ldr	r0, [r7, #28]
 80014b8:	f7ff f834 	bl	8000524 <__aeabi_i2d>
 80014bc:	4604      	mov	r4, r0
 80014be:	460d      	mov	r5, r1
 80014c0:	69f8      	ldr	r0, [r7, #28]
 80014c2:	f7ff f82f 	bl	8000524 <__aeabi_i2d>
 80014c6:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <computeDutyCycle+0x280>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f894 	bl	80005f8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4690      	mov	r8, r2
 80014d6:	4699      	mov	r9, r3
 80014d8:	a32b      	add	r3, pc, #172	@ (adr r3, 8001588 <computeDutyCycle+0x260>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e2:	f7ff f889 	bl	80005f8 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4640      	mov	r0, r8
 80014ec:	4649      	mov	r1, r9
 80014ee:	f7ff f9ad 	bl	800084c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4620      	mov	r0, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	f7fe fec5 	bl	8000288 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4614      	mov	r4, r2
 8001504:	461d      	mov	r5, r3
 8001506:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150e:	f7ff f873 	bl	80005f8 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb17 	bl	8000b58 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	607b      	str	r3, [r7, #4]

    dutyCycle = duty;
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <computeDutyCycle+0x278>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]

	//max duty cyle at |error| > limit

    if (dutyCycle > dutyMax){
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <computeDutyCycle+0x278>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <computeDutyCycle+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	dd03      	ble.n	8001548 <computeDutyCycle+0x220>
    	dutyCycle = dutyMax;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <computeDutyCycle+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <computeDutyCycle+0x278>)
 8001546:	6013      	str	r3, [r2, #0]
    }
    if (dutyCycle < dutyMin){
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <computeDutyCycle+0x278>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <computeDutyCycle+0x274>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	da03      	bge.n	800155c <computeDutyCycle+0x234>
    	dutyCycle = dutyMin;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <computeDutyCycle+0x274>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <computeDutyCycle+0x278>)
 800155a:	6013      	str	r3, [r2, #0]
    }

	error_prev = error;
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <computeDutyCycle+0x280>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	4912      	ldr	r1, [pc, #72]	@ (80015ac <computeDutyCycle+0x284>)
 8001564:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001570:	00000000 	.word	0x00000000
 8001574:	4067c000 	.word	0x4067c000
 8001578:	9999999a 	.word	0x9999999a
 800157c:	3fb99999 	.word	0x3fb99999
 8001580:	66666666 	.word	0x66666666
 8001584:	3fe66666 	.word	0x3fe66666
 8001588:	56041893 	.word	0x56041893
 800158c:	3ff22d0e 	.word	0x3ff22d0e
 8001590:	20000438 	.word	0x20000438
 8001594:	40440000 	.word	0x40440000
 8001598:	20000004 	.word	0x20000004
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000430 	.word	0x20000430
 80015a8:	20000418 	.word	0x20000418
 80015ac:	20000420 	.word	0x20000420
 80015b0:	40080000 	.word	0x40080000
 80015b4:	51eb851f 	.word	0x51eb851f

080015b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	// 25Hz - 40ms steering motor NEO1650 control loop
	if (htim == &htim6) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d107      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x20>
		steer_desired = steer_center;
 80015c8:	a309      	add	r3, pc, #36	@ (adr r3, 80015f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	490b      	ldr	r1, [pc, #44]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]
		computeDutyCycle();
 80015d4:	f7ff fea8 	bl	8001328 <computeDutyCycle>

		//send_command();
	}

	// 50Hz - 20ms read current steering angle from AS5047 sensor
	if (htim == &htim7) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		read_steer();
 80015e0:	f7ff fe04 	bl	80011ec <read_steer>
	}
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	00000000 	.word	0x00000000
 80015f4:	405cc000 	.word	0x405cc000
 80015f8:	200002ac 	.word	0x200002ac
 80015fc:	20000438 	.word	0x20000438
 8001600:	200002f8 	.word	0x200002f8

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 fd05 	bl	8002016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f81c 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f000 fa08 	bl	8001a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001614:	f000 f9d6 	bl	80019c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001618:	f000 f868 	bl	80016ec <MX_SPI1_Init>
  MX_TIM6_Init();
 800161c:	f000 f934 	bl	8001888 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001620:	f000 f96c 	bl	80018fc <MX_TIM7_Init>
  MX_TIM16_Init();
 8001624:	f000 f9a4 	bl	8001970 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001628:	f000 f89e 	bl	8001768 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800162c:	2104      	movs	r1, #4
 800162e:	4804      	ldr	r0, [pc, #16]	@ (8001640 <main+0x3c>)
 8001630:	f002 fba2 	bl	8003d78 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dutyCycle);
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <main+0x40>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b01      	ldr	r3, [pc, #4]	@ (8001640 <main+0x3c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38
 800163e:	e7f9      	b.n	8001634 <main+0x30>
 8001640:	20000260 	.word	0x20000260
 8001644:	20000000 	.word	0x20000000

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2244      	movs	r2, #68	@ 0x44
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fad9 	bl	8006c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166e:	f001 f867 	bl	8002740 <HAL_PWREx_ControlVoltageScaling>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001678:	f000 fa04 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800167c:	2310      	movs	r3, #16
 800167e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001680:	2301      	movs	r3, #1
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001688:	2360      	movs	r3, #96	@ 0x60
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001690:	2301      	movs	r3, #1
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001698:	2320      	movs	r3, #32
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800169c:	2307      	movs	r3, #7
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f89d 	bl	80027ec <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016b8:	f000 f9e4 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2303      	movs	r3, #3
 80016c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	2103      	movs	r1, #3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fc9d 	bl	8003014 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016e0:	f000 f9d0 	bl	8001a84 <Error_Handler>
  }
}
 80016e4:	bf00      	nop
 80016e6:	3758      	adds	r7, #88	@ 0x58
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_SPI1_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <MX_SPI1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_SPI1_Init+0x74>)
 80016f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001704:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001708:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800170c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001716:	2201      	movs	r2, #1
 8001718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_SPI1_Init+0x74>)
 800171c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <MX_SPI1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_SPI1_Init+0x74>)
 800173c:	2207      	movs	r2, #7
 800173e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_SPI1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_SPI1_Init+0x74>)
 800174e:	f002 f96d 	bl	8003a2c <HAL_SPI_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001758:	f000 f994 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200001fc 	.word	0x200001fc
 8001764:	40013000 	.word	0x40013000

08001768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	@ 0x58
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	222c      	movs	r2, #44	@ 0x2c
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f005 fa3a 	bl	8006c0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179a:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <MX_TIM1_Init+0x118>)
 800179c:	4a39      	ldr	r2, [pc, #228]	@ (8001884 <MX_TIM1_Init+0x11c>)
 800179e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80017a0:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017a2:	f240 227f 	movw	r2, #639	@ 0x27f
 80017a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80017ae:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017b0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80017b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b32      	ldr	r3, [pc, #200]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017bc:	4b30      	ldr	r3, [pc, #192]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c8:	482d      	ldr	r0, [pc, #180]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017ca:	f002 fa7d 	bl	8003cc8 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80017d4:	f000 f956 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4825      	ldr	r0, [pc, #148]	@ (8001880 <MX_TIM1_Init+0x118>)
 80017ec:	f003 f8fa 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80017f6:	f000 f945 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	@ 0x60
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001816:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800181a:	2204      	movs	r2, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4818      	ldr	r0, [pc, #96]	@ (8001880 <MX_TIM1_Init+0x118>)
 8001820:	f002 fc90 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800182a:	f000 f92b 	bl	8001a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001846:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001850:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_TIM1_Init+0x118>)
 8001864:	f003 f924 	bl	8004ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800186e:	f000 f909 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_TIM1_Init+0x118>)
 8001874:	f000 f9f6 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 8001878:	bf00      	nop
 800187a:	3758      	adds	r7, #88	@ 0x58
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000260 	.word	0x20000260
 8001884:	40012c00 	.word	0x40012c00

08001888 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <MX_TIM6_Init+0x70>)
 800189c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018a0:	220f      	movs	r2, #15
 80018a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40000;
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018ac:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80018b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018b8:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018ba:	f002 f95a 	bl	8003b72 <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018c4:	f000 f8de 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018d6:	f003 f885 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018e0:	f000 f8d0 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80018e4:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <MX_TIM6_Init+0x6c>)
 80018e6:	f002 f99b 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002ac 	.word	0x200002ac
 80018f8:	40001000 	.word	0x40001000

080018fc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <MX_TIM7_Init+0x6c>)
 800190e:	4a17      	ldr	r2, [pc, #92]	@ (800196c <MX_TIM7_Init+0x70>)
 8001910:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16-1;
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <MX_TIM7_Init+0x6c>)
 8001914:	220f      	movs	r2, #15
 8001916:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <MX_TIM7_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000;
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <MX_TIM7_Init+0x6c>)
 8001920:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001924:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_TIM7_Init+0x6c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800192c:	480e      	ldr	r0, [pc, #56]	@ (8001968 <MX_TIM7_Init+0x6c>)
 800192e:	f002 f920 	bl	8003b72 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001938:	f000 f8a4 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <MX_TIM7_Init+0x6c>)
 800194a:	f003 f84b 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001954:	f000 f896 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001958:	4803      	ldr	r0, [pc, #12]	@ (8001968 <MX_TIM7_Init+0x6c>)
 800195a:	f002 f961 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002f8 	.word	0x200002f8
 800196c:	40001400 	.word	0x40001400

08001970 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_TIM16_Init+0x4c>)
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <MX_TIM16_Init+0x50>)
 8001978:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160-1;
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <MX_TIM16_Init+0x4c>)
 800197c:	229f      	movs	r2, #159	@ 0x9f
 800197e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_TIM16_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <MX_TIM16_Init+0x4c>)
 8001988:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800198c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <MX_TIM16_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MX_TIM16_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <MX_TIM16_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019a0:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_TIM16_Init+0x4c>)
 80019a2:	f002 f8e6 	bl	8003b72 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80019ac:	f000 f86a 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <MX_TIM16_Init+0x4c>)
 80019b2:	f002 f935 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000344 	.word	0x20000344
 80019c0:	40014400 	.word	0x40014400

080019c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019ca:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <MX_USART2_UART_Init+0x5c>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_USART2_UART_Init+0x58>)
 8001a08:	f003 f8e8 	bl	8004bdc <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a12:	f000 f837 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000390 	.word	0x20000390
 8001a20:	40004400 	.word	0x40004400

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_GPIO_Init+0x5c>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3c:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <MX_GPIO_Init+0x5c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_GPIO_Init+0x5c>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_MANUAL_GPIO_Port, SPI1_NSS_MANUAL_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2110      	movs	r1, #16
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a58:	f000 fe4c 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_MANUAL_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_MANUAL_Pin;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_NSS_MANUAL_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a74:	f000 fcd4 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_SPI_MspInit+0x7c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d128      	bne.n	8001b4c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_SPI_MspInit+0x80>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f000 fc6a 	bl	8002420 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	@ 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013000 	.word	0x40013000
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <HAL_TIM_PWM_MspInit+0x44>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <HAL_TIM_PWM_MspInit+0x48>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <HAL_TIM_PWM_MspInit+0x48>)
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_TIM_PWM_MspInit+0x48>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2019      	movs	r0, #25
 8001b8c:	f000 fb93 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b90:	2019      	movs	r0, #25
 8001b92:	f000 fbac 	bl	80022ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <HAL_TIM_Base_MspInit+0xac>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d114      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2036      	movs	r0, #54	@ 0x36
 8001bd8:	f000 fb6d 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bdc:	2036      	movs	r0, #54	@ 0x36
 8001bde:	f000 fb86 	bl	80022ee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001be2:	e032      	b.n	8001c4a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <HAL_TIM_Base_MspInit+0xb4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d114      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2037      	movs	r0, #55	@ 0x37
 8001c0c:	f000 fb53 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c10:	2037      	movs	r0, #55	@ 0x37
 8001c12:	f000 fb6c 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001c16:	e018      	b.n	8001c4a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_TIM_Base_MspInit+0xb8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d113      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	4a0c      	ldr	r2, [pc, #48]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_TIM_Base_MspInit+0xb0>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2019      	movs	r0, #25
 8001c40:	f000 fb39 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c44:	2019      	movs	r0, #25
 8001c46:	f000 fb52 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40001000 	.word	0x40001000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40001400 	.word	0x40001400
 8001c60:	40014400 	.word	0x40014400

08001c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <HAL_TIM_MspPostInit+0x68>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d11d      	bne.n	8001cc2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbe:	f000 fbaf 	bl	8002420 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b09e      	sub	sp, #120	@ 0x78
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2254      	movs	r2, #84	@ 0x54
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 ff8a 	bl	8006c0e <memset>
  if(huart->Instance==USART2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <HAL_UART_MspInit+0xb8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d13e      	bne.n	8001d82 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fba3 	bl	800345c <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff feb2 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a1a      	ldr	r2, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_UART_MspInit+0xbc>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d50:	230c      	movs	r3, #12
 8001d52:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d60:	2307      	movs	r3, #7
 8001d62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6e:	f000 fb57 	bl	8002420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2026      	movs	r0, #38	@ 0x26
 8001d78:	f000 fa9d 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7c:	2026      	movs	r0, #38	@ 0x26
 8001d7e:	f000 fab6 	bl	80022ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	3778      	adds	r7, #120	@ 0x78
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40021000 	.word	0x40021000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <NMI_Handler+0x4>

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <MemManage_Handler+0x4>

08001dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f000 f969 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001dfa:	f002 f89b 	bl	8003f34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001dfe:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001e00:	f002 f898 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000260 	.word	0x20000260
 8001e0c:	20000344 	.word	0x20000344

08001e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <USART2_IRQHandler+0x10>)
 8001e16:	f002 ffb9 	bl	8004d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000390 	.word	0x20000390

08001e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <TIM6_DAC_IRQHandler+0x10>)
 8001e2a:	f002 f883 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002ac 	.word	0x200002ac

08001e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <TIM7_IRQHandler+0x10>)
 8001e3e:	f002 f879 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002f8 	.word	0x200002f8

08001e4c <_getpid>:
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	2301      	movs	r3, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_kill>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	f004 ff25 	bl	8006cb4 <__errno>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2216      	movs	r2, #22
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_exit>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ffe7 	bl	8001e5c <_kill>
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <_exit+0x12>

08001e92 <_read>:
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e00a      	b.n	8001eba <_read+0x28>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	60ba      	str	r2, [r7, #8]
 8001eb0:	b2ca      	uxtb	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbf0      	blt.n	8001ea4 <_read+0x12>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_close>:
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_fstat>:
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_isatty>:
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_lseek>:
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_sbrk>:
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
 8001f64:	f004 fea6 	bl	8006cb4 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20010000 	.word	0x20010000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	20000608 	.word	0x20000608
 8001f9c:	20000760 	.word	0x20000760

08001fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopForever+0x2>
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopForever+0x6>)
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopForever+0xa>)
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopForever+0xe>)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:
 8001fd6:	58d4      	ldr	r4, [r2, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:
 8001fdc:	18c4      	adds	r4, r0, r3
 8001fde:	428c      	cmp	r4, r1
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopForever+0x12>)
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopForever+0x16>)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:
 8001fee:	42a2      	cmp	r2, r4
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>
 8001ff2:	f004 fe65 	bl	8006cc0 <__libc_init_array>
 8001ff6:	f7ff fb05 	bl	8001604 <main>

08001ffa <LoopForever>:
 8001ffa:	e7fe      	b.n	8001ffa <LoopForever>
 8001ffc:	20010000 	.word	0x20010000
 8002000:	20000000 	.word	0x20000000
 8002004:	200001e0 	.word	0x200001e0
 8002008:	0800a864 	.word	0x0800a864
 800200c:	200001e0 	.word	0x200001e0
 8002010:	2000075c 	.word	0x2000075c

08002014 <ADC1_IRQHandler>:
 8002014:	e7fe      	b.n	8002014 <ADC1_IRQHandler>

08002016 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f93d 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002026:	200f      	movs	r0, #15
 8002028:	f000 f80e 	bl	8002048 <HAL_InitTick>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	e001      	b.n	800203c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002038:	f7ff fd2a 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203c:	79fb      	ldrb	r3, [r7, #7]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_InitTick+0x6c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_InitTick+0x70>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_InitTick+0x6c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206a:	fbb3 f3f1 	udiv	r3, r3, r1
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f949 	bl	800230a <HAL_SYSTICK_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d809      	bhi.n	8002098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f913 	bl	80022b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_InitTick+0x74>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e007      	b.n	80020a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e004      	b.n	80020a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e001      	b.n	80020a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000014 	.word	0x20000014
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000010 	.word	0x20000010

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000014 	.word	0x20000014
 80020e4:	2000060c 	.word	0x2000060c

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2000060c 	.word	0x2000060c

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	@ (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	@ (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d008      	beq.n	800234c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2204      	movs	r2, #4
 800233e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e022      	b.n	8002392 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020e 	bic.w	r2, r2, #14
 800235a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	f003 021c 	and.w	r2, r3, #28
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e029      	b.n	8002416 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 020e 	bic.w	r2, r2, #14
 80023d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f003 021c 	and.w	r2, r3, #28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
    }
  }
  return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	e148      	b.n	80026c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 813a 	beq.w	80026bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d005      	beq.n	8002460 <HAL_GPIO_Init+0x40>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d130      	bne.n	80024c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002496:	2201      	movs	r2, #1
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 0201 	and.w	r2, r3, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d017      	beq.n	80024fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d123      	bne.n	8002552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	6939      	ldr	r1, [r7, #16]
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8094 	beq.w	80026bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002594:	4b52      	ldr	r3, [pc, #328]	@ (80026e0 <HAL_GPIO_Init+0x2c0>)
 8002596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_GPIO_Init+0x2c0>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6613      	str	r3, [r2, #96]	@ 0x60
 80025a0:	4b4f      	ldr	r3, [pc, #316]	@ (80026e0 <HAL_GPIO_Init+0x2c0>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025ac:	4a4d      	ldr	r2, [pc, #308]	@ (80026e4 <HAL_GPIO_Init+0x2c4>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025d6:	d00d      	beq.n	80025f4 <HAL_GPIO_Init+0x1d4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a43      	ldr	r2, [pc, #268]	@ (80026e8 <HAL_GPIO_Init+0x2c8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <HAL_GPIO_Init+0x1d0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a42      	ldr	r2, [pc, #264]	@ (80026ec <HAL_GPIO_Init+0x2cc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_GPIO_Init+0x1cc>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1d6>
 80025ec:	2307      	movs	r3, #7
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1d6>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1d6>
 80025f4:	2300      	movs	r3, #0
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002606:	4937      	ldr	r1, [pc, #220]	@ (80026e4 <HAL_GPIO_Init+0x2c4>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002614:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002638:	4a2d      	ldr	r2, [pc, #180]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800263e:	4b2c      	ldr	r3, [pc, #176]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002662:	4a23      	ldr	r2, [pc, #140]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800268c:	4a18      	ldr	r2, [pc, #96]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026b6:	4a0e      	ldr	r2, [pc, #56]	@ (80026f0 <HAL_GPIO_Init+0x2d0>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f aeaf 	bne.w	8002430 <HAL_GPIO_Init+0x10>
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010000 	.word	0x40010000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	48000800 	.word	0x48000800
 80026f0:	40010400 	.word	0x40010400

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002710:	e002      	b.n	8002718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <HAL_PWREx_GetVoltageRange+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40007000 	.word	0x40007000

08002740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274e:	d130      	bne.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002750:	4b23      	ldr	r3, [pc, #140]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800275c:	d038      	beq.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002766:	4a1e      	ldr	r2, [pc, #120]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2232      	movs	r2, #50	@ 0x32
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	3301      	adds	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002784:	e002      	b.n	800278c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3b01      	subs	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002798:	d102      	bne.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f2      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a0:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ac:	d110      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e00f      	b.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027be:	d007      	beq.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027c8:	4a05      	ldr	r2, [pc, #20]	@ (80027e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	431bde83 	.word	0x431bde83

080027ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f000 bc02 	b.w	8003004 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002800:	4b96      	ldr	r3, [pc, #600]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280a:	4b94      	ldr	r3, [pc, #592]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80e4 	beq.w	80029ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_RCC_OscConfig+0x4c>
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	f040 808b 	bne.w	8002946 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b01      	cmp	r3, #1
 8002834:	f040 8087 	bne.w	8002946 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002838:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_OscConfig+0x64>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e3d9      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <HAL_RCC_OscConfig+0x7e>
 8002860:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002868:	e005      	b.n	8002876 <HAL_RCC_OscConfig+0x8a>
 800286a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002876:	4293      	cmp	r3, r2
 8002878:	d223      	bcs.n	80028c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fd8c 	bl	800339c <RCC_SetFlashLatencyFromMSIRange>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e3ba      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a72      	ldr	r2, [pc, #456]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b70      	ldr	r3, [pc, #448]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	496d      	ldr	r1, [pc, #436]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	4968      	ldr	r1, [pc, #416]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e025      	b.n	800290e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c2:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a65      	ldr	r2, [pc, #404]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4960      	ldr	r1, [pc, #384]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	495b      	ldr	r1, [pc, #364]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fd4c 	bl	800339c <RCC_SetFlashLatencyFromMSIRange>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e37a      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800290e:	f000 fc81 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b51      	ldr	r3, [pc, #324]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4950      	ldr	r1, [pc, #320]	@ (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a64 <HAL_RCC_OscConfig+0x278>)
 800292c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800292e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a68 <HAL_RCC_OscConfig+0x27c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fb88 	bl	8002048 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d052      	beq.n	80029e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	e35e      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d032      	beq.n	80029b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800294e:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800295a:	f7ff fbc5 	bl	80020e8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002962:	f7ff fbc1 	bl	80020e8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e347      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002974:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a35      	ldr	r2, [pc, #212]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b33      	ldr	r3, [pc, #204]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4930      	ldr	r1, [pc, #192]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	492b      	ldr	r1, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
 80029b2:	e01a      	b.n	80029ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029b4:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fb92 	bl	80020e8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c8:	f7ff fb8e 	bl	80020e8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e314      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1dc>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d073      	beq.n	8002ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_OscConfig+0x21c>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d10e      	bne.n	8002a20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d063      	beq.n	8002adc <HAL_RCC_OscConfig+0x2f0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d15f      	bne.n	8002adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e2f1      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x24c>
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e025      	b.n	8002a84 <HAL_RCC_OscConfig+0x298>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a40:	d114      	bne.n	8002a6c <HAL_RCC_OscConfig+0x280>
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a02      	ldr	r2, [pc, #8]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e013      	b.n	8002a84 <HAL_RCC_OscConfig+0x298>
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	0800a3e0 	.word	0x0800a3e0
 8002a64:	2000000c 	.word	0x2000000c
 8002a68:	20000010 	.word	0x20000010
 8002a6c:	4ba0      	ldr	r3, [pc, #640]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a9f      	ldr	r2, [pc, #636]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b9d      	ldr	r3, [pc, #628]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a9c      	ldr	r2, [pc, #624]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fb2c 	bl	80020e8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7ff fb28 	bl	80020e8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2ae      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	4b92      	ldr	r3, [pc, #584]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2a8>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fb18 	bl	80020e8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff fb14 	bl	80020e8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e29a      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x2d0>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d060      	beq.n	8002bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x310>
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d116      	bne.n	8002b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afc:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x328>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e277      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b76      	ldr	r3, [pc, #472]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	4973      	ldr	r1, [pc, #460]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b28:	e040      	b.n	8002bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d023      	beq.n	8002b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b32:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fad3 	bl	80020e8 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff facf 	bl	80020e8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e255      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	4b65      	ldr	r3, [pc, #404]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b62      	ldr	r3, [pc, #392]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	495f      	ldr	r1, [pc, #380]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e018      	b.n	8002bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7ff faaf 	bl	80020e8 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7ff faab 	bl	80020e8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e231      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba0:	4b53      	ldr	r3, [pc, #332]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d03c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7ff fa8a 	bl	80020e8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7ff fa86 	bl	80020e8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e20c      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bea:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ef      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x3ec>
 8002bf8:	e01b      	b.n	8002c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c00:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7ff fa6d 	bl	80020e8 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c12:	f7ff fa69 	bl	80020e8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1ef      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c24:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ef      	bne.n	8002c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a6 	beq.w	8002d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c44:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	4a26      	ldr	r2, [pc, #152]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c5c:	4b24      	ldr	r3, [pc, #144]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_RCC_OscConfig+0x508>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d118      	bne.n	8002caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <HAL_RCC_OscConfig+0x508>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <HAL_RCC_OscConfig+0x508>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c84:	f7ff fa30 	bl	80020e8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7ff fa2c 	bl	80020e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1b2      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_RCC_OscConfig+0x508>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4d8>
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc2:	e029      	b.n	8002d18 <HAL_RCC_OscConfig+0x52c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d115      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x50c>
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cdc:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	4a03      	ldr	r2, [pc, #12]	@ (8002cf0 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cec:	e014      	b.n	8002d18 <HAL_RCC_OscConfig+0x52c>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	4a99      	ldr	r2, [pc, #612]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d08:	4b96      	ldr	r3, [pc, #600]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	4a95      	ldr	r2, [pc, #596]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d016      	beq.n	8002d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7ff f9e2 	bl	80020e8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff f9de 	bl	80020e8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e162      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b89      	ldr	r3, [pc, #548]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ed      	beq.n	8002d28 <HAL_RCC_OscConfig+0x53c>
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f9cb 	bl	80020e8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff f9c7 	bl	80020e8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e14b      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ed      	bne.n	8002d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b78      	ldr	r3, [pc, #480]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	4a77      	ldr	r2, [pc, #476]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002da0:	4b70      	ldr	r3, [pc, #448]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002da6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7ff f99a 	bl	80020e8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db8:	f7ff f996 	bl	80020e8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e11c      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dca:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x5cc>
 8002dd8:	e01b      	b.n	8002e12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dda:	4b62      	ldr	r3, [pc, #392]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002de0:	4a60      	ldr	r2, [pc, #384]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7ff f97d 	bl	80020e8 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7ff f979 	bl	80020e8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0ff      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e04:	4b57      	ldr	r3, [pc, #348]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80f3 	beq.w	8003002 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f040 80c9 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e26:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d12c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	3b01      	subs	r3, #1
 8002e46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d123      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d11b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d113      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d109      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d06b      	beq.n	8002f6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d062      	beq.n	8002f60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e9a:	4b32      	ldr	r3, [pc, #200]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0ac      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2d      	ldr	r2, [pc, #180]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb6:	f7ff f917 	bl	80020e8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7ff f913 	bl	80020e8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e099      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <HAL_RCC_OscConfig+0x77c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ef6:	0212      	lsls	r2, r2, #8
 8002ef8:	4311      	orrs	r1, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0552      	lsls	r2, r2, #21
 8002f04:	4311      	orrs	r1, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f0a:	0852      	lsrs	r2, r2, #1
 8002f0c:	3a01      	subs	r2, #1
 8002f0e:	0652      	lsls	r2, r2, #25
 8002f10:	4311      	orrs	r1, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f16:	06d2      	lsls	r2, r2, #27
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	4912      	ldr	r1, [pc, #72]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f20:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f38:	f7ff f8d6 	bl	80020e8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7ff f8d2 	bl	80020e8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e058      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5e:	e050      	b.n	8003002 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04f      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
 8002f64:	40021000 	.word	0x40021000
 8002f68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6c:	4b27      	ldr	r3, [pc, #156]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d144      	bne.n	8003002 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f78:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f84:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a20      	ldr	r2, [pc, #128]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f90:	f7ff f8aa 	bl	80020e8 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7ff f8a6 	bl	80020e8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e02c      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b18      	ldr	r3, [pc, #96]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x7ac>
 8002fb6:	e024      	b.n	8003002 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d01f      	beq.n	8002ffe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7ff f88d 	bl	80020e8 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7ff f889 	bl	80020e8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4905      	ldr	r1, [pc, #20]	@ (800300c <HAL_RCC_OscConfig+0x820>)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_OscConfig+0x824>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
 8002ffc:	e001      	b.n	8003002 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	feeefffc 	.word	0xfeeefffc

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0e7      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b75      	ldr	r3, [pc, #468]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d910      	bls.n	8003058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b72      	ldr	r3, [pc, #456]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	4970      	ldr	r1, [pc, #448]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b6e      	ldr	r3, [pc, #440]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0cf      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4b66      	ldr	r3, [pc, #408]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	429a      	cmp	r2, r3
 8003072:	d908      	bls.n	8003086 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b63      	ldr	r3, [pc, #396]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4960      	ldr	r1, [pc, #384]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d04c      	beq.n	800312c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b5a      	ldr	r3, [pc, #360]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0a6      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	4b54      	ldr	r3, [pc, #336]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d115      	bne.n	80030ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e09a      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e08e      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030da:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e086      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4943      	ldr	r1, [pc, #268]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe fff4 	bl	80020e8 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe fff0 	bl	80020e8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e06e      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 020c 	and.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1eb      	bne.n	8003104 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b31      	ldr	r3, [pc, #196]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003144:	429a      	cmp	r2, r3
 8003146:	d208      	bcs.n	800315a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	492b      	ldr	r1, [pc, #172]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d210      	bcs.n	800318a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 0207 	bic.w	r2, r3, #7
 8003170:	4923      	ldr	r1, [pc, #140]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003178:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <HAL_RCC_ClockConfig+0x1ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e036      	b.n	80031f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003196:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4918      	ldr	r1, [pc, #96]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4910      	ldr	r1, [pc, #64]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c8:	f000 f824 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	490b      	ldr	r1, [pc, #44]	@ (8003208 <HAL_RCC_ClockConfig+0x1f4>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1fc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe ff2b 	bl	8002048 <HAL_InitTick>
 80031f2:	4603      	mov	r3, r0
 80031f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031f6:	7afb      	ldrb	r3, [r7, #11]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	0800a3e0 	.word	0x0800a3e0
 800320c:	2000000c 	.word	0x2000000c
 8003210:	20000010 	.word	0x20000010

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	@ 0x24
 8003218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800322c:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x34>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d121      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d11e      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003254:	4b31      	ldr	r3, [pc, #196]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 8003256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e005      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003270:	4a2b      	ldr	r2, [pc, #172]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003284:	e00a      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d102      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800328c:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x110>)
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e004      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d101      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003298:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x114>)
 800329a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d134      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0xa6>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d003      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0xac>
 80032b8:	e005      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x110>)
 80032bc:	617b      	str	r3, [r7, #20]
      break;
 80032be:	e005      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032c0:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x114>)
 80032c2:	617b      	str	r3, [r7, #20]
      break;
 80032c4:	e002      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	617b      	str	r3, [r7, #20]
      break;
 80032ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	3301      	adds	r3, #1
 80032d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	fb03 f202 	mul.w	r2, r3, r2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RCC_GetSysClockFreq+0x108>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0e5b      	lsrs	r3, r3, #25
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	3301      	adds	r3, #1
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800330c:	69bb      	ldr	r3, [r7, #24]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	0800a3f8 	.word	0x0800a3f8
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCC_GetPCLK1Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	0800a3f0 	.word	0x0800a3f0

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003374:	f7ff ffda 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	0800a3f0 	.word	0x0800a3f0

0800339c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff f9b6 	bl	8002724 <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
 80033ba:	e014      	b.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	4a24      	ldr	r2, [pc, #144]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c8:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d4:	f7ff f9a6 	bl	8002724 <HAL_PWREx_GetVoltageRange>
 80033d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033de:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ec:	d10b      	bne.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b80      	cmp	r3, #128	@ 0x80
 80033f2:	d919      	bls.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80033f8:	d902      	bls.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033fa:	2302      	movs	r3, #2
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e013      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003400:	2301      	movs	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e010      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b80      	cmp	r3, #128	@ 0x80
 800340a:	d902      	bls.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800340c:	2303      	movs	r3, #3
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e00a      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b80      	cmp	r3, #128	@ 0x80
 8003416:	d102      	bne.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003418:	2302      	movs	r3, #2
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e004      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b70      	cmp	r3, #112	@ 0x70
 8003422:	d101      	bne.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003424:	2301      	movs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 0207 	bic.w	r2, r3, #7
 8003430:	4909      	ldr	r1, [pc, #36]	@ (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003464:	2300      	movs	r3, #0
 8003466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003468:	2300      	movs	r3, #0
 800346a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d031      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003480:	d01a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003482:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003486:	d814      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800348c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003490:	d10f      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a5c      	ldr	r2, [pc, #368]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349e:	e00c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f9ce 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	74fb      	strb	r3, [r7, #19]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b51      	ldr	r3, [pc, #324]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	494e      	ldr	r1, [pc, #312]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034d6:	e001      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 809e 	beq.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ee:	4b46      	ldr	r3, [pc, #280]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	4a3f      	ldr	r2, [pc, #252]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003510:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003520:	4b3a      	ldr	r3, [pc, #232]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a39      	ldr	r2, [pc, #228]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800352c:	f7fe fddc 	bl	80020e8 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003532:	e009      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fe fdd8 	bl	80020e8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d902      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	74fb      	strb	r3, [r7, #19]
        break;
 8003546:	e005      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003548:	4b30      	ldr	r3, [pc, #192]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d15a      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800355a:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	429a      	cmp	r2, r3
 8003574:	d019      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003580:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003582:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	4a1f      	ldr	r2, [pc, #124]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003592:	4b1d      	ldr	r3, [pc, #116]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a2:	4a19      	ldr	r2, [pc, #100]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fd98 	bl	80020e8 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	e00b      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fd94 	bl	80020e8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d902      	bls.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	74fb      	strb	r3, [r7, #19]
            break;
 80035d2:	e006      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ec      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e8:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f6:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035fe:	e009      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003614:	7c7b      	ldrb	r3, [r7, #17]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b8a      	ldr	r3, [pc, #552]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a89      	ldr	r2, [pc, #548]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003632:	4b84      	ldr	r3, [pc, #528]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f023 0203 	bic.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4980      	ldr	r1, [pc, #512]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003654:	4b7b      	ldr	r3, [pc, #492]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f023 020c 	bic.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	4978      	ldr	r1, [pc, #480]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003676:	4b73      	ldr	r3, [pc, #460]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	496f      	ldr	r1, [pc, #444]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	4967      	ldr	r1, [pc, #412]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ba:	4b62      	ldr	r3, [pc, #392]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	495e      	ldr	r1, [pc, #376]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036dc:	4b59      	ldr	r3, [pc, #356]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	4956      	ldr	r1, [pc, #344]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036fe:	4b51      	ldr	r3, [pc, #324]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	494d      	ldr	r1, [pc, #308]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003720:	4b48      	ldr	r3, [pc, #288]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	4945      	ldr	r1, [pc, #276]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800373e:	d106      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b40      	ldr	r3, [pc, #256]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a3f      	ldr	r2, [pc, #252]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
 800374c:	e011      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003756:	d10c      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f872 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800377e:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378c:	492d      	ldr	r1, [pc, #180]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379c:	d106      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379e:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a28      	ldr	r2, [pc, #160]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a8:	60d3      	str	r3, [r2, #12]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f843 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01c      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037dc:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ea:	4916      	ldr	r1, [pc, #88]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fa:	d10c      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f820 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003830:	4904      	ldr	r1, [pc, #16]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003838:	7cbb      	ldrb	r3, [r7, #18]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003856:	4b74      	ldr	r3, [pc, #464]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d018      	beq.n	8003894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003862:	4b71      	ldr	r3, [pc, #452]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0203 	and.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d10d      	bne.n	800388e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
       ||
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800387a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
       ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d047      	beq.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d018      	beq.n	80038ce <RCCEx_PLLSAI1_Config+0x86>
 800389c:	2b03      	cmp	r3, #3
 800389e:	d825      	bhi.n	80038ec <RCCEx_PLLSAI1_Config+0xa4>
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d002      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x62>
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d009      	beq.n	80038bc <RCCEx_PLLSAI1_Config+0x74>
 80038a8:	e020      	b.n	80038ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ba:	e01a      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d116      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e013      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ce:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038da:	4b53      	ldr	r3, [pc, #332]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ea:	e006      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e004      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f2:	bf00      	nop
 80038f4:	e002      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003902:	4b49      	ldr	r3, [pc, #292]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	430b      	orrs	r3, r1
 8003918:	4943      	ldr	r1, [pc, #268]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d17c      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003924:	4b40      	ldr	r3, [pc, #256]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3f      	ldr	r2, [pc, #252]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800392a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fe fbda 	bl	80020e8 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003938:	f7fe fbd6 	bl	80020e8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
        break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800394c:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ef      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d15f      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d110      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003964:	4b30      	ldr	r3, [pc, #192]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800396c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6892      	ldr	r2, [r2, #8]
 8003974:	0211      	lsls	r1, r2, #8
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	06d2      	lsls	r2, r2, #27
 800397c:	430a      	orrs	r2, r1
 800397e:	492a      	ldr	r1, [pc, #168]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
 8003984:	e027      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d112      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800398c:	4b26      	ldr	r3, [pc, #152]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	0211      	lsls	r1, r2, #8
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6912      	ldr	r2, [r2, #16]
 80039a2:	0852      	lsrs	r2, r2, #1
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0552      	lsls	r2, r2, #21
 80039a8:	430a      	orrs	r2, r1
 80039aa:	491f      	ldr	r1, [pc, #124]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	610b      	str	r3, [r1, #16]
 80039b0:	e011      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6892      	ldr	r2, [r2, #8]
 80039c2:	0211      	lsls	r1, r2, #8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6952      	ldr	r2, [r2, #20]
 80039c8:	0852      	lsrs	r2, r2, #1
 80039ca:	3a01      	subs	r2, #1
 80039cc:	0652      	lsls	r2, r2, #25
 80039ce:	430a      	orrs	r2, r1
 80039d0:	4915      	ldr	r1, [pc, #84]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d6:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe fb81 	bl	80020e8 <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e8:	e009      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039ea:	f7fe fb7d 	bl	80020e8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d902      	bls.n	80039fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	73fb      	strb	r3, [r7, #15]
          break;
 80039fc:	e005      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0ef      	beq.n	80039ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a10:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	4903      	ldr	r1, [pc, #12]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e095      	b.n	8003b6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4e:	d009      	beq.n	8003a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fe f82a 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aa4:	d902      	bls.n	8003aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e002      	b.n	8003ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003aba:	d007      	beq.n	8003acc <HAL_SPI_Init+0xa0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	ea42 0103 	orr.w	r1, r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 0204 	and.w	r2, r3, #4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e049      	b.n	8003c18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fe f805 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f000 fc03 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d001      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e03b      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	@ (8003cbc <HAL_TIM_Base_Start_IT+0x9c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x4e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x4e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a15      	ldr	r2, [pc, #84]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d115      	bne.n	8003c9a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b13      	ldr	r3, [pc, #76]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d015      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x8c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c86:	d011      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e008      	b.n	8003cac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	00010007 	.word	0x00010007

08003cc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e049      	b.n	8003d6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd ff34 	bl	8001b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fb58 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x24>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e03c      	b.n	8003e16 <HAL_TIM_PWM_Start+0x9e>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d109      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x3e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e02f      	b.n	8003e16 <HAL_TIM_PWM_Start+0x9e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e022      	b.n	8003e16 <HAL_TIM_PWM_Start+0x9e>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d109      	bne.n	8003dea <HAL_TIM_PWM_Start+0x72>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e015      	b.n	8003e16 <HAL_TIM_PWM_Start+0x9e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d109      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x8c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e008      	b.n	8003e16 <HAL_TIM_PWM_Start+0x9e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e07e      	b.n	8003f1c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_PWM_Start+0xb6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2c:	e023      	b.n	8003e76 <HAL_TIM_PWM_Start+0xfe>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xc6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3c:	e01b      	b.n	8003e76 <HAL_TIM_PWM_Start+0xfe>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xd6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4c:	e013      	b.n	8003e76 <HAL_TIM_PWM_Start+0xfe>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xe6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e5c:	e00b      	b.n	8003e76 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xf6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e6c:	e003      	b.n	8003e76 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd8a 	bl	8004998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <HAL_TIM_PWM_Start+0x1ac>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x12a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a25      	ldr	r2, [pc, #148]	@ (8003f28 <HAL_TIM_PWM_Start+0x1b0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x12a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a23      	ldr	r2, [pc, #140]	@ (8003f2c <HAL_TIM_PWM_Start+0x1b4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x12e>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_PWM_Start+0x130>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_TIM_PWM_Start+0x1ac>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_TIM_PWM_Start+0x162>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ece:	d004      	beq.n	8003eda <HAL_TIM_PWM_Start+0x162>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <HAL_TIM_PWM_Start+0x1b0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d115      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <HAL_TIM_PWM_Start+0x1b8>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d015      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x1a0>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef2:	d011      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e008      	b.n	8003f18 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	00010007 	.word	0x00010007

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9fe 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9f0 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa01 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9d8 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9ca 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9db 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9b2 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9a4 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9b5 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f98c 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f97e 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f98f 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0201 	mvn.w	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fa8c 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fd73 	bl	8004bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fd6b 	bl	8004bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f949 	bl	80043a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f06f 0220 	mvn.w	r2, #32
 8004132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fd33 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800415e:	2302      	movs	r3, #2
 8004160:	e0ff      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b14      	cmp	r3, #20
 800416e:	f200 80f0 	bhi.w	8004352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004172:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	080041cd 	.word	0x080041cd
 800417c:	08004353 	.word	0x08004353
 8004180:	08004353 	.word	0x08004353
 8004184:	08004353 	.word	0x08004353
 8004188:	0800420d 	.word	0x0800420d
 800418c:	08004353 	.word	0x08004353
 8004190:	08004353 	.word	0x08004353
 8004194:	08004353 	.word	0x08004353
 8004198:	0800424f 	.word	0x0800424f
 800419c:	08004353 	.word	0x08004353
 80041a0:	08004353 	.word	0x08004353
 80041a4:	08004353 	.word	0x08004353
 80041a8:	0800428f 	.word	0x0800428f
 80041ac:	08004353 	.word	0x08004353
 80041b0:	08004353 	.word	0x08004353
 80041b4:	08004353 	.word	0x08004353
 80041b8:	080042d1 	.word	0x080042d1
 80041bc:	08004353 	.word	0x08004353
 80041c0:	08004353 	.word	0x08004353
 80041c4:	08004353 	.word	0x08004353
 80041c8:	08004311 	.word	0x08004311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f962 	bl	800449c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	619a      	str	r2, [r3, #24]
      break;
 800420a:	e0a5      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f9be 	bl	8004594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6999      	ldr	r1, [r3, #24]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	619a      	str	r2, [r3, #24]
      break;
 800424c:	e084      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa17 	bl	8004688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0208 	orr.w	r2, r2, #8
 8004268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0204 	bic.w	r2, r2, #4
 8004278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69d9      	ldr	r1, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	61da      	str	r2, [r3, #28]
      break;
 800428c:	e064      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fa6f 	bl	8004778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69d9      	ldr	r1, [r3, #28]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	021a      	lsls	r2, r3, #8
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	61da      	str	r2, [r3, #28]
      break;
 80042ce:	e043      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 faac 	bl	8004834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0208 	orr.w	r2, r2, #8
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800430e:	e023      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fae4 	bl	80048e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004350:	e002      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
      break;
 8004356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a30      	ldr	r2, [pc, #192]	@ (8004490 <TIM_Base_SetConfig+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0x20>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043da:	d108      	bne.n	80043ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a27      	ldr	r2, [pc, #156]	@ (8004490 <TIM_Base_SetConfig+0xd4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0x52>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0x52>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a24      	ldr	r2, [pc, #144]	@ (8004494 <TIM_Base_SetConfig+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0x52>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a23      	ldr	r2, [pc, #140]	@ (8004498 <TIM_Base_SetConfig+0xdc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d108      	bne.n	8004420 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <TIM_Base_SetConfig+0xd4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_Base_SetConfig+0xa0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <TIM_Base_SetConfig+0xd8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0xa0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a10      	ldr	r2, [pc, #64]	@ (8004498 <TIM_Base_SetConfig+0xdc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d103      	bne.n	8004464 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	611a      	str	r2, [r3, #16]
  }
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400

0800449c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 0201 	bic.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 0302 	bic.w	r3, r3, #2
 80044e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a24      	ldr	r2, [pc, #144]	@ (8004588 <TIM_OC1_SetConfig+0xec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_OC1_SetConfig+0x70>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a23      	ldr	r2, [pc, #140]	@ (800458c <TIM_OC1_SetConfig+0xf0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC1_SetConfig+0x70>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a22      	ldr	r2, [pc, #136]	@ (8004590 <TIM_OC1_SetConfig+0xf4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10c      	bne.n	8004526 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0308 	bic.w	r3, r3, #8
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <TIM_OC1_SetConfig+0xec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d007      	beq.n	800453e <TIM_OC1_SetConfig+0xa2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a16      	ldr	r2, [pc, #88]	@ (800458c <TIM_OC1_SetConfig+0xf0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <TIM_OC1_SetConfig+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <TIM_OC1_SetConfig+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800454c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400

08004594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 0210 	bic.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0320 	bic.w	r3, r3, #32
 80045e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a22      	ldr	r2, [pc, #136]	@ (800467c <TIM_OC2_SetConfig+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10d      	bne.n	8004614 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a19      	ldr	r2, [pc, #100]	@ (800467c <TIM_OC2_SetConfig+0xe8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_OC2_SetConfig+0x98>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <TIM_OC2_SetConfig+0xec>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC2_SetConfig+0x98>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <TIM_OC2_SetConfig+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d113      	bne.n	8004654 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800463a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400

08004688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a21      	ldr	r2, [pc, #132]	@ (800476c <TIM_OC3_SetConfig+0xe4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10d      	bne.n	8004706 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a18      	ldr	r2, [pc, #96]	@ (800476c <TIM_OC3_SetConfig+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_OC3_SetConfig+0x96>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a17      	ldr	r2, [pc, #92]	@ (8004770 <TIM_OC3_SetConfig+0xe8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC3_SetConfig+0x96>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a16      	ldr	r2, [pc, #88]	@ (8004774 <TIM_OC3_SetConfig+0xec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d113      	bne.n	8004746 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400

08004778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	031b      	lsls	r3, r3, #12
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <TIM_OC4_SetConfig+0xb0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <TIM_OC4_SetConfig+0x74>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a13      	ldr	r2, [pc, #76]	@ (800482c <TIM_OC4_SetConfig+0xb4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC4_SetConfig+0x74>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <TIM_OC4_SetConfig+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d109      	bne.n	8004800 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400

08004834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <TIM_OC5_SetConfig+0xa4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_OC5_SetConfig+0x6a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a12      	ldr	r2, [pc, #72]	@ (80048dc <TIM_OC5_SetConfig+0xa8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_OC5_SetConfig+0x6a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a11      	ldr	r2, [pc, #68]	@ (80048e0 <TIM_OC5_SetConfig+0xac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d109      	bne.n	80048b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400

080048e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800492a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a14      	ldr	r2, [pc, #80]	@ (800498c <TIM_OC6_SetConfig+0xa8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <TIM_OC6_SetConfig+0x6c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <TIM_OC6_SetConfig+0xac>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_OC6_SetConfig+0x6c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <TIM_OC6_SetConfig+0xb0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d109      	bne.n	8004964 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400

08004998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2201      	movs	r2, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e04f      	b.n	8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a14      	ldr	r2, [pc, #80]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d004      	beq.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10c      	bne.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000

08004ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e060      	b.n	8004b8e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a14      	ldr	r2, [pc, #80]	@ (8004b9c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d115      	bne.n	8004b7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	051b      	lsls	r3, r3, #20
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00

08004ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e040      	b.n	8004c70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd f868 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	@ 0x24
 8004c08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fe04 	bl	8005830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fbd5 	bl	80053d8 <UART_SetConfig>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e01b      	b.n	8004c70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fe83 	bl	8005974 <UART_CheckIdleState>
 8004c6e:	4603      	mov	r3, r0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	@ 0x28
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d177      	bne.n	8004d80 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_UART_Transmit+0x24>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e070      	b.n	8004d82 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2221      	movs	r2, #33	@ 0x21
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cae:	f7fd fa1b 	bl	80020e8 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x68>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ce8:	e02f      	b.n	8004d4a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fee5 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e03b      	b.n	8004d82 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	3302      	adds	r3, #2
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e007      	b.n	8004d38 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1c9      	bne.n	8004cea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2140      	movs	r1, #64	@ 0x40
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 feaf 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e005      	b.n	8004d82 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004db6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004dba:	4013      	ands	r3, r2
 8004dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d115      	bne.n	8004df4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00f      	beq.n	8004df4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 82ca 	beq.w	800537e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
      }
      return;
 8004df2:	e2c4      	b.n	800537e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8117 	beq.w	800502c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e0e:	4b85      	ldr	r3, [pc, #532]	@ (8005024 <HAL_UART_IRQHandler+0x298>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 810a 	beq.w	800502c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <HAL_UART_IRQHandler+0xbc>
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2201      	movs	r2, #1
 8004e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d011      	beq.n	8004e78 <HAL_UART_IRQHandler+0xec>
 8004e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2202      	movs	r2, #2
 8004e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e6e:	f043 0204 	orr.w	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d011      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x11c>
 8004e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2204      	movs	r2, #4
 8004e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eda:	f043 0208 	orr.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <HAL_UART_IRQHandler+0x18a>
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8230 	beq.w	8005382 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d04f      	beq.n	800500e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fe15 	bl	8005b9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d141      	bne.n	8005006 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1d9      	bne.n	8004f82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d013      	beq.n	8004ffe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fda:	4a13      	ldr	r2, [pc, #76]	@ (8005028 <HAL_UART_IRQHandler+0x29c>)
 8004fdc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd f9db 	bl	800239e <HAL_DMA_Abort_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	e00f      	b.n	800501e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9d4 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	e00b      	b.n	800501e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f9d0 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e007      	b.n	800501e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9cc 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800501c:	e1b1      	b.n	8005382 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501e:	bf00      	nop
    return;
 8005020:	e1af      	b.n	8005382 <HAL_UART_IRQHandler+0x5f6>
 8005022:	bf00      	nop
 8005024:	04000120 	.word	0x04000120
 8005028:	08005c67 	.word	0x08005c67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005030:	2b01      	cmp	r3, #1
 8005032:	f040 816a 	bne.w	800530a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8163 	beq.w	800530a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 815c 	beq.w	800530a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2210      	movs	r2, #16
 8005058:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	f040 80d4 	bne.w	8005212 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005076:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80ad 	beq.w	80051da <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800508a:	429a      	cmp	r2, r3
 800508c:	f080 80a5 	bcs.w	80051da <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005096:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 8086 	bne.w	80051b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1da      	bne.n	80050ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800511a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800511e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800512c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e1      	bne.n	80050f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800515c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e3      	bne.n	8005132 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800519a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800519c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e4      	bne.n	8005178 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd f8b5 	bl	8002322 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8f4 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051d8:	e0d5      	b.n	8005386 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f040 80ce 	bne.w	8005386 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	f040 80c5 	bne.w	8005386 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8d8 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
      return;
 8005210:	e0b9      	b.n	8005386 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800521e:	b29b      	uxth	r3, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80ab 	beq.w	800538a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80a6 	beq.w	800538a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005260:	647b      	str	r3, [r7, #68]	@ 0x44
 8005262:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e4      	bne.n	800523e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	623b      	str	r3, [r7, #32]
   return(result);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005298:	633a      	str	r2, [r7, #48]	@ 0x30
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0310 	bic.w	r3, r3, #16
 80052d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	617b      	str	r3, [r7, #20]
   return(result);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e4      	bne.n	80052c0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f85c 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005308:	e03f      	b.n	800538a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_UART_IRQHandler+0x5a8>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800532a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fcda 	bl	8005ce6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005332:	e02d      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    }
    return;
 800535c:	e017      	b.n	800538e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <HAL_UART_IRQHandler+0x604>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fc8b 	bl	8005c92 <UART_EndTransmit_IT>
    return;
 800537c:	e008      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
      return;
 800537e:	bf00      	nop
 8005380:	e006      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
    return;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
      return;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
      return;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <HAL_UART_IRQHandler+0x604>
    return;
 800538e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005390:	37e8      	adds	r7, #232	@ 0xe8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop

08005398 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053dc:	b08a      	sub	sp, #40	@ 0x28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4bb4      	ldr	r3, [pc, #720]	@ (80056d8 <UART_SetConfig+0x300>)
 8005408:	4013      	ands	r3, r2
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005410:	430b      	orrs	r3, r1
 8005412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4aa9      	ldr	r2, [pc, #676]	@ (80056dc <UART_SetConfig+0x304>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005440:	4313      	orrs	r3, r2
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4aa0      	ldr	r2, [pc, #640]	@ (80056e0 <UART_SetConfig+0x308>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d126      	bne.n	80054b0 <UART_SetConfig+0xd8>
 8005462:	4ba0      	ldr	r3, [pc, #640]	@ (80056e4 <UART_SetConfig+0x30c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d81b      	bhi.n	80054a8 <UART_SetConfig+0xd0>
 8005470:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <UART_SetConfig+0xa0>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	08005489 	.word	0x08005489
 800547c:	08005499 	.word	0x08005499
 8005480:	08005491 	.word	0x08005491
 8005484:	080054a1 	.word	0x080054a1
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548e:	e080      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005490:	2302      	movs	r3, #2
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005496:	e07c      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549e:	e078      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a6:	e074      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ae:	e070      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a8c      	ldr	r2, [pc, #560]	@ (80056e8 <UART_SetConfig+0x310>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d138      	bne.n	800552c <UART_SetConfig+0x154>
 80054ba:	4b8a      	ldr	r3, [pc, #552]	@ (80056e4 <UART_SetConfig+0x30c>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	d82d      	bhi.n	8005524 <UART_SetConfig+0x14c>
 80054c8:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <UART_SetConfig+0xf8>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005505 	.word	0x08005505
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005525 	.word	0x08005525
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005525 	.word	0x08005525
 80054ec:	08005525 	.word	0x08005525
 80054f0:	0800550d 	.word	0x0800550d
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005525 	.word	0x08005525
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800551d 	.word	0x0800551d
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e042      	b.n	8005592 <UART_SetConfig+0x1ba>
 800550c:	2302      	movs	r3, #2
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e03e      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005514:	2304      	movs	r3, #4
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e03a      	b.n	8005592 <UART_SetConfig+0x1ba>
 800551c:	2308      	movs	r3, #8
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e036      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e032      	b.n	8005592 <UART_SetConfig+0x1ba>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6a      	ldr	r2, [pc, #424]	@ (80056dc <UART_SetConfig+0x304>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d12a      	bne.n	800558c <UART_SetConfig+0x1b4>
 8005536:	4b6b      	ldr	r3, [pc, #428]	@ (80056e4 <UART_SetConfig+0x30c>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005540:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005544:	d01a      	beq.n	800557c <UART_SetConfig+0x1a4>
 8005546:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800554a:	d81b      	bhi.n	8005584 <UART_SetConfig+0x1ac>
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005550:	d00c      	beq.n	800556c <UART_SetConfig+0x194>
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005556:	d815      	bhi.n	8005584 <UART_SetConfig+0x1ac>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <UART_SetConfig+0x18c>
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005560:	d008      	beq.n	8005574 <UART_SetConfig+0x19c>
 8005562:	e00f      	b.n	8005584 <UART_SetConfig+0x1ac>
 8005564:	2300      	movs	r3, #0
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x1ba>
 800556c:	2302      	movs	r3, #2
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005572:	e00e      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557a:	e00a      	b.n	8005592 <UART_SetConfig+0x1ba>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005582:	e006      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558a:	e002      	b.n	8005592 <UART_SetConfig+0x1ba>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a51      	ldr	r2, [pc, #324]	@ (80056dc <UART_SetConfig+0x304>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d17a      	bne.n	8005692 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d824      	bhi.n	80055ee <UART_SetConfig+0x216>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x1d4>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fd feb8 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b44      	ldr	r3, [pc, #272]	@ (80056ec <UART_SetConfig+0x314>)
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fd fe19 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80055e2:	61f8      	str	r0, [r7, #28]
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8107 	beq.w	8005810 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d305      	bcc.n	800561e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005624:	e0f4      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	461c      	mov	r4, r3
 800562c:	4615      	mov	r5, r2
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	022b      	lsls	r3, r5, #8
 8005638:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800563c:	0222      	lsls	r2, r4, #8
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6849      	ldr	r1, [r1, #4]
 8005642:	0849      	lsrs	r1, r1, #1
 8005644:	2000      	movs	r0, #0
 8005646:	4688      	mov	r8, r1
 8005648:	4681      	mov	r9, r0
 800564a:	eb12 0a08 	adds.w	sl, r2, r8
 800564e:	eb43 0b09 	adc.w	fp, r3, r9
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fb fb10 	bl	8000c88 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005676:	d308      	bcc.n	800568a <UART_SetConfig+0x2b2>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567e:	d204      	bcs.n	800568a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e0c2      	b.n	8005810 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005690:	e0be      	b.n	8005810 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800569a:	d16a      	bne.n	8005772 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800569c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d834      	bhi.n	800570e <UART_SetConfig+0x336>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x2d4>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	0800570f 	.word	0x0800570f
 80056bc:	080056ff 	.word	0x080056ff
 80056c0:	0800570f 	.word	0x0800570f
 80056c4:	0800570f 	.word	0x0800570f
 80056c8:	0800570f 	.word	0x0800570f
 80056cc:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fd fe38 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61f8      	str	r0, [r7, #28]
        break;
 80056d6:	e020      	b.n	800571a <UART_SetConfig+0x342>
 80056d8:	efff69f3 	.word	0xefff69f3
 80056dc:	40008000 	.word	0x40008000
 80056e0:	40013800 	.word	0x40013800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40004400 	.word	0x40004400
 80056ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fd fe3e 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 80056f4:	61f8      	str	r0, [r7, #28]
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b4c      	ldr	r3, [pc, #304]	@ (800582c <UART_SetConfig+0x454>)
 80056fa:	61fb      	str	r3, [r7, #28]
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fd fd89 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8005702:	61f8      	str	r0, [r7, #28]
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d077      	beq.n	8005810 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005a      	lsls	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d916      	bls.n	800576a <UART_SetConfig+0x392>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005742:	d212      	bcs.n	800576a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f023 030f 	bic.w	r3, r3, #15
 800574c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b29a      	uxth	r2, r3
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	4313      	orrs	r3, r2
 800575e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	8afa      	ldrh	r2, [r7, #22]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e052      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005770:	e04e      	b.n	8005810 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005772:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005776:	2b08      	cmp	r3, #8
 8005778:	d827      	bhi.n	80057ca <UART_SetConfig+0x3f2>
 800577a:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <UART_SetConfig+0x3a8>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057cb 	.word	0x080057cb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057cb 	.word	0x080057cb
 8005798:	080057cb 	.word	0x080057cb
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fd fdce 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 80057a8:	61f8      	str	r0, [r7, #28]
        break;
 80057aa:	e014      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fd fde0 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 80057b0:	61f8      	str	r0, [r7, #28]
        break;
 80057b2:	e010      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b1d      	ldr	r3, [pc, #116]	@ (800582c <UART_SetConfig+0x454>)
 80057b6:	61fb      	str	r3, [r7, #28]
        break;
 80057b8:	e00d      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fd fd2b 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80057be:	61f8      	str	r0, [r7, #28]
        break;
 80057c0:	e009      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c6:	61fb      	str	r3, [r7, #28]
        break;
 80057c8:	e005      	b.n	80057d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057d4:	bf00      	nop
    }

    if (pclk != 0U)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	085a      	lsrs	r2, r3, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d909      	bls.n	800580a <UART_SetConfig+0x432>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fc:	d205      	bcs.n	800580a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	e002      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800581c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005820:	4618      	mov	r0, r3
 8005822:	3728      	adds	r7, #40	@ 0x28
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	00f42400 	.word	0x00f42400

08005830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592e:	d10a      	bne.n	8005946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b098      	sub	sp, #96	@ 0x60
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005984:	f7fc fbb0 	bl	80020e8 <HAL_GetTick>
 8005988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d12e      	bne.n	80059f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f88c 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d021      	beq.n	80059f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e062      	b.n	8005abc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d149      	bne.n	8005a98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f856 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03c      	beq.n	8005a98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e6      	bne.n	8005a1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0301 	bic.w	r3, r3, #1
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e011      	b.n	8005abc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3758      	adds	r7, #88	@ 0x58
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	e04f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d04b      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fc fb03 	bl	80020e8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e04e      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d037      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b80      	cmp	r3, #128	@ 0x80
 8005b0a:	d034      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b40      	cmp	r3, #64	@ 0x40
 8005b10:	d031      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d110      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2208      	movs	r2, #8
 8005b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f838 	bl	8005b9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2208      	movs	r2, #8
 8005b32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e029      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b50:	d111      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f81e 	bl	8005b9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e00f      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d0a0      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b095      	sub	sp, #84	@ 0x54
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d118      	bne.n	8005c46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f023 0310 	bic.w	r3, r3, #16
 8005c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e6      	bne.n	8005c14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c5a:	bf00      	nop
 8005c5c:	3754      	adds	r7, #84	@ 0x54
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fb91 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b088      	sub	sp, #32
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fb5d 	bl	8005398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cde:	bf00      	nop
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <__cvt>:
 8005cfa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfe:	ec57 6b10 	vmov	r6, r7, d0
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	460c      	mov	r4, r1
 8005d06:	4619      	mov	r1, r3
 8005d08:	463b      	mov	r3, r7
 8005d0a:	bfbb      	ittet	lt
 8005d0c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d10:	461f      	movlt	r7, r3
 8005d12:	2300      	movge	r3, #0
 8005d14:	232d      	movlt	r3, #45	@ 0x2d
 8005d16:	700b      	strb	r3, [r1, #0]
 8005d18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d1a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d1e:	4691      	mov	r9, r2
 8005d20:	f023 0820 	bic.w	r8, r3, #32
 8005d24:	bfbc      	itt	lt
 8005d26:	4632      	movlt	r2, r6
 8005d28:	4616      	movlt	r6, r2
 8005d2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d2e:	d005      	beq.n	8005d3c <__cvt+0x42>
 8005d30:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d34:	d100      	bne.n	8005d38 <__cvt+0x3e>
 8005d36:	3401      	adds	r4, #1
 8005d38:	2102      	movs	r1, #2
 8005d3a:	e000      	b.n	8005d3e <__cvt+0x44>
 8005d3c:	2103      	movs	r1, #3
 8005d3e:	ab03      	add	r3, sp, #12
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	ab02      	add	r3, sp, #8
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	ec47 6b10 	vmov	d0, r6, r7
 8005d4a:	4653      	mov	r3, sl
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	f001 f86f 	bl	8006e30 <_dtoa_r>
 8005d52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d56:	4605      	mov	r5, r0
 8005d58:	d119      	bne.n	8005d8e <__cvt+0x94>
 8005d5a:	f019 0f01 	tst.w	r9, #1
 8005d5e:	d00e      	beq.n	8005d7e <__cvt+0x84>
 8005d60:	eb00 0904 	add.w	r9, r0, r4
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	4630      	mov	r0, r6
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	f7fa feac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d70:	b108      	cbz	r0, 8005d76 <__cvt+0x7c>
 8005d72:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d76:	2230      	movs	r2, #48	@ 0x30
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	454b      	cmp	r3, r9
 8005d7c:	d31e      	bcc.n	8005dbc <__cvt+0xc2>
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d82:	1b5b      	subs	r3, r3, r5
 8005d84:	4628      	mov	r0, r5
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	b004      	add	sp, #16
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d92:	eb00 0904 	add.w	r9, r0, r4
 8005d96:	d1e5      	bne.n	8005d64 <__cvt+0x6a>
 8005d98:	7803      	ldrb	r3, [r0, #0]
 8005d9a:	2b30      	cmp	r3, #48	@ 0x30
 8005d9c:	d10a      	bne.n	8005db4 <__cvt+0xba>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005daa:	b918      	cbnz	r0, 8005db4 <__cvt+0xba>
 8005dac:	f1c4 0401 	rsb	r4, r4, #1
 8005db0:	f8ca 4000 	str.w	r4, [sl]
 8005db4:	f8da 3000 	ldr.w	r3, [sl]
 8005db8:	4499      	add	r9, r3
 8005dba:	e7d3      	b.n	8005d64 <__cvt+0x6a>
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	9103      	str	r1, [sp, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e7d9      	b.n	8005d78 <__cvt+0x7e>

08005dc4 <__exponent>:
 8005dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	bfba      	itte	lt
 8005dca:	4249      	neglt	r1, r1
 8005dcc:	232d      	movlt	r3, #45	@ 0x2d
 8005dce:	232b      	movge	r3, #43	@ 0x2b
 8005dd0:	2909      	cmp	r1, #9
 8005dd2:	7002      	strb	r2, [r0, #0]
 8005dd4:	7043      	strb	r3, [r0, #1]
 8005dd6:	dd29      	ble.n	8005e2c <__exponent+0x68>
 8005dd8:	f10d 0307 	add.w	r3, sp, #7
 8005ddc:	461d      	mov	r5, r3
 8005dde:	270a      	movs	r7, #10
 8005de0:	461a      	mov	r2, r3
 8005de2:	fbb1 f6f7 	udiv	r6, r1, r7
 8005de6:	fb07 1416 	mls	r4, r7, r6, r1
 8005dea:	3430      	adds	r4, #48	@ 0x30
 8005dec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005df0:	460c      	mov	r4, r1
 8005df2:	2c63      	cmp	r4, #99	@ 0x63
 8005df4:	f103 33ff 	add.w	r3, r3, #4294967295
 8005df8:	4631      	mov	r1, r6
 8005dfa:	dcf1      	bgt.n	8005de0 <__exponent+0x1c>
 8005dfc:	3130      	adds	r1, #48	@ 0x30
 8005dfe:	1e94      	subs	r4, r2, #2
 8005e00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e04:	1c41      	adds	r1, r0, #1
 8005e06:	4623      	mov	r3, r4
 8005e08:	42ab      	cmp	r3, r5
 8005e0a:	d30a      	bcc.n	8005e22 <__exponent+0x5e>
 8005e0c:	f10d 0309 	add.w	r3, sp, #9
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	42ac      	cmp	r4, r5
 8005e14:	bf88      	it	hi
 8005e16:	2300      	movhi	r3, #0
 8005e18:	3302      	adds	r3, #2
 8005e1a:	4403      	add	r3, r0
 8005e1c:	1a18      	subs	r0, r3, r0
 8005e1e:	b003      	add	sp, #12
 8005e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e2a:	e7ed      	b.n	8005e08 <__exponent+0x44>
 8005e2c:	2330      	movs	r3, #48	@ 0x30
 8005e2e:	3130      	adds	r1, #48	@ 0x30
 8005e30:	7083      	strb	r3, [r0, #2]
 8005e32:	70c1      	strb	r1, [r0, #3]
 8005e34:	1d03      	adds	r3, r0, #4
 8005e36:	e7f1      	b.n	8005e1c <__exponent+0x58>

08005e38 <_printf_float>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	b08d      	sub	sp, #52	@ 0x34
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e44:	4616      	mov	r6, r2
 8005e46:	461f      	mov	r7, r3
 8005e48:	4605      	mov	r5, r0
 8005e4a:	f000 fee9 	bl	8006c20 <_localeconv_r>
 8005e4e:	6803      	ldr	r3, [r0, #0]
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fa fa0c 	bl	8000270 <strlen>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	3307      	adds	r3, #7
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	f103 0208 	add.w	r2, r3, #8
 8005e6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e70:	f8d4 b000 	ldr.w	fp, [r4]
 8005e74:	f8c8 2000 	str.w	r2, [r8]
 8005e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e80:	9307      	str	r3, [sp, #28]
 8005e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006100 <_printf_float+0x2c8>)
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	f7fa fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8005e98:	bb70      	cbnz	r0, 8005ef8 <_printf_float+0xc0>
 8005e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e9e:	4b98      	ldr	r3, [pc, #608]	@ (8006100 <_printf_float+0x2c8>)
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	f7fa fe24 	bl	8000af0 <__aeabi_dcmple>
 8005ea8:	bb30      	cbnz	r0, 8005ef8 <_printf_float+0xc0>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	f7fa fe13 	bl	8000adc <__aeabi_dcmplt>
 8005eb6:	b110      	cbz	r0, 8005ebe <_printf_float+0x86>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ebe:	4a91      	ldr	r2, [pc, #580]	@ (8006104 <_printf_float+0x2cc>)
 8005ec0:	4b91      	ldr	r3, [pc, #580]	@ (8006108 <_printf_float+0x2d0>)
 8005ec2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ec6:	bf8c      	ite	hi
 8005ec8:	4690      	movhi	r8, r2
 8005eca:	4698      	movls	r8, r3
 8005ecc:	2303      	movs	r3, #3
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	f02b 0304 	bic.w	r3, fp, #4
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	f04f 0900 	mov.w	r9, #0
 8005eda:	9700      	str	r7, [sp, #0]
 8005edc:	4633      	mov	r3, r6
 8005ede:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f9d2 	bl	800628c <_printf_common>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f040 808d 	bne.w	8006008 <_printf_float+0x1d0>
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	b00d      	add	sp, #52	@ 0x34
 8005ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	4649      	mov	r1, r9
 8005f00:	f7fa fe14 	bl	8000b2c <__aeabi_dcmpun>
 8005f04:	b140      	cbz	r0, 8005f18 <_printf_float+0xe0>
 8005f06:	464b      	mov	r3, r9
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bfbc      	itt	lt
 8005f0c:	232d      	movlt	r3, #45	@ 0x2d
 8005f0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f12:	4a7e      	ldr	r2, [pc, #504]	@ (800610c <_printf_float+0x2d4>)
 8005f14:	4b7e      	ldr	r3, [pc, #504]	@ (8006110 <_printf_float+0x2d8>)
 8005f16:	e7d4      	b.n	8005ec2 <_printf_float+0x8a>
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f1e:	9206      	str	r2, [sp, #24]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	d13b      	bne.n	8005f9c <_printf_float+0x164>
 8005f24:	2306      	movs	r3, #6
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	9303      	str	r3, [sp, #12]
 8005f32:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f38:	ab09      	add	r3, sp, #36	@ 0x24
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	ec49 8b10 	vmov	d0, r8, r9
 8005f42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7ff fed7 	bl	8005cfa <__cvt>
 8005f4c:	9b06      	ldr	r3, [sp, #24]
 8005f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f50:	2b47      	cmp	r3, #71	@ 0x47
 8005f52:	4680      	mov	r8, r0
 8005f54:	d129      	bne.n	8005faa <_printf_float+0x172>
 8005f56:	1cc8      	adds	r0, r1, #3
 8005f58:	db02      	blt.n	8005f60 <_printf_float+0x128>
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	dd41      	ble.n	8005fe4 <_printf_float+0x1ac>
 8005f60:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f64:	fa5f fa8a 	uxtb.w	sl, sl
 8005f68:	3901      	subs	r1, #1
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f70:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f72:	f7ff ff27 	bl	8005dc4 <__exponent>
 8005f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f78:	1813      	adds	r3, r2, r0
 8005f7a:	2a01      	cmp	r2, #1
 8005f7c:	4681      	mov	r9, r0
 8005f7e:	6123      	str	r3, [r4, #16]
 8005f80:	dc02      	bgt.n	8005f88 <_printf_float+0x150>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	07d2      	lsls	r2, r2, #31
 8005f86:	d501      	bpl.n	8005f8c <_printf_float+0x154>
 8005f88:	3301      	adds	r3, #1
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0a2      	beq.n	8005eda <_printf_float+0xa2>
 8005f94:	232d      	movs	r3, #45	@ 0x2d
 8005f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f9a:	e79e      	b.n	8005eda <_printf_float+0xa2>
 8005f9c:	9a06      	ldr	r2, [sp, #24]
 8005f9e:	2a47      	cmp	r2, #71	@ 0x47
 8005fa0:	d1c2      	bne.n	8005f28 <_printf_float+0xf0>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1c0      	bne.n	8005f28 <_printf_float+0xf0>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7bd      	b.n	8005f26 <_printf_float+0xee>
 8005faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fae:	d9db      	bls.n	8005f68 <_printf_float+0x130>
 8005fb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005fb4:	d118      	bne.n	8005fe8 <_printf_float+0x1b0>
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	dd0b      	ble.n	8005fd4 <_printf_float+0x19c>
 8005fbc:	6121      	str	r1, [r4, #16]
 8005fbe:	b913      	cbnz	r3, 8005fc6 <_printf_float+0x18e>
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	07d0      	lsls	r0, r2, #31
 8005fc4:	d502      	bpl.n	8005fcc <_printf_float+0x194>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	440b      	add	r3, r1
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	e7db      	b.n	8005f8c <_printf_float+0x154>
 8005fd4:	b913      	cbnz	r3, 8005fdc <_printf_float+0x1a4>
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	07d2      	lsls	r2, r2, #31
 8005fda:	d501      	bpl.n	8005fe0 <_printf_float+0x1a8>
 8005fdc:	3302      	adds	r3, #2
 8005fde:	e7f4      	b.n	8005fca <_printf_float+0x192>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7f2      	b.n	8005fca <_printf_float+0x192>
 8005fe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fea:	4299      	cmp	r1, r3
 8005fec:	db05      	blt.n	8005ffa <_printf_float+0x1c2>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6121      	str	r1, [r4, #16]
 8005ff2:	07d8      	lsls	r0, r3, #31
 8005ff4:	d5ea      	bpl.n	8005fcc <_printf_float+0x194>
 8005ff6:	1c4b      	adds	r3, r1, #1
 8005ff8:	e7e7      	b.n	8005fca <_printf_float+0x192>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	bfd4      	ite	le
 8005ffe:	f1c1 0202 	rsble	r2, r1, #2
 8006002:	2201      	movgt	r2, #1
 8006004:	4413      	add	r3, r2
 8006006:	e7e0      	b.n	8005fca <_printf_float+0x192>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	055a      	lsls	r2, r3, #21
 800600c:	d407      	bmi.n	800601e <_printf_float+0x1e6>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	4642      	mov	r2, r8
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	d12b      	bne.n	8006074 <_printf_float+0x23c>
 800601c:	e767      	b.n	8005eee <_printf_float+0xb6>
 800601e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006022:	f240 80dd 	bls.w	80061e0 <_printf_float+0x3a8>
 8006026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	f7fa fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d033      	beq.n	800609e <_printf_float+0x266>
 8006036:	4a37      	ldr	r2, [pc, #220]	@ (8006114 <_printf_float+0x2dc>)
 8006038:	2301      	movs	r3, #1
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f af54 	beq.w	8005eee <_printf_float+0xb6>
 8006046:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800604a:	4543      	cmp	r3, r8
 800604c:	db02      	blt.n	8006054 <_printf_float+0x21c>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	07d8      	lsls	r0, r3, #31
 8006052:	d50f      	bpl.n	8006074 <_printf_float+0x23c>
 8006054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f af45 	beq.w	8005eee <_printf_float+0xb6>
 8006064:	f04f 0900 	mov.w	r9, #0
 8006068:	f108 38ff 	add.w	r8, r8, #4294967295
 800606c:	f104 0a1a 	add.w	sl, r4, #26
 8006070:	45c8      	cmp	r8, r9
 8006072:	dc09      	bgt.n	8006088 <_printf_float+0x250>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	079b      	lsls	r3, r3, #30
 8006078:	f100 8103 	bmi.w	8006282 <_printf_float+0x44a>
 800607c:	68e0      	ldr	r0, [r4, #12]
 800607e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006080:	4298      	cmp	r0, r3
 8006082:	bfb8      	it	lt
 8006084:	4618      	movlt	r0, r3
 8006086:	e734      	b.n	8005ef2 <_printf_float+0xba>
 8006088:	2301      	movs	r3, #1
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af2b 	beq.w	8005eee <_printf_float+0xb6>
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	e7e8      	b.n	8006070 <_printf_float+0x238>
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dc39      	bgt.n	8006118 <_printf_float+0x2e0>
 80060a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <_printf_float+0x2dc>)
 80060a6:	2301      	movs	r3, #1
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af1d 	beq.w	8005eee <_printf_float+0xb6>
 80060b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060b8:	ea59 0303 	orrs.w	r3, r9, r3
 80060bc:	d102      	bne.n	80060c4 <_printf_float+0x28c>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	07d9      	lsls	r1, r3, #31
 80060c2:	d5d7      	bpl.n	8006074 <_printf_float+0x23c>
 80060c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af0d 	beq.w	8005eee <_printf_float+0xb6>
 80060d4:	f04f 0a00 	mov.w	sl, #0
 80060d8:	f104 0b1a 	add.w	fp, r4, #26
 80060dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060de:	425b      	negs	r3, r3
 80060e0:	4553      	cmp	r3, sl
 80060e2:	dc01      	bgt.n	80060e8 <_printf_float+0x2b0>
 80060e4:	464b      	mov	r3, r9
 80060e6:	e793      	b.n	8006010 <_printf_float+0x1d8>
 80060e8:	2301      	movs	r3, #1
 80060ea:	465a      	mov	r2, fp
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f aefb 	beq.w	8005eee <_printf_float+0xb6>
 80060f8:	f10a 0a01 	add.w	sl, sl, #1
 80060fc:	e7ee      	b.n	80060dc <_printf_float+0x2a4>
 80060fe:	bf00      	nop
 8006100:	7fefffff 	.word	0x7fefffff
 8006104:	0800a42c 	.word	0x0800a42c
 8006108:	0800a428 	.word	0x0800a428
 800610c:	0800a434 	.word	0x0800a434
 8006110:	0800a430 	.word	0x0800a430
 8006114:	0800a438 	.word	0x0800a438
 8006118:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800611a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800611e:	4553      	cmp	r3, sl
 8006120:	bfa8      	it	ge
 8006122:	4653      	movge	r3, sl
 8006124:	2b00      	cmp	r3, #0
 8006126:	4699      	mov	r9, r3
 8006128:	dc36      	bgt.n	8006198 <_printf_float+0x360>
 800612a:	f04f 0b00 	mov.w	fp, #0
 800612e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006132:	f104 021a 	add.w	r2, r4, #26
 8006136:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006138:	9306      	str	r3, [sp, #24]
 800613a:	eba3 0309 	sub.w	r3, r3, r9
 800613e:	455b      	cmp	r3, fp
 8006140:	dc31      	bgt.n	80061a6 <_printf_float+0x36e>
 8006142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006144:	459a      	cmp	sl, r3
 8006146:	dc3a      	bgt.n	80061be <_printf_float+0x386>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07da      	lsls	r2, r3, #31
 800614c:	d437      	bmi.n	80061be <_printf_float+0x386>
 800614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006150:	ebaa 0903 	sub.w	r9, sl, r3
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	ebaa 0303 	sub.w	r3, sl, r3
 800615a:	4599      	cmp	r9, r3
 800615c:	bfa8      	it	ge
 800615e:	4699      	movge	r9, r3
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	dc33      	bgt.n	80061ce <_printf_float+0x396>
 8006166:	f04f 0800 	mov.w	r8, #0
 800616a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800616e:	f104 0b1a 	add.w	fp, r4, #26
 8006172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006174:	ebaa 0303 	sub.w	r3, sl, r3
 8006178:	eba3 0309 	sub.w	r3, r3, r9
 800617c:	4543      	cmp	r3, r8
 800617e:	f77f af79 	ble.w	8006074 <_printf_float+0x23c>
 8006182:	2301      	movs	r3, #1
 8006184:	465a      	mov	r2, fp
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f aeae 	beq.w	8005eee <_printf_float+0xb6>
 8006192:	f108 0801 	add.w	r8, r8, #1
 8006196:	e7ec      	b.n	8006172 <_printf_float+0x33a>
 8006198:	4642      	mov	r2, r8
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1c2      	bne.n	800612a <_printf_float+0x2f2>
 80061a4:	e6a3      	b.n	8005eee <_printf_float+0xb6>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	9206      	str	r2, [sp, #24]
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f ae9c 	beq.w	8005eee <_printf_float+0xb6>
 80061b6:	9a06      	ldr	r2, [sp, #24]
 80061b8:	f10b 0b01 	add.w	fp, fp, #1
 80061bc:	e7bb      	b.n	8006136 <_printf_float+0x2fe>
 80061be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	d1c0      	bne.n	800614e <_printf_float+0x316>
 80061cc:	e68f      	b.n	8005eee <_printf_float+0xb6>
 80061ce:	9a06      	ldr	r2, [sp, #24]
 80061d0:	464b      	mov	r3, r9
 80061d2:	4442      	add	r2, r8
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	d1c3      	bne.n	8006166 <_printf_float+0x32e>
 80061de:	e686      	b.n	8005eee <_printf_float+0xb6>
 80061e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061e4:	f1ba 0f01 	cmp.w	sl, #1
 80061e8:	dc01      	bgt.n	80061ee <_printf_float+0x3b6>
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d536      	bpl.n	800625c <_printf_float+0x424>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4642      	mov	r2, r8
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae78 	beq.w	8005eee <_printf_float+0xb6>
 80061fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae70 	beq.w	8005eee <_printf_float+0xb6>
 800620e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800621a:	f7fa fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800621e:	b9c0      	cbnz	r0, 8006252 <_printf_float+0x41a>
 8006220:	4653      	mov	r3, sl
 8006222:	f108 0201 	add.w	r2, r8, #1
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d10c      	bne.n	800624a <_printf_float+0x412>
 8006230:	e65d      	b.n	8005eee <_printf_float+0xb6>
 8006232:	2301      	movs	r3, #1
 8006234:	465a      	mov	r2, fp
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae56 	beq.w	8005eee <_printf_float+0xb6>
 8006242:	f108 0801 	add.w	r8, r8, #1
 8006246:	45d0      	cmp	r8, sl
 8006248:	dbf3      	blt.n	8006232 <_printf_float+0x3fa>
 800624a:	464b      	mov	r3, r9
 800624c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006250:	e6df      	b.n	8006012 <_printf_float+0x1da>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	f104 0b1a 	add.w	fp, r4, #26
 800625a:	e7f4      	b.n	8006246 <_printf_float+0x40e>
 800625c:	2301      	movs	r3, #1
 800625e:	4642      	mov	r2, r8
 8006260:	e7e1      	b.n	8006226 <_printf_float+0x3ee>
 8006262:	2301      	movs	r3, #1
 8006264:	464a      	mov	r2, r9
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae3e 	beq.w	8005eee <_printf_float+0xb6>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	4543      	cmp	r3, r8
 800627e:	dcf0      	bgt.n	8006262 <_printf_float+0x42a>
 8006280:	e6fc      	b.n	800607c <_printf_float+0x244>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f104 0919 	add.w	r9, r4, #25
 800628a:	e7f4      	b.n	8006276 <_printf_float+0x43e>

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4698      	mov	r8, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	3b00      	subs	r3, #0
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062e8:	4641      	mov	r1, r8
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c8      	blx	r9
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4641      	mov	r1, r8
 8006328:	4638      	mov	r0, r7
 800632a:	47c8      	blx	r9
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	@ 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4641      	mov	r1, r8
 800635a:	4638      	mov	r0, r7
 800635c:	47c8      	blx	r9
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006370:	2f78      	cmp	r7, #120	@ 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	@ 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d1 	beq.w	800652c <_printf_i+0x1c4>
 800638a:	2f58      	cmp	r7, #88	@ 0x58
 800638c:	f000 80b8 	beq.w	8006500 <_printf_i+0x198>
 8006390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	@ (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006513 	.word	0x08006513
 80063d8:	0800643f 	.word	0x0800643f
 80063dc:	080064cd 	.word	0x080064cd
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	08006535 	.word	0x08006535
 80063ec:	08006391 	.word	0x08006391
 80063f0:	0800643f 	.word	0x0800643f
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064d5 	.word	0x080064d5
 8006400:	6833      	ldr	r3, [r6, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6032      	str	r2, [r6, #0]
 8006408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09c      	b.n	800654e <_printf_i+0x1e6>
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	1d19      	adds	r1, r3, #4
 800641a:	6031      	str	r1, [r6, #0]
 800641c:	0606      	lsls	r6, r0, #24
 800641e:	d501      	bpl.n	8006424 <_printf_i+0xbc>
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	e003      	b.n	800642c <_printf_i+0xc4>
 8006424:	0645      	lsls	r5, r0, #25
 8006426:	d5fb      	bpl.n	8006420 <_printf_i+0xb8>
 8006428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800642c:	2d00      	cmp	r5, #0
 800642e:	da03      	bge.n	8006438 <_printf_i+0xd0>
 8006430:	232d      	movs	r3, #45	@ 0x2d
 8006432:	426d      	negs	r5, r5
 8006434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006438:	4858      	ldr	r0, [pc, #352]	@ (800659c <_printf_i+0x234>)
 800643a:	230a      	movs	r3, #10
 800643c:	e011      	b.n	8006462 <_printf_i+0xfa>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	0608      	lsls	r0, r1, #24
 8006444:	f853 5b04 	ldr.w	r5, [r3], #4
 8006448:	d402      	bmi.n	8006450 <_printf_i+0xe8>
 800644a:	0649      	lsls	r1, r1, #25
 800644c:	bf48      	it	mi
 800644e:	b2ad      	uxthmi	r5, r5
 8006450:	2f6f      	cmp	r7, #111	@ 0x6f
 8006452:	4852      	ldr	r0, [pc, #328]	@ (800659c <_printf_i+0x234>)
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	bf14      	ite	ne
 8006458:	230a      	movne	r3, #10
 800645a:	2308      	moveq	r3, #8
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006462:	6866      	ldr	r6, [r4, #4]
 8006464:	60a6      	str	r6, [r4, #8]
 8006466:	2e00      	cmp	r6, #0
 8006468:	db05      	blt.n	8006476 <_printf_i+0x10e>
 800646a:	6821      	ldr	r1, [r4, #0]
 800646c:	432e      	orrs	r6, r5
 800646e:	f021 0104 	bic.w	r1, r1, #4
 8006472:	6021      	str	r1, [r4, #0]
 8006474:	d04b      	beq.n	800650e <_printf_i+0x1a6>
 8006476:	4616      	mov	r6, r2
 8006478:	fbb5 f1f3 	udiv	r1, r5, r3
 800647c:	fb03 5711 	mls	r7, r3, r1, r5
 8006480:	5dc7      	ldrb	r7, [r0, r7]
 8006482:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006486:	462f      	mov	r7, r5
 8006488:	42bb      	cmp	r3, r7
 800648a:	460d      	mov	r5, r1
 800648c:	d9f4      	bls.n	8006478 <_printf_i+0x110>
 800648e:	2b08      	cmp	r3, #8
 8006490:	d10b      	bne.n	80064aa <_printf_i+0x142>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	07df      	lsls	r7, r3, #31
 8006496:	d508      	bpl.n	80064aa <_printf_i+0x142>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	6861      	ldr	r1, [r4, #4]
 800649c:	4299      	cmp	r1, r3
 800649e:	bfde      	ittt	le
 80064a0:	2330      	movle	r3, #48	@ 0x30
 80064a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064aa:	1b92      	subs	r2, r2, r6
 80064ac:	6122      	str	r2, [r4, #16]
 80064ae:	f8cd a000 	str.w	sl, [sp]
 80064b2:	464b      	mov	r3, r9
 80064b4:	aa03      	add	r2, sp, #12
 80064b6:	4621      	mov	r1, r4
 80064b8:	4640      	mov	r0, r8
 80064ba:	f7ff fee7 	bl	800628c <_printf_common>
 80064be:	3001      	adds	r0, #1
 80064c0:	d14a      	bne.n	8006558 <_printf_i+0x1f0>
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	b004      	add	sp, #16
 80064c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	f043 0320 	orr.w	r3, r3, #32
 80064d2:	6023      	str	r3, [r4, #0]
 80064d4:	4832      	ldr	r0, [pc, #200]	@ (80065a0 <_printf_i+0x238>)
 80064d6:	2778      	movs	r7, #120	@ 0x78
 80064d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	6831      	ldr	r1, [r6, #0]
 80064e0:	061f      	lsls	r7, r3, #24
 80064e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80064e6:	d402      	bmi.n	80064ee <_printf_i+0x186>
 80064e8:	065f      	lsls	r7, r3, #25
 80064ea:	bf48      	it	mi
 80064ec:	b2ad      	uxthmi	r5, r5
 80064ee:	6031      	str	r1, [r6, #0]
 80064f0:	07d9      	lsls	r1, r3, #31
 80064f2:	bf44      	itt	mi
 80064f4:	f043 0320 	orrmi.w	r3, r3, #32
 80064f8:	6023      	strmi	r3, [r4, #0]
 80064fa:	b11d      	cbz	r5, 8006504 <_printf_i+0x19c>
 80064fc:	2310      	movs	r3, #16
 80064fe:	e7ad      	b.n	800645c <_printf_i+0xf4>
 8006500:	4826      	ldr	r0, [pc, #152]	@ (800659c <_printf_i+0x234>)
 8006502:	e7e9      	b.n	80064d8 <_printf_i+0x170>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e7f6      	b.n	80064fc <_printf_i+0x194>
 800650e:	4616      	mov	r6, r2
 8006510:	e7bd      	b.n	800648e <_printf_i+0x126>
 8006512:	6833      	ldr	r3, [r6, #0]
 8006514:	6825      	ldr	r5, [r4, #0]
 8006516:	6961      	ldr	r1, [r4, #20]
 8006518:	1d18      	adds	r0, r3, #4
 800651a:	6030      	str	r0, [r6, #0]
 800651c:	062e      	lsls	r6, r5, #24
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	d501      	bpl.n	8006526 <_printf_i+0x1be>
 8006522:	6019      	str	r1, [r3, #0]
 8006524:	e002      	b.n	800652c <_printf_i+0x1c4>
 8006526:	0668      	lsls	r0, r5, #25
 8006528:	d5fb      	bpl.n	8006522 <_printf_i+0x1ba>
 800652a:	8019      	strh	r1, [r3, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	4616      	mov	r6, r2
 8006532:	e7bc      	b.n	80064ae <_printf_i+0x146>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	6032      	str	r2, [r6, #0]
 800653a:	681e      	ldr	r6, [r3, #0]
 800653c:	6862      	ldr	r2, [r4, #4]
 800653e:	2100      	movs	r1, #0
 8006540:	4630      	mov	r0, r6
 8006542:	f7f9 fe45 	bl	80001d0 <memchr>
 8006546:	b108      	cbz	r0, 800654c <_printf_i+0x1e4>
 8006548:	1b80      	subs	r0, r0, r6
 800654a:	6060      	str	r0, [r4, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	2300      	movs	r3, #0
 8006552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006556:	e7aa      	b.n	80064ae <_printf_i+0x146>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	4632      	mov	r2, r6
 800655c:	4649      	mov	r1, r9
 800655e:	4640      	mov	r0, r8
 8006560:	47d0      	blx	sl
 8006562:	3001      	adds	r0, #1
 8006564:	d0ad      	beq.n	80064c2 <_printf_i+0x15a>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	079b      	lsls	r3, r3, #30
 800656a:	d413      	bmi.n	8006594 <_printf_i+0x22c>
 800656c:	68e0      	ldr	r0, [r4, #12]
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	4298      	cmp	r0, r3
 8006572:	bfb8      	it	lt
 8006574:	4618      	movlt	r0, r3
 8006576:	e7a6      	b.n	80064c6 <_printf_i+0x15e>
 8006578:	2301      	movs	r3, #1
 800657a:	4632      	mov	r2, r6
 800657c:	4649      	mov	r1, r9
 800657e:	4640      	mov	r0, r8
 8006580:	47d0      	blx	sl
 8006582:	3001      	adds	r0, #1
 8006584:	d09d      	beq.n	80064c2 <_printf_i+0x15a>
 8006586:	3501      	adds	r5, #1
 8006588:	68e3      	ldr	r3, [r4, #12]
 800658a:	9903      	ldr	r1, [sp, #12]
 800658c:	1a5b      	subs	r3, r3, r1
 800658e:	42ab      	cmp	r3, r5
 8006590:	dcf2      	bgt.n	8006578 <_printf_i+0x210>
 8006592:	e7eb      	b.n	800656c <_printf_i+0x204>
 8006594:	2500      	movs	r5, #0
 8006596:	f104 0619 	add.w	r6, r4, #25
 800659a:	e7f5      	b.n	8006588 <_printf_i+0x220>
 800659c:	0800a43a 	.word	0x0800a43a
 80065a0:	0800a44b 	.word	0x0800a44b

080065a4 <_scanf_float>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	b087      	sub	sp, #28
 80065aa:	4691      	mov	r9, r2
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	688b      	ldr	r3, [r1, #8]
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80065b6:	bf81      	itttt	hi
 80065b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80065bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80065c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80065c4:	608b      	strhi	r3, [r1, #8]
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	460a      	mov	r2, r1
 80065ca:	f04f 0500 	mov.w	r5, #0
 80065ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80065d2:	f842 3b1c 	str.w	r3, [r2], #28
 80065d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065da:	4680      	mov	r8, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	bf98      	it	ls
 80065e0:	f04f 0b00 	movls.w	fp, #0
 80065e4:	9201      	str	r2, [sp, #4]
 80065e6:	4616      	mov	r6, r2
 80065e8:	46aa      	mov	sl, r5
 80065ea:	462f      	mov	r7, r5
 80065ec:	9502      	str	r5, [sp, #8]
 80065ee:	68a2      	ldr	r2, [r4, #8]
 80065f0:	b15a      	cbz	r2, 800660a <_scanf_float+0x66>
 80065f2:	f8d9 3000 	ldr.w	r3, [r9]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80065fa:	d863      	bhi.n	80066c4 <_scanf_float+0x120>
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d83b      	bhi.n	8006678 <_scanf_float+0xd4>
 8006600:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006604:	b2c8      	uxtb	r0, r1
 8006606:	280e      	cmp	r0, #14
 8006608:	d939      	bls.n	800667e <_scanf_float+0xda>
 800660a:	b11f      	cbz	r7, 8006614 <_scanf_float+0x70>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006618:	f1ba 0f01 	cmp.w	sl, #1
 800661c:	f200 8114 	bhi.w	8006848 <_scanf_float+0x2a4>
 8006620:	9b01      	ldr	r3, [sp, #4]
 8006622:	429e      	cmp	r6, r3
 8006624:	f200 8105 	bhi.w	8006832 <_scanf_float+0x28e>
 8006628:	2001      	movs	r0, #1
 800662a:	b007      	add	sp, #28
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006634:	2a0d      	cmp	r2, #13
 8006636:	d8e8      	bhi.n	800660a <_scanf_float+0x66>
 8006638:	a101      	add	r1, pc, #4	@ (adr r1, 8006640 <_scanf_float+0x9c>)
 800663a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006789 	.word	0x08006789
 8006644:	0800660b 	.word	0x0800660b
 8006648:	0800660b 	.word	0x0800660b
 800664c:	0800660b 	.word	0x0800660b
 8006650:	080067e5 	.word	0x080067e5
 8006654:	080067bf 	.word	0x080067bf
 8006658:	0800660b 	.word	0x0800660b
 800665c:	0800660b 	.word	0x0800660b
 8006660:	08006797 	.word	0x08006797
 8006664:	0800660b 	.word	0x0800660b
 8006668:	0800660b 	.word	0x0800660b
 800666c:	0800660b 	.word	0x0800660b
 8006670:	0800660b 	.word	0x0800660b
 8006674:	08006753 	.word	0x08006753
 8006678:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800667c:	e7da      	b.n	8006634 <_scanf_float+0x90>
 800667e:	290e      	cmp	r1, #14
 8006680:	d8c3      	bhi.n	800660a <_scanf_float+0x66>
 8006682:	a001      	add	r0, pc, #4	@ (adr r0, 8006688 <_scanf_float+0xe4>)
 8006684:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006688:	08006743 	.word	0x08006743
 800668c:	0800660b 	.word	0x0800660b
 8006690:	08006743 	.word	0x08006743
 8006694:	080067d3 	.word	0x080067d3
 8006698:	0800660b 	.word	0x0800660b
 800669c:	080066e5 	.word	0x080066e5
 80066a0:	08006729 	.word	0x08006729
 80066a4:	08006729 	.word	0x08006729
 80066a8:	08006729 	.word	0x08006729
 80066ac:	08006729 	.word	0x08006729
 80066b0:	08006729 	.word	0x08006729
 80066b4:	08006729 	.word	0x08006729
 80066b8:	08006729 	.word	0x08006729
 80066bc:	08006729 	.word	0x08006729
 80066c0:	08006729 	.word	0x08006729
 80066c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80066c6:	d809      	bhi.n	80066dc <_scanf_float+0x138>
 80066c8:	2b60      	cmp	r3, #96	@ 0x60
 80066ca:	d8b1      	bhi.n	8006630 <_scanf_float+0x8c>
 80066cc:	2b54      	cmp	r3, #84	@ 0x54
 80066ce:	d07b      	beq.n	80067c8 <_scanf_float+0x224>
 80066d0:	2b59      	cmp	r3, #89	@ 0x59
 80066d2:	d19a      	bne.n	800660a <_scanf_float+0x66>
 80066d4:	2d07      	cmp	r5, #7
 80066d6:	d198      	bne.n	800660a <_scanf_float+0x66>
 80066d8:	2508      	movs	r5, #8
 80066da:	e02f      	b.n	800673c <_scanf_float+0x198>
 80066dc:	2b74      	cmp	r3, #116	@ 0x74
 80066de:	d073      	beq.n	80067c8 <_scanf_float+0x224>
 80066e0:	2b79      	cmp	r3, #121	@ 0x79
 80066e2:	e7f6      	b.n	80066d2 <_scanf_float+0x12e>
 80066e4:	6821      	ldr	r1, [r4, #0]
 80066e6:	05c8      	lsls	r0, r1, #23
 80066e8:	d51e      	bpl.n	8006728 <_scanf_float+0x184>
 80066ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80066ee:	6021      	str	r1, [r4, #0]
 80066f0:	3701      	adds	r7, #1
 80066f2:	f1bb 0f00 	cmp.w	fp, #0
 80066f6:	d003      	beq.n	8006700 <_scanf_float+0x15c>
 80066f8:	3201      	adds	r2, #1
 80066fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066fe:	60a2      	str	r2, [r4, #8]
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	3b01      	subs	r3, #1
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	6123      	str	r3, [r4, #16]
 800670c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	f8c9 3004 	str.w	r3, [r9, #4]
 8006718:	f340 8082 	ble.w	8006820 <_scanf_float+0x27c>
 800671c:	f8d9 3000 	ldr.w	r3, [r9]
 8006720:	3301      	adds	r3, #1
 8006722:	f8c9 3000 	str.w	r3, [r9]
 8006726:	e762      	b.n	80065ee <_scanf_float+0x4a>
 8006728:	eb1a 0105 	adds.w	r1, sl, r5
 800672c:	f47f af6d 	bne.w	800660a <_scanf_float+0x66>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	460d      	mov	r5, r1
 800673a:	468a      	mov	sl, r1
 800673c:	f806 3b01 	strb.w	r3, [r6], #1
 8006740:	e7de      	b.n	8006700 <_scanf_float+0x15c>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	0610      	lsls	r0, r2, #24
 8006746:	f57f af60 	bpl.w	800660a <_scanf_float+0x66>
 800674a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	e7f4      	b.n	800673c <_scanf_float+0x198>
 8006752:	f1ba 0f00 	cmp.w	sl, #0
 8006756:	d10c      	bne.n	8006772 <_scanf_float+0x1ce>
 8006758:	b977      	cbnz	r7, 8006778 <_scanf_float+0x1d4>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006760:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006764:	d108      	bne.n	8006778 <_scanf_float+0x1d4>
 8006766:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	f04f 0a01 	mov.w	sl, #1
 8006770:	e7e4      	b.n	800673c <_scanf_float+0x198>
 8006772:	f1ba 0f02 	cmp.w	sl, #2
 8006776:	d050      	beq.n	800681a <_scanf_float+0x276>
 8006778:	2d01      	cmp	r5, #1
 800677a:	d002      	beq.n	8006782 <_scanf_float+0x1de>
 800677c:	2d04      	cmp	r5, #4
 800677e:	f47f af44 	bne.w	800660a <_scanf_float+0x66>
 8006782:	3501      	adds	r5, #1
 8006784:	b2ed      	uxtb	r5, r5
 8006786:	e7d9      	b.n	800673c <_scanf_float+0x198>
 8006788:	f1ba 0f01 	cmp.w	sl, #1
 800678c:	f47f af3d 	bne.w	800660a <_scanf_float+0x66>
 8006790:	f04f 0a02 	mov.w	sl, #2
 8006794:	e7d2      	b.n	800673c <_scanf_float+0x198>
 8006796:	b975      	cbnz	r5, 80067b6 <_scanf_float+0x212>
 8006798:	2f00      	cmp	r7, #0
 800679a:	f47f af37 	bne.w	800660c <_scanf_float+0x68>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067a8:	f040 8103 	bne.w	80069b2 <_scanf_float+0x40e>
 80067ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067b0:	6022      	str	r2, [r4, #0]
 80067b2:	2501      	movs	r5, #1
 80067b4:	e7c2      	b.n	800673c <_scanf_float+0x198>
 80067b6:	2d03      	cmp	r5, #3
 80067b8:	d0e3      	beq.n	8006782 <_scanf_float+0x1de>
 80067ba:	2d05      	cmp	r5, #5
 80067bc:	e7df      	b.n	800677e <_scanf_float+0x1da>
 80067be:	2d02      	cmp	r5, #2
 80067c0:	f47f af23 	bne.w	800660a <_scanf_float+0x66>
 80067c4:	2503      	movs	r5, #3
 80067c6:	e7b9      	b.n	800673c <_scanf_float+0x198>
 80067c8:	2d06      	cmp	r5, #6
 80067ca:	f47f af1e 	bne.w	800660a <_scanf_float+0x66>
 80067ce:	2507      	movs	r5, #7
 80067d0:	e7b4      	b.n	800673c <_scanf_float+0x198>
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	0591      	lsls	r1, r2, #22
 80067d6:	f57f af18 	bpl.w	800660a <_scanf_float+0x66>
 80067da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	9702      	str	r7, [sp, #8]
 80067e2:	e7ab      	b.n	800673c <_scanf_float+0x198>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80067ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80067ee:	d005      	beq.n	80067fc <_scanf_float+0x258>
 80067f0:	0550      	lsls	r0, r2, #21
 80067f2:	f57f af0a 	bpl.w	800660a <_scanf_float+0x66>
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	f000 80db 	beq.w	80069b2 <_scanf_float+0x40e>
 80067fc:	0591      	lsls	r1, r2, #22
 80067fe:	bf58      	it	pl
 8006800:	9902      	ldrpl	r1, [sp, #8]
 8006802:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006806:	bf58      	it	pl
 8006808:	1a79      	subpl	r1, r7, r1
 800680a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800680e:	bf58      	it	pl
 8006810:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006814:	6022      	str	r2, [r4, #0]
 8006816:	2700      	movs	r7, #0
 8006818:	e790      	b.n	800673c <_scanf_float+0x198>
 800681a:	f04f 0a03 	mov.w	sl, #3
 800681e:	e78d      	b.n	800673c <_scanf_float+0x198>
 8006820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006824:	4649      	mov	r1, r9
 8006826:	4640      	mov	r0, r8
 8006828:	4798      	blx	r3
 800682a:	2800      	cmp	r0, #0
 800682c:	f43f aedf 	beq.w	80065ee <_scanf_float+0x4a>
 8006830:	e6eb      	b.n	800660a <_scanf_float+0x66>
 8006832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800683a:	464a      	mov	r2, r9
 800683c:	4640      	mov	r0, r8
 800683e:	4798      	blx	r3
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	3b01      	subs	r3, #1
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	e6eb      	b.n	8006620 <_scanf_float+0x7c>
 8006848:	1e6b      	subs	r3, r5, #1
 800684a:	2b06      	cmp	r3, #6
 800684c:	d824      	bhi.n	8006898 <_scanf_float+0x2f4>
 800684e:	2d02      	cmp	r5, #2
 8006850:	d836      	bhi.n	80068c0 <_scanf_float+0x31c>
 8006852:	9b01      	ldr	r3, [sp, #4]
 8006854:	429e      	cmp	r6, r3
 8006856:	f67f aee7 	bls.w	8006628 <_scanf_float+0x84>
 800685a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800685e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006862:	464a      	mov	r2, r9
 8006864:	4640      	mov	r0, r8
 8006866:	4798      	blx	r3
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	e7f0      	b.n	8006852 <_scanf_float+0x2ae>
 8006870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006874:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006878:	464a      	mov	r2, r9
 800687a:	4640      	mov	r0, r8
 800687c:	4798      	blx	r3
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	3b01      	subs	r3, #1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006888:	fa5f fa8a 	uxtb.w	sl, sl
 800688c:	f1ba 0f02 	cmp.w	sl, #2
 8006890:	d1ee      	bne.n	8006870 <_scanf_float+0x2cc>
 8006892:	3d03      	subs	r5, #3
 8006894:	b2ed      	uxtb	r5, r5
 8006896:	1b76      	subs	r6, r6, r5
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	05da      	lsls	r2, r3, #23
 800689c:	d530      	bpl.n	8006900 <_scanf_float+0x35c>
 800689e:	055b      	lsls	r3, r3, #21
 80068a0:	d511      	bpl.n	80068c6 <_scanf_float+0x322>
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	429e      	cmp	r6, r3
 80068a6:	f67f aebf 	bls.w	8006628 <_scanf_float+0x84>
 80068aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068b2:	464a      	mov	r2, r9
 80068b4:	4640      	mov	r0, r8
 80068b6:	4798      	blx	r3
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	6123      	str	r3, [r4, #16]
 80068be:	e7f0      	b.n	80068a2 <_scanf_float+0x2fe>
 80068c0:	46aa      	mov	sl, r5
 80068c2:	46b3      	mov	fp, r6
 80068c4:	e7de      	b.n	8006884 <_scanf_float+0x2e0>
 80068c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	2965      	cmp	r1, #101	@ 0x65
 80068ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80068d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	d00c      	beq.n	80068f4 <_scanf_float+0x350>
 80068da:	2945      	cmp	r1, #69	@ 0x45
 80068dc:	d00a      	beq.n	80068f4 <_scanf_float+0x350>
 80068de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e2:	464a      	mov	r2, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	4798      	blx	r3
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	1eb5      	subs	r5, r6, #2
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068f8:	464a      	mov	r2, r9
 80068fa:	4640      	mov	r0, r8
 80068fc:	4798      	blx	r3
 80068fe:	462e      	mov	r6, r5
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	f012 0210 	ands.w	r2, r2, #16
 8006906:	d001      	beq.n	800690c <_scanf_float+0x368>
 8006908:	2000      	movs	r0, #0
 800690a:	e68e      	b.n	800662a <_scanf_float+0x86>
 800690c:	7032      	strb	r2, [r6, #0]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006918:	d125      	bne.n	8006966 <_scanf_float+0x3c2>
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	429f      	cmp	r7, r3
 800691e:	d00a      	beq.n	8006936 <_scanf_float+0x392>
 8006920:	1bda      	subs	r2, r3, r7
 8006922:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006926:	429e      	cmp	r6, r3
 8006928:	bf28      	it	cs
 800692a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800692e:	4922      	ldr	r1, [pc, #136]	@ (80069b8 <_scanf_float+0x414>)
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f907 	bl	8006b44 <siprintf>
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	4640      	mov	r0, r8
 800693c:	f002 fbf4 	bl	8009128 <_strtod_r>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	6821      	ldr	r1, [r4, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f011 0f02 	tst.w	r1, #2
 800694a:	ec57 6b10 	vmov	r6, r7, d0
 800694e:	f103 0204 	add.w	r2, r3, #4
 8006952:	d015      	beq.n	8006980 <_scanf_float+0x3dc>
 8006954:	9903      	ldr	r1, [sp, #12]
 8006956:	600a      	str	r2, [r1, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	e9c3 6700 	strd	r6, r7, [r3]
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60e3      	str	r3, [r4, #12]
 8006964:	e7d0      	b.n	8006908 <_scanf_float+0x364>
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0e4      	beq.n	8006936 <_scanf_float+0x392>
 800696c:	9905      	ldr	r1, [sp, #20]
 800696e:	230a      	movs	r3, #10
 8006970:	3101      	adds	r1, #1
 8006972:	4640      	mov	r0, r8
 8006974:	f002 fc58 	bl	8009228 <_strtol_r>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	9e05      	ldr	r6, [sp, #20]
 800697c:	1ac2      	subs	r2, r0, r3
 800697e:	e7d0      	b.n	8006922 <_scanf_float+0x37e>
 8006980:	f011 0f04 	tst.w	r1, #4
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	600a      	str	r2, [r1, #0]
 8006988:	d1e6      	bne.n	8006958 <_scanf_float+0x3b4>
 800698a:	681d      	ldr	r5, [r3, #0]
 800698c:	4632      	mov	r2, r6
 800698e:	463b      	mov	r3, r7
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7fa f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8006998:	b128      	cbz	r0, 80069a6 <_scanf_float+0x402>
 800699a:	4808      	ldr	r0, [pc, #32]	@ (80069bc <_scanf_float+0x418>)
 800699c:	f000 f9b8 	bl	8006d10 <nanf>
 80069a0:	ed85 0a00 	vstr	s0, [r5]
 80069a4:	e7db      	b.n	800695e <_scanf_float+0x3ba>
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	f7fa f91d 	bl	8000be8 <__aeabi_d2f>
 80069ae:	6028      	str	r0, [r5, #0]
 80069b0:	e7d5      	b.n	800695e <_scanf_float+0x3ba>
 80069b2:	2700      	movs	r7, #0
 80069b4:	e62e      	b.n	8006614 <_scanf_float+0x70>
 80069b6:	bf00      	nop
 80069b8:	0800a45c 	.word	0x0800a45c
 80069bc:	0800a59d 	.word	0x0800a59d

080069c0 <std>:
 80069c0:	2300      	movs	r3, #0
 80069c2:	b510      	push	{r4, lr}
 80069c4:	4604      	mov	r4, r0
 80069c6:	e9c0 3300 	strd	r3, r3, [r0]
 80069ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ce:	6083      	str	r3, [r0, #8]
 80069d0:	8181      	strh	r1, [r0, #12]
 80069d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80069d4:	81c2      	strh	r2, [r0, #14]
 80069d6:	6183      	str	r3, [r0, #24]
 80069d8:	4619      	mov	r1, r3
 80069da:	2208      	movs	r2, #8
 80069dc:	305c      	adds	r0, #92	@ 0x5c
 80069de:	f000 f916 	bl	8006c0e <memset>
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <std+0x58>)
 80069e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <std+0x5c>)
 80069e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006a20 <std+0x60>)
 80069ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006a24 <std+0x64>)
 80069f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <std+0x68>)
 80069f4:	6224      	str	r4, [r4, #32]
 80069f6:	429c      	cmp	r4, r3
 80069f8:	d006      	beq.n	8006a08 <std+0x48>
 80069fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069fe:	4294      	cmp	r4, r2
 8006a00:	d002      	beq.n	8006a08 <std+0x48>
 8006a02:	33d0      	adds	r3, #208	@ 0xd0
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d105      	bne.n	8006a14 <std+0x54>
 8006a08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	f000 b97a 	b.w	8006d08 <__retarget_lock_init_recursive>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	bf00      	nop
 8006a18:	08006b89 	.word	0x08006b89
 8006a1c:	08006bab 	.word	0x08006bab
 8006a20:	08006be3 	.word	0x08006be3
 8006a24:	08006c07 	.word	0x08006c07
 8006a28:	20000610 	.word	0x20000610

08006a2c <stdio_exit_handler>:
 8006a2c:	4a02      	ldr	r2, [pc, #8]	@ (8006a38 <stdio_exit_handler+0xc>)
 8006a2e:	4903      	ldr	r1, [pc, #12]	@ (8006a3c <stdio_exit_handler+0x10>)
 8006a30:	4803      	ldr	r0, [pc, #12]	@ (8006a40 <stdio_exit_handler+0x14>)
 8006a32:	f000 b869 	b.w	8006b08 <_fwalk_sglue>
 8006a36:	bf00      	nop
 8006a38:	20000018 	.word	0x20000018
 8006a3c:	080095e5 	.word	0x080095e5
 8006a40:	20000028 	.word	0x20000028

08006a44 <cleanup_stdio>:
 8006a44:	6841      	ldr	r1, [r0, #4]
 8006a46:	4b0c      	ldr	r3, [pc, #48]	@ (8006a78 <cleanup_stdio+0x34>)
 8006a48:	4299      	cmp	r1, r3
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	d001      	beq.n	8006a54 <cleanup_stdio+0x10>
 8006a50:	f002 fdc8 	bl	80095e4 <_fflush_r>
 8006a54:	68a1      	ldr	r1, [r4, #8]
 8006a56:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <cleanup_stdio+0x38>)
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	d002      	beq.n	8006a62 <cleanup_stdio+0x1e>
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f002 fdc1 	bl	80095e4 <_fflush_r>
 8006a62:	68e1      	ldr	r1, [r4, #12]
 8006a64:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <cleanup_stdio+0x3c>)
 8006a66:	4299      	cmp	r1, r3
 8006a68:	d004      	beq.n	8006a74 <cleanup_stdio+0x30>
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a70:	f002 bdb8 	b.w	80095e4 <_fflush_r>
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	20000610 	.word	0x20000610
 8006a7c:	20000678 	.word	0x20000678
 8006a80:	200006e0 	.word	0x200006e0

08006a84 <global_stdio_init.part.0>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <global_stdio_init.part.0+0x30>)
 8006a88:	4c0b      	ldr	r4, [pc, #44]	@ (8006ab8 <global_stdio_init.part.0+0x34>)
 8006a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006abc <global_stdio_init.part.0+0x38>)
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	2200      	movs	r2, #0
 8006a92:	2104      	movs	r1, #4
 8006a94:	f7ff ff94 	bl	80069c0 <std>
 8006a98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	2109      	movs	r1, #9
 8006aa0:	f7ff ff8e 	bl	80069c0 <std>
 8006aa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aae:	2112      	movs	r1, #18
 8006ab0:	f7ff bf86 	b.w	80069c0 <std>
 8006ab4:	20000748 	.word	0x20000748
 8006ab8:	20000610 	.word	0x20000610
 8006abc:	08006a2d 	.word	0x08006a2d

08006ac0 <__sfp_lock_acquire>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_acquire+0x8>)
 8006ac2:	f000 b922 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20000751 	.word	0x20000751

08006acc <__sfp_lock_release>:
 8006acc:	4801      	ldr	r0, [pc, #4]	@ (8006ad4 <__sfp_lock_release+0x8>)
 8006ace:	f000 b91d 	b.w	8006d0c <__retarget_lock_release_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20000751 	.word	0x20000751

08006ad8 <__sinit>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4604      	mov	r4, r0
 8006adc:	f7ff fff0 	bl	8006ac0 <__sfp_lock_acquire>
 8006ae0:	6a23      	ldr	r3, [r4, #32]
 8006ae2:	b11b      	cbz	r3, 8006aec <__sinit+0x14>
 8006ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae8:	f7ff bff0 	b.w	8006acc <__sfp_lock_release>
 8006aec:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <__sinit+0x28>)
 8006aee:	6223      	str	r3, [r4, #32]
 8006af0:	4b04      	ldr	r3, [pc, #16]	@ (8006b04 <__sinit+0x2c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f5      	bne.n	8006ae4 <__sinit+0xc>
 8006af8:	f7ff ffc4 	bl	8006a84 <global_stdio_init.part.0>
 8006afc:	e7f2      	b.n	8006ae4 <__sinit+0xc>
 8006afe:	bf00      	nop
 8006b00:	08006a45 	.word	0x08006a45
 8006b04:	20000748 	.word	0x20000748

08006b08 <_fwalk_sglue>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	4688      	mov	r8, r1
 8006b10:	4614      	mov	r4, r2
 8006b12:	2600      	movs	r6, #0
 8006b14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b18:	f1b9 0901 	subs.w	r9, r9, #1
 8006b1c:	d505      	bpl.n	8006b2a <_fwalk_sglue+0x22>
 8006b1e:	6824      	ldr	r4, [r4, #0]
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	d1f7      	bne.n	8006b14 <_fwalk_sglue+0xc>
 8006b24:	4630      	mov	r0, r6
 8006b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d907      	bls.n	8006b40 <_fwalk_sglue+0x38>
 8006b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b34:	3301      	adds	r3, #1
 8006b36:	d003      	beq.n	8006b40 <_fwalk_sglue+0x38>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	4306      	orrs	r6, r0
 8006b40:	3568      	adds	r5, #104	@ 0x68
 8006b42:	e7e9      	b.n	8006b18 <_fwalk_sglue+0x10>

08006b44 <siprintf>:
 8006b44:	b40e      	push	{r1, r2, r3}
 8006b46:	b510      	push	{r4, lr}
 8006b48:	b09d      	sub	sp, #116	@ 0x74
 8006b4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b4c:	9002      	str	r0, [sp, #8]
 8006b4e:	9006      	str	r0, [sp, #24]
 8006b50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b54:	480a      	ldr	r0, [pc, #40]	@ (8006b80 <siprintf+0x3c>)
 8006b56:	9107      	str	r1, [sp, #28]
 8006b58:	9104      	str	r1, [sp, #16]
 8006b5a:	490a      	ldr	r1, [pc, #40]	@ (8006b84 <siprintf+0x40>)
 8006b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b60:	9105      	str	r1, [sp, #20]
 8006b62:	2400      	movs	r4, #0
 8006b64:	a902      	add	r1, sp, #8
 8006b66:	6800      	ldr	r0, [r0, #0]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b6c:	f002 fbba 	bl	80092e4 <_svfiprintf_r>
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	701c      	strb	r4, [r3, #0]
 8006b74:	b01d      	add	sp, #116	@ 0x74
 8006b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7a:	b003      	add	sp, #12
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000024 	.word	0x20000024
 8006b84:	ffff0208 	.word	0xffff0208

08006b88 <__sread>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	f000 f86c 	bl	8006c6c <_read_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	bfab      	itete	ge
 8006b98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b9c:	181b      	addge	r3, r3, r0
 8006b9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ba2:	bfac      	ite	ge
 8006ba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ba6:	81a3      	strhlt	r3, [r4, #12]
 8006ba8:	bd10      	pop	{r4, pc}

08006baa <__swrite>:
 8006baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	461f      	mov	r7, r3
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	05db      	lsls	r3, r3, #23
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	4616      	mov	r6, r2
 8006bba:	d505      	bpl.n	8006bc8 <__swrite+0x1e>
 8006bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f000 f840 	bl	8006c48 <_lseek_r>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	4628      	mov	r0, r5
 8006bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bde:	f000 b857 	b.w	8006c90 <_write_r>

08006be2 <__sseek>:
 8006be2:	b510      	push	{r4, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bea:	f000 f82d 	bl	8006c48 <_lseek_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	bf15      	itete	ne
 8006bf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bfe:	81a3      	strheq	r3, [r4, #12]
 8006c00:	bf18      	it	ne
 8006c02:	81a3      	strhne	r3, [r4, #12]
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <__sclose>:
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 b80d 	b.w	8006c28 <_close_r>

08006c0e <memset>:
 8006c0e:	4402      	add	r2, r0
 8006c10:	4603      	mov	r3, r0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d100      	bne.n	8006c18 <memset+0xa>
 8006c16:	4770      	bx	lr
 8006c18:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1c:	e7f9      	b.n	8006c12 <memset+0x4>
	...

08006c20 <_localeconv_r>:
 8006c20:	4800      	ldr	r0, [pc, #0]	@ (8006c24 <_localeconv_r+0x4>)
 8006c22:	4770      	bx	lr
 8006c24:	20000164 	.word	0x20000164

08006c28 <_close_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	@ (8006c44 <_close_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fb f94a 	bl	8001ecc <_close>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_close_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_close_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	2000074c 	.word	0x2000074c

08006c48 <_lseek_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	@ (8006c68 <_lseek_r+0x20>)
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4611      	mov	r1, r2
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fb f95f 	bl	8001f1a <_lseek>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_lseek_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_lseek_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	2000074c 	.word	0x2000074c

08006c6c <_read_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d07      	ldr	r5, [pc, #28]	@ (8006c8c <_read_r+0x20>)
 8006c70:	4604      	mov	r4, r0
 8006c72:	4608      	mov	r0, r1
 8006c74:	4611      	mov	r1, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7fb f909 	bl	8001e92 <_read>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_read_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_read_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	2000074c 	.word	0x2000074c

08006c90 <_write_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d07      	ldr	r5, [pc, #28]	@ (8006cb0 <_write_r+0x20>)
 8006c94:	4604      	mov	r4, r0
 8006c96:	4608      	mov	r0, r1
 8006c98:	4611      	mov	r1, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa fa8e 	bl	80011c0 <_write>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_write_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_write_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	2000074c 	.word	0x2000074c

08006cb4 <__errno>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	@ (8006cbc <__errno+0x8>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000024 	.word	0x20000024

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006cf8 <__libc_init_array+0x38>)
 8006cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006cfc <__libc_init_array+0x3c>)
 8006cc6:	1b64      	subs	r4, r4, r5
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	2600      	movs	r6, #0
 8006ccc:	42a6      	cmp	r6, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8006d00 <__libc_init_array+0x40>)
 8006cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8006d04 <__libc_init_array+0x44>)
 8006cd4:	f003 fb76 	bl	800a3c4 <_init>
 8006cd8:	1b64      	subs	r4, r4, r5
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	2600      	movs	r6, #0
 8006cde:	42a6      	cmp	r6, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce8:	4798      	blx	r3
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf2:	4798      	blx	r3
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	0800a85c 	.word	0x0800a85c
 8006cfc:	0800a85c 	.word	0x0800a85c
 8006d00:	0800a85c 	.word	0x0800a85c
 8006d04:	0800a860 	.word	0x0800a860

08006d08 <__retarget_lock_init_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <__retarget_lock_acquire_recursive>:
 8006d0a:	4770      	bx	lr

08006d0c <__retarget_lock_release_recursive>:
 8006d0c:	4770      	bx	lr
	...

08006d10 <nanf>:
 8006d10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d18 <nanf+0x8>
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	7fc00000 	.word	0x7fc00000

08006d1c <quorem>:
 8006d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	6903      	ldr	r3, [r0, #16]
 8006d22:	690c      	ldr	r4, [r1, #16]
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	4607      	mov	r7, r0
 8006d28:	db7e      	blt.n	8006e28 <quorem+0x10c>
 8006d2a:	3c01      	subs	r4, #1
 8006d2c:	f101 0814 	add.w	r8, r1, #20
 8006d30:	00a3      	lsls	r3, r4, #2
 8006d32:	f100 0514 	add.w	r5, r0, #20
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d46:	3301      	adds	r3, #1
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d52:	d32e      	bcc.n	8006db2 <quorem+0x96>
 8006d54:	f04f 0a00 	mov.w	sl, #0
 8006d58:	46c4      	mov	ip, r8
 8006d5a:	46ae      	mov	lr, r5
 8006d5c:	46d3      	mov	fp, sl
 8006d5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d62:	b298      	uxth	r0, r3
 8006d64:	fb06 a000 	mla	r0, r6, r0, sl
 8006d68:	0c02      	lsrs	r2, r0, #16
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	fb06 2303 	mla	r3, r6, r3, r2
 8006d70:	f8de 2000 	ldr.w	r2, [lr]
 8006d74:	b280      	uxth	r0, r0
 8006d76:	b292      	uxth	r2, r2
 8006d78:	1a12      	subs	r2, r2, r0
 8006d7a:	445a      	add	r2, fp
 8006d7c:	f8de 0000 	ldr.w	r0, [lr]
 8006d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d94:	45e1      	cmp	r9, ip
 8006d96:	f84e 2b04 	str.w	r2, [lr], #4
 8006d9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d9e:	d2de      	bcs.n	8006d5e <quorem+0x42>
 8006da0:	9b00      	ldr	r3, [sp, #0]
 8006da2:	58eb      	ldr	r3, [r5, r3]
 8006da4:	b92b      	cbnz	r3, 8006db2 <quorem+0x96>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	3b04      	subs	r3, #4
 8006daa:	429d      	cmp	r5, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	d32f      	bcc.n	8006e10 <quorem+0xf4>
 8006db0:	613c      	str	r4, [r7, #16]
 8006db2:	4638      	mov	r0, r7
 8006db4:	f001 f9c8 	bl	8008148 <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	db25      	blt.n	8006e08 <quorem+0xec>
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dc4:	f8d1 c000 	ldr.w	ip, [r1]
 8006dc8:	fa1f fe82 	uxth.w	lr, r2
 8006dcc:	fa1f f38c 	uxth.w	r3, ip
 8006dd0:	eba3 030e 	sub.w	r3, r3, lr
 8006dd4:	4403      	add	r3, r0
 8006dd6:	0c12      	lsrs	r2, r2, #16
 8006dd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ddc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006de6:	45c1      	cmp	r9, r8
 8006de8:	f841 3b04 	str.w	r3, [r1], #4
 8006dec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006df0:	d2e6      	bcs.n	8006dc0 <quorem+0xa4>
 8006df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dfa:	b922      	cbnz	r2, 8006e06 <quorem+0xea>
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	429d      	cmp	r5, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	d30b      	bcc.n	8006e1c <quorem+0x100>
 8006e04:	613c      	str	r4, [r7, #16]
 8006e06:	3601      	adds	r6, #1
 8006e08:	4630      	mov	r0, r6
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	3b04      	subs	r3, #4
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d1cb      	bne.n	8006db0 <quorem+0x94>
 8006e18:	3c01      	subs	r4, #1
 8006e1a:	e7c6      	b.n	8006daa <quorem+0x8e>
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	3b04      	subs	r3, #4
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d1ef      	bne.n	8006e04 <quorem+0xe8>
 8006e24:	3c01      	subs	r4, #1
 8006e26:	e7ea      	b.n	8006dfe <quorem+0xe2>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e7ee      	b.n	8006e0a <quorem+0xee>
 8006e2c:	0000      	movs	r0, r0
	...

08006e30 <_dtoa_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	69c7      	ldr	r7, [r0, #28]
 8006e36:	b097      	sub	sp, #92	@ 0x5c
 8006e38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e3c:	ec55 4b10 	vmov	r4, r5, d0
 8006e40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006e42:	9107      	str	r1, [sp, #28]
 8006e44:	4681      	mov	r9, r0
 8006e46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e4a:	b97f      	cbnz	r7, 8006e6c <_dtoa_r+0x3c>
 8006e4c:	2010      	movs	r0, #16
 8006e4e:	f000 fe09 	bl	8007a64 <malloc>
 8006e52:	4602      	mov	r2, r0
 8006e54:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e58:	b920      	cbnz	r0, 8006e64 <_dtoa_r+0x34>
 8006e5a:	4ba9      	ldr	r3, [pc, #676]	@ (8007100 <_dtoa_r+0x2d0>)
 8006e5c:	21ef      	movs	r1, #239	@ 0xef
 8006e5e:	48a9      	ldr	r0, [pc, #676]	@ (8007104 <_dtoa_r+0x2d4>)
 8006e60:	f002 fc3a 	bl	80096d8 <__assert_func>
 8006e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e68:	6007      	str	r7, [r0, #0]
 8006e6a:	60c7      	str	r7, [r0, #12]
 8006e6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e70:	6819      	ldr	r1, [r3, #0]
 8006e72:	b159      	cbz	r1, 8006e8c <_dtoa_r+0x5c>
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	604a      	str	r2, [r1, #4]
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4093      	lsls	r3, r2
 8006e7c:	608b      	str	r3, [r1, #8]
 8006e7e:	4648      	mov	r0, r9
 8006e80:	f000 fee6 	bl	8007c50 <_Bfree>
 8006e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	1e2b      	subs	r3, r5, #0
 8006e8e:	bfb9      	ittee	lt
 8006e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e94:	9305      	strlt	r3, [sp, #20]
 8006e96:	2300      	movge	r3, #0
 8006e98:	6033      	strge	r3, [r6, #0]
 8006e9a:	9f05      	ldr	r7, [sp, #20]
 8006e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8007108 <_dtoa_r+0x2d8>)
 8006e9e:	bfbc      	itt	lt
 8006ea0:	2201      	movlt	r2, #1
 8006ea2:	6032      	strlt	r2, [r6, #0]
 8006ea4:	43bb      	bics	r3, r7
 8006ea6:	d112      	bne.n	8006ece <_dtoa_r+0x9e>
 8006ea8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eb4:	4323      	orrs	r3, r4
 8006eb6:	f000 855a 	beq.w	800796e <_dtoa_r+0xb3e>
 8006eba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ebc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800711c <_dtoa_r+0x2ec>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 855c 	beq.w	800797e <_dtoa_r+0xb4e>
 8006ec6:	f10a 0303 	add.w	r3, sl, #3
 8006eca:	f000 bd56 	b.w	800797a <_dtoa_r+0xb4a>
 8006ece:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	ec51 0b17 	vmov	r0, r1, d7
 8006ed8:	2300      	movs	r3, #0
 8006eda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ede:	f7f9 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	b158      	cbz	r0, 8006efe <_dtoa_r+0xce>
 8006ee6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ee8:	2301      	movs	r3, #1
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eee:	b113      	cbz	r3, 8006ef6 <_dtoa_r+0xc6>
 8006ef0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ef2:	4b86      	ldr	r3, [pc, #536]	@ (800710c <_dtoa_r+0x2dc>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007120 <_dtoa_r+0x2f0>
 8006efa:	f000 bd40 	b.w	800797e <_dtoa_r+0xb4e>
 8006efe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f02:	aa14      	add	r2, sp, #80	@ 0x50
 8006f04:	a915      	add	r1, sp, #84	@ 0x54
 8006f06:	4648      	mov	r0, r9
 8006f08:	f001 fa3e 	bl	8008388 <__d2b>
 8006f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f10:	9002      	str	r0, [sp, #8]
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	d078      	beq.n	8007008 <_dtoa_r+0x1d8>
 8006f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f30:	4619      	mov	r1, r3
 8006f32:	2200      	movs	r2, #0
 8006f34:	4b76      	ldr	r3, [pc, #472]	@ (8007110 <_dtoa_r+0x2e0>)
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	a36b      	add	r3, pc, #428	@ (adr r3, 80070e8 <_dtoa_r+0x2b8>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f7f9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8006f44:	a36a      	add	r3, pc, #424	@ (adr r3, 80070f0 <_dtoa_r+0x2c0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f99f 	bl	800028c <__adddf3>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4630      	mov	r0, r6
 8006f52:	460d      	mov	r5, r1
 8006f54:	f7f9 fae6 	bl	8000524 <__aeabi_i2d>
 8006f58:	a367      	add	r3, pc, #412	@ (adr r3, 80070f8 <_dtoa_r+0x2c8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fb4b 	bl	80005f8 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 f98f 	bl	800028c <__adddf3>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	460d      	mov	r5, r1
 8006f72:	f7f9 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8006f76:	2200      	movs	r2, #0
 8006f78:	4607      	mov	r7, r0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 fdac 	bl	8000adc <__aeabi_dcmplt>
 8006f84:	b140      	cbz	r0, 8006f98 <_dtoa_r+0x168>
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7f9 facc 	bl	8000524 <__aeabi_i2d>
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	462b      	mov	r3, r5
 8006f90:	f7f9 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f94:	b900      	cbnz	r0, 8006f98 <_dtoa_r+0x168>
 8006f96:	3f01      	subs	r7, #1
 8006f98:	2f16      	cmp	r7, #22
 8006f9a:	d852      	bhi.n	8007042 <_dtoa_r+0x212>
 8006f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8007114 <_dtoa_r+0x2e4>)
 8006f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006faa:	f7f9 fd97 	bl	8000adc <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d049      	beq.n	8007046 <_dtoa_r+0x216>
 8006fb2:	3f01      	subs	r7, #1
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fba:	1b9b      	subs	r3, r3, r6
 8006fbc:	1e5a      	subs	r2, r3, #1
 8006fbe:	bf45      	ittet	mi
 8006fc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fc4:	9300      	strmi	r3, [sp, #0]
 8006fc6:	2300      	movpl	r3, #0
 8006fc8:	2300      	movmi	r3, #0
 8006fca:	9206      	str	r2, [sp, #24]
 8006fcc:	bf54      	ite	pl
 8006fce:	9300      	strpl	r3, [sp, #0]
 8006fd0:	9306      	strmi	r3, [sp, #24]
 8006fd2:	2f00      	cmp	r7, #0
 8006fd4:	db39      	blt.n	800704a <_dtoa_r+0x21a>
 8006fd6:	9b06      	ldr	r3, [sp, #24]
 8006fd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006fda:	443b      	add	r3, r7
 8006fdc:	9306      	str	r3, [sp, #24]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9308      	str	r3, [sp, #32]
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	2b09      	cmp	r3, #9
 8006fe6:	d863      	bhi.n	80070b0 <_dtoa_r+0x280>
 8006fe8:	2b05      	cmp	r3, #5
 8006fea:	bfc4      	itt	gt
 8006fec:	3b04      	subgt	r3, #4
 8006fee:	9307      	strgt	r3, [sp, #28]
 8006ff0:	9b07      	ldr	r3, [sp, #28]
 8006ff2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ff6:	bfcc      	ite	gt
 8006ff8:	2400      	movgt	r4, #0
 8006ffa:	2401      	movle	r4, #1
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d863      	bhi.n	80070c8 <_dtoa_r+0x298>
 8007000:	e8df f003 	tbb	[pc, r3]
 8007004:	2b375452 	.word	0x2b375452
 8007008:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800700c:	441e      	add	r6, r3
 800700e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007012:	2b20      	cmp	r3, #32
 8007014:	bfc1      	itttt	gt
 8007016:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800701a:	409f      	lslgt	r7, r3
 800701c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007020:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007024:	bfd6      	itet	le
 8007026:	f1c3 0320 	rsble	r3, r3, #32
 800702a:	ea47 0003 	orrgt.w	r0, r7, r3
 800702e:	fa04 f003 	lslle.w	r0, r4, r3
 8007032:	f7f9 fa67 	bl	8000504 <__aeabi_ui2d>
 8007036:	2201      	movs	r2, #1
 8007038:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800703c:	3e01      	subs	r6, #1
 800703e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007040:	e776      	b.n	8006f30 <_dtoa_r+0x100>
 8007042:	2301      	movs	r3, #1
 8007044:	e7b7      	b.n	8006fb6 <_dtoa_r+0x186>
 8007046:	9010      	str	r0, [sp, #64]	@ 0x40
 8007048:	e7b6      	b.n	8006fb8 <_dtoa_r+0x188>
 800704a:	9b00      	ldr	r3, [sp, #0]
 800704c:	1bdb      	subs	r3, r3, r7
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	427b      	negs	r3, r7
 8007052:	9308      	str	r3, [sp, #32]
 8007054:	2300      	movs	r3, #0
 8007056:	930d      	str	r3, [sp, #52]	@ 0x34
 8007058:	e7c3      	b.n	8006fe2 <_dtoa_r+0x1b2>
 800705a:	2301      	movs	r3, #1
 800705c:	9309      	str	r3, [sp, #36]	@ 0x24
 800705e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007060:	eb07 0b03 	add.w	fp, r7, r3
 8007064:	f10b 0301 	add.w	r3, fp, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	bfb8      	it	lt
 800706e:	2301      	movlt	r3, #1
 8007070:	e006      	b.n	8007080 <_dtoa_r+0x250>
 8007072:	2301      	movs	r3, #1
 8007074:	9309      	str	r3, [sp, #36]	@ 0x24
 8007076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd28      	ble.n	80070ce <_dtoa_r+0x29e>
 800707c:	469b      	mov	fp, r3
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007084:	2100      	movs	r1, #0
 8007086:	2204      	movs	r2, #4
 8007088:	f102 0514 	add.w	r5, r2, #20
 800708c:	429d      	cmp	r5, r3
 800708e:	d926      	bls.n	80070de <_dtoa_r+0x2ae>
 8007090:	6041      	str	r1, [r0, #4]
 8007092:	4648      	mov	r0, r9
 8007094:	f000 fd9c 	bl	8007bd0 <_Balloc>
 8007098:	4682      	mov	sl, r0
 800709a:	2800      	cmp	r0, #0
 800709c:	d142      	bne.n	8007124 <_dtoa_r+0x2f4>
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <_dtoa_r+0x2e8>)
 80070a0:	4602      	mov	r2, r0
 80070a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80070a6:	e6da      	b.n	8006e5e <_dtoa_r+0x2e>
 80070a8:	2300      	movs	r3, #0
 80070aa:	e7e3      	b.n	8007074 <_dtoa_r+0x244>
 80070ac:	2300      	movs	r3, #0
 80070ae:	e7d5      	b.n	800705c <_dtoa_r+0x22c>
 80070b0:	2401      	movs	r4, #1
 80070b2:	2300      	movs	r3, #0
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80070b8:	f04f 3bff 	mov.w	fp, #4294967295
 80070bc:	2200      	movs	r2, #0
 80070be:	f8cd b00c 	str.w	fp, [sp, #12]
 80070c2:	2312      	movs	r3, #18
 80070c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80070c6:	e7db      	b.n	8007080 <_dtoa_r+0x250>
 80070c8:	2301      	movs	r3, #1
 80070ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80070cc:	e7f4      	b.n	80070b8 <_dtoa_r+0x288>
 80070ce:	f04f 0b01 	mov.w	fp, #1
 80070d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80070d6:	465b      	mov	r3, fp
 80070d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80070dc:	e7d0      	b.n	8007080 <_dtoa_r+0x250>
 80070de:	3101      	adds	r1, #1
 80070e0:	0052      	lsls	r2, r2, #1
 80070e2:	e7d1      	b.n	8007088 <_dtoa_r+0x258>
 80070e4:	f3af 8000 	nop.w
 80070e8:	636f4361 	.word	0x636f4361
 80070ec:	3fd287a7 	.word	0x3fd287a7
 80070f0:	8b60c8b3 	.word	0x8b60c8b3
 80070f4:	3fc68a28 	.word	0x3fc68a28
 80070f8:	509f79fb 	.word	0x509f79fb
 80070fc:	3fd34413 	.word	0x3fd34413
 8007100:	0800a46e 	.word	0x0800a46e
 8007104:	0800a485 	.word	0x0800a485
 8007108:	7ff00000 	.word	0x7ff00000
 800710c:	0800a439 	.word	0x0800a439
 8007110:	3ff80000 	.word	0x3ff80000
 8007114:	0800a638 	.word	0x0800a638
 8007118:	0800a4dd 	.word	0x0800a4dd
 800711c:	0800a46a 	.word	0x0800a46a
 8007120:	0800a438 	.word	0x0800a438
 8007124:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007128:	6018      	str	r0, [r3, #0]
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	2b0e      	cmp	r3, #14
 800712e:	f200 80a1 	bhi.w	8007274 <_dtoa_r+0x444>
 8007132:	2c00      	cmp	r4, #0
 8007134:	f000 809e 	beq.w	8007274 <_dtoa_r+0x444>
 8007138:	2f00      	cmp	r7, #0
 800713a:	dd33      	ble.n	80071a4 <_dtoa_r+0x374>
 800713c:	4b9c      	ldr	r3, [pc, #624]	@ (80073b0 <_dtoa_r+0x580>)
 800713e:	f007 020f 	and.w	r2, r7, #15
 8007142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007146:	ed93 7b00 	vldr	d7, [r3]
 800714a:	05f8      	lsls	r0, r7, #23
 800714c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007150:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007154:	d516      	bpl.n	8007184 <_dtoa_r+0x354>
 8007156:	4b97      	ldr	r3, [pc, #604]	@ (80073b4 <_dtoa_r+0x584>)
 8007158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800715c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007160:	f7f9 fb74 	bl	800084c <__aeabi_ddiv>
 8007164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007168:	f004 040f 	and.w	r4, r4, #15
 800716c:	2603      	movs	r6, #3
 800716e:	4d91      	ldr	r5, [pc, #580]	@ (80073b4 <_dtoa_r+0x584>)
 8007170:	b954      	cbnz	r4, 8007188 <_dtoa_r+0x358>
 8007172:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800717a:	f7f9 fb67 	bl	800084c <__aeabi_ddiv>
 800717e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007182:	e028      	b.n	80071d6 <_dtoa_r+0x3a6>
 8007184:	2602      	movs	r6, #2
 8007186:	e7f2      	b.n	800716e <_dtoa_r+0x33e>
 8007188:	07e1      	lsls	r1, r4, #31
 800718a:	d508      	bpl.n	800719e <_dtoa_r+0x36e>
 800718c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007194:	f7f9 fa30 	bl	80005f8 <__aeabi_dmul>
 8007198:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800719c:	3601      	adds	r6, #1
 800719e:	1064      	asrs	r4, r4, #1
 80071a0:	3508      	adds	r5, #8
 80071a2:	e7e5      	b.n	8007170 <_dtoa_r+0x340>
 80071a4:	f000 80af 	beq.w	8007306 <_dtoa_r+0x4d6>
 80071a8:	427c      	negs	r4, r7
 80071aa:	4b81      	ldr	r3, [pc, #516]	@ (80073b0 <_dtoa_r+0x580>)
 80071ac:	4d81      	ldr	r5, [pc, #516]	@ (80073b4 <_dtoa_r+0x584>)
 80071ae:	f004 020f 	and.w	r2, r4, #15
 80071b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071be:	f7f9 fa1b 	bl	80005f8 <__aeabi_dmul>
 80071c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071c6:	1124      	asrs	r4, r4, #4
 80071c8:	2300      	movs	r3, #0
 80071ca:	2602      	movs	r6, #2
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	f040 808f 	bne.w	80072f0 <_dtoa_r+0x4c0>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1d3      	bne.n	800717e <_dtoa_r+0x34e>
 80071d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8094 	beq.w	800730a <_dtoa_r+0x4da>
 80071e2:	4b75      	ldr	r3, [pc, #468]	@ (80073b8 <_dtoa_r+0x588>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 fc77 	bl	8000adc <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f000 808b 	beq.w	800730a <_dtoa_r+0x4da>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8087 	beq.w	800730a <_dtoa_r+0x4da>
 80071fc:	f1bb 0f00 	cmp.w	fp, #0
 8007200:	dd34      	ble.n	800726c <_dtoa_r+0x43c>
 8007202:	4620      	mov	r0, r4
 8007204:	4b6d      	ldr	r3, [pc, #436]	@ (80073bc <_dtoa_r+0x58c>)
 8007206:	2200      	movs	r2, #0
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 f9f5 	bl	80005f8 <__aeabi_dmul>
 800720e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007212:	f107 38ff 	add.w	r8, r7, #4294967295
 8007216:	3601      	adds	r6, #1
 8007218:	465c      	mov	r4, fp
 800721a:	4630      	mov	r0, r6
 800721c:	f7f9 f982 	bl	8000524 <__aeabi_i2d>
 8007220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007224:	f7f9 f9e8 	bl	80005f8 <__aeabi_dmul>
 8007228:	4b65      	ldr	r3, [pc, #404]	@ (80073c0 <_dtoa_r+0x590>)
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 f82e 	bl	800028c <__adddf3>
 8007230:	4605      	mov	r5, r0
 8007232:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007236:	2c00      	cmp	r4, #0
 8007238:	d16a      	bne.n	8007310 <_dtoa_r+0x4e0>
 800723a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723e:	4b61      	ldr	r3, [pc, #388]	@ (80073c4 <_dtoa_r+0x594>)
 8007240:	2200      	movs	r2, #0
 8007242:	f7f9 f821 	bl	8000288 <__aeabi_dsub>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800724e:	462a      	mov	r2, r5
 8007250:	4633      	mov	r3, r6
 8007252:	f7f9 fc61 	bl	8000b18 <__aeabi_dcmpgt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f040 8298 	bne.w	800778c <_dtoa_r+0x95c>
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	462a      	mov	r2, r5
 8007262:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007266:	f7f9 fc39 	bl	8000adc <__aeabi_dcmplt>
 800726a:	bb38      	cbnz	r0, 80072bc <_dtoa_r+0x48c>
 800726c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007270:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007274:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007276:	2b00      	cmp	r3, #0
 8007278:	f2c0 8157 	blt.w	800752a <_dtoa_r+0x6fa>
 800727c:	2f0e      	cmp	r7, #14
 800727e:	f300 8154 	bgt.w	800752a <_dtoa_r+0x6fa>
 8007282:	4b4b      	ldr	r3, [pc, #300]	@ (80073b0 <_dtoa_r+0x580>)
 8007284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007288:	ed93 7b00 	vldr	d7, [r3]
 800728c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800728e:	2b00      	cmp	r3, #0
 8007290:	ed8d 7b00 	vstr	d7, [sp]
 8007294:	f280 80e5 	bge.w	8007462 <_dtoa_r+0x632>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f300 80e1 	bgt.w	8007462 <_dtoa_r+0x632>
 80072a0:	d10c      	bne.n	80072bc <_dtoa_r+0x48c>
 80072a2:	4b48      	ldr	r3, [pc, #288]	@ (80073c4 <_dtoa_r+0x594>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	ec51 0b17 	vmov	r0, r1, d7
 80072aa:	f7f9 f9a5 	bl	80005f8 <__aeabi_dmul>
 80072ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b2:	f7f9 fc27 	bl	8000b04 <__aeabi_dcmpge>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f000 8266 	beq.w	8007788 <_dtoa_r+0x958>
 80072bc:	2400      	movs	r4, #0
 80072be:	4625      	mov	r5, r4
 80072c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072c2:	4656      	mov	r6, sl
 80072c4:	ea6f 0803 	mvn.w	r8, r3
 80072c8:	2700      	movs	r7, #0
 80072ca:	4621      	mov	r1, r4
 80072cc:	4648      	mov	r0, r9
 80072ce:	f000 fcbf 	bl	8007c50 <_Bfree>
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	f000 80bd 	beq.w	8007452 <_dtoa_r+0x622>
 80072d8:	b12f      	cbz	r7, 80072e6 <_dtoa_r+0x4b6>
 80072da:	42af      	cmp	r7, r5
 80072dc:	d003      	beq.n	80072e6 <_dtoa_r+0x4b6>
 80072de:	4639      	mov	r1, r7
 80072e0:	4648      	mov	r0, r9
 80072e2:	f000 fcb5 	bl	8007c50 <_Bfree>
 80072e6:	4629      	mov	r1, r5
 80072e8:	4648      	mov	r0, r9
 80072ea:	f000 fcb1 	bl	8007c50 <_Bfree>
 80072ee:	e0b0      	b.n	8007452 <_dtoa_r+0x622>
 80072f0:	07e2      	lsls	r2, r4, #31
 80072f2:	d505      	bpl.n	8007300 <_dtoa_r+0x4d0>
 80072f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	3601      	adds	r6, #1
 80072fe:	2301      	movs	r3, #1
 8007300:	1064      	asrs	r4, r4, #1
 8007302:	3508      	adds	r5, #8
 8007304:	e762      	b.n	80071cc <_dtoa_r+0x39c>
 8007306:	2602      	movs	r6, #2
 8007308:	e765      	b.n	80071d6 <_dtoa_r+0x3a6>
 800730a:	9c03      	ldr	r4, [sp, #12]
 800730c:	46b8      	mov	r8, r7
 800730e:	e784      	b.n	800721a <_dtoa_r+0x3ea>
 8007310:	4b27      	ldr	r3, [pc, #156]	@ (80073b0 <_dtoa_r+0x580>)
 8007312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007314:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800731c:	4454      	add	r4, sl
 800731e:	2900      	cmp	r1, #0
 8007320:	d054      	beq.n	80073cc <_dtoa_r+0x59c>
 8007322:	4929      	ldr	r1, [pc, #164]	@ (80073c8 <_dtoa_r+0x598>)
 8007324:	2000      	movs	r0, #0
 8007326:	f7f9 fa91 	bl	800084c <__aeabi_ddiv>
 800732a:	4633      	mov	r3, r6
 800732c:	462a      	mov	r2, r5
 800732e:	f7f8 ffab 	bl	8000288 <__aeabi_dsub>
 8007332:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007336:	4656      	mov	r6, sl
 8007338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800733c:	f7f9 fc0c 	bl	8000b58 <__aeabi_d2iz>
 8007340:	4605      	mov	r5, r0
 8007342:	f7f9 f8ef 	bl	8000524 <__aeabi_i2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800734e:	f7f8 ff9b 	bl	8000288 <__aeabi_dsub>
 8007352:	3530      	adds	r5, #48	@ 0x30
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800735c:	f806 5b01 	strb.w	r5, [r6], #1
 8007360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007364:	f7f9 fbba 	bl	8000adc <__aeabi_dcmplt>
 8007368:	2800      	cmp	r0, #0
 800736a:	d172      	bne.n	8007452 <_dtoa_r+0x622>
 800736c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007370:	4911      	ldr	r1, [pc, #68]	@ (80073b8 <_dtoa_r+0x588>)
 8007372:	2000      	movs	r0, #0
 8007374:	f7f8 ff88 	bl	8000288 <__aeabi_dsub>
 8007378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	f040 80b4 	bne.w	80074ee <_dtoa_r+0x6be>
 8007386:	42a6      	cmp	r6, r4
 8007388:	f43f af70 	beq.w	800726c <_dtoa_r+0x43c>
 800738c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007390:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <_dtoa_r+0x58c>)
 8007392:	2200      	movs	r2, #0
 8007394:	f7f9 f930 	bl	80005f8 <__aeabi_dmul>
 8007398:	4b08      	ldr	r3, [pc, #32]	@ (80073bc <_dtoa_r+0x58c>)
 800739a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800739e:	2200      	movs	r2, #0
 80073a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a4:	f7f9 f928 	bl	80005f8 <__aeabi_dmul>
 80073a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073ac:	e7c4      	b.n	8007338 <_dtoa_r+0x508>
 80073ae:	bf00      	nop
 80073b0:	0800a638 	.word	0x0800a638
 80073b4:	0800a610 	.word	0x0800a610
 80073b8:	3ff00000 	.word	0x3ff00000
 80073bc:	40240000 	.word	0x40240000
 80073c0:	401c0000 	.word	0x401c0000
 80073c4:	40140000 	.word	0x40140000
 80073c8:	3fe00000 	.word	0x3fe00000
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073da:	4656      	mov	r6, sl
 80073dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e0:	f7f9 fbba 	bl	8000b58 <__aeabi_d2iz>
 80073e4:	4605      	mov	r5, r0
 80073e6:	f7f9 f89d 	bl	8000524 <__aeabi_i2d>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f2:	f7f8 ff49 	bl	8000288 <__aeabi_dsub>
 80073f6:	3530      	adds	r5, #48	@ 0x30
 80073f8:	f806 5b01 	strb.w	r5, [r6], #1
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	42a6      	cmp	r6, r4
 8007402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	d124      	bne.n	8007456 <_dtoa_r+0x626>
 800740c:	4baf      	ldr	r3, [pc, #700]	@ (80076cc <_dtoa_r+0x89c>)
 800740e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007412:	f7f8 ff3b 	bl	800028c <__adddf3>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800741e:	f7f9 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 8007422:	2800      	cmp	r0, #0
 8007424:	d163      	bne.n	80074ee <_dtoa_r+0x6be>
 8007426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800742a:	49a8      	ldr	r1, [pc, #672]	@ (80076cc <_dtoa_r+0x89c>)
 800742c:	2000      	movs	r0, #0
 800742e:	f7f8 ff2b 	bl	8000288 <__aeabi_dsub>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743a:	f7f9 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f af14 	beq.w	800726c <_dtoa_r+0x43c>
 8007444:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007446:	1e73      	subs	r3, r6, #1
 8007448:	9313      	str	r3, [sp, #76]	@ 0x4c
 800744a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800744e:	2b30      	cmp	r3, #48	@ 0x30
 8007450:	d0f8      	beq.n	8007444 <_dtoa_r+0x614>
 8007452:	4647      	mov	r7, r8
 8007454:	e03b      	b.n	80074ce <_dtoa_r+0x69e>
 8007456:	4b9e      	ldr	r3, [pc, #632]	@ (80076d0 <_dtoa_r+0x8a0>)
 8007458:	f7f9 f8ce 	bl	80005f8 <__aeabi_dmul>
 800745c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007460:	e7bc      	b.n	80073dc <_dtoa_r+0x5ac>
 8007462:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007466:	4656      	mov	r6, sl
 8007468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800746c:	4620      	mov	r0, r4
 800746e:	4629      	mov	r1, r5
 8007470:	f7f9 f9ec 	bl	800084c <__aeabi_ddiv>
 8007474:	f7f9 fb70 	bl	8000b58 <__aeabi_d2iz>
 8007478:	4680      	mov	r8, r0
 800747a:	f7f9 f853 	bl	8000524 <__aeabi_i2d>
 800747e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007482:	f7f9 f8b9 	bl	80005f8 <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007492:	f7f8 fef9 	bl	8000288 <__aeabi_dsub>
 8007496:	f806 4b01 	strb.w	r4, [r6], #1
 800749a:	9d03      	ldr	r5, [sp, #12]
 800749c:	eba6 040a 	sub.w	r4, r6, sl
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	d133      	bne.n	8007510 <_dtoa_r+0x6e0>
 80074a8:	f7f8 fef0 	bl	800028c <__adddf3>
 80074ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b0:	4604      	mov	r4, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	f7f9 fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80074b8:	b9c0      	cbnz	r0, 80074ec <_dtoa_r+0x6bc>
 80074ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074be:	4620      	mov	r0, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	f7f9 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c6:	b110      	cbz	r0, 80074ce <_dtoa_r+0x69e>
 80074c8:	f018 0f01 	tst.w	r8, #1
 80074cc:	d10e      	bne.n	80074ec <_dtoa_r+0x6bc>
 80074ce:	9902      	ldr	r1, [sp, #8]
 80074d0:	4648      	mov	r0, r9
 80074d2:	f000 fbbd 	bl	8007c50 <_Bfree>
 80074d6:	2300      	movs	r3, #0
 80074d8:	7033      	strb	r3, [r6, #0]
 80074da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074dc:	3701      	adds	r7, #1
 80074de:	601f      	str	r7, [r3, #0]
 80074e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 824b 	beq.w	800797e <_dtoa_r+0xb4e>
 80074e8:	601e      	str	r6, [r3, #0]
 80074ea:	e248      	b.n	800797e <_dtoa_r+0xb4e>
 80074ec:	46b8      	mov	r8, r7
 80074ee:	4633      	mov	r3, r6
 80074f0:	461e      	mov	r6, r3
 80074f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074f6:	2a39      	cmp	r2, #57	@ 0x39
 80074f8:	d106      	bne.n	8007508 <_dtoa_r+0x6d8>
 80074fa:	459a      	cmp	sl, r3
 80074fc:	d1f8      	bne.n	80074f0 <_dtoa_r+0x6c0>
 80074fe:	2230      	movs	r2, #48	@ 0x30
 8007500:	f108 0801 	add.w	r8, r8, #1
 8007504:	f88a 2000 	strb.w	r2, [sl]
 8007508:	781a      	ldrb	r2, [r3, #0]
 800750a:	3201      	adds	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e7a0      	b.n	8007452 <_dtoa_r+0x622>
 8007510:	4b6f      	ldr	r3, [pc, #444]	@ (80076d0 <_dtoa_r+0x8a0>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f9 f870 	bl	80005f8 <__aeabi_dmul>
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	f7f9 fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007524:	2800      	cmp	r0, #0
 8007526:	d09f      	beq.n	8007468 <_dtoa_r+0x638>
 8007528:	e7d1      	b.n	80074ce <_dtoa_r+0x69e>
 800752a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800752c:	2a00      	cmp	r2, #0
 800752e:	f000 80ea 	beq.w	8007706 <_dtoa_r+0x8d6>
 8007532:	9a07      	ldr	r2, [sp, #28]
 8007534:	2a01      	cmp	r2, #1
 8007536:	f300 80cd 	bgt.w	80076d4 <_dtoa_r+0x8a4>
 800753a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800753c:	2a00      	cmp	r2, #0
 800753e:	f000 80c1 	beq.w	80076c4 <_dtoa_r+0x894>
 8007542:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007546:	9c08      	ldr	r4, [sp, #32]
 8007548:	9e00      	ldr	r6, [sp, #0]
 800754a:	9a00      	ldr	r2, [sp, #0]
 800754c:	441a      	add	r2, r3
 800754e:	9200      	str	r2, [sp, #0]
 8007550:	9a06      	ldr	r2, [sp, #24]
 8007552:	2101      	movs	r1, #1
 8007554:	441a      	add	r2, r3
 8007556:	4648      	mov	r0, r9
 8007558:	9206      	str	r2, [sp, #24]
 800755a:	f000 fc77 	bl	8007e4c <__i2b>
 800755e:	4605      	mov	r5, r0
 8007560:	b166      	cbz	r6, 800757c <_dtoa_r+0x74c>
 8007562:	9b06      	ldr	r3, [sp, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd09      	ble.n	800757c <_dtoa_r+0x74c>
 8007568:	42b3      	cmp	r3, r6
 800756a:	9a00      	ldr	r2, [sp, #0]
 800756c:	bfa8      	it	ge
 800756e:	4633      	movge	r3, r6
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	9200      	str	r2, [sp, #0]
 8007574:	9a06      	ldr	r2, [sp, #24]
 8007576:	1af6      	subs	r6, r6, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	9306      	str	r3, [sp, #24]
 800757c:	9b08      	ldr	r3, [sp, #32]
 800757e:	b30b      	cbz	r3, 80075c4 <_dtoa_r+0x794>
 8007580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80c6 	beq.w	8007714 <_dtoa_r+0x8e4>
 8007588:	2c00      	cmp	r4, #0
 800758a:	f000 80c0 	beq.w	800770e <_dtoa_r+0x8de>
 800758e:	4629      	mov	r1, r5
 8007590:	4622      	mov	r2, r4
 8007592:	4648      	mov	r0, r9
 8007594:	f000 fd12 	bl	8007fbc <__pow5mult>
 8007598:	9a02      	ldr	r2, [sp, #8]
 800759a:	4601      	mov	r1, r0
 800759c:	4605      	mov	r5, r0
 800759e:	4648      	mov	r0, r9
 80075a0:	f000 fc6a 	bl	8007e78 <__multiply>
 80075a4:	9902      	ldr	r1, [sp, #8]
 80075a6:	4680      	mov	r8, r0
 80075a8:	4648      	mov	r0, r9
 80075aa:	f000 fb51 	bl	8007c50 <_Bfree>
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	1b1b      	subs	r3, r3, r4
 80075b2:	9308      	str	r3, [sp, #32]
 80075b4:	f000 80b1 	beq.w	800771a <_dtoa_r+0x8ea>
 80075b8:	9a08      	ldr	r2, [sp, #32]
 80075ba:	4641      	mov	r1, r8
 80075bc:	4648      	mov	r0, r9
 80075be:	f000 fcfd 	bl	8007fbc <__pow5mult>
 80075c2:	9002      	str	r0, [sp, #8]
 80075c4:	2101      	movs	r1, #1
 80075c6:	4648      	mov	r0, r9
 80075c8:	f000 fc40 	bl	8007e4c <__i2b>
 80075cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075ce:	4604      	mov	r4, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 81d8 	beq.w	8007986 <_dtoa_r+0xb56>
 80075d6:	461a      	mov	r2, r3
 80075d8:	4601      	mov	r1, r0
 80075da:	4648      	mov	r0, r9
 80075dc:	f000 fcee 	bl	8007fbc <__pow5mult>
 80075e0:	9b07      	ldr	r3, [sp, #28]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	4604      	mov	r4, r0
 80075e6:	f300 809f 	bgt.w	8007728 <_dtoa_r+0x8f8>
 80075ea:	9b04      	ldr	r3, [sp, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 8097 	bne.w	8007720 <_dtoa_r+0x8f0>
 80075f2:	9b05      	ldr	r3, [sp, #20]
 80075f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 8093 	bne.w	8007724 <_dtoa_r+0x8f4>
 80075fe:	9b05      	ldr	r3, [sp, #20]
 8007600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007604:	0d1b      	lsrs	r3, r3, #20
 8007606:	051b      	lsls	r3, r3, #20
 8007608:	b133      	cbz	r3, 8007618 <_dtoa_r+0x7e8>
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	9b06      	ldr	r3, [sp, #24]
 8007612:	3301      	adds	r3, #1
 8007614:	9306      	str	r3, [sp, #24]
 8007616:	2301      	movs	r3, #1
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 81b8 	beq.w	8007992 <_dtoa_r+0xb62>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007628:	6918      	ldr	r0, [r3, #16]
 800762a:	f000 fbc3 	bl	8007db4 <__hi0bits>
 800762e:	f1c0 0020 	rsb	r0, r0, #32
 8007632:	9b06      	ldr	r3, [sp, #24]
 8007634:	4418      	add	r0, r3
 8007636:	f010 001f 	ands.w	r0, r0, #31
 800763a:	f000 8082 	beq.w	8007742 <_dtoa_r+0x912>
 800763e:	f1c0 0320 	rsb	r3, r0, #32
 8007642:	2b04      	cmp	r3, #4
 8007644:	dd73      	ble.n	800772e <_dtoa_r+0x8fe>
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	f1c0 001c 	rsb	r0, r0, #28
 800764c:	4403      	add	r3, r0
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	4403      	add	r3, r0
 8007654:	4406      	add	r6, r0
 8007656:	9306      	str	r3, [sp, #24]
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dd05      	ble.n	800766a <_dtoa_r+0x83a>
 800765e:	9902      	ldr	r1, [sp, #8]
 8007660:	461a      	mov	r2, r3
 8007662:	4648      	mov	r0, r9
 8007664:	f000 fd04 	bl	8008070 <__lshift>
 8007668:	9002      	str	r0, [sp, #8]
 800766a:	9b06      	ldr	r3, [sp, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd05      	ble.n	800767c <_dtoa_r+0x84c>
 8007670:	4621      	mov	r1, r4
 8007672:	461a      	mov	r2, r3
 8007674:	4648      	mov	r0, r9
 8007676:	f000 fcfb 	bl	8008070 <__lshift>
 800767a:	4604      	mov	r4, r0
 800767c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d061      	beq.n	8007746 <_dtoa_r+0x916>
 8007682:	9802      	ldr	r0, [sp, #8]
 8007684:	4621      	mov	r1, r4
 8007686:	f000 fd5f 	bl	8008148 <__mcmp>
 800768a:	2800      	cmp	r0, #0
 800768c:	da5b      	bge.n	8007746 <_dtoa_r+0x916>
 800768e:	2300      	movs	r3, #0
 8007690:	9902      	ldr	r1, [sp, #8]
 8007692:	220a      	movs	r2, #10
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fafd 	bl	8007c94 <__multadd>
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	f107 38ff 	add.w	r8, r7, #4294967295
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 8177 	beq.w	8007996 <_dtoa_r+0xb66>
 80076a8:	4629      	mov	r1, r5
 80076aa:	2300      	movs	r3, #0
 80076ac:	220a      	movs	r2, #10
 80076ae:	4648      	mov	r0, r9
 80076b0:	f000 faf0 	bl	8007c94 <__multadd>
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	4605      	mov	r5, r0
 80076ba:	dc6f      	bgt.n	800779c <_dtoa_r+0x96c>
 80076bc:	9b07      	ldr	r3, [sp, #28]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	dc49      	bgt.n	8007756 <_dtoa_r+0x926>
 80076c2:	e06b      	b.n	800779c <_dtoa_r+0x96c>
 80076c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076ca:	e73c      	b.n	8007546 <_dtoa_r+0x716>
 80076cc:	3fe00000 	.word	0x3fe00000
 80076d0:	40240000 	.word	0x40240000
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	1e5c      	subs	r4, r3, #1
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	42a3      	cmp	r3, r4
 80076dc:	db09      	blt.n	80076f2 <_dtoa_r+0x8c2>
 80076de:	1b1c      	subs	r4, r3, r4
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f6bf af30 	bge.w	8007548 <_dtoa_r+0x718>
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	9a03      	ldr	r2, [sp, #12]
 80076ec:	1a9e      	subs	r6, r3, r2
 80076ee:	2300      	movs	r3, #0
 80076f0:	e72b      	b.n	800754a <_dtoa_r+0x71a>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076f6:	9408      	str	r4, [sp, #32]
 80076f8:	1ae3      	subs	r3, r4, r3
 80076fa:	441a      	add	r2, r3
 80076fc:	9e00      	ldr	r6, [sp, #0]
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	920d      	str	r2, [sp, #52]	@ 0x34
 8007702:	2400      	movs	r4, #0
 8007704:	e721      	b.n	800754a <_dtoa_r+0x71a>
 8007706:	9c08      	ldr	r4, [sp, #32]
 8007708:	9e00      	ldr	r6, [sp, #0]
 800770a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800770c:	e728      	b.n	8007560 <_dtoa_r+0x730>
 800770e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007712:	e751      	b.n	80075b8 <_dtoa_r+0x788>
 8007714:	9a08      	ldr	r2, [sp, #32]
 8007716:	9902      	ldr	r1, [sp, #8]
 8007718:	e750      	b.n	80075bc <_dtoa_r+0x78c>
 800771a:	f8cd 8008 	str.w	r8, [sp, #8]
 800771e:	e751      	b.n	80075c4 <_dtoa_r+0x794>
 8007720:	2300      	movs	r3, #0
 8007722:	e779      	b.n	8007618 <_dtoa_r+0x7e8>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	e777      	b.n	8007618 <_dtoa_r+0x7e8>
 8007728:	2300      	movs	r3, #0
 800772a:	9308      	str	r3, [sp, #32]
 800772c:	e779      	b.n	8007622 <_dtoa_r+0x7f2>
 800772e:	d093      	beq.n	8007658 <_dtoa_r+0x828>
 8007730:	9a00      	ldr	r2, [sp, #0]
 8007732:	331c      	adds	r3, #28
 8007734:	441a      	add	r2, r3
 8007736:	9200      	str	r2, [sp, #0]
 8007738:	9a06      	ldr	r2, [sp, #24]
 800773a:	441a      	add	r2, r3
 800773c:	441e      	add	r6, r3
 800773e:	9206      	str	r2, [sp, #24]
 8007740:	e78a      	b.n	8007658 <_dtoa_r+0x828>
 8007742:	4603      	mov	r3, r0
 8007744:	e7f4      	b.n	8007730 <_dtoa_r+0x900>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	46b8      	mov	r8, r7
 800774c:	dc20      	bgt.n	8007790 <_dtoa_r+0x960>
 800774e:	469b      	mov	fp, r3
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	2b02      	cmp	r3, #2
 8007754:	dd1e      	ble.n	8007794 <_dtoa_r+0x964>
 8007756:	f1bb 0f00 	cmp.w	fp, #0
 800775a:	f47f adb1 	bne.w	80072c0 <_dtoa_r+0x490>
 800775e:	4621      	mov	r1, r4
 8007760:	465b      	mov	r3, fp
 8007762:	2205      	movs	r2, #5
 8007764:	4648      	mov	r0, r9
 8007766:	f000 fa95 	bl	8007c94 <__multadd>
 800776a:	4601      	mov	r1, r0
 800776c:	4604      	mov	r4, r0
 800776e:	9802      	ldr	r0, [sp, #8]
 8007770:	f000 fcea 	bl	8008148 <__mcmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	f77f ada3 	ble.w	80072c0 <_dtoa_r+0x490>
 800777a:	4656      	mov	r6, sl
 800777c:	2331      	movs	r3, #49	@ 0x31
 800777e:	f806 3b01 	strb.w	r3, [r6], #1
 8007782:	f108 0801 	add.w	r8, r8, #1
 8007786:	e59f      	b.n	80072c8 <_dtoa_r+0x498>
 8007788:	9c03      	ldr	r4, [sp, #12]
 800778a:	46b8      	mov	r8, r7
 800778c:	4625      	mov	r5, r4
 800778e:	e7f4      	b.n	800777a <_dtoa_r+0x94a>
 8007790:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8101 	beq.w	800799e <_dtoa_r+0xb6e>
 800779c:	2e00      	cmp	r6, #0
 800779e:	dd05      	ble.n	80077ac <_dtoa_r+0x97c>
 80077a0:	4629      	mov	r1, r5
 80077a2:	4632      	mov	r2, r6
 80077a4:	4648      	mov	r0, r9
 80077a6:	f000 fc63 	bl	8008070 <__lshift>
 80077aa:	4605      	mov	r5, r0
 80077ac:	9b08      	ldr	r3, [sp, #32]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d05c      	beq.n	800786c <_dtoa_r+0xa3c>
 80077b2:	6869      	ldr	r1, [r5, #4]
 80077b4:	4648      	mov	r0, r9
 80077b6:	f000 fa0b 	bl	8007bd0 <_Balloc>
 80077ba:	4606      	mov	r6, r0
 80077bc:	b928      	cbnz	r0, 80077ca <_dtoa_r+0x99a>
 80077be:	4b82      	ldr	r3, [pc, #520]	@ (80079c8 <_dtoa_r+0xb98>)
 80077c0:	4602      	mov	r2, r0
 80077c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077c6:	f7ff bb4a 	b.w	8006e5e <_dtoa_r+0x2e>
 80077ca:	692a      	ldr	r2, [r5, #16]
 80077cc:	3202      	adds	r2, #2
 80077ce:	0092      	lsls	r2, r2, #2
 80077d0:	f105 010c 	add.w	r1, r5, #12
 80077d4:	300c      	adds	r0, #12
 80077d6:	f001 ff69 	bl	80096ac <memcpy>
 80077da:	2201      	movs	r2, #1
 80077dc:	4631      	mov	r1, r6
 80077de:	4648      	mov	r0, r9
 80077e0:	f000 fc46 	bl	8008070 <__lshift>
 80077e4:	f10a 0301 	add.w	r3, sl, #1
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	eb0a 030b 	add.w	r3, sl, fp
 80077ee:	9308      	str	r3, [sp, #32]
 80077f0:	9b04      	ldr	r3, [sp, #16]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	462f      	mov	r7, r5
 80077f8:	9306      	str	r3, [sp, #24]
 80077fa:	4605      	mov	r5, r0
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	9802      	ldr	r0, [sp, #8]
 8007800:	4621      	mov	r1, r4
 8007802:	f103 3bff 	add.w	fp, r3, #4294967295
 8007806:	f7ff fa89 	bl	8006d1c <quorem>
 800780a:	4603      	mov	r3, r0
 800780c:	3330      	adds	r3, #48	@ 0x30
 800780e:	9003      	str	r0, [sp, #12]
 8007810:	4639      	mov	r1, r7
 8007812:	9802      	ldr	r0, [sp, #8]
 8007814:	9309      	str	r3, [sp, #36]	@ 0x24
 8007816:	f000 fc97 	bl	8008148 <__mcmp>
 800781a:	462a      	mov	r2, r5
 800781c:	9004      	str	r0, [sp, #16]
 800781e:	4621      	mov	r1, r4
 8007820:	4648      	mov	r0, r9
 8007822:	f000 fcad 	bl	8008180 <__mdiff>
 8007826:	68c2      	ldr	r2, [r0, #12]
 8007828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782a:	4606      	mov	r6, r0
 800782c:	bb02      	cbnz	r2, 8007870 <_dtoa_r+0xa40>
 800782e:	4601      	mov	r1, r0
 8007830:	9802      	ldr	r0, [sp, #8]
 8007832:	f000 fc89 	bl	8008148 <__mcmp>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	4602      	mov	r2, r0
 800783a:	4631      	mov	r1, r6
 800783c:	4648      	mov	r0, r9
 800783e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007840:	9309      	str	r3, [sp, #36]	@ 0x24
 8007842:	f000 fa05 	bl	8007c50 <_Bfree>
 8007846:	9b07      	ldr	r3, [sp, #28]
 8007848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800784a:	9e00      	ldr	r6, [sp, #0]
 800784c:	ea42 0103 	orr.w	r1, r2, r3
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	4319      	orrs	r1, r3
 8007854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007856:	d10d      	bne.n	8007874 <_dtoa_r+0xa44>
 8007858:	2b39      	cmp	r3, #57	@ 0x39
 800785a:	d027      	beq.n	80078ac <_dtoa_r+0xa7c>
 800785c:	9a04      	ldr	r2, [sp, #16]
 800785e:	2a00      	cmp	r2, #0
 8007860:	dd01      	ble.n	8007866 <_dtoa_r+0xa36>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	3331      	adds	r3, #49	@ 0x31
 8007866:	f88b 3000 	strb.w	r3, [fp]
 800786a:	e52e      	b.n	80072ca <_dtoa_r+0x49a>
 800786c:	4628      	mov	r0, r5
 800786e:	e7b9      	b.n	80077e4 <_dtoa_r+0x9b4>
 8007870:	2201      	movs	r2, #1
 8007872:	e7e2      	b.n	800783a <_dtoa_r+0xa0a>
 8007874:	9904      	ldr	r1, [sp, #16]
 8007876:	2900      	cmp	r1, #0
 8007878:	db04      	blt.n	8007884 <_dtoa_r+0xa54>
 800787a:	9807      	ldr	r0, [sp, #28]
 800787c:	4301      	orrs	r1, r0
 800787e:	9806      	ldr	r0, [sp, #24]
 8007880:	4301      	orrs	r1, r0
 8007882:	d120      	bne.n	80078c6 <_dtoa_r+0xa96>
 8007884:	2a00      	cmp	r2, #0
 8007886:	ddee      	ble.n	8007866 <_dtoa_r+0xa36>
 8007888:	9902      	ldr	r1, [sp, #8]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2201      	movs	r2, #1
 800788e:	4648      	mov	r0, r9
 8007890:	f000 fbee 	bl	8008070 <__lshift>
 8007894:	4621      	mov	r1, r4
 8007896:	9002      	str	r0, [sp, #8]
 8007898:	f000 fc56 	bl	8008148 <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	dc02      	bgt.n	80078a8 <_dtoa_r+0xa78>
 80078a2:	d1e0      	bne.n	8007866 <_dtoa_r+0xa36>
 80078a4:	07da      	lsls	r2, r3, #31
 80078a6:	d5de      	bpl.n	8007866 <_dtoa_r+0xa36>
 80078a8:	2b39      	cmp	r3, #57	@ 0x39
 80078aa:	d1da      	bne.n	8007862 <_dtoa_r+0xa32>
 80078ac:	2339      	movs	r3, #57	@ 0x39
 80078ae:	f88b 3000 	strb.w	r3, [fp]
 80078b2:	4633      	mov	r3, r6
 80078b4:	461e      	mov	r6, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078bc:	2a39      	cmp	r2, #57	@ 0x39
 80078be:	d04e      	beq.n	800795e <_dtoa_r+0xb2e>
 80078c0:	3201      	adds	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e501      	b.n	80072ca <_dtoa_r+0x49a>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	dd03      	ble.n	80078d2 <_dtoa_r+0xaa2>
 80078ca:	2b39      	cmp	r3, #57	@ 0x39
 80078cc:	d0ee      	beq.n	80078ac <_dtoa_r+0xa7c>
 80078ce:	3301      	adds	r3, #1
 80078d0:	e7c9      	b.n	8007866 <_dtoa_r+0xa36>
 80078d2:	9a00      	ldr	r2, [sp, #0]
 80078d4:	9908      	ldr	r1, [sp, #32]
 80078d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078da:	428a      	cmp	r2, r1
 80078dc:	d028      	beq.n	8007930 <_dtoa_r+0xb00>
 80078de:	9902      	ldr	r1, [sp, #8]
 80078e0:	2300      	movs	r3, #0
 80078e2:	220a      	movs	r2, #10
 80078e4:	4648      	mov	r0, r9
 80078e6:	f000 f9d5 	bl	8007c94 <__multadd>
 80078ea:	42af      	cmp	r7, r5
 80078ec:	9002      	str	r0, [sp, #8]
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	f04f 020a 	mov.w	r2, #10
 80078f6:	4639      	mov	r1, r7
 80078f8:	4648      	mov	r0, r9
 80078fa:	d107      	bne.n	800790c <_dtoa_r+0xadc>
 80078fc:	f000 f9ca 	bl	8007c94 <__multadd>
 8007900:	4607      	mov	r7, r0
 8007902:	4605      	mov	r5, r0
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	e777      	b.n	80077fc <_dtoa_r+0x9cc>
 800790c:	f000 f9c2 	bl	8007c94 <__multadd>
 8007910:	4629      	mov	r1, r5
 8007912:	4607      	mov	r7, r0
 8007914:	2300      	movs	r3, #0
 8007916:	220a      	movs	r2, #10
 8007918:	4648      	mov	r0, r9
 800791a:	f000 f9bb 	bl	8007c94 <__multadd>
 800791e:	4605      	mov	r5, r0
 8007920:	e7f0      	b.n	8007904 <_dtoa_r+0xad4>
 8007922:	f1bb 0f00 	cmp.w	fp, #0
 8007926:	bfcc      	ite	gt
 8007928:	465e      	movgt	r6, fp
 800792a:	2601      	movle	r6, #1
 800792c:	4456      	add	r6, sl
 800792e:	2700      	movs	r7, #0
 8007930:	9902      	ldr	r1, [sp, #8]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	2201      	movs	r2, #1
 8007936:	4648      	mov	r0, r9
 8007938:	f000 fb9a 	bl	8008070 <__lshift>
 800793c:	4621      	mov	r1, r4
 800793e:	9002      	str	r0, [sp, #8]
 8007940:	f000 fc02 	bl	8008148 <__mcmp>
 8007944:	2800      	cmp	r0, #0
 8007946:	dcb4      	bgt.n	80078b2 <_dtoa_r+0xa82>
 8007948:	d102      	bne.n	8007950 <_dtoa_r+0xb20>
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	07db      	lsls	r3, r3, #31
 800794e:	d4b0      	bmi.n	80078b2 <_dtoa_r+0xa82>
 8007950:	4633      	mov	r3, r6
 8007952:	461e      	mov	r6, r3
 8007954:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007958:	2a30      	cmp	r2, #48	@ 0x30
 800795a:	d0fa      	beq.n	8007952 <_dtoa_r+0xb22>
 800795c:	e4b5      	b.n	80072ca <_dtoa_r+0x49a>
 800795e:	459a      	cmp	sl, r3
 8007960:	d1a8      	bne.n	80078b4 <_dtoa_r+0xa84>
 8007962:	2331      	movs	r3, #49	@ 0x31
 8007964:	f108 0801 	add.w	r8, r8, #1
 8007968:	f88a 3000 	strb.w	r3, [sl]
 800796c:	e4ad      	b.n	80072ca <_dtoa_r+0x49a>
 800796e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007970:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079cc <_dtoa_r+0xb9c>
 8007974:	b11b      	cbz	r3, 800797e <_dtoa_r+0xb4e>
 8007976:	f10a 0308 	add.w	r3, sl, #8
 800797a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4650      	mov	r0, sl
 8007980:	b017      	add	sp, #92	@ 0x5c
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	9b07      	ldr	r3, [sp, #28]
 8007988:	2b01      	cmp	r3, #1
 800798a:	f77f ae2e 	ble.w	80075ea <_dtoa_r+0x7ba>
 800798e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007990:	9308      	str	r3, [sp, #32]
 8007992:	2001      	movs	r0, #1
 8007994:	e64d      	b.n	8007632 <_dtoa_r+0x802>
 8007996:	f1bb 0f00 	cmp.w	fp, #0
 800799a:	f77f aed9 	ble.w	8007750 <_dtoa_r+0x920>
 800799e:	4656      	mov	r6, sl
 80079a0:	9802      	ldr	r0, [sp, #8]
 80079a2:	4621      	mov	r1, r4
 80079a4:	f7ff f9ba 	bl	8006d1c <quorem>
 80079a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079ac:	f806 3b01 	strb.w	r3, [r6], #1
 80079b0:	eba6 020a 	sub.w	r2, r6, sl
 80079b4:	4593      	cmp	fp, r2
 80079b6:	ddb4      	ble.n	8007922 <_dtoa_r+0xaf2>
 80079b8:	9902      	ldr	r1, [sp, #8]
 80079ba:	2300      	movs	r3, #0
 80079bc:	220a      	movs	r2, #10
 80079be:	4648      	mov	r0, r9
 80079c0:	f000 f968 	bl	8007c94 <__multadd>
 80079c4:	9002      	str	r0, [sp, #8]
 80079c6:	e7eb      	b.n	80079a0 <_dtoa_r+0xb70>
 80079c8:	0800a4dd 	.word	0x0800a4dd
 80079cc:	0800a461 	.word	0x0800a461

080079d0 <_free_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4605      	mov	r5, r0
 80079d4:	2900      	cmp	r1, #0
 80079d6:	d041      	beq.n	8007a5c <_free_r+0x8c>
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f0c      	subs	r4, r1, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfb8      	it	lt
 80079e2:	18e4      	addlt	r4, r4, r3
 80079e4:	f000 f8e8 	bl	8007bb8 <__malloc_lock>
 80079e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <_free_r+0x90>)
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	b933      	cbnz	r3, 80079fc <_free_r+0x2c>
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	6014      	str	r4, [r2, #0]
 80079f2:	4628      	mov	r0, r5
 80079f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f8:	f000 b8e4 	b.w	8007bc4 <__malloc_unlock>
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d908      	bls.n	8007a12 <_free_r+0x42>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	1821      	adds	r1, r4, r0
 8007a04:	428b      	cmp	r3, r1
 8007a06:	bf01      	itttt	eq
 8007a08:	6819      	ldreq	r1, [r3, #0]
 8007a0a:	685b      	ldreq	r3, [r3, #4]
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	e7ed      	b.n	80079ee <_free_r+0x1e>
 8007a12:	461a      	mov	r2, r3
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	b10b      	cbz	r3, 8007a1c <_free_r+0x4c>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d9fa      	bls.n	8007a12 <_free_r+0x42>
 8007a1c:	6811      	ldr	r1, [r2, #0]
 8007a1e:	1850      	adds	r0, r2, r1
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d10b      	bne.n	8007a3c <_free_r+0x6c>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	4401      	add	r1, r0
 8007a28:	1850      	adds	r0, r2, r1
 8007a2a:	4283      	cmp	r3, r0
 8007a2c:	6011      	str	r1, [r2, #0]
 8007a2e:	d1e0      	bne.n	80079f2 <_free_r+0x22>
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	6053      	str	r3, [r2, #4]
 8007a36:	4408      	add	r0, r1
 8007a38:	6010      	str	r0, [r2, #0]
 8007a3a:	e7da      	b.n	80079f2 <_free_r+0x22>
 8007a3c:	d902      	bls.n	8007a44 <_free_r+0x74>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	e7d6      	b.n	80079f2 <_free_r+0x22>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	1821      	adds	r1, r4, r0
 8007a48:	428b      	cmp	r3, r1
 8007a4a:	bf04      	itt	eq
 8007a4c:	6819      	ldreq	r1, [r3, #0]
 8007a4e:	685b      	ldreq	r3, [r3, #4]
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	bf04      	itt	eq
 8007a54:	1809      	addeq	r1, r1, r0
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	6054      	str	r4, [r2, #4]
 8007a5a:	e7ca      	b.n	80079f2 <_free_r+0x22>
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000758 	.word	0x20000758

08007a64 <malloc>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <malloc+0xc>)
 8007a66:	4601      	mov	r1, r0
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f000 b825 	b.w	8007ab8 <_malloc_r>
 8007a6e:	bf00      	nop
 8007a70:	20000024 	.word	0x20000024

08007a74 <sbrk_aligned>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab4 <sbrk_aligned+0x40>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6831      	ldr	r1, [r6, #0]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b911      	cbnz	r1, 8007a86 <sbrk_aligned+0x12>
 8007a80:	f001 fe04 	bl	800968c <_sbrk_r>
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f001 fdff 	bl	800968c <_sbrk_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d103      	bne.n	8007a9a <sbrk_aligned+0x26>
 8007a92:	f04f 34ff 	mov.w	r4, #4294967295
 8007a96:	4620      	mov	r0, r4
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d0f8      	beq.n	8007a96 <sbrk_aligned+0x22>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f001 fdf0 	bl	800968c <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1f2      	bne.n	8007a96 <sbrk_aligned+0x22>
 8007ab0:	e7ef      	b.n	8007a92 <sbrk_aligned+0x1e>
 8007ab2:	bf00      	nop
 8007ab4:	20000754 	.word	0x20000754

08007ab8 <_malloc_r>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	1ccd      	adds	r5, r1, #3
 8007abe:	f025 0503 	bic.w	r5, r5, #3
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	2d0c      	cmp	r5, #12
 8007ac6:	bf38      	it	cc
 8007ac8:	250c      	movcc	r5, #12
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	db01      	blt.n	8007ad4 <_malloc_r+0x1c>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	d904      	bls.n	8007ade <_malloc_r+0x26>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb4 <_malloc_r+0xfc>
 8007ae2:	f000 f869 	bl	8007bb8 <__malloc_lock>
 8007ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aea:	461c      	mov	r4, r3
 8007aec:	bb44      	cbnz	r4, 8007b40 <_malloc_r+0x88>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ffbf 	bl	8007a74 <sbrk_aligned>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	4604      	mov	r4, r0
 8007afa:	d158      	bne.n	8007bae <_malloc_r+0xf6>
 8007afc:	f8d8 4000 	ldr.w	r4, [r8]
 8007b00:	4627      	mov	r7, r4
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	d143      	bne.n	8007b8e <_malloc_r+0xd6>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d04b      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	eb04 0903 	add.w	r9, r4, r3
 8007b14:	f001 fdba 	bl	800968c <_sbrk_r>
 8007b18:	4581      	cmp	r9, r0
 8007b1a:	d142      	bne.n	8007ba2 <_malloc_r+0xea>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	1a6d      	subs	r5, r5, r1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ffa6 	bl	8007a74 <sbrk_aligned>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d03a      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	442b      	add	r3, r5
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	f8d8 3000 	ldr.w	r3, [r8]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	bb62      	cbnz	r2, 8007b94 <_malloc_r+0xdc>
 8007b3a:	f8c8 7000 	str.w	r7, [r8]
 8007b3e:	e00f      	b.n	8007b60 <_malloc_r+0xa8>
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	d420      	bmi.n	8007b88 <_malloc_r+0xd0>
 8007b46:	2a0b      	cmp	r2, #11
 8007b48:	d917      	bls.n	8007b7a <_malloc_r+0xc2>
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	6025      	str	r5, [r4, #0]
 8007b50:	bf18      	it	ne
 8007b52:	6059      	strne	r1, [r3, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	bf08      	it	eq
 8007b58:	f8c8 1000 	streq.w	r1, [r8]
 8007b5c:	5162      	str	r2, [r4, r5]
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f82f 	bl	8007bc4 <__malloc_unlock>
 8007b66:	f104 000b 	add.w	r0, r4, #11
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	f020 0007 	bic.w	r0, r0, #7
 8007b70:	1ac2      	subs	r2, r0, r3
 8007b72:	bf1c      	itt	ne
 8007b74:	1a1b      	subne	r3, r3, r0
 8007b76:	50a3      	strne	r3, [r4, r2]
 8007b78:	e7af      	b.n	8007ada <_malloc_r+0x22>
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bf0c      	ite	eq
 8007b80:	f8c8 2000 	streq.w	r2, [r8]
 8007b84:	605a      	strne	r2, [r3, #4]
 8007b86:	e7eb      	b.n	8007b60 <_malloc_r+0xa8>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	6864      	ldr	r4, [r4, #4]
 8007b8c:	e7ae      	b.n	8007aec <_malloc_r+0x34>
 8007b8e:	463c      	mov	r4, r7
 8007b90:	687f      	ldr	r7, [r7, #4]
 8007b92:	e7b6      	b.n	8007b02 <_malloc_r+0x4a>
 8007b94:	461a      	mov	r2, r3
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d1fb      	bne.n	8007b94 <_malloc_r+0xdc>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6053      	str	r3, [r2, #4]
 8007ba0:	e7de      	b.n	8007b60 <_malloc_r+0xa8>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f80c 	bl	8007bc4 <__malloc_unlock>
 8007bac:	e794      	b.n	8007ad8 <_malloc_r+0x20>
 8007bae:	6005      	str	r5, [r0, #0]
 8007bb0:	e7d6      	b.n	8007b60 <_malloc_r+0xa8>
 8007bb2:	bf00      	nop
 8007bb4:	20000758 	.word	0x20000758

08007bb8 <__malloc_lock>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__malloc_lock+0x8>)
 8007bba:	f7ff b8a6 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	20000750 	.word	0x20000750

08007bc4 <__malloc_unlock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__malloc_unlock+0x8>)
 8007bc6:	f7ff b8a1 	b.w	8006d0c <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000750 	.word	0x20000750

08007bd0 <_Balloc>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	69c6      	ldr	r6, [r0, #28]
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	b976      	cbnz	r6, 8007bf8 <_Balloc+0x28>
 8007bda:	2010      	movs	r0, #16
 8007bdc:	f7ff ff42 	bl	8007a64 <malloc>
 8007be0:	4602      	mov	r2, r0
 8007be2:	61e0      	str	r0, [r4, #28]
 8007be4:	b920      	cbnz	r0, 8007bf0 <_Balloc+0x20>
 8007be6:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <_Balloc+0x78>)
 8007be8:	4818      	ldr	r0, [pc, #96]	@ (8007c4c <_Balloc+0x7c>)
 8007bea:	216b      	movs	r1, #107	@ 0x6b
 8007bec:	f001 fd74 	bl	80096d8 <__assert_func>
 8007bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf4:	6006      	str	r6, [r0, #0]
 8007bf6:	60c6      	str	r6, [r0, #12]
 8007bf8:	69e6      	ldr	r6, [r4, #28]
 8007bfa:	68f3      	ldr	r3, [r6, #12]
 8007bfc:	b183      	cbz	r3, 8007c20 <_Balloc+0x50>
 8007bfe:	69e3      	ldr	r3, [r4, #28]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c06:	b9b8      	cbnz	r0, 8007c38 <_Balloc+0x68>
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c0e:	1d72      	adds	r2, r6, #5
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	4620      	mov	r0, r4
 8007c14:	f001 fd7e 	bl	8009714 <_calloc_r>
 8007c18:	b160      	cbz	r0, 8007c34 <_Balloc+0x64>
 8007c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c1e:	e00e      	b.n	8007c3e <_Balloc+0x6e>
 8007c20:	2221      	movs	r2, #33	@ 0x21
 8007c22:	2104      	movs	r1, #4
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fd75 	bl	8009714 <_calloc_r>
 8007c2a:	69e3      	ldr	r3, [r4, #28]
 8007c2c:	60f0      	str	r0, [r6, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e4      	bne.n	8007bfe <_Balloc+0x2e>
 8007c34:	2000      	movs	r0, #0
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	6802      	ldr	r2, [r0, #0]
 8007c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c44:	e7f7      	b.n	8007c36 <_Balloc+0x66>
 8007c46:	bf00      	nop
 8007c48:	0800a46e 	.word	0x0800a46e
 8007c4c:	0800a4ee 	.word	0x0800a4ee

08007c50 <_Bfree>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	69c6      	ldr	r6, [r0, #28]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b976      	cbnz	r6, 8007c78 <_Bfree+0x28>
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	f7ff ff02 	bl	8007a64 <malloc>
 8007c60:	4602      	mov	r2, r0
 8007c62:	61e8      	str	r0, [r5, #28]
 8007c64:	b920      	cbnz	r0, 8007c70 <_Bfree+0x20>
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <_Bfree+0x3c>)
 8007c68:	4809      	ldr	r0, [pc, #36]	@ (8007c90 <_Bfree+0x40>)
 8007c6a:	218f      	movs	r1, #143	@ 0x8f
 8007c6c:	f001 fd34 	bl	80096d8 <__assert_func>
 8007c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c74:	6006      	str	r6, [r0, #0]
 8007c76:	60c6      	str	r6, [r0, #12]
 8007c78:	b13c      	cbz	r4, 8007c8a <_Bfree+0x3a>
 8007c7a:	69eb      	ldr	r3, [r5, #28]
 8007c7c:	6862      	ldr	r2, [r4, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c84:	6021      	str	r1, [r4, #0]
 8007c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	0800a46e 	.word	0x0800a46e
 8007c90:	0800a4ee 	.word	0x0800a4ee

08007c94 <__multadd>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	690d      	ldr	r5, [r1, #16]
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	461e      	mov	r6, r3
 8007ca0:	f101 0c14 	add.w	ip, r1, #20
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8007caa:	b299      	uxth	r1, r3
 8007cac:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb0:	0c1e      	lsrs	r6, r3, #16
 8007cb2:	0c0b      	lsrs	r3, r1, #16
 8007cb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cb8:	b289      	uxth	r1, r1
 8007cba:	3001      	adds	r0, #1
 8007cbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc0:	4285      	cmp	r5, r0
 8007cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cca:	dcec      	bgt.n	8007ca6 <__multadd+0x12>
 8007ccc:	b30e      	cbz	r6, 8007d12 <__multadd+0x7e>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	dc19      	bgt.n	8007d08 <__multadd+0x74>
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	3101      	adds	r1, #1
 8007cda:	f7ff ff79 	bl	8007bd0 <_Balloc>
 8007cde:	4680      	mov	r8, r0
 8007ce0:	b928      	cbnz	r0, 8007cee <__multadd+0x5a>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <__multadd+0x84>)
 8007ce6:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <__multadd+0x88>)
 8007ce8:	21ba      	movs	r1, #186	@ 0xba
 8007cea:	f001 fcf5 	bl	80096d8 <__assert_func>
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	f104 010c 	add.w	r1, r4, #12
 8007cf6:	0092      	lsls	r2, r2, #2
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	f001 fcd7 	bl	80096ac <memcpy>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ffa5 	bl	8007c50 <_Bfree>
 8007d06:	4644      	mov	r4, r8
 8007d08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	615e      	str	r6, [r3, #20]
 8007d10:	6125      	str	r5, [r4, #16]
 8007d12:	4620      	mov	r0, r4
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	0800a4dd 	.word	0x0800a4dd
 8007d1c:	0800a4ee 	.word	0x0800a4ee

08007d20 <__s2b>:
 8007d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d24:	460c      	mov	r4, r1
 8007d26:	4615      	mov	r5, r2
 8007d28:	461f      	mov	r7, r3
 8007d2a:	2209      	movs	r2, #9
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	4606      	mov	r6, r0
 8007d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d34:	2100      	movs	r1, #0
 8007d36:	2201      	movs	r2, #1
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	db09      	blt.n	8007d50 <__s2b+0x30>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff ff47 	bl	8007bd0 <_Balloc>
 8007d42:	b940      	cbnz	r0, 8007d56 <__s2b+0x36>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <__s2b+0x8c>)
 8007d48:	4819      	ldr	r0, [pc, #100]	@ (8007db0 <__s2b+0x90>)
 8007d4a:	21d3      	movs	r1, #211	@ 0xd3
 8007d4c:	f001 fcc4 	bl	80096d8 <__assert_func>
 8007d50:	0052      	lsls	r2, r2, #1
 8007d52:	3101      	adds	r1, #1
 8007d54:	e7f0      	b.n	8007d38 <__s2b+0x18>
 8007d56:	9b08      	ldr	r3, [sp, #32]
 8007d58:	6143      	str	r3, [r0, #20]
 8007d5a:	2d09      	cmp	r5, #9
 8007d5c:	f04f 0301 	mov.w	r3, #1
 8007d60:	6103      	str	r3, [r0, #16]
 8007d62:	dd16      	ble.n	8007d92 <__s2b+0x72>
 8007d64:	f104 0909 	add.w	r9, r4, #9
 8007d68:	46c8      	mov	r8, r9
 8007d6a:	442c      	add	r4, r5
 8007d6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d70:	4601      	mov	r1, r0
 8007d72:	3b30      	subs	r3, #48	@ 0x30
 8007d74:	220a      	movs	r2, #10
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ff8c 	bl	8007c94 <__multadd>
 8007d7c:	45a0      	cmp	r8, r4
 8007d7e:	d1f5      	bne.n	8007d6c <__s2b+0x4c>
 8007d80:	f1a5 0408 	sub.w	r4, r5, #8
 8007d84:	444c      	add	r4, r9
 8007d86:	1b2d      	subs	r5, r5, r4
 8007d88:	1963      	adds	r3, r4, r5
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	db04      	blt.n	8007d98 <__s2b+0x78>
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d92:	340a      	adds	r4, #10
 8007d94:	2509      	movs	r5, #9
 8007d96:	e7f6      	b.n	8007d86 <__s2b+0x66>
 8007d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	3b30      	subs	r3, #48	@ 0x30
 8007da0:	220a      	movs	r2, #10
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ff76 	bl	8007c94 <__multadd>
 8007da8:	e7ee      	b.n	8007d88 <__s2b+0x68>
 8007daa:	bf00      	nop
 8007dac:	0800a4dd 	.word	0x0800a4dd
 8007db0:	0800a4ee 	.word	0x0800a4ee

08007db4 <__hi0bits>:
 8007db4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007db8:	4603      	mov	r3, r0
 8007dba:	bf36      	itet	cc
 8007dbc:	0403      	lslcc	r3, r0, #16
 8007dbe:	2000      	movcs	r0, #0
 8007dc0:	2010      	movcc	r0, #16
 8007dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dc6:	bf3c      	itt	cc
 8007dc8:	021b      	lslcc	r3, r3, #8
 8007dca:	3008      	addcc	r0, #8
 8007dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd0:	bf3c      	itt	cc
 8007dd2:	011b      	lslcc	r3, r3, #4
 8007dd4:	3004      	addcc	r0, #4
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	bf3c      	itt	cc
 8007ddc:	009b      	lslcc	r3, r3, #2
 8007dde:	3002      	addcc	r0, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db05      	blt.n	8007df0 <__hi0bits+0x3c>
 8007de4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007de8:	f100 0001 	add.w	r0, r0, #1
 8007dec:	bf08      	it	eq
 8007dee:	2020      	moveq	r0, #32
 8007df0:	4770      	bx	lr

08007df2 <__lo0bits>:
 8007df2:	6803      	ldr	r3, [r0, #0]
 8007df4:	4602      	mov	r2, r0
 8007df6:	f013 0007 	ands.w	r0, r3, #7
 8007dfa:	d00b      	beq.n	8007e14 <__lo0bits+0x22>
 8007dfc:	07d9      	lsls	r1, r3, #31
 8007dfe:	d421      	bmi.n	8007e44 <__lo0bits+0x52>
 8007e00:	0798      	lsls	r0, r3, #30
 8007e02:	bf49      	itett	mi
 8007e04:	085b      	lsrmi	r3, r3, #1
 8007e06:	089b      	lsrpl	r3, r3, #2
 8007e08:	2001      	movmi	r0, #1
 8007e0a:	6013      	strmi	r3, [r2, #0]
 8007e0c:	bf5c      	itt	pl
 8007e0e:	6013      	strpl	r3, [r2, #0]
 8007e10:	2002      	movpl	r0, #2
 8007e12:	4770      	bx	lr
 8007e14:	b299      	uxth	r1, r3
 8007e16:	b909      	cbnz	r1, 8007e1c <__lo0bits+0x2a>
 8007e18:	0c1b      	lsrs	r3, r3, #16
 8007e1a:	2010      	movs	r0, #16
 8007e1c:	b2d9      	uxtb	r1, r3
 8007e1e:	b909      	cbnz	r1, 8007e24 <__lo0bits+0x32>
 8007e20:	3008      	adds	r0, #8
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	0719      	lsls	r1, r3, #28
 8007e26:	bf04      	itt	eq
 8007e28:	091b      	lsreq	r3, r3, #4
 8007e2a:	3004      	addeq	r0, #4
 8007e2c:	0799      	lsls	r1, r3, #30
 8007e2e:	bf04      	itt	eq
 8007e30:	089b      	lsreq	r3, r3, #2
 8007e32:	3002      	addeq	r0, #2
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d403      	bmi.n	8007e40 <__lo0bits+0x4e>
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	f100 0001 	add.w	r0, r0, #1
 8007e3e:	d003      	beq.n	8007e48 <__lo0bits+0x56>
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4770      	bx	lr
 8007e44:	2000      	movs	r0, #0
 8007e46:	4770      	bx	lr
 8007e48:	2020      	movs	r0, #32
 8007e4a:	4770      	bx	lr

08007e4c <__i2b>:
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2101      	movs	r1, #1
 8007e52:	f7ff febd 	bl	8007bd0 <_Balloc>
 8007e56:	4602      	mov	r2, r0
 8007e58:	b928      	cbnz	r0, 8007e66 <__i2b+0x1a>
 8007e5a:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <__i2b+0x24>)
 8007e5c:	4805      	ldr	r0, [pc, #20]	@ (8007e74 <__i2b+0x28>)
 8007e5e:	f240 1145 	movw	r1, #325	@ 0x145
 8007e62:	f001 fc39 	bl	80096d8 <__assert_func>
 8007e66:	2301      	movs	r3, #1
 8007e68:	6144      	str	r4, [r0, #20]
 8007e6a:	6103      	str	r3, [r0, #16]
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	0800a4dd 	.word	0x0800a4dd
 8007e74:	0800a4ee 	.word	0x0800a4ee

08007e78 <__multiply>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4617      	mov	r7, r2
 8007e7e:	690a      	ldr	r2, [r1, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	bfa8      	it	ge
 8007e86:	463b      	movge	r3, r7
 8007e88:	4689      	mov	r9, r1
 8007e8a:	bfa4      	itt	ge
 8007e8c:	460f      	movge	r7, r1
 8007e8e:	4699      	movge	r9, r3
 8007e90:	693d      	ldr	r5, [r7, #16]
 8007e92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	eb05 060a 	add.w	r6, r5, sl
 8007e9e:	42b3      	cmp	r3, r6
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	bfb8      	it	lt
 8007ea4:	3101      	addlt	r1, #1
 8007ea6:	f7ff fe93 	bl	8007bd0 <_Balloc>
 8007eaa:	b930      	cbnz	r0, 8007eba <__multiply+0x42>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b41      	ldr	r3, [pc, #260]	@ (8007fb4 <__multiply+0x13c>)
 8007eb0:	4841      	ldr	r0, [pc, #260]	@ (8007fb8 <__multiply+0x140>)
 8007eb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eb6:	f001 fc0f 	bl	80096d8 <__assert_func>
 8007eba:	f100 0414 	add.w	r4, r0, #20
 8007ebe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007ec2:	4623      	mov	r3, r4
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4573      	cmp	r3, lr
 8007ec8:	d320      	bcc.n	8007f0c <__multiply+0x94>
 8007eca:	f107 0814 	add.w	r8, r7, #20
 8007ece:	f109 0114 	add.w	r1, r9, #20
 8007ed2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ed6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007eda:	9302      	str	r3, [sp, #8]
 8007edc:	1beb      	subs	r3, r5, r7
 8007ede:	3b15      	subs	r3, #21
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	3715      	adds	r7, #21
 8007ee8:	42bd      	cmp	r5, r7
 8007eea:	bf38      	it	cc
 8007eec:	2304      	movcc	r3, #4
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	9103      	str	r1, [sp, #12]
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	d80c      	bhi.n	8007f12 <__multiply+0x9a>
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	dd03      	ble.n	8007f04 <__multiply+0x8c>
 8007efc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d055      	beq.n	8007fb0 <__multiply+0x138>
 8007f04:	6106      	str	r6, [r0, #16]
 8007f06:	b005      	add	sp, #20
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	f843 2b04 	str.w	r2, [r3], #4
 8007f10:	e7d9      	b.n	8007ec6 <__multiply+0x4e>
 8007f12:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f16:	f1ba 0f00 	cmp.w	sl, #0
 8007f1a:	d01f      	beq.n	8007f5c <__multiply+0xe4>
 8007f1c:	46c4      	mov	ip, r8
 8007f1e:	46a1      	mov	r9, r4
 8007f20:	2700      	movs	r7, #0
 8007f22:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f26:	f8d9 3000 	ldr.w	r3, [r9]
 8007f2a:	fa1f fb82 	uxth.w	fp, r2
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f34:	443b      	add	r3, r7
 8007f36:	f8d9 7000 	ldr.w	r7, [r9]
 8007f3a:	0c12      	lsrs	r2, r2, #16
 8007f3c:	0c3f      	lsrs	r7, r7, #16
 8007f3e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f42:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f4c:	4565      	cmp	r5, ip
 8007f4e:	f849 3b04 	str.w	r3, [r9], #4
 8007f52:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f56:	d8e4      	bhi.n	8007f22 <__multiply+0xaa>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	50e7      	str	r7, [r4, r3]
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f62:	3104      	adds	r1, #4
 8007f64:	f1b9 0f00 	cmp.w	r9, #0
 8007f68:	d020      	beq.n	8007fac <__multiply+0x134>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	4647      	mov	r7, r8
 8007f6e:	46a4      	mov	ip, r4
 8007f70:	f04f 0a00 	mov.w	sl, #0
 8007f74:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f78:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f7c:	fb09 220b 	mla	r2, r9, fp, r2
 8007f80:	4452      	add	r2, sl
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f88:	f84c 3b04 	str.w	r3, [ip], #4
 8007f8c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f94:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f98:	fb09 330a 	mla	r3, r9, sl, r3
 8007f9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007fa0:	42bd      	cmp	r5, r7
 8007fa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fa6:	d8e5      	bhi.n	8007f74 <__multiply+0xfc>
 8007fa8:	9a01      	ldr	r2, [sp, #4]
 8007faa:	50a3      	str	r3, [r4, r2]
 8007fac:	3404      	adds	r4, #4
 8007fae:	e79f      	b.n	8007ef0 <__multiply+0x78>
 8007fb0:	3e01      	subs	r6, #1
 8007fb2:	e7a1      	b.n	8007ef8 <__multiply+0x80>
 8007fb4:	0800a4dd 	.word	0x0800a4dd
 8007fb8:	0800a4ee 	.word	0x0800a4ee

08007fbc <__pow5mult>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4615      	mov	r5, r2
 8007fc2:	f012 0203 	ands.w	r2, r2, #3
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	460e      	mov	r6, r1
 8007fca:	d007      	beq.n	8007fdc <__pow5mult+0x20>
 8007fcc:	4c25      	ldr	r4, [pc, #148]	@ (8008064 <__pow5mult+0xa8>)
 8007fce:	3a01      	subs	r2, #1
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fd6:	f7ff fe5d 	bl	8007c94 <__multadd>
 8007fda:	4606      	mov	r6, r0
 8007fdc:	10ad      	asrs	r5, r5, #2
 8007fde:	d03d      	beq.n	800805c <__pow5mult+0xa0>
 8007fe0:	69fc      	ldr	r4, [r7, #28]
 8007fe2:	b97c      	cbnz	r4, 8008004 <__pow5mult+0x48>
 8007fe4:	2010      	movs	r0, #16
 8007fe6:	f7ff fd3d 	bl	8007a64 <malloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	61f8      	str	r0, [r7, #28]
 8007fee:	b928      	cbnz	r0, 8007ffc <__pow5mult+0x40>
 8007ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8008068 <__pow5mult+0xac>)
 8007ff2:	481e      	ldr	r0, [pc, #120]	@ (800806c <__pow5mult+0xb0>)
 8007ff4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ff8:	f001 fb6e 	bl	80096d8 <__assert_func>
 8007ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008000:	6004      	str	r4, [r0, #0]
 8008002:	60c4      	str	r4, [r0, #12]
 8008004:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800800c:	b94c      	cbnz	r4, 8008022 <__pow5mult+0x66>
 800800e:	f240 2171 	movw	r1, #625	@ 0x271
 8008012:	4638      	mov	r0, r7
 8008014:	f7ff ff1a 	bl	8007e4c <__i2b>
 8008018:	2300      	movs	r3, #0
 800801a:	f8c8 0008 	str.w	r0, [r8, #8]
 800801e:	4604      	mov	r4, r0
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	f04f 0900 	mov.w	r9, #0
 8008026:	07eb      	lsls	r3, r5, #31
 8008028:	d50a      	bpl.n	8008040 <__pow5mult+0x84>
 800802a:	4631      	mov	r1, r6
 800802c:	4622      	mov	r2, r4
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ff22 	bl	8007e78 <__multiply>
 8008034:	4631      	mov	r1, r6
 8008036:	4680      	mov	r8, r0
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fe09 	bl	8007c50 <_Bfree>
 800803e:	4646      	mov	r6, r8
 8008040:	106d      	asrs	r5, r5, #1
 8008042:	d00b      	beq.n	800805c <__pow5mult+0xa0>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	b938      	cbnz	r0, 8008058 <__pow5mult+0x9c>
 8008048:	4622      	mov	r2, r4
 800804a:	4621      	mov	r1, r4
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ff13 	bl	8007e78 <__multiply>
 8008052:	6020      	str	r0, [r4, #0]
 8008054:	f8c0 9000 	str.w	r9, [r0]
 8008058:	4604      	mov	r4, r0
 800805a:	e7e4      	b.n	8008026 <__pow5mult+0x6a>
 800805c:	4630      	mov	r0, r6
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008062:	bf00      	nop
 8008064:	0800a600 	.word	0x0800a600
 8008068:	0800a46e 	.word	0x0800a46e
 800806c:	0800a4ee 	.word	0x0800a4ee

08008070 <__lshift>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	6849      	ldr	r1, [r1, #4]
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	4607      	mov	r7, r0
 8008082:	4691      	mov	r9, r2
 8008084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008088:	f108 0601 	add.w	r6, r8, #1
 800808c:	42b3      	cmp	r3, r6
 800808e:	db0b      	blt.n	80080a8 <__lshift+0x38>
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff fd9d 	bl	8007bd0 <_Balloc>
 8008096:	4605      	mov	r5, r0
 8008098:	b948      	cbnz	r0, 80080ae <__lshift+0x3e>
 800809a:	4602      	mov	r2, r0
 800809c:	4b28      	ldr	r3, [pc, #160]	@ (8008140 <__lshift+0xd0>)
 800809e:	4829      	ldr	r0, [pc, #164]	@ (8008144 <__lshift+0xd4>)
 80080a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080a4:	f001 fb18 	bl	80096d8 <__assert_func>
 80080a8:	3101      	adds	r1, #1
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	e7ee      	b.n	800808c <__lshift+0x1c>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f100 0114 	add.w	r1, r0, #20
 80080b4:	f100 0210 	add.w	r2, r0, #16
 80080b8:	4618      	mov	r0, r3
 80080ba:	4553      	cmp	r3, sl
 80080bc:	db33      	blt.n	8008126 <__lshift+0xb6>
 80080be:	6920      	ldr	r0, [r4, #16]
 80080c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c4:	f104 0314 	add.w	r3, r4, #20
 80080c8:	f019 091f 	ands.w	r9, r9, #31
 80080cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080d4:	d02b      	beq.n	800812e <__lshift+0xbe>
 80080d6:	f1c9 0e20 	rsb	lr, r9, #32
 80080da:	468a      	mov	sl, r1
 80080dc:	2200      	movs	r2, #0
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	fa00 f009 	lsl.w	r0, r0, r9
 80080e4:	4310      	orrs	r0, r2
 80080e6:	f84a 0b04 	str.w	r0, [sl], #4
 80080ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ee:	459c      	cmp	ip, r3
 80080f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80080f4:	d8f3      	bhi.n	80080de <__lshift+0x6e>
 80080f6:	ebac 0304 	sub.w	r3, ip, r4
 80080fa:	3b15      	subs	r3, #21
 80080fc:	f023 0303 	bic.w	r3, r3, #3
 8008100:	3304      	adds	r3, #4
 8008102:	f104 0015 	add.w	r0, r4, #21
 8008106:	4560      	cmp	r0, ip
 8008108:	bf88      	it	hi
 800810a:	2304      	movhi	r3, #4
 800810c:	50ca      	str	r2, [r1, r3]
 800810e:	b10a      	cbz	r2, 8008114 <__lshift+0xa4>
 8008110:	f108 0602 	add.w	r6, r8, #2
 8008114:	3e01      	subs	r6, #1
 8008116:	4638      	mov	r0, r7
 8008118:	612e      	str	r6, [r5, #16]
 800811a:	4621      	mov	r1, r4
 800811c:	f7ff fd98 	bl	8007c50 <_Bfree>
 8008120:	4628      	mov	r0, r5
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	f842 0f04 	str.w	r0, [r2, #4]!
 800812a:	3301      	adds	r3, #1
 800812c:	e7c5      	b.n	80080ba <__lshift+0x4a>
 800812e:	3904      	subs	r1, #4
 8008130:	f853 2b04 	ldr.w	r2, [r3], #4
 8008134:	f841 2f04 	str.w	r2, [r1, #4]!
 8008138:	459c      	cmp	ip, r3
 800813a:	d8f9      	bhi.n	8008130 <__lshift+0xc0>
 800813c:	e7ea      	b.n	8008114 <__lshift+0xa4>
 800813e:	bf00      	nop
 8008140:	0800a4dd 	.word	0x0800a4dd
 8008144:	0800a4ee 	.word	0x0800a4ee

08008148 <__mcmp>:
 8008148:	690a      	ldr	r2, [r1, #16]
 800814a:	4603      	mov	r3, r0
 800814c:	6900      	ldr	r0, [r0, #16]
 800814e:	1a80      	subs	r0, r0, r2
 8008150:	b530      	push	{r4, r5, lr}
 8008152:	d10e      	bne.n	8008172 <__mcmp+0x2a>
 8008154:	3314      	adds	r3, #20
 8008156:	3114      	adds	r1, #20
 8008158:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800815c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008160:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008164:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008168:	4295      	cmp	r5, r2
 800816a:	d003      	beq.n	8008174 <__mcmp+0x2c>
 800816c:	d205      	bcs.n	800817a <__mcmp+0x32>
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	bd30      	pop	{r4, r5, pc}
 8008174:	42a3      	cmp	r3, r4
 8008176:	d3f3      	bcc.n	8008160 <__mcmp+0x18>
 8008178:	e7fb      	b.n	8008172 <__mcmp+0x2a>
 800817a:	2001      	movs	r0, #1
 800817c:	e7f9      	b.n	8008172 <__mcmp+0x2a>
	...

08008180 <__mdiff>:
 8008180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4689      	mov	r9, r1
 8008186:	4606      	mov	r6, r0
 8008188:	4611      	mov	r1, r2
 800818a:	4648      	mov	r0, r9
 800818c:	4614      	mov	r4, r2
 800818e:	f7ff ffdb 	bl	8008148 <__mcmp>
 8008192:	1e05      	subs	r5, r0, #0
 8008194:	d112      	bne.n	80081bc <__mdiff+0x3c>
 8008196:	4629      	mov	r1, r5
 8008198:	4630      	mov	r0, r6
 800819a:	f7ff fd19 	bl	8007bd0 <_Balloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	b928      	cbnz	r0, 80081ae <__mdiff+0x2e>
 80081a2:	4b3f      	ldr	r3, [pc, #252]	@ (80082a0 <__mdiff+0x120>)
 80081a4:	f240 2137 	movw	r1, #567	@ 0x237
 80081a8:	483e      	ldr	r0, [pc, #248]	@ (80082a4 <__mdiff+0x124>)
 80081aa:	f001 fa95 	bl	80096d8 <__assert_func>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081b4:	4610      	mov	r0, r2
 80081b6:	b003      	add	sp, #12
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	bfbc      	itt	lt
 80081be:	464b      	movlt	r3, r9
 80081c0:	46a1      	movlt	r9, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081c8:	bfba      	itte	lt
 80081ca:	461c      	movlt	r4, r3
 80081cc:	2501      	movlt	r5, #1
 80081ce:	2500      	movge	r5, #0
 80081d0:	f7ff fcfe 	bl	8007bd0 <_Balloc>
 80081d4:	4602      	mov	r2, r0
 80081d6:	b918      	cbnz	r0, 80081e0 <__mdiff+0x60>
 80081d8:	4b31      	ldr	r3, [pc, #196]	@ (80082a0 <__mdiff+0x120>)
 80081da:	f240 2145 	movw	r1, #581	@ 0x245
 80081de:	e7e3      	b.n	80081a8 <__mdiff+0x28>
 80081e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081e4:	6926      	ldr	r6, [r4, #16]
 80081e6:	60c5      	str	r5, [r0, #12]
 80081e8:	f109 0310 	add.w	r3, r9, #16
 80081ec:	f109 0514 	add.w	r5, r9, #20
 80081f0:	f104 0e14 	add.w	lr, r4, #20
 80081f4:	f100 0b14 	add.w	fp, r0, #20
 80081f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	46d9      	mov	r9, fp
 8008204:	f04f 0c00 	mov.w	ip, #0
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800820e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	fa1f f38a 	uxth.w	r3, sl
 8008218:	4619      	mov	r1, r3
 800821a:	b283      	uxth	r3, r0
 800821c:	1acb      	subs	r3, r1, r3
 800821e:	0c00      	lsrs	r0, r0, #16
 8008220:	4463      	add	r3, ip
 8008222:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008226:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008230:	4576      	cmp	r6, lr
 8008232:	f849 3b04 	str.w	r3, [r9], #4
 8008236:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800823a:	d8e5      	bhi.n	8008208 <__mdiff+0x88>
 800823c:	1b33      	subs	r3, r6, r4
 800823e:	3b15      	subs	r3, #21
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	3415      	adds	r4, #21
 8008246:	3304      	adds	r3, #4
 8008248:	42a6      	cmp	r6, r4
 800824a:	bf38      	it	cc
 800824c:	2304      	movcc	r3, #4
 800824e:	441d      	add	r5, r3
 8008250:	445b      	add	r3, fp
 8008252:	461e      	mov	r6, r3
 8008254:	462c      	mov	r4, r5
 8008256:	4544      	cmp	r4, r8
 8008258:	d30e      	bcc.n	8008278 <__mdiff+0xf8>
 800825a:	f108 0103 	add.w	r1, r8, #3
 800825e:	1b49      	subs	r1, r1, r5
 8008260:	f021 0103 	bic.w	r1, r1, #3
 8008264:	3d03      	subs	r5, #3
 8008266:	45a8      	cmp	r8, r5
 8008268:	bf38      	it	cc
 800826a:	2100      	movcc	r1, #0
 800826c:	440b      	add	r3, r1
 800826e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008272:	b191      	cbz	r1, 800829a <__mdiff+0x11a>
 8008274:	6117      	str	r7, [r2, #16]
 8008276:	e79d      	b.n	80081b4 <__mdiff+0x34>
 8008278:	f854 1b04 	ldr.w	r1, [r4], #4
 800827c:	46e6      	mov	lr, ip
 800827e:	0c08      	lsrs	r0, r1, #16
 8008280:	fa1c fc81 	uxtah	ip, ip, r1
 8008284:	4471      	add	r1, lr
 8008286:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800828a:	b289      	uxth	r1, r1
 800828c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008290:	f846 1b04 	str.w	r1, [r6], #4
 8008294:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008298:	e7dd      	b.n	8008256 <__mdiff+0xd6>
 800829a:	3f01      	subs	r7, #1
 800829c:	e7e7      	b.n	800826e <__mdiff+0xee>
 800829e:	bf00      	nop
 80082a0:	0800a4dd 	.word	0x0800a4dd
 80082a4:	0800a4ee 	.word	0x0800a4ee

080082a8 <__ulp>:
 80082a8:	b082      	sub	sp, #8
 80082aa:	ed8d 0b00 	vstr	d0, [sp]
 80082ae:	9a01      	ldr	r2, [sp, #4]
 80082b0:	4b0f      	ldr	r3, [pc, #60]	@ (80082f0 <__ulp+0x48>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc08      	bgt.n	80082ce <__ulp+0x26>
 80082bc:	425b      	negs	r3, r3
 80082be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082c6:	da04      	bge.n	80082d2 <__ulp+0x2a>
 80082c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082cc:	4113      	asrs	r3, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	e008      	b.n	80082e4 <__ulp+0x3c>
 80082d2:	f1a2 0314 	sub.w	r3, r2, #20
 80082d6:	2b1e      	cmp	r3, #30
 80082d8:	bfda      	itte	le
 80082da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082de:	40da      	lsrle	r2, r3
 80082e0:	2201      	movgt	r2, #1
 80082e2:	2300      	movs	r3, #0
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	ec41 0b10 	vmov	d0, r0, r1
 80082ec:	b002      	add	sp, #8
 80082ee:	4770      	bx	lr
 80082f0:	7ff00000 	.word	0x7ff00000

080082f4 <__b2d>:
 80082f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f8:	6906      	ldr	r6, [r0, #16]
 80082fa:	f100 0814 	add.w	r8, r0, #20
 80082fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008302:	1f37      	subs	r7, r6, #4
 8008304:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008308:	4610      	mov	r0, r2
 800830a:	f7ff fd53 	bl	8007db4 <__hi0bits>
 800830e:	f1c0 0320 	rsb	r3, r0, #32
 8008312:	280a      	cmp	r0, #10
 8008314:	600b      	str	r3, [r1, #0]
 8008316:	491b      	ldr	r1, [pc, #108]	@ (8008384 <__b2d+0x90>)
 8008318:	dc15      	bgt.n	8008346 <__b2d+0x52>
 800831a:	f1c0 0c0b 	rsb	ip, r0, #11
 800831e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008322:	45b8      	cmp	r8, r7
 8008324:	ea43 0501 	orr.w	r5, r3, r1
 8008328:	bf34      	ite	cc
 800832a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800832e:	2300      	movcs	r3, #0
 8008330:	3015      	adds	r0, #21
 8008332:	fa02 f000 	lsl.w	r0, r2, r0
 8008336:	fa23 f30c 	lsr.w	r3, r3, ip
 800833a:	4303      	orrs	r3, r0
 800833c:	461c      	mov	r4, r3
 800833e:	ec45 4b10 	vmov	d0, r4, r5
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008346:	45b8      	cmp	r8, r7
 8008348:	bf3a      	itte	cc
 800834a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800834e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008352:	2300      	movcs	r3, #0
 8008354:	380b      	subs	r0, #11
 8008356:	d012      	beq.n	800837e <__b2d+0x8a>
 8008358:	f1c0 0120 	rsb	r1, r0, #32
 800835c:	fa23 f401 	lsr.w	r4, r3, r1
 8008360:	4082      	lsls	r2, r0
 8008362:	4322      	orrs	r2, r4
 8008364:	4547      	cmp	r7, r8
 8008366:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800836a:	bf8c      	ite	hi
 800836c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008370:	2200      	movls	r2, #0
 8008372:	4083      	lsls	r3, r0
 8008374:	40ca      	lsrs	r2, r1
 8008376:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800837a:	4313      	orrs	r3, r2
 800837c:	e7de      	b.n	800833c <__b2d+0x48>
 800837e:	ea42 0501 	orr.w	r5, r2, r1
 8008382:	e7db      	b.n	800833c <__b2d+0x48>
 8008384:	3ff00000 	.word	0x3ff00000

08008388 <__d2b>:
 8008388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800838c:	460f      	mov	r7, r1
 800838e:	2101      	movs	r1, #1
 8008390:	ec59 8b10 	vmov	r8, r9, d0
 8008394:	4616      	mov	r6, r2
 8008396:	f7ff fc1b 	bl	8007bd0 <_Balloc>
 800839a:	4604      	mov	r4, r0
 800839c:	b930      	cbnz	r0, 80083ac <__d2b+0x24>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <__d2b+0xa8>)
 80083a2:	4824      	ldr	r0, [pc, #144]	@ (8008434 <__d2b+0xac>)
 80083a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80083a8:	f001 f996 	bl	80096d8 <__assert_func>
 80083ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083b4:	b10d      	cbz	r5, 80083ba <__d2b+0x32>
 80083b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	f1b8 0300 	subs.w	r3, r8, #0
 80083c0:	d023      	beq.n	800840a <__d2b+0x82>
 80083c2:	4668      	mov	r0, sp
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	f7ff fd14 	bl	8007df2 <__lo0bits>
 80083ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083ce:	b1d0      	cbz	r0, 8008406 <__d2b+0x7e>
 80083d0:	f1c0 0320 	rsb	r3, r0, #32
 80083d4:	fa02 f303 	lsl.w	r3, r2, r3
 80083d8:	430b      	orrs	r3, r1
 80083da:	40c2      	lsrs	r2, r0
 80083dc:	6163      	str	r3, [r4, #20]
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	9b01      	ldr	r3, [sp, #4]
 80083e2:	61a3      	str	r3, [r4, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf0c      	ite	eq
 80083e8:	2201      	moveq	r2, #1
 80083ea:	2202      	movne	r2, #2
 80083ec:	6122      	str	r2, [r4, #16]
 80083ee:	b1a5      	cbz	r5, 800841a <__d2b+0x92>
 80083f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083f4:	4405      	add	r5, r0
 80083f6:	603d      	str	r5, [r7, #0]
 80083f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4620      	mov	r0, r4
 8008400:	b003      	add	sp, #12
 8008402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008406:	6161      	str	r1, [r4, #20]
 8008408:	e7ea      	b.n	80083e0 <__d2b+0x58>
 800840a:	a801      	add	r0, sp, #4
 800840c:	f7ff fcf1 	bl	8007df2 <__lo0bits>
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	3020      	adds	r0, #32
 8008416:	2201      	movs	r2, #1
 8008418:	e7e8      	b.n	80083ec <__d2b+0x64>
 800841a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800841e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008422:	6038      	str	r0, [r7, #0]
 8008424:	6918      	ldr	r0, [r3, #16]
 8008426:	f7ff fcc5 	bl	8007db4 <__hi0bits>
 800842a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800842e:	e7e5      	b.n	80083fc <__d2b+0x74>
 8008430:	0800a4dd 	.word	0x0800a4dd
 8008434:	0800a4ee 	.word	0x0800a4ee

08008438 <__ratio>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b085      	sub	sp, #20
 800843e:	e9cd 1000 	strd	r1, r0, [sp]
 8008442:	a902      	add	r1, sp, #8
 8008444:	f7ff ff56 	bl	80082f4 <__b2d>
 8008448:	9800      	ldr	r0, [sp, #0]
 800844a:	a903      	add	r1, sp, #12
 800844c:	ec55 4b10 	vmov	r4, r5, d0
 8008450:	f7ff ff50 	bl	80082f4 <__b2d>
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	6919      	ldr	r1, [r3, #16]
 8008458:	9b00      	ldr	r3, [sp, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	1ac9      	subs	r1, r1, r3
 800845e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	ec5b ab10 	vmov	sl, fp, d0
 8008468:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800846c:	2b00      	cmp	r3, #0
 800846e:	bfce      	itee	gt
 8008470:	462a      	movgt	r2, r5
 8008472:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008476:	465a      	movle	r2, fp
 8008478:	462f      	mov	r7, r5
 800847a:	46d9      	mov	r9, fp
 800847c:	bfcc      	ite	gt
 800847e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008482:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008486:	464b      	mov	r3, r9
 8008488:	4652      	mov	r2, sl
 800848a:	4620      	mov	r0, r4
 800848c:	4639      	mov	r1, r7
 800848e:	f7f8 f9dd 	bl	800084c <__aeabi_ddiv>
 8008492:	ec41 0b10 	vmov	d0, r0, r1
 8008496:	b005      	add	sp, #20
 8008498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800849c <__copybits>:
 800849c:	3901      	subs	r1, #1
 800849e:	b570      	push	{r4, r5, r6, lr}
 80084a0:	1149      	asrs	r1, r1, #5
 80084a2:	6914      	ldr	r4, [r2, #16]
 80084a4:	3101      	adds	r1, #1
 80084a6:	f102 0314 	add.w	r3, r2, #20
 80084aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084b2:	1f05      	subs	r5, r0, #4
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d30c      	bcc.n	80084d2 <__copybits+0x36>
 80084b8:	1aa3      	subs	r3, r4, r2
 80084ba:	3b11      	subs	r3, #17
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	3211      	adds	r2, #17
 80084c2:	42a2      	cmp	r2, r4
 80084c4:	bf88      	it	hi
 80084c6:	2300      	movhi	r3, #0
 80084c8:	4418      	add	r0, r3
 80084ca:	2300      	movs	r3, #0
 80084cc:	4288      	cmp	r0, r1
 80084ce:	d305      	bcc.n	80084dc <__copybits+0x40>
 80084d0:	bd70      	pop	{r4, r5, r6, pc}
 80084d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80084d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80084da:	e7eb      	b.n	80084b4 <__copybits+0x18>
 80084dc:	f840 3b04 	str.w	r3, [r0], #4
 80084e0:	e7f4      	b.n	80084cc <__copybits+0x30>

080084e2 <__any_on>:
 80084e2:	f100 0214 	add.w	r2, r0, #20
 80084e6:	6900      	ldr	r0, [r0, #16]
 80084e8:	114b      	asrs	r3, r1, #5
 80084ea:	4298      	cmp	r0, r3
 80084ec:	b510      	push	{r4, lr}
 80084ee:	db11      	blt.n	8008514 <__any_on+0x32>
 80084f0:	dd0a      	ble.n	8008508 <__any_on+0x26>
 80084f2:	f011 011f 	ands.w	r1, r1, #31
 80084f6:	d007      	beq.n	8008508 <__any_on+0x26>
 80084f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084fc:	fa24 f001 	lsr.w	r0, r4, r1
 8008500:	fa00 f101 	lsl.w	r1, r0, r1
 8008504:	428c      	cmp	r4, r1
 8008506:	d10b      	bne.n	8008520 <__any_on+0x3e>
 8008508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800850c:	4293      	cmp	r3, r2
 800850e:	d803      	bhi.n	8008518 <__any_on+0x36>
 8008510:	2000      	movs	r0, #0
 8008512:	bd10      	pop	{r4, pc}
 8008514:	4603      	mov	r3, r0
 8008516:	e7f7      	b.n	8008508 <__any_on+0x26>
 8008518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800851c:	2900      	cmp	r1, #0
 800851e:	d0f5      	beq.n	800850c <__any_on+0x2a>
 8008520:	2001      	movs	r0, #1
 8008522:	e7f6      	b.n	8008512 <__any_on+0x30>

08008524 <sulp>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4604      	mov	r4, r0
 8008528:	460d      	mov	r5, r1
 800852a:	ec45 4b10 	vmov	d0, r4, r5
 800852e:	4616      	mov	r6, r2
 8008530:	f7ff feba 	bl	80082a8 <__ulp>
 8008534:	ec51 0b10 	vmov	r0, r1, d0
 8008538:	b17e      	cbz	r6, 800855a <sulp+0x36>
 800853a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800853e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd09      	ble.n	800855a <sulp+0x36>
 8008546:	051b      	lsls	r3, r3, #20
 8008548:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800854c:	2400      	movs	r4, #0
 800854e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008552:	4622      	mov	r2, r4
 8008554:	462b      	mov	r3, r5
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	ec41 0b10 	vmov	d0, r0, r1
 800855e:	bd70      	pop	{r4, r5, r6, pc}

08008560 <_strtod_l>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	b09f      	sub	sp, #124	@ 0x7c
 8008566:	460c      	mov	r4, r1
 8008568:	9217      	str	r2, [sp, #92]	@ 0x5c
 800856a:	2200      	movs	r2, #0
 800856c:	921a      	str	r2, [sp, #104]	@ 0x68
 800856e:	9005      	str	r0, [sp, #20]
 8008570:	f04f 0a00 	mov.w	sl, #0
 8008574:	f04f 0b00 	mov.w	fp, #0
 8008578:	460a      	mov	r2, r1
 800857a:	9219      	str	r2, [sp, #100]	@ 0x64
 800857c:	7811      	ldrb	r1, [r2, #0]
 800857e:	292b      	cmp	r1, #43	@ 0x2b
 8008580:	d04a      	beq.n	8008618 <_strtod_l+0xb8>
 8008582:	d838      	bhi.n	80085f6 <_strtod_l+0x96>
 8008584:	290d      	cmp	r1, #13
 8008586:	d832      	bhi.n	80085ee <_strtod_l+0x8e>
 8008588:	2908      	cmp	r1, #8
 800858a:	d832      	bhi.n	80085f2 <_strtod_l+0x92>
 800858c:	2900      	cmp	r1, #0
 800858e:	d03b      	beq.n	8008608 <_strtod_l+0xa8>
 8008590:	2200      	movs	r2, #0
 8008592:	920e      	str	r2, [sp, #56]	@ 0x38
 8008594:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008596:	782a      	ldrb	r2, [r5, #0]
 8008598:	2a30      	cmp	r2, #48	@ 0x30
 800859a:	f040 80b2 	bne.w	8008702 <_strtod_l+0x1a2>
 800859e:	786a      	ldrb	r2, [r5, #1]
 80085a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80085a4:	2a58      	cmp	r2, #88	@ 0x58
 80085a6:	d16e      	bne.n	8008686 <_strtod_l+0x126>
 80085a8:	9302      	str	r3, [sp, #8]
 80085aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4a8f      	ldr	r2, [pc, #572]	@ (80087f0 <_strtod_l+0x290>)
 80085b4:	9805      	ldr	r0, [sp, #20]
 80085b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085b8:	a919      	add	r1, sp, #100	@ 0x64
 80085ba:	f001 f927 	bl	800980c <__gethex>
 80085be:	f010 060f 	ands.w	r6, r0, #15
 80085c2:	4604      	mov	r4, r0
 80085c4:	d005      	beq.n	80085d2 <_strtod_l+0x72>
 80085c6:	2e06      	cmp	r6, #6
 80085c8:	d128      	bne.n	800861c <_strtod_l+0xbc>
 80085ca:	3501      	adds	r5, #1
 80085cc:	2300      	movs	r3, #0
 80085ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80085d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80085d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 858e 	bne.w	80090f6 <_strtod_l+0xb96>
 80085da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085dc:	b1cb      	cbz	r3, 8008612 <_strtod_l+0xb2>
 80085de:	4652      	mov	r2, sl
 80085e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80085e4:	ec43 2b10 	vmov	d0, r2, r3
 80085e8:	b01f      	add	sp, #124	@ 0x7c
 80085ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	2920      	cmp	r1, #32
 80085f0:	d1ce      	bne.n	8008590 <_strtod_l+0x30>
 80085f2:	3201      	adds	r2, #1
 80085f4:	e7c1      	b.n	800857a <_strtod_l+0x1a>
 80085f6:	292d      	cmp	r1, #45	@ 0x2d
 80085f8:	d1ca      	bne.n	8008590 <_strtod_l+0x30>
 80085fa:	2101      	movs	r1, #1
 80085fc:	910e      	str	r1, [sp, #56]	@ 0x38
 80085fe:	1c51      	adds	r1, r2, #1
 8008600:	9119      	str	r1, [sp, #100]	@ 0x64
 8008602:	7852      	ldrb	r2, [r2, #1]
 8008604:	2a00      	cmp	r2, #0
 8008606:	d1c5      	bne.n	8008594 <_strtod_l+0x34>
 8008608:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800860a:	9419      	str	r4, [sp, #100]	@ 0x64
 800860c:	2b00      	cmp	r3, #0
 800860e:	f040 8570 	bne.w	80090f2 <_strtod_l+0xb92>
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	e7e5      	b.n	80085e4 <_strtod_l+0x84>
 8008618:	2100      	movs	r1, #0
 800861a:	e7ef      	b.n	80085fc <_strtod_l+0x9c>
 800861c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800861e:	b13a      	cbz	r2, 8008630 <_strtod_l+0xd0>
 8008620:	2135      	movs	r1, #53	@ 0x35
 8008622:	a81c      	add	r0, sp, #112	@ 0x70
 8008624:	f7ff ff3a 	bl	800849c <__copybits>
 8008628:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800862a:	9805      	ldr	r0, [sp, #20]
 800862c:	f7ff fb10 	bl	8007c50 <_Bfree>
 8008630:	3e01      	subs	r6, #1
 8008632:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008634:	2e04      	cmp	r6, #4
 8008636:	d806      	bhi.n	8008646 <_strtod_l+0xe6>
 8008638:	e8df f006 	tbb	[pc, r6]
 800863c:	201d0314 	.word	0x201d0314
 8008640:	14          	.byte	0x14
 8008641:	00          	.byte	0x00
 8008642:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008646:	05e1      	lsls	r1, r4, #23
 8008648:	bf48      	it	mi
 800864a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800864e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008652:	0d1b      	lsrs	r3, r3, #20
 8008654:	051b      	lsls	r3, r3, #20
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1bb      	bne.n	80085d2 <_strtod_l+0x72>
 800865a:	f7fe fb2b 	bl	8006cb4 <__errno>
 800865e:	2322      	movs	r3, #34	@ 0x22
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	e7b6      	b.n	80085d2 <_strtod_l+0x72>
 8008664:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008668:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800866c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008670:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008674:	e7e7      	b.n	8008646 <_strtod_l+0xe6>
 8008676:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80087f8 <_strtod_l+0x298>
 800867a:	e7e4      	b.n	8008646 <_strtod_l+0xe6>
 800867c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008680:	f04f 3aff 	mov.w	sl, #4294967295
 8008684:	e7df      	b.n	8008646 <_strtod_l+0xe6>
 8008686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	9219      	str	r2, [sp, #100]	@ 0x64
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b30      	cmp	r3, #48	@ 0x30
 8008690:	d0f9      	beq.n	8008686 <_strtod_l+0x126>
 8008692:	2b00      	cmp	r3, #0
 8008694:	d09d      	beq.n	80085d2 <_strtod_l+0x72>
 8008696:	2301      	movs	r3, #1
 8008698:	2700      	movs	r7, #0
 800869a:	9308      	str	r3, [sp, #32]
 800869c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800869e:	930c      	str	r3, [sp, #48]	@ 0x30
 80086a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80086a2:	46b9      	mov	r9, r7
 80086a4:	220a      	movs	r2, #10
 80086a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80086a8:	7805      	ldrb	r5, [r0, #0]
 80086aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80086ae:	b2d9      	uxtb	r1, r3
 80086b0:	2909      	cmp	r1, #9
 80086b2:	d928      	bls.n	8008706 <_strtod_l+0x1a6>
 80086b4:	494f      	ldr	r1, [pc, #316]	@ (80087f4 <_strtod_l+0x294>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	f000 ffd6 	bl	8009668 <strncmp>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d032      	beq.n	8008726 <_strtod_l+0x1c6>
 80086c0:	2000      	movs	r0, #0
 80086c2:	462a      	mov	r2, r5
 80086c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80086c6:	464d      	mov	r5, r9
 80086c8:	4603      	mov	r3, r0
 80086ca:	2a65      	cmp	r2, #101	@ 0x65
 80086cc:	d001      	beq.n	80086d2 <_strtod_l+0x172>
 80086ce:	2a45      	cmp	r2, #69	@ 0x45
 80086d0:	d114      	bne.n	80086fc <_strtod_l+0x19c>
 80086d2:	b91d      	cbnz	r5, 80086dc <_strtod_l+0x17c>
 80086d4:	9a08      	ldr	r2, [sp, #32]
 80086d6:	4302      	orrs	r2, r0
 80086d8:	d096      	beq.n	8008608 <_strtod_l+0xa8>
 80086da:	2500      	movs	r5, #0
 80086dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80086de:	1c62      	adds	r2, r4, #1
 80086e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80086e2:	7862      	ldrb	r2, [r4, #1]
 80086e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80086e6:	d07a      	beq.n	80087de <_strtod_l+0x27e>
 80086e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80086ea:	d07e      	beq.n	80087ea <_strtod_l+0x28a>
 80086ec:	f04f 0c00 	mov.w	ip, #0
 80086f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80086f4:	2909      	cmp	r1, #9
 80086f6:	f240 8085 	bls.w	8008804 <_strtod_l+0x2a4>
 80086fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80086fc:	f04f 0800 	mov.w	r8, #0
 8008700:	e0a5      	b.n	800884e <_strtod_l+0x2ee>
 8008702:	2300      	movs	r3, #0
 8008704:	e7c8      	b.n	8008698 <_strtod_l+0x138>
 8008706:	f1b9 0f08 	cmp.w	r9, #8
 800870a:	bfd8      	it	le
 800870c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800870e:	f100 0001 	add.w	r0, r0, #1
 8008712:	bfda      	itte	le
 8008714:	fb02 3301 	mlale	r3, r2, r1, r3
 8008718:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800871a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800871e:	f109 0901 	add.w	r9, r9, #1
 8008722:	9019      	str	r0, [sp, #100]	@ 0x64
 8008724:	e7bf      	b.n	80086a6 <_strtod_l+0x146>
 8008726:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	9219      	str	r2, [sp, #100]	@ 0x64
 800872c:	785a      	ldrb	r2, [r3, #1]
 800872e:	f1b9 0f00 	cmp.w	r9, #0
 8008732:	d03b      	beq.n	80087ac <_strtod_l+0x24c>
 8008734:	900a      	str	r0, [sp, #40]	@ 0x28
 8008736:	464d      	mov	r5, r9
 8008738:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d912      	bls.n	8008766 <_strtod_l+0x206>
 8008740:	2301      	movs	r3, #1
 8008742:	e7c2      	b.n	80086ca <_strtod_l+0x16a>
 8008744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	9219      	str	r2, [sp, #100]	@ 0x64
 800874a:	785a      	ldrb	r2, [r3, #1]
 800874c:	3001      	adds	r0, #1
 800874e:	2a30      	cmp	r2, #48	@ 0x30
 8008750:	d0f8      	beq.n	8008744 <_strtod_l+0x1e4>
 8008752:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008756:	2b08      	cmp	r3, #8
 8008758:	f200 84d2 	bhi.w	8009100 <_strtod_l+0xba0>
 800875c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800875e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008760:	2000      	movs	r0, #0
 8008762:	930c      	str	r3, [sp, #48]	@ 0x30
 8008764:	4605      	mov	r5, r0
 8008766:	3a30      	subs	r2, #48	@ 0x30
 8008768:	f100 0301 	add.w	r3, r0, #1
 800876c:	d018      	beq.n	80087a0 <_strtod_l+0x240>
 800876e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008770:	4419      	add	r1, r3
 8008772:	910a      	str	r1, [sp, #40]	@ 0x28
 8008774:	462e      	mov	r6, r5
 8008776:	f04f 0e0a 	mov.w	lr, #10
 800877a:	1c71      	adds	r1, r6, #1
 800877c:	eba1 0c05 	sub.w	ip, r1, r5
 8008780:	4563      	cmp	r3, ip
 8008782:	dc15      	bgt.n	80087b0 <_strtod_l+0x250>
 8008784:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008788:	182b      	adds	r3, r5, r0
 800878a:	2b08      	cmp	r3, #8
 800878c:	f105 0501 	add.w	r5, r5, #1
 8008790:	4405      	add	r5, r0
 8008792:	dc1a      	bgt.n	80087ca <_strtod_l+0x26a>
 8008794:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008796:	230a      	movs	r3, #10
 8008798:	fb03 2301 	mla	r3, r3, r1, r2
 800879c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800879e:	2300      	movs	r3, #0
 80087a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087a2:	1c51      	adds	r1, r2, #1
 80087a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087a6:	7852      	ldrb	r2, [r2, #1]
 80087a8:	4618      	mov	r0, r3
 80087aa:	e7c5      	b.n	8008738 <_strtod_l+0x1d8>
 80087ac:	4648      	mov	r0, r9
 80087ae:	e7ce      	b.n	800874e <_strtod_l+0x1ee>
 80087b0:	2e08      	cmp	r6, #8
 80087b2:	dc05      	bgt.n	80087c0 <_strtod_l+0x260>
 80087b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80087b6:	fb0e f606 	mul.w	r6, lr, r6
 80087ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80087bc:	460e      	mov	r6, r1
 80087be:	e7dc      	b.n	800877a <_strtod_l+0x21a>
 80087c0:	2910      	cmp	r1, #16
 80087c2:	bfd8      	it	le
 80087c4:	fb0e f707 	mulle.w	r7, lr, r7
 80087c8:	e7f8      	b.n	80087bc <_strtod_l+0x25c>
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	bfdc      	itt	le
 80087ce:	230a      	movle	r3, #10
 80087d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80087d4:	e7e3      	b.n	800879e <_strtod_l+0x23e>
 80087d6:	2300      	movs	r3, #0
 80087d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80087da:	2301      	movs	r3, #1
 80087dc:	e77a      	b.n	80086d4 <_strtod_l+0x174>
 80087de:	f04f 0c00 	mov.w	ip, #0
 80087e2:	1ca2      	adds	r2, r4, #2
 80087e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80087e6:	78a2      	ldrb	r2, [r4, #2]
 80087e8:	e782      	b.n	80086f0 <_strtod_l+0x190>
 80087ea:	f04f 0c01 	mov.w	ip, #1
 80087ee:	e7f8      	b.n	80087e2 <_strtod_l+0x282>
 80087f0:	0800a714 	.word	0x0800a714
 80087f4:	0800a547 	.word	0x0800a547
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087fe:	1c51      	adds	r1, r2, #1
 8008800:	9119      	str	r1, [sp, #100]	@ 0x64
 8008802:	7852      	ldrb	r2, [r2, #1]
 8008804:	2a30      	cmp	r2, #48	@ 0x30
 8008806:	d0f9      	beq.n	80087fc <_strtod_l+0x29c>
 8008808:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800880c:	2908      	cmp	r1, #8
 800880e:	f63f af75 	bhi.w	80086fc <_strtod_l+0x19c>
 8008812:	3a30      	subs	r2, #48	@ 0x30
 8008814:	9209      	str	r2, [sp, #36]	@ 0x24
 8008816:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008818:	920f      	str	r2, [sp, #60]	@ 0x3c
 800881a:	f04f 080a 	mov.w	r8, #10
 800881e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008820:	1c56      	adds	r6, r2, #1
 8008822:	9619      	str	r6, [sp, #100]	@ 0x64
 8008824:	7852      	ldrb	r2, [r2, #1]
 8008826:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800882a:	f1be 0f09 	cmp.w	lr, #9
 800882e:	d939      	bls.n	80088a4 <_strtod_l+0x344>
 8008830:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008832:	1a76      	subs	r6, r6, r1
 8008834:	2e08      	cmp	r6, #8
 8008836:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800883a:	dc03      	bgt.n	8008844 <_strtod_l+0x2e4>
 800883c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800883e:	4588      	cmp	r8, r1
 8008840:	bfa8      	it	ge
 8008842:	4688      	movge	r8, r1
 8008844:	f1bc 0f00 	cmp.w	ip, #0
 8008848:	d001      	beq.n	800884e <_strtod_l+0x2ee>
 800884a:	f1c8 0800 	rsb	r8, r8, #0
 800884e:	2d00      	cmp	r5, #0
 8008850:	d14e      	bne.n	80088f0 <_strtod_l+0x390>
 8008852:	9908      	ldr	r1, [sp, #32]
 8008854:	4308      	orrs	r0, r1
 8008856:	f47f aebc 	bne.w	80085d2 <_strtod_l+0x72>
 800885a:	2b00      	cmp	r3, #0
 800885c:	f47f aed4 	bne.w	8008608 <_strtod_l+0xa8>
 8008860:	2a69      	cmp	r2, #105	@ 0x69
 8008862:	d028      	beq.n	80088b6 <_strtod_l+0x356>
 8008864:	dc25      	bgt.n	80088b2 <_strtod_l+0x352>
 8008866:	2a49      	cmp	r2, #73	@ 0x49
 8008868:	d025      	beq.n	80088b6 <_strtod_l+0x356>
 800886a:	2a4e      	cmp	r2, #78	@ 0x4e
 800886c:	f47f aecc 	bne.w	8008608 <_strtod_l+0xa8>
 8008870:	499a      	ldr	r1, [pc, #616]	@ (8008adc <_strtod_l+0x57c>)
 8008872:	a819      	add	r0, sp, #100	@ 0x64
 8008874:	f001 f9ec 	bl	8009c50 <__match>
 8008878:	2800      	cmp	r0, #0
 800887a:	f43f aec5 	beq.w	8008608 <_strtod_l+0xa8>
 800887e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b28      	cmp	r3, #40	@ 0x28
 8008884:	d12e      	bne.n	80088e4 <_strtod_l+0x384>
 8008886:	4996      	ldr	r1, [pc, #600]	@ (8008ae0 <_strtod_l+0x580>)
 8008888:	aa1c      	add	r2, sp, #112	@ 0x70
 800888a:	a819      	add	r0, sp, #100	@ 0x64
 800888c:	f001 f9f4 	bl	8009c78 <__hexnan>
 8008890:	2805      	cmp	r0, #5
 8008892:	d127      	bne.n	80088e4 <_strtod_l+0x384>
 8008894:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008896:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800889a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800889e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80088a2:	e696      	b.n	80085d2 <_strtod_l+0x72>
 80088a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088a6:	fb08 2101 	mla	r1, r8, r1, r2
 80088aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80088ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80088b0:	e7b5      	b.n	800881e <_strtod_l+0x2be>
 80088b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80088b4:	e7da      	b.n	800886c <_strtod_l+0x30c>
 80088b6:	498b      	ldr	r1, [pc, #556]	@ (8008ae4 <_strtod_l+0x584>)
 80088b8:	a819      	add	r0, sp, #100	@ 0x64
 80088ba:	f001 f9c9 	bl	8009c50 <__match>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f aea2 	beq.w	8008608 <_strtod_l+0xa8>
 80088c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088c6:	4988      	ldr	r1, [pc, #544]	@ (8008ae8 <_strtod_l+0x588>)
 80088c8:	3b01      	subs	r3, #1
 80088ca:	a819      	add	r0, sp, #100	@ 0x64
 80088cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80088ce:	f001 f9bf 	bl	8009c50 <__match>
 80088d2:	b910      	cbnz	r0, 80088da <_strtod_l+0x37a>
 80088d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088d6:	3301      	adds	r3, #1
 80088d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80088da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008af8 <_strtod_l+0x598>
 80088de:	f04f 0a00 	mov.w	sl, #0
 80088e2:	e676      	b.n	80085d2 <_strtod_l+0x72>
 80088e4:	4881      	ldr	r0, [pc, #516]	@ (8008aec <_strtod_l+0x58c>)
 80088e6:	f000 feef 	bl	80096c8 <nan>
 80088ea:	ec5b ab10 	vmov	sl, fp, d0
 80088ee:	e670      	b.n	80085d2 <_strtod_l+0x72>
 80088f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80088f4:	eba8 0303 	sub.w	r3, r8, r3
 80088f8:	f1b9 0f00 	cmp.w	r9, #0
 80088fc:	bf08      	it	eq
 80088fe:	46a9      	moveq	r9, r5
 8008900:	2d10      	cmp	r5, #16
 8008902:	9309      	str	r3, [sp, #36]	@ 0x24
 8008904:	462c      	mov	r4, r5
 8008906:	bfa8      	it	ge
 8008908:	2410      	movge	r4, #16
 800890a:	f7f7 fdfb 	bl	8000504 <__aeabi_ui2d>
 800890e:	2d09      	cmp	r5, #9
 8008910:	4682      	mov	sl, r0
 8008912:	468b      	mov	fp, r1
 8008914:	dc13      	bgt.n	800893e <_strtod_l+0x3de>
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	f43f ae5a 	beq.w	80085d2 <_strtod_l+0x72>
 800891e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008920:	dd78      	ble.n	8008a14 <_strtod_l+0x4b4>
 8008922:	2b16      	cmp	r3, #22
 8008924:	dc5f      	bgt.n	80089e6 <_strtod_l+0x486>
 8008926:	4972      	ldr	r1, [pc, #456]	@ (8008af0 <_strtod_l+0x590>)
 8008928:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800892c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008930:	4652      	mov	r2, sl
 8008932:	465b      	mov	r3, fp
 8008934:	f7f7 fe60 	bl	80005f8 <__aeabi_dmul>
 8008938:	4682      	mov	sl, r0
 800893a:	468b      	mov	fp, r1
 800893c:	e649      	b.n	80085d2 <_strtod_l+0x72>
 800893e:	4b6c      	ldr	r3, [pc, #432]	@ (8008af0 <_strtod_l+0x590>)
 8008940:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008944:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	4682      	mov	sl, r0
 800894e:	4638      	mov	r0, r7
 8008950:	468b      	mov	fp, r1
 8008952:	f7f7 fdd7 	bl	8000504 <__aeabi_ui2d>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4650      	mov	r0, sl
 800895c:	4659      	mov	r1, fp
 800895e:	f7f7 fc95 	bl	800028c <__adddf3>
 8008962:	2d0f      	cmp	r5, #15
 8008964:	4682      	mov	sl, r0
 8008966:	468b      	mov	fp, r1
 8008968:	ddd5      	ble.n	8008916 <_strtod_l+0x3b6>
 800896a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896c:	1b2c      	subs	r4, r5, r4
 800896e:	441c      	add	r4, r3
 8008970:	2c00      	cmp	r4, #0
 8008972:	f340 8093 	ble.w	8008a9c <_strtod_l+0x53c>
 8008976:	f014 030f 	ands.w	r3, r4, #15
 800897a:	d00a      	beq.n	8008992 <_strtod_l+0x432>
 800897c:	495c      	ldr	r1, [pc, #368]	@ (8008af0 <_strtod_l+0x590>)
 800897e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008982:	4652      	mov	r2, sl
 8008984:	465b      	mov	r3, fp
 8008986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898a:	f7f7 fe35 	bl	80005f8 <__aeabi_dmul>
 800898e:	4682      	mov	sl, r0
 8008990:	468b      	mov	fp, r1
 8008992:	f034 040f 	bics.w	r4, r4, #15
 8008996:	d073      	beq.n	8008a80 <_strtod_l+0x520>
 8008998:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800899c:	dd49      	ble.n	8008a32 <_strtod_l+0x4d2>
 800899e:	2400      	movs	r4, #0
 80089a0:	46a0      	mov	r8, r4
 80089a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089a4:	46a1      	mov	r9, r4
 80089a6:	9a05      	ldr	r2, [sp, #20]
 80089a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008af8 <_strtod_l+0x598>
 80089ac:	2322      	movs	r3, #34	@ 0x22
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f43f ae0b 	beq.w	80085d2 <_strtod_l+0x72>
 80089bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089be:	9805      	ldr	r0, [sp, #20]
 80089c0:	f7ff f946 	bl	8007c50 <_Bfree>
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7ff f942 	bl	8007c50 <_Bfree>
 80089cc:	9805      	ldr	r0, [sp, #20]
 80089ce:	4641      	mov	r1, r8
 80089d0:	f7ff f93e 	bl	8007c50 <_Bfree>
 80089d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089d6:	9805      	ldr	r0, [sp, #20]
 80089d8:	f7ff f93a 	bl	8007c50 <_Bfree>
 80089dc:	9805      	ldr	r0, [sp, #20]
 80089de:	4621      	mov	r1, r4
 80089e0:	f7ff f936 	bl	8007c50 <_Bfree>
 80089e4:	e5f5      	b.n	80085d2 <_strtod_l+0x72>
 80089e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80089ec:	4293      	cmp	r3, r2
 80089ee:	dbbc      	blt.n	800896a <_strtod_l+0x40a>
 80089f0:	4c3f      	ldr	r4, [pc, #252]	@ (8008af0 <_strtod_l+0x590>)
 80089f2:	f1c5 050f 	rsb	r5, r5, #15
 80089f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089fa:	4652      	mov	r2, sl
 80089fc:	465b      	mov	r3, fp
 80089fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a02:	f7f7 fdf9 	bl	80005f8 <__aeabi_dmul>
 8008a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a08:	1b5d      	subs	r5, r3, r5
 8008a0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a12:	e78f      	b.n	8008934 <_strtod_l+0x3d4>
 8008a14:	3316      	adds	r3, #22
 8008a16:	dba8      	blt.n	800896a <_strtod_l+0x40a>
 8008a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a1a:	eba3 0808 	sub.w	r8, r3, r8
 8008a1e:	4b34      	ldr	r3, [pc, #208]	@ (8008af0 <_strtod_l+0x590>)
 8008a20:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a24:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a28:	4650      	mov	r0, sl
 8008a2a:	4659      	mov	r1, fp
 8008a2c:	f7f7 ff0e 	bl	800084c <__aeabi_ddiv>
 8008a30:	e782      	b.n	8008938 <_strtod_l+0x3d8>
 8008a32:	2300      	movs	r3, #0
 8008a34:	4f2f      	ldr	r7, [pc, #188]	@ (8008af4 <_strtod_l+0x594>)
 8008a36:	1124      	asrs	r4, r4, #4
 8008a38:	4650      	mov	r0, sl
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	461e      	mov	r6, r3
 8008a3e:	2c01      	cmp	r4, #1
 8008a40:	dc21      	bgt.n	8008a86 <_strtod_l+0x526>
 8008a42:	b10b      	cbz	r3, 8008a48 <_strtod_l+0x4e8>
 8008a44:	4682      	mov	sl, r0
 8008a46:	468b      	mov	fp, r1
 8008a48:	492a      	ldr	r1, [pc, #168]	@ (8008af4 <_strtod_l+0x594>)
 8008a4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	4b26      	ldr	r3, [pc, #152]	@ (8008af8 <_strtod_l+0x598>)
 8008a60:	460a      	mov	r2, r1
 8008a62:	400b      	ands	r3, r1
 8008a64:	4925      	ldr	r1, [pc, #148]	@ (8008afc <_strtod_l+0x59c>)
 8008a66:	428b      	cmp	r3, r1
 8008a68:	4682      	mov	sl, r0
 8008a6a:	d898      	bhi.n	800899e <_strtod_l+0x43e>
 8008a6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf86      	itte	hi
 8008a74:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008b00 <_strtod_l+0x5a0>
 8008a78:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a80:	2300      	movs	r3, #0
 8008a82:	9308      	str	r3, [sp, #32]
 8008a84:	e076      	b.n	8008b74 <_strtod_l+0x614>
 8008a86:	07e2      	lsls	r2, r4, #31
 8008a88:	d504      	bpl.n	8008a94 <_strtod_l+0x534>
 8008a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8e:	f7f7 fdb3 	bl	80005f8 <__aeabi_dmul>
 8008a92:	2301      	movs	r3, #1
 8008a94:	3601      	adds	r6, #1
 8008a96:	1064      	asrs	r4, r4, #1
 8008a98:	3708      	adds	r7, #8
 8008a9a:	e7d0      	b.n	8008a3e <_strtod_l+0x4de>
 8008a9c:	d0f0      	beq.n	8008a80 <_strtod_l+0x520>
 8008a9e:	4264      	negs	r4, r4
 8008aa0:	f014 020f 	ands.w	r2, r4, #15
 8008aa4:	d00a      	beq.n	8008abc <_strtod_l+0x55c>
 8008aa6:	4b12      	ldr	r3, [pc, #72]	@ (8008af0 <_strtod_l+0x590>)
 8008aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 feca 	bl	800084c <__aeabi_ddiv>
 8008ab8:	4682      	mov	sl, r0
 8008aba:	468b      	mov	fp, r1
 8008abc:	1124      	asrs	r4, r4, #4
 8008abe:	d0df      	beq.n	8008a80 <_strtod_l+0x520>
 8008ac0:	2c1f      	cmp	r4, #31
 8008ac2:	dd1f      	ble.n	8008b04 <_strtod_l+0x5a4>
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	46a0      	mov	r8, r4
 8008ac8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008aca:	46a1      	mov	r9, r4
 8008acc:	9a05      	ldr	r2, [sp, #20]
 8008ace:	2322      	movs	r3, #34	@ 0x22
 8008ad0:	f04f 0a00 	mov.w	sl, #0
 8008ad4:	f04f 0b00 	mov.w	fp, #0
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e76b      	b.n	80089b4 <_strtod_l+0x454>
 8008adc:	0800a435 	.word	0x0800a435
 8008ae0:	0800a700 	.word	0x0800a700
 8008ae4:	0800a42d 	.word	0x0800a42d
 8008ae8:	0800a464 	.word	0x0800a464
 8008aec:	0800a59d 	.word	0x0800a59d
 8008af0:	0800a638 	.word	0x0800a638
 8008af4:	0800a610 	.word	0x0800a610
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	7ca00000 	.word	0x7ca00000
 8008b00:	7fefffff 	.word	0x7fefffff
 8008b04:	f014 0310 	ands.w	r3, r4, #16
 8008b08:	bf18      	it	ne
 8008b0a:	236a      	movne	r3, #106	@ 0x6a
 8008b0c:	4ea9      	ldr	r6, [pc, #676]	@ (8008db4 <_strtod_l+0x854>)
 8008b0e:	9308      	str	r3, [sp, #32]
 8008b10:	4650      	mov	r0, sl
 8008b12:	4659      	mov	r1, fp
 8008b14:	2300      	movs	r3, #0
 8008b16:	07e7      	lsls	r7, r4, #31
 8008b18:	d504      	bpl.n	8008b24 <_strtod_l+0x5c4>
 8008b1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	2301      	movs	r3, #1
 8008b24:	1064      	asrs	r4, r4, #1
 8008b26:	f106 0608 	add.w	r6, r6, #8
 8008b2a:	d1f4      	bne.n	8008b16 <_strtod_l+0x5b6>
 8008b2c:	b10b      	cbz	r3, 8008b32 <_strtod_l+0x5d2>
 8008b2e:	4682      	mov	sl, r0
 8008b30:	468b      	mov	fp, r1
 8008b32:	9b08      	ldr	r3, [sp, #32]
 8008b34:	b1b3      	cbz	r3, 8008b64 <_strtod_l+0x604>
 8008b36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	4659      	mov	r1, fp
 8008b42:	dd0f      	ble.n	8008b64 <_strtod_l+0x604>
 8008b44:	2b1f      	cmp	r3, #31
 8008b46:	dd56      	ble.n	8008bf6 <_strtod_l+0x696>
 8008b48:	2b34      	cmp	r3, #52	@ 0x34
 8008b4a:	bfde      	ittt	le
 8008b4c:	f04f 33ff 	movle.w	r3, #4294967295
 8008b50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b54:	4093      	lslle	r3, r2
 8008b56:	f04f 0a00 	mov.w	sl, #0
 8008b5a:	bfcc      	ite	gt
 8008b5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b60:	ea03 0b01 	andle.w	fp, r3, r1
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	4650      	mov	r0, sl
 8008b6a:	4659      	mov	r1, fp
 8008b6c:	f7f7 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1a7      	bne.n	8008ac4 <_strtod_l+0x564>
 8008b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b7a:	9805      	ldr	r0, [sp, #20]
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	464a      	mov	r2, r9
 8008b80:	f7ff f8ce 	bl	8007d20 <__s2b>
 8008b84:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f43f af09 	beq.w	800899e <_strtod_l+0x43e>
 8008b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	eba3 0308 	sub.w	r3, r3, r8
 8008b96:	bfa8      	it	ge
 8008b98:	2300      	movge	r3, #0
 8008b9a:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b9c:	2400      	movs	r4, #0
 8008b9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ba2:	9316      	str	r3, [sp, #88]	@ 0x58
 8008ba4:	46a0      	mov	r8, r4
 8008ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ba8:	9805      	ldr	r0, [sp, #20]
 8008baa:	6859      	ldr	r1, [r3, #4]
 8008bac:	f7ff f810 	bl	8007bd0 <_Balloc>
 8008bb0:	4681      	mov	r9, r0
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f43f aef7 	beq.w	80089a6 <_strtod_l+0x446>
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	3202      	adds	r2, #2
 8008bbe:	f103 010c 	add.w	r1, r3, #12
 8008bc2:	0092      	lsls	r2, r2, #2
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f000 fd71 	bl	80096ac <memcpy>
 8008bca:	ec4b ab10 	vmov	d0, sl, fp
 8008bce:	9805      	ldr	r0, [sp, #20]
 8008bd0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bd2:	a91b      	add	r1, sp, #108	@ 0x6c
 8008bd4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bd8:	f7ff fbd6 	bl	8008388 <__d2b>
 8008bdc:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f43f aee1 	beq.w	80089a6 <_strtod_l+0x446>
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	2101      	movs	r1, #1
 8008be8:	f7ff f930 	bl	8007e4c <__i2b>
 8008bec:	4680      	mov	r8, r0
 8008bee:	b948      	cbnz	r0, 8008c04 <_strtod_l+0x6a4>
 8008bf0:	f04f 0800 	mov.w	r8, #0
 8008bf4:	e6d7      	b.n	80089a6 <_strtod_l+0x446>
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	ea03 0a0a 	and.w	sl, r3, sl
 8008c02:	e7af      	b.n	8008b64 <_strtod_l+0x604>
 8008c04:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008c06:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	bfab      	itete	ge
 8008c0c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c0e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c10:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c14:	bfac      	ite	ge
 8008c16:	18ef      	addge	r7, r5, r3
 8008c18:	1b5e      	sublt	r6, r3, r5
 8008c1a:	9b08      	ldr	r3, [sp, #32]
 8008c1c:	1aed      	subs	r5, r5, r3
 8008c1e:	4415      	add	r5, r2
 8008c20:	4b65      	ldr	r3, [pc, #404]	@ (8008db8 <_strtod_l+0x858>)
 8008c22:	3d01      	subs	r5, #1
 8008c24:	429d      	cmp	r5, r3
 8008c26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c2a:	da50      	bge.n	8008cce <_strtod_l+0x76e>
 8008c2c:	1b5b      	subs	r3, r3, r5
 8008c2e:	2b1f      	cmp	r3, #31
 8008c30:	eba2 0203 	sub.w	r2, r2, r3
 8008c34:	f04f 0101 	mov.w	r1, #1
 8008c38:	dc3d      	bgt.n	8008cb6 <_strtod_l+0x756>
 8008c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c40:	2300      	movs	r3, #0
 8008c42:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c44:	18bd      	adds	r5, r7, r2
 8008c46:	9b08      	ldr	r3, [sp, #32]
 8008c48:	42af      	cmp	r7, r5
 8008c4a:	4416      	add	r6, r2
 8008c4c:	441e      	add	r6, r3
 8008c4e:	463b      	mov	r3, r7
 8008c50:	bfa8      	it	ge
 8008c52:	462b      	movge	r3, r5
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	bfa8      	it	ge
 8008c58:	4633      	movge	r3, r6
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bfc2      	ittt	gt
 8008c5e:	1aed      	subgt	r5, r5, r3
 8008c60:	1af6      	subgt	r6, r6, r3
 8008c62:	1aff      	subgt	r7, r7, r3
 8008c64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dd16      	ble.n	8008c98 <_strtod_l+0x738>
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	9805      	ldr	r0, [sp, #20]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f7ff f9a4 	bl	8007fbc <__pow5mult>
 8008c74:	4680      	mov	r8, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d0ba      	beq.n	8008bf0 <_strtod_l+0x690>
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c7e:	9805      	ldr	r0, [sp, #20]
 8008c80:	f7ff f8fa 	bl	8007e78 <__multiply>
 8008c84:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f ae8d 	beq.w	80089a6 <_strtod_l+0x446>
 8008c8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c8e:	9805      	ldr	r0, [sp, #20]
 8008c90:	f7fe ffde 	bl	8007c50 <_Bfree>
 8008c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	dc1d      	bgt.n	8008cd8 <_strtod_l+0x778>
 8008c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd23      	ble.n	8008cea <_strtod_l+0x78a>
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ca6:	9805      	ldr	r0, [sp, #20]
 8008ca8:	f7ff f988 	bl	8007fbc <__pow5mult>
 8008cac:	4681      	mov	r9, r0
 8008cae:	b9e0      	cbnz	r0, 8008cea <_strtod_l+0x78a>
 8008cb0:	f04f 0900 	mov.w	r9, #0
 8008cb4:	e677      	b.n	80089a6 <_strtod_l+0x446>
 8008cb6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008cba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008cbe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008cc2:	35e2      	adds	r5, #226	@ 0xe2
 8008cc4:	fa01 f305 	lsl.w	r3, r1, r5
 8008cc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cca:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008ccc:	e7ba      	b.n	8008c44 <_strtod_l+0x6e4>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cd6:	e7b5      	b.n	8008c44 <_strtod_l+0x6e4>
 8008cd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cda:	9805      	ldr	r0, [sp, #20]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	f7ff f9c7 	bl	8008070 <__lshift>
 8008ce2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1d9      	bne.n	8008c9c <_strtod_l+0x73c>
 8008ce8:	e65d      	b.n	80089a6 <_strtod_l+0x446>
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	dd07      	ble.n	8008cfe <_strtod_l+0x79e>
 8008cee:	4649      	mov	r1, r9
 8008cf0:	9805      	ldr	r0, [sp, #20]
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	f7ff f9bc 	bl	8008070 <__lshift>
 8008cf8:	4681      	mov	r9, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0d8      	beq.n	8008cb0 <_strtod_l+0x750>
 8008cfe:	2f00      	cmp	r7, #0
 8008d00:	dd08      	ble.n	8008d14 <_strtod_l+0x7b4>
 8008d02:	4641      	mov	r1, r8
 8008d04:	9805      	ldr	r0, [sp, #20]
 8008d06:	463a      	mov	r2, r7
 8008d08:	f7ff f9b2 	bl	8008070 <__lshift>
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f ae49 	beq.w	80089a6 <_strtod_l+0x446>
 8008d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d16:	9805      	ldr	r0, [sp, #20]
 8008d18:	464a      	mov	r2, r9
 8008d1a:	f7ff fa31 	bl	8008180 <__mdiff>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f43f ae40 	beq.w	80089a6 <_strtod_l+0x446>
 8008d26:	68c3      	ldr	r3, [r0, #12]
 8008d28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60c3      	str	r3, [r0, #12]
 8008d2e:	4641      	mov	r1, r8
 8008d30:	f7ff fa0a 	bl	8008148 <__mcmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	da45      	bge.n	8008dc4 <_strtod_l+0x864>
 8008d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8008d3e:	d16b      	bne.n	8008e18 <_strtod_l+0x8b8>
 8008d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d167      	bne.n	8008e18 <_strtod_l+0x8b8>
 8008d48:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d4c:	0d1b      	lsrs	r3, r3, #20
 8008d4e:	051b      	lsls	r3, r3, #20
 8008d50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d54:	d960      	bls.n	8008e18 <_strtod_l+0x8b8>
 8008d56:	6963      	ldr	r3, [r4, #20]
 8008d58:	b913      	cbnz	r3, 8008d60 <_strtod_l+0x800>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	dd5b      	ble.n	8008e18 <_strtod_l+0x8b8>
 8008d60:	4621      	mov	r1, r4
 8008d62:	2201      	movs	r2, #1
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	f7ff f983 	bl	8008070 <__lshift>
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	f7ff f9eb 	bl	8008148 <__mcmp>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	dd50      	ble.n	8008e18 <_strtod_l+0x8b8>
 8008d76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d7a:	9a08      	ldr	r2, [sp, #32]
 8008d7c:	0d1b      	lsrs	r3, r3, #20
 8008d7e:	051b      	lsls	r3, r3, #20
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	d06a      	beq.n	8008e5a <_strtod_l+0x8fa>
 8008d84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d88:	d867      	bhi.n	8008e5a <_strtod_l+0x8fa>
 8008d8a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d8e:	f67f ae9d 	bls.w	8008acc <_strtod_l+0x56c>
 8008d92:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <_strtod_l+0x85c>)
 8008d94:	4650      	mov	r0, sl
 8008d96:	4659      	mov	r1, fp
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <_strtod_l+0x860>)
 8008da0:	400b      	ands	r3, r1
 8008da2:	4682      	mov	sl, r0
 8008da4:	468b      	mov	fp, r1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f47f ae08 	bne.w	80089bc <_strtod_l+0x45c>
 8008dac:	9a05      	ldr	r2, [sp, #20]
 8008dae:	2322      	movs	r3, #34	@ 0x22
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e603      	b.n	80089bc <_strtod_l+0x45c>
 8008db4:	0800a728 	.word	0x0800a728
 8008db8:	fffffc02 	.word	0xfffffc02
 8008dbc:	39500000 	.word	0x39500000
 8008dc0:	7ff00000 	.word	0x7ff00000
 8008dc4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008dc8:	d165      	bne.n	8008e96 <_strtod_l+0x936>
 8008dca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008dcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dd0:	b35a      	cbz	r2, 8008e2a <_strtod_l+0x8ca>
 8008dd2:	4a9f      	ldr	r2, [pc, #636]	@ (8009050 <_strtod_l+0xaf0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d12b      	bne.n	8008e30 <_strtod_l+0x8d0>
 8008dd8:	9b08      	ldr	r3, [sp, #32]
 8008dda:	4651      	mov	r1, sl
 8008ddc:	b303      	cbz	r3, 8008e20 <_strtod_l+0x8c0>
 8008dde:	4b9d      	ldr	r3, [pc, #628]	@ (8009054 <_strtod_l+0xaf4>)
 8008de0:	465a      	mov	r2, fp
 8008de2:	4013      	ands	r3, r2
 8008de4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dec:	d81b      	bhi.n	8008e26 <_strtod_l+0x8c6>
 8008dee:	0d1b      	lsrs	r3, r3, #20
 8008df0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d119      	bne.n	8008e30 <_strtod_l+0x8d0>
 8008dfc:	4b96      	ldr	r3, [pc, #600]	@ (8009058 <_strtod_l+0xaf8>)
 8008dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d102      	bne.n	8008e0a <_strtod_l+0x8aa>
 8008e04:	3101      	adds	r1, #1
 8008e06:	f43f adce 	beq.w	80089a6 <_strtod_l+0x446>
 8008e0a:	4b92      	ldr	r3, [pc, #584]	@ (8009054 <_strtod_l+0xaf4>)
 8008e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e0e:	401a      	ands	r2, r3
 8008e10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e14:	f04f 0a00 	mov.w	sl, #0
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1b9      	bne.n	8008d92 <_strtod_l+0x832>
 8008e1e:	e5cd      	b.n	80089bc <_strtod_l+0x45c>
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	e7e8      	b.n	8008df8 <_strtod_l+0x898>
 8008e26:	4613      	mov	r3, r2
 8008e28:	e7e6      	b.n	8008df8 <_strtod_l+0x898>
 8008e2a:	ea53 030a 	orrs.w	r3, r3, sl
 8008e2e:	d0a2      	beq.n	8008d76 <_strtod_l+0x816>
 8008e30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e32:	b1db      	cbz	r3, 8008e6c <_strtod_l+0x90c>
 8008e34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e36:	4213      	tst	r3, r2
 8008e38:	d0ee      	beq.n	8008e18 <_strtod_l+0x8b8>
 8008e3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e3c:	9a08      	ldr	r2, [sp, #32]
 8008e3e:	4650      	mov	r0, sl
 8008e40:	4659      	mov	r1, fp
 8008e42:	b1bb      	cbz	r3, 8008e74 <_strtod_l+0x914>
 8008e44:	f7ff fb6e 	bl	8008524 <sulp>
 8008e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e4c:	ec53 2b10 	vmov	r2, r3, d0
 8008e50:	f7f7 fa1c 	bl	800028c <__adddf3>
 8008e54:	4682      	mov	sl, r0
 8008e56:	468b      	mov	fp, r1
 8008e58:	e7de      	b.n	8008e18 <_strtod_l+0x8b8>
 8008e5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e66:	f04f 3aff 	mov.w	sl, #4294967295
 8008e6a:	e7d5      	b.n	8008e18 <_strtod_l+0x8b8>
 8008e6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e6e:	ea13 0f0a 	tst.w	r3, sl
 8008e72:	e7e1      	b.n	8008e38 <_strtod_l+0x8d8>
 8008e74:	f7ff fb56 	bl	8008524 <sulp>
 8008e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e7c:	ec53 2b10 	vmov	r2, r3, d0
 8008e80:	f7f7 fa02 	bl	8000288 <__aeabi_dsub>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4682      	mov	sl, r0
 8008e8a:	468b      	mov	fp, r1
 8008e8c:	f7f7 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d0c1      	beq.n	8008e18 <_strtod_l+0x8b8>
 8008e94:	e61a      	b.n	8008acc <_strtod_l+0x56c>
 8008e96:	4641      	mov	r1, r8
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7ff facd 	bl	8008438 <__ratio>
 8008e9e:	ec57 6b10 	vmov	r6, r7, d0
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 fe20 	bl	8000af0 <__aeabi_dcmple>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d06f      	beq.n	8008f94 <_strtod_l+0xa34>
 8008eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d17a      	bne.n	8008fb0 <_strtod_l+0xa50>
 8008eba:	f1ba 0f00 	cmp.w	sl, #0
 8008ebe:	d158      	bne.n	8008f72 <_strtod_l+0xa12>
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d15a      	bne.n	8008f80 <_strtod_l+0xa20>
 8008eca:	4b64      	ldr	r3, [pc, #400]	@ (800905c <_strtod_l+0xafc>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 fe03 	bl	8000adc <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d159      	bne.n	8008f8e <_strtod_l+0xa2e>
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	4b60      	ldr	r3, [pc, #384]	@ (8009060 <_strtod_l+0xb00>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7f7 fb89 	bl	80005f8 <__aeabi_dmul>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	460f      	mov	r7, r1
 8008eea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008eee:	9606      	str	r6, [sp, #24]
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef6:	4d57      	ldr	r5, [pc, #348]	@ (8009054 <_strtod_l+0xaf4>)
 8008ef8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efe:	401d      	ands	r5, r3
 8008f00:	4b58      	ldr	r3, [pc, #352]	@ (8009064 <_strtod_l+0xb04>)
 8008f02:	429d      	cmp	r5, r3
 8008f04:	f040 80b2 	bne.w	800906c <_strtod_l+0xb0c>
 8008f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f0e:	ec4b ab10 	vmov	d0, sl, fp
 8008f12:	f7ff f9c9 	bl	80082a8 <__ulp>
 8008f16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f1a:	ec51 0b10 	vmov	r0, r1, d0
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	4652      	mov	r2, sl
 8008f24:	465b      	mov	r3, fp
 8008f26:	f7f7 f9b1 	bl	800028c <__adddf3>
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4949      	ldr	r1, [pc, #292]	@ (8009054 <_strtod_l+0xaf4>)
 8008f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8009068 <_strtod_l+0xb08>)
 8008f30:	4019      	ands	r1, r3
 8008f32:	4291      	cmp	r1, r2
 8008f34:	4682      	mov	sl, r0
 8008f36:	d942      	bls.n	8008fbe <_strtod_l+0xa5e>
 8008f38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f3a:	4b47      	ldr	r3, [pc, #284]	@ (8009058 <_strtod_l+0xaf8>)
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d103      	bne.n	8008f48 <_strtod_l+0x9e8>
 8008f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f42:	3301      	adds	r3, #1
 8008f44:	f43f ad2f 	beq.w	80089a6 <_strtod_l+0x446>
 8008f48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009058 <_strtod_l+0xaf8>
 8008f4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f52:	9805      	ldr	r0, [sp, #20]
 8008f54:	f7fe fe7c 	bl	8007c50 <_Bfree>
 8008f58:	9805      	ldr	r0, [sp, #20]
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7fe fe78 	bl	8007c50 <_Bfree>
 8008f60:	9805      	ldr	r0, [sp, #20]
 8008f62:	4641      	mov	r1, r8
 8008f64:	f7fe fe74 	bl	8007c50 <_Bfree>
 8008f68:	9805      	ldr	r0, [sp, #20]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f7fe fe70 	bl	8007c50 <_Bfree>
 8008f70:	e619      	b.n	8008ba6 <_strtod_l+0x646>
 8008f72:	f1ba 0f01 	cmp.w	sl, #1
 8008f76:	d103      	bne.n	8008f80 <_strtod_l+0xa20>
 8008f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f43f ada6 	beq.w	8008acc <_strtod_l+0x56c>
 8008f80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009030 <_strtod_l+0xad0>
 8008f84:	4f35      	ldr	r7, [pc, #212]	@ (800905c <_strtod_l+0xafc>)
 8008f86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f8a:	2600      	movs	r6, #0
 8008f8c:	e7b1      	b.n	8008ef2 <_strtod_l+0x992>
 8008f8e:	4f34      	ldr	r7, [pc, #208]	@ (8009060 <_strtod_l+0xb00>)
 8008f90:	2600      	movs	r6, #0
 8008f92:	e7aa      	b.n	8008eea <_strtod_l+0x98a>
 8008f94:	4b32      	ldr	r3, [pc, #200]	@ (8009060 <_strtod_l+0xb00>)
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d09f      	beq.n	8008eea <_strtod_l+0x98a>
 8008faa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008fae:	e7a0      	b.n	8008ef2 <_strtod_l+0x992>
 8008fb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009038 <_strtod_l+0xad8>
 8008fb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fb8:	ec57 6b17 	vmov	r6, r7, d7
 8008fbc:	e799      	b.n	8008ef2 <_strtod_l+0x992>
 8008fbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008fc2:	9b08      	ldr	r3, [sp, #32]
 8008fc4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1c1      	bne.n	8008f50 <_strtod_l+0x9f0>
 8008fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fd0:	0d1b      	lsrs	r3, r3, #20
 8008fd2:	051b      	lsls	r3, r3, #20
 8008fd4:	429d      	cmp	r5, r3
 8008fd6:	d1bb      	bne.n	8008f50 <_strtod_l+0x9f0>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f7f7 fe6c 	bl	8000cb8 <__aeabi_d2lz>
 8008fe0:	f7f7 fadc 	bl	800059c <__aeabi_l2d>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 f94c 	bl	8000288 <__aeabi_dsub>
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ff8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	ea46 060a 	orr.w	r6, r6, sl
 8009002:	431e      	orrs	r6, r3
 8009004:	d06f      	beq.n	80090e6 <_strtod_l+0xb86>
 8009006:	a30e      	add	r3, pc, #56	@ (adr r3, 8009040 <_strtod_l+0xae0>)
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f7f7 fd66 	bl	8000adc <__aeabi_dcmplt>
 8009010:	2800      	cmp	r0, #0
 8009012:	f47f acd3 	bne.w	80089bc <_strtod_l+0x45c>
 8009016:	a30c      	add	r3, pc, #48	@ (adr r3, 8009048 <_strtod_l+0xae8>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009020:	f7f7 fd7a 	bl	8000b18 <__aeabi_dcmpgt>
 8009024:	2800      	cmp	r0, #0
 8009026:	d093      	beq.n	8008f50 <_strtod_l+0x9f0>
 8009028:	e4c8      	b.n	80089bc <_strtod_l+0x45c>
 800902a:	bf00      	nop
 800902c:	f3af 8000 	nop.w
 8009030:	00000000 	.word	0x00000000
 8009034:	bff00000 	.word	0xbff00000
 8009038:	00000000 	.word	0x00000000
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	94a03595 	.word	0x94a03595
 8009044:	3fdfffff 	.word	0x3fdfffff
 8009048:	35afe535 	.word	0x35afe535
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	000fffff 	.word	0x000fffff
 8009054:	7ff00000 	.word	0x7ff00000
 8009058:	7fefffff 	.word	0x7fefffff
 800905c:	3ff00000 	.word	0x3ff00000
 8009060:	3fe00000 	.word	0x3fe00000
 8009064:	7fe00000 	.word	0x7fe00000
 8009068:	7c9fffff 	.word	0x7c9fffff
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	b323      	cbz	r3, 80090ba <_strtod_l+0xb5a>
 8009070:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009074:	d821      	bhi.n	80090ba <_strtod_l+0xb5a>
 8009076:	a328      	add	r3, pc, #160	@ (adr r3, 8009118 <_strtod_l+0xbb8>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 fd36 	bl	8000af0 <__aeabi_dcmple>
 8009084:	b1a0      	cbz	r0, 80090b0 <_strtod_l+0xb50>
 8009086:	4639      	mov	r1, r7
 8009088:	4630      	mov	r0, r6
 800908a:	f7f7 fd8d 	bl	8000ba8 <__aeabi_d2uiz>
 800908e:	2801      	cmp	r0, #1
 8009090:	bf38      	it	cc
 8009092:	2001      	movcc	r0, #1
 8009094:	f7f7 fa36 	bl	8000504 <__aeabi_ui2d>
 8009098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	b9fb      	cbnz	r3, 80090e0 <_strtod_l+0xb80>
 80090a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80090a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80090a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80090ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80090b6:	1b5b      	subs	r3, r3, r5
 80090b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80090ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80090c2:	f7ff f8f1 	bl	80082a8 <__ulp>
 80090c6:	4650      	mov	r0, sl
 80090c8:	ec53 2b10 	vmov	r2, r3, d0
 80090cc:	4659      	mov	r1, fp
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090d6:	f7f7 f8d9 	bl	800028c <__adddf3>
 80090da:	4682      	mov	sl, r0
 80090dc:	468b      	mov	fp, r1
 80090de:	e770      	b.n	8008fc2 <_strtod_l+0xa62>
 80090e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80090e4:	e7e0      	b.n	80090a8 <_strtod_l+0xb48>
 80090e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009120 <_strtod_l+0xbc0>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 fcf6 	bl	8000adc <__aeabi_dcmplt>
 80090f0:	e798      	b.n	8009024 <_strtod_l+0xac4>
 80090f2:	2300      	movs	r3, #0
 80090f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80090f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	f7ff ba6d 	b.w	80085da <_strtod_l+0x7a>
 8009100:	2a65      	cmp	r2, #101	@ 0x65
 8009102:	f43f ab68 	beq.w	80087d6 <_strtod_l+0x276>
 8009106:	2a45      	cmp	r2, #69	@ 0x45
 8009108:	f43f ab65 	beq.w	80087d6 <_strtod_l+0x276>
 800910c:	2301      	movs	r3, #1
 800910e:	f7ff bba0 	b.w	8008852 <_strtod_l+0x2f2>
 8009112:	bf00      	nop
 8009114:	f3af 8000 	nop.w
 8009118:	ffc00000 	.word	0xffc00000
 800911c:	41dfffff 	.word	0x41dfffff
 8009120:	94a03595 	.word	0x94a03595
 8009124:	3fcfffff 	.word	0x3fcfffff

08009128 <_strtod_r>:
 8009128:	4b01      	ldr	r3, [pc, #4]	@ (8009130 <_strtod_r+0x8>)
 800912a:	f7ff ba19 	b.w	8008560 <_strtod_l>
 800912e:	bf00      	nop
 8009130:	20000074 	.word	0x20000074

08009134 <_strtol_l.isra.0>:
 8009134:	2b24      	cmp	r3, #36	@ 0x24
 8009136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913a:	4686      	mov	lr, r0
 800913c:	4690      	mov	r8, r2
 800913e:	d801      	bhi.n	8009144 <_strtol_l.isra.0+0x10>
 8009140:	2b01      	cmp	r3, #1
 8009142:	d106      	bne.n	8009152 <_strtol_l.isra.0+0x1e>
 8009144:	f7fd fdb6 	bl	8006cb4 <__errno>
 8009148:	2316      	movs	r3, #22
 800914a:	6003      	str	r3, [r0, #0]
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009152:	4834      	ldr	r0, [pc, #208]	@ (8009224 <_strtol_l.isra.0+0xf0>)
 8009154:	460d      	mov	r5, r1
 8009156:	462a      	mov	r2, r5
 8009158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800915c:	5d06      	ldrb	r6, [r0, r4]
 800915e:	f016 0608 	ands.w	r6, r6, #8
 8009162:	d1f8      	bne.n	8009156 <_strtol_l.isra.0+0x22>
 8009164:	2c2d      	cmp	r4, #45	@ 0x2d
 8009166:	d110      	bne.n	800918a <_strtol_l.isra.0+0x56>
 8009168:	782c      	ldrb	r4, [r5, #0]
 800916a:	2601      	movs	r6, #1
 800916c:	1c95      	adds	r5, r2, #2
 800916e:	f033 0210 	bics.w	r2, r3, #16
 8009172:	d115      	bne.n	80091a0 <_strtol_l.isra.0+0x6c>
 8009174:	2c30      	cmp	r4, #48	@ 0x30
 8009176:	d10d      	bne.n	8009194 <_strtol_l.isra.0+0x60>
 8009178:	782a      	ldrb	r2, [r5, #0]
 800917a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800917e:	2a58      	cmp	r2, #88	@ 0x58
 8009180:	d108      	bne.n	8009194 <_strtol_l.isra.0+0x60>
 8009182:	786c      	ldrb	r4, [r5, #1]
 8009184:	3502      	adds	r5, #2
 8009186:	2310      	movs	r3, #16
 8009188:	e00a      	b.n	80091a0 <_strtol_l.isra.0+0x6c>
 800918a:	2c2b      	cmp	r4, #43	@ 0x2b
 800918c:	bf04      	itt	eq
 800918e:	782c      	ldrbeq	r4, [r5, #0]
 8009190:	1c95      	addeq	r5, r2, #2
 8009192:	e7ec      	b.n	800916e <_strtol_l.isra.0+0x3a>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f6      	bne.n	8009186 <_strtol_l.isra.0+0x52>
 8009198:	2c30      	cmp	r4, #48	@ 0x30
 800919a:	bf14      	ite	ne
 800919c:	230a      	movne	r3, #10
 800919e:	2308      	moveq	r3, #8
 80091a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80091a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091a8:	2200      	movs	r2, #0
 80091aa:	fbbc f9f3 	udiv	r9, ip, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80091b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80091b8:	2f09      	cmp	r7, #9
 80091ba:	d80f      	bhi.n	80091dc <_strtol_l.isra.0+0xa8>
 80091bc:	463c      	mov	r4, r7
 80091be:	42a3      	cmp	r3, r4
 80091c0:	dd1b      	ble.n	80091fa <_strtol_l.isra.0+0xc6>
 80091c2:	1c57      	adds	r7, r2, #1
 80091c4:	d007      	beq.n	80091d6 <_strtol_l.isra.0+0xa2>
 80091c6:	4581      	cmp	r9, r0
 80091c8:	d314      	bcc.n	80091f4 <_strtol_l.isra.0+0xc0>
 80091ca:	d101      	bne.n	80091d0 <_strtol_l.isra.0+0x9c>
 80091cc:	45a2      	cmp	sl, r4
 80091ce:	db11      	blt.n	80091f4 <_strtol_l.isra.0+0xc0>
 80091d0:	fb00 4003 	mla	r0, r0, r3, r4
 80091d4:	2201      	movs	r2, #1
 80091d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091da:	e7eb      	b.n	80091b4 <_strtol_l.isra.0+0x80>
 80091dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80091e0:	2f19      	cmp	r7, #25
 80091e2:	d801      	bhi.n	80091e8 <_strtol_l.isra.0+0xb4>
 80091e4:	3c37      	subs	r4, #55	@ 0x37
 80091e6:	e7ea      	b.n	80091be <_strtol_l.isra.0+0x8a>
 80091e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80091ec:	2f19      	cmp	r7, #25
 80091ee:	d804      	bhi.n	80091fa <_strtol_l.isra.0+0xc6>
 80091f0:	3c57      	subs	r4, #87	@ 0x57
 80091f2:	e7e4      	b.n	80091be <_strtol_l.isra.0+0x8a>
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	e7ed      	b.n	80091d6 <_strtol_l.isra.0+0xa2>
 80091fa:	1c53      	adds	r3, r2, #1
 80091fc:	d108      	bne.n	8009210 <_strtol_l.isra.0+0xdc>
 80091fe:	2322      	movs	r3, #34	@ 0x22
 8009200:	f8ce 3000 	str.w	r3, [lr]
 8009204:	4660      	mov	r0, ip
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	d0a0      	beq.n	800914e <_strtol_l.isra.0+0x1a>
 800920c:	1e69      	subs	r1, r5, #1
 800920e:	e006      	b.n	800921e <_strtol_l.isra.0+0xea>
 8009210:	b106      	cbz	r6, 8009214 <_strtol_l.isra.0+0xe0>
 8009212:	4240      	negs	r0, r0
 8009214:	f1b8 0f00 	cmp.w	r8, #0
 8009218:	d099      	beq.n	800914e <_strtol_l.isra.0+0x1a>
 800921a:	2a00      	cmp	r2, #0
 800921c:	d1f6      	bne.n	800920c <_strtol_l.isra.0+0xd8>
 800921e:	f8c8 1000 	str.w	r1, [r8]
 8009222:	e794      	b.n	800914e <_strtol_l.isra.0+0x1a>
 8009224:	0800a751 	.word	0x0800a751

08009228 <_strtol_r>:
 8009228:	f7ff bf84 	b.w	8009134 <_strtol_l.isra.0>

0800922c <__ssputs_r>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	688e      	ldr	r6, [r1, #8]
 8009232:	461f      	mov	r7, r3
 8009234:	42be      	cmp	r6, r7
 8009236:	680b      	ldr	r3, [r1, #0]
 8009238:	4682      	mov	sl, r0
 800923a:	460c      	mov	r4, r1
 800923c:	4690      	mov	r8, r2
 800923e:	d82d      	bhi.n	800929c <__ssputs_r+0x70>
 8009240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009248:	d026      	beq.n	8009298 <__ssputs_r+0x6c>
 800924a:	6965      	ldr	r5, [r4, #20]
 800924c:	6909      	ldr	r1, [r1, #16]
 800924e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009252:	eba3 0901 	sub.w	r9, r3, r1
 8009256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800925a:	1c7b      	adds	r3, r7, #1
 800925c:	444b      	add	r3, r9
 800925e:	106d      	asrs	r5, r5, #1
 8009260:	429d      	cmp	r5, r3
 8009262:	bf38      	it	cc
 8009264:	461d      	movcc	r5, r3
 8009266:	0553      	lsls	r3, r2, #21
 8009268:	d527      	bpl.n	80092ba <__ssputs_r+0x8e>
 800926a:	4629      	mov	r1, r5
 800926c:	f7fe fc24 	bl	8007ab8 <_malloc_r>
 8009270:	4606      	mov	r6, r0
 8009272:	b360      	cbz	r0, 80092ce <__ssputs_r+0xa2>
 8009274:	6921      	ldr	r1, [r4, #16]
 8009276:	464a      	mov	r2, r9
 8009278:	f000 fa18 	bl	80096ac <memcpy>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	6126      	str	r6, [r4, #16]
 800928a:	6165      	str	r5, [r4, #20]
 800928c:	444e      	add	r6, r9
 800928e:	eba5 0509 	sub.w	r5, r5, r9
 8009292:	6026      	str	r6, [r4, #0]
 8009294:	60a5      	str	r5, [r4, #8]
 8009296:	463e      	mov	r6, r7
 8009298:	42be      	cmp	r6, r7
 800929a:	d900      	bls.n	800929e <__ssputs_r+0x72>
 800929c:	463e      	mov	r6, r7
 800929e:	6820      	ldr	r0, [r4, #0]
 80092a0:	4632      	mov	r2, r6
 80092a2:	4641      	mov	r1, r8
 80092a4:	f000 f9c6 	bl	8009634 <memmove>
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	1b9b      	subs	r3, r3, r6
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	4433      	add	r3, r6
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	2000      	movs	r0, #0
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ba:	462a      	mov	r2, r5
 80092bc:	f000 fd89 	bl	8009dd2 <_realloc_r>
 80092c0:	4606      	mov	r6, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d1e0      	bne.n	8009288 <__ssputs_r+0x5c>
 80092c6:	6921      	ldr	r1, [r4, #16]
 80092c8:	4650      	mov	r0, sl
 80092ca:	f7fe fb81 	bl	80079d0 <_free_r>
 80092ce:	230c      	movs	r3, #12
 80092d0:	f8ca 3000 	str.w	r3, [sl]
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e7e9      	b.n	80092b6 <__ssputs_r+0x8a>
	...

080092e4 <_svfiprintf_r>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4698      	mov	r8, r3
 80092ea:	898b      	ldrh	r3, [r1, #12]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	b09d      	sub	sp, #116	@ 0x74
 80092f0:	4607      	mov	r7, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	d510      	bpl.n	800931a <_svfiprintf_r+0x36>
 80092f8:	690b      	ldr	r3, [r1, #16]
 80092fa:	b973      	cbnz	r3, 800931a <_svfiprintf_r+0x36>
 80092fc:	2140      	movs	r1, #64	@ 0x40
 80092fe:	f7fe fbdb 	bl	8007ab8 <_malloc_r>
 8009302:	6028      	str	r0, [r5, #0]
 8009304:	6128      	str	r0, [r5, #16]
 8009306:	b930      	cbnz	r0, 8009316 <_svfiprintf_r+0x32>
 8009308:	230c      	movs	r3, #12
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	b01d      	add	sp, #116	@ 0x74
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	2340      	movs	r3, #64	@ 0x40
 8009318:	616b      	str	r3, [r5, #20]
 800931a:	2300      	movs	r3, #0
 800931c:	9309      	str	r3, [sp, #36]	@ 0x24
 800931e:	2320      	movs	r3, #32
 8009320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009324:	f8cd 800c 	str.w	r8, [sp, #12]
 8009328:	2330      	movs	r3, #48	@ 0x30
 800932a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094c8 <_svfiprintf_r+0x1e4>
 800932e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009332:	f04f 0901 	mov.w	r9, #1
 8009336:	4623      	mov	r3, r4
 8009338:	469a      	mov	sl, r3
 800933a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933e:	b10a      	cbz	r2, 8009344 <_svfiprintf_r+0x60>
 8009340:	2a25      	cmp	r2, #37	@ 0x25
 8009342:	d1f9      	bne.n	8009338 <_svfiprintf_r+0x54>
 8009344:	ebba 0b04 	subs.w	fp, sl, r4
 8009348:	d00b      	beq.n	8009362 <_svfiprintf_r+0x7e>
 800934a:	465b      	mov	r3, fp
 800934c:	4622      	mov	r2, r4
 800934e:	4629      	mov	r1, r5
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ff6b 	bl	800922c <__ssputs_r>
 8009356:	3001      	adds	r0, #1
 8009358:	f000 80a7 	beq.w	80094aa <_svfiprintf_r+0x1c6>
 800935c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800935e:	445a      	add	r2, fp
 8009360:	9209      	str	r2, [sp, #36]	@ 0x24
 8009362:	f89a 3000 	ldrb.w	r3, [sl]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 809f 	beq.w	80094aa <_svfiprintf_r+0x1c6>
 800936c:	2300      	movs	r3, #0
 800936e:	f04f 32ff 	mov.w	r2, #4294967295
 8009372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009376:	f10a 0a01 	add.w	sl, sl, #1
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009382:	931a      	str	r3, [sp, #104]	@ 0x68
 8009384:	4654      	mov	r4, sl
 8009386:	2205      	movs	r2, #5
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	484e      	ldr	r0, [pc, #312]	@ (80094c8 <_svfiprintf_r+0x1e4>)
 800938e:	f7f6 ff1f 	bl	80001d0 <memchr>
 8009392:	9a04      	ldr	r2, [sp, #16]
 8009394:	b9d8      	cbnz	r0, 80093ce <_svfiprintf_r+0xea>
 8009396:	06d0      	lsls	r0, r2, #27
 8009398:	bf44      	itt	mi
 800939a:	2320      	movmi	r3, #32
 800939c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a0:	0711      	lsls	r1, r2, #28
 80093a2:	bf44      	itt	mi
 80093a4:	232b      	movmi	r3, #43	@ 0x2b
 80093a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093aa:	f89a 3000 	ldrb.w	r3, [sl]
 80093ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b0:	d015      	beq.n	80093de <_svfiprintf_r+0xfa>
 80093b2:	9a07      	ldr	r2, [sp, #28]
 80093b4:	4654      	mov	r4, sl
 80093b6:	2000      	movs	r0, #0
 80093b8:	f04f 0c0a 	mov.w	ip, #10
 80093bc:	4621      	mov	r1, r4
 80093be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c2:	3b30      	subs	r3, #48	@ 0x30
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d94b      	bls.n	8009460 <_svfiprintf_r+0x17c>
 80093c8:	b1b0      	cbz	r0, 80093f8 <_svfiprintf_r+0x114>
 80093ca:	9207      	str	r2, [sp, #28]
 80093cc:	e014      	b.n	80093f8 <_svfiprintf_r+0x114>
 80093ce:	eba0 0308 	sub.w	r3, r0, r8
 80093d2:	fa09 f303 	lsl.w	r3, r9, r3
 80093d6:	4313      	orrs	r3, r2
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	46a2      	mov	sl, r4
 80093dc:	e7d2      	b.n	8009384 <_svfiprintf_r+0xa0>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d19      	adds	r1, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9103      	str	r1, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfbb      	ittet	lt
 80093ea:	425b      	neglt	r3, r3
 80093ec:	f042 0202 	orrlt.w	r2, r2, #2
 80093f0:	9307      	strge	r3, [sp, #28]
 80093f2:	9307      	strlt	r3, [sp, #28]
 80093f4:	bfb8      	it	lt
 80093f6:	9204      	strlt	r2, [sp, #16]
 80093f8:	7823      	ldrb	r3, [r4, #0]
 80093fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80093fc:	d10a      	bne.n	8009414 <_svfiprintf_r+0x130>
 80093fe:	7863      	ldrb	r3, [r4, #1]
 8009400:	2b2a      	cmp	r3, #42	@ 0x2a
 8009402:	d132      	bne.n	800946a <_svfiprintf_r+0x186>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	1d1a      	adds	r2, r3, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	9203      	str	r2, [sp, #12]
 800940c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009410:	3402      	adds	r4, #2
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094d8 <_svfiprintf_r+0x1f4>
 8009418:	7821      	ldrb	r1, [r4, #0]
 800941a:	2203      	movs	r2, #3
 800941c:	4650      	mov	r0, sl
 800941e:	f7f6 fed7 	bl	80001d0 <memchr>
 8009422:	b138      	cbz	r0, 8009434 <_svfiprintf_r+0x150>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	eba0 000a 	sub.w	r0, r0, sl
 800942a:	2240      	movs	r2, #64	@ 0x40
 800942c:	4082      	lsls	r2, r0
 800942e:	4313      	orrs	r3, r2
 8009430:	3401      	adds	r4, #1
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009438:	4824      	ldr	r0, [pc, #144]	@ (80094cc <_svfiprintf_r+0x1e8>)
 800943a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800943e:	2206      	movs	r2, #6
 8009440:	f7f6 fec6 	bl	80001d0 <memchr>
 8009444:	2800      	cmp	r0, #0
 8009446:	d036      	beq.n	80094b6 <_svfiprintf_r+0x1d2>
 8009448:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <_svfiprintf_r+0x1ec>)
 800944a:	bb1b      	cbnz	r3, 8009494 <_svfiprintf_r+0x1b0>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	3307      	adds	r3, #7
 8009450:	f023 0307 	bic.w	r3, r3, #7
 8009454:	3308      	adds	r3, #8
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800945a:	4433      	add	r3, r6
 800945c:	9309      	str	r3, [sp, #36]	@ 0x24
 800945e:	e76a      	b.n	8009336 <_svfiprintf_r+0x52>
 8009460:	fb0c 3202 	mla	r2, ip, r2, r3
 8009464:	460c      	mov	r4, r1
 8009466:	2001      	movs	r0, #1
 8009468:	e7a8      	b.n	80093bc <_svfiprintf_r+0xd8>
 800946a:	2300      	movs	r3, #0
 800946c:	3401      	adds	r4, #1
 800946e:	9305      	str	r3, [sp, #20]
 8009470:	4619      	mov	r1, r3
 8009472:	f04f 0c0a 	mov.w	ip, #10
 8009476:	4620      	mov	r0, r4
 8009478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947c:	3a30      	subs	r2, #48	@ 0x30
 800947e:	2a09      	cmp	r2, #9
 8009480:	d903      	bls.n	800948a <_svfiprintf_r+0x1a6>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0c6      	beq.n	8009414 <_svfiprintf_r+0x130>
 8009486:	9105      	str	r1, [sp, #20]
 8009488:	e7c4      	b.n	8009414 <_svfiprintf_r+0x130>
 800948a:	fb0c 2101 	mla	r1, ip, r1, r2
 800948e:	4604      	mov	r4, r0
 8009490:	2301      	movs	r3, #1
 8009492:	e7f0      	b.n	8009476 <_svfiprintf_r+0x192>
 8009494:	ab03      	add	r3, sp, #12
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	462a      	mov	r2, r5
 800949a:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <_svfiprintf_r+0x1f0>)
 800949c:	a904      	add	r1, sp, #16
 800949e:	4638      	mov	r0, r7
 80094a0:	f7fc fcca 	bl	8005e38 <_printf_float>
 80094a4:	1c42      	adds	r2, r0, #1
 80094a6:	4606      	mov	r6, r0
 80094a8:	d1d6      	bne.n	8009458 <_svfiprintf_r+0x174>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	065b      	lsls	r3, r3, #25
 80094ae:	f53f af2d 	bmi.w	800930c <_svfiprintf_r+0x28>
 80094b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094b4:	e72c      	b.n	8009310 <_svfiprintf_r+0x2c>
 80094b6:	ab03      	add	r3, sp, #12
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	462a      	mov	r2, r5
 80094bc:	4b05      	ldr	r3, [pc, #20]	@ (80094d4 <_svfiprintf_r+0x1f0>)
 80094be:	a904      	add	r1, sp, #16
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7fc ff51 	bl	8006368 <_printf_i>
 80094c6:	e7ed      	b.n	80094a4 <_svfiprintf_r+0x1c0>
 80094c8:	0800a549 	.word	0x0800a549
 80094cc:	0800a553 	.word	0x0800a553
 80094d0:	08005e39 	.word	0x08005e39
 80094d4:	0800922d 	.word	0x0800922d
 80094d8:	0800a54f 	.word	0x0800a54f

080094dc <__sflush_r>:
 80094dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	0716      	lsls	r6, r2, #28
 80094e6:	4605      	mov	r5, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	d454      	bmi.n	8009596 <__sflush_r+0xba>
 80094ec:	684b      	ldr	r3, [r1, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dc02      	bgt.n	80094f8 <__sflush_r+0x1c>
 80094f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd48      	ble.n	800958a <__sflush_r+0xae>
 80094f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	d045      	beq.n	800958a <__sflush_r+0xae>
 80094fe:	2300      	movs	r3, #0
 8009500:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009504:	682f      	ldr	r7, [r5, #0]
 8009506:	6a21      	ldr	r1, [r4, #32]
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	d030      	beq.n	800956e <__sflush_r+0x92>
 800950c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	0759      	lsls	r1, r3, #29
 8009512:	d505      	bpl.n	8009520 <__sflush_r+0x44>
 8009514:	6863      	ldr	r3, [r4, #4]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800951a:	b10b      	cbz	r3, 8009520 <__sflush_r+0x44>
 800951c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009524:	6a21      	ldr	r1, [r4, #32]
 8009526:	4628      	mov	r0, r5
 8009528:	47b0      	blx	r6
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	d106      	bne.n	800953e <__sflush_r+0x62>
 8009530:	6829      	ldr	r1, [r5, #0]
 8009532:	291d      	cmp	r1, #29
 8009534:	d82b      	bhi.n	800958e <__sflush_r+0xb2>
 8009536:	4a2a      	ldr	r2, [pc, #168]	@ (80095e0 <__sflush_r+0x104>)
 8009538:	40ca      	lsrs	r2, r1
 800953a:	07d6      	lsls	r6, r2, #31
 800953c:	d527      	bpl.n	800958e <__sflush_r+0xb2>
 800953e:	2200      	movs	r2, #0
 8009540:	6062      	str	r2, [r4, #4]
 8009542:	04d9      	lsls	r1, r3, #19
 8009544:	6922      	ldr	r2, [r4, #16]
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	d504      	bpl.n	8009554 <__sflush_r+0x78>
 800954a:	1c42      	adds	r2, r0, #1
 800954c:	d101      	bne.n	8009552 <__sflush_r+0x76>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b903      	cbnz	r3, 8009554 <__sflush_r+0x78>
 8009552:	6560      	str	r0, [r4, #84]	@ 0x54
 8009554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009556:	602f      	str	r7, [r5, #0]
 8009558:	b1b9      	cbz	r1, 800958a <__sflush_r+0xae>
 800955a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800955e:	4299      	cmp	r1, r3
 8009560:	d002      	beq.n	8009568 <__sflush_r+0x8c>
 8009562:	4628      	mov	r0, r5
 8009564:	f7fe fa34 	bl	80079d0 <_free_r>
 8009568:	2300      	movs	r3, #0
 800956a:	6363      	str	r3, [r4, #52]	@ 0x34
 800956c:	e00d      	b.n	800958a <__sflush_r+0xae>
 800956e:	2301      	movs	r3, #1
 8009570:	4628      	mov	r0, r5
 8009572:	47b0      	blx	r6
 8009574:	4602      	mov	r2, r0
 8009576:	1c50      	adds	r0, r2, #1
 8009578:	d1c9      	bne.n	800950e <__sflush_r+0x32>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0c6      	beq.n	800950e <__sflush_r+0x32>
 8009580:	2b1d      	cmp	r3, #29
 8009582:	d001      	beq.n	8009588 <__sflush_r+0xac>
 8009584:	2b16      	cmp	r3, #22
 8009586:	d11e      	bne.n	80095c6 <__sflush_r+0xea>
 8009588:	602f      	str	r7, [r5, #0]
 800958a:	2000      	movs	r0, #0
 800958c:	e022      	b.n	80095d4 <__sflush_r+0xf8>
 800958e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009592:	b21b      	sxth	r3, r3
 8009594:	e01b      	b.n	80095ce <__sflush_r+0xf2>
 8009596:	690f      	ldr	r7, [r1, #16]
 8009598:	2f00      	cmp	r7, #0
 800959a:	d0f6      	beq.n	800958a <__sflush_r+0xae>
 800959c:	0793      	lsls	r3, r2, #30
 800959e:	680e      	ldr	r6, [r1, #0]
 80095a0:	bf08      	it	eq
 80095a2:	694b      	ldreq	r3, [r1, #20]
 80095a4:	600f      	str	r7, [r1, #0]
 80095a6:	bf18      	it	ne
 80095a8:	2300      	movne	r3, #0
 80095aa:	eba6 0807 	sub.w	r8, r6, r7
 80095ae:	608b      	str	r3, [r1, #8]
 80095b0:	f1b8 0f00 	cmp.w	r8, #0
 80095b4:	dde9      	ble.n	800958a <__sflush_r+0xae>
 80095b6:	6a21      	ldr	r1, [r4, #32]
 80095b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095ba:	4643      	mov	r3, r8
 80095bc:	463a      	mov	r2, r7
 80095be:	4628      	mov	r0, r5
 80095c0:	47b0      	blx	r6
 80095c2:	2800      	cmp	r0, #0
 80095c4:	dc08      	bgt.n	80095d8 <__sflush_r+0xfc>
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d8:	4407      	add	r7, r0
 80095da:	eba8 0800 	sub.w	r8, r8, r0
 80095de:	e7e7      	b.n	80095b0 <__sflush_r+0xd4>
 80095e0:	20400001 	.word	0x20400001

080095e4 <_fflush_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	690b      	ldr	r3, [r1, #16]
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	b913      	cbnz	r3, 80095f4 <_fflush_r+0x10>
 80095ee:	2500      	movs	r5, #0
 80095f0:	4628      	mov	r0, r5
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	b118      	cbz	r0, 80095fe <_fflush_r+0x1a>
 80095f6:	6a03      	ldr	r3, [r0, #32]
 80095f8:	b90b      	cbnz	r3, 80095fe <_fflush_r+0x1a>
 80095fa:	f7fd fa6d 	bl	8006ad8 <__sinit>
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0f3      	beq.n	80095ee <_fflush_r+0xa>
 8009606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009608:	07d0      	lsls	r0, r2, #31
 800960a:	d404      	bmi.n	8009616 <_fflush_r+0x32>
 800960c:	0599      	lsls	r1, r3, #22
 800960e:	d402      	bmi.n	8009616 <_fflush_r+0x32>
 8009610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009612:	f7fd fb7a 	bl	8006d0a <__retarget_lock_acquire_recursive>
 8009616:	4628      	mov	r0, r5
 8009618:	4621      	mov	r1, r4
 800961a:	f7ff ff5f 	bl	80094dc <__sflush_r>
 800961e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009620:	07da      	lsls	r2, r3, #31
 8009622:	4605      	mov	r5, r0
 8009624:	d4e4      	bmi.n	80095f0 <_fflush_r+0xc>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	059b      	lsls	r3, r3, #22
 800962a:	d4e1      	bmi.n	80095f0 <_fflush_r+0xc>
 800962c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800962e:	f7fd fb6d 	bl	8006d0c <__retarget_lock_release_recursive>
 8009632:	e7dd      	b.n	80095f0 <_fflush_r+0xc>

08009634 <memmove>:
 8009634:	4288      	cmp	r0, r1
 8009636:	b510      	push	{r4, lr}
 8009638:	eb01 0402 	add.w	r4, r1, r2
 800963c:	d902      	bls.n	8009644 <memmove+0x10>
 800963e:	4284      	cmp	r4, r0
 8009640:	4623      	mov	r3, r4
 8009642:	d807      	bhi.n	8009654 <memmove+0x20>
 8009644:	1e43      	subs	r3, r0, #1
 8009646:	42a1      	cmp	r1, r4
 8009648:	d008      	beq.n	800965c <memmove+0x28>
 800964a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800964e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009652:	e7f8      	b.n	8009646 <memmove+0x12>
 8009654:	4402      	add	r2, r0
 8009656:	4601      	mov	r1, r0
 8009658:	428a      	cmp	r2, r1
 800965a:	d100      	bne.n	800965e <memmove+0x2a>
 800965c:	bd10      	pop	{r4, pc}
 800965e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009666:	e7f7      	b.n	8009658 <memmove+0x24>

08009668 <strncmp>:
 8009668:	b510      	push	{r4, lr}
 800966a:	b16a      	cbz	r2, 8009688 <strncmp+0x20>
 800966c:	3901      	subs	r1, #1
 800966e:	1884      	adds	r4, r0, r2
 8009670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009674:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009678:	429a      	cmp	r2, r3
 800967a:	d103      	bne.n	8009684 <strncmp+0x1c>
 800967c:	42a0      	cmp	r0, r4
 800967e:	d001      	beq.n	8009684 <strncmp+0x1c>
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1f5      	bne.n	8009670 <strncmp+0x8>
 8009684:	1ad0      	subs	r0, r2, r3
 8009686:	bd10      	pop	{r4, pc}
 8009688:	4610      	mov	r0, r2
 800968a:	e7fc      	b.n	8009686 <strncmp+0x1e>

0800968c <_sbrk_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d06      	ldr	r5, [pc, #24]	@ (80096a8 <_sbrk_r+0x1c>)
 8009690:	2300      	movs	r3, #0
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	602b      	str	r3, [r5, #0]
 8009698:	f7f8 fc4c 	bl	8001f34 <_sbrk>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d102      	bne.n	80096a6 <_sbrk_r+0x1a>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	b103      	cbz	r3, 80096a6 <_sbrk_r+0x1a>
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	2000074c 	.word	0x2000074c

080096ac <memcpy>:
 80096ac:	440a      	add	r2, r1
 80096ae:	4291      	cmp	r1, r2
 80096b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b4:	d100      	bne.n	80096b8 <memcpy+0xc>
 80096b6:	4770      	bx	lr
 80096b8:	b510      	push	{r4, lr}
 80096ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c2:	4291      	cmp	r1, r2
 80096c4:	d1f9      	bne.n	80096ba <memcpy+0xe>
 80096c6:	bd10      	pop	{r4, pc}

080096c8 <nan>:
 80096c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096d0 <nan+0x8>
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	00000000 	.word	0x00000000
 80096d4:	7ff80000 	.word	0x7ff80000

080096d8 <__assert_func>:
 80096d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096da:	4614      	mov	r4, r2
 80096dc:	461a      	mov	r2, r3
 80096de:	4b09      	ldr	r3, [pc, #36]	@ (8009704 <__assert_func+0x2c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4605      	mov	r5, r0
 80096e4:	68d8      	ldr	r0, [r3, #12]
 80096e6:	b14c      	cbz	r4, 80096fc <__assert_func+0x24>
 80096e8:	4b07      	ldr	r3, [pc, #28]	@ (8009708 <__assert_func+0x30>)
 80096ea:	9100      	str	r1, [sp, #0]
 80096ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096f0:	4906      	ldr	r1, [pc, #24]	@ (800970c <__assert_func+0x34>)
 80096f2:	462b      	mov	r3, r5
 80096f4:	f000 fba8 	bl	8009e48 <fiprintf>
 80096f8:	f000 fbb8 	bl	8009e6c <abort>
 80096fc:	4b04      	ldr	r3, [pc, #16]	@ (8009710 <__assert_func+0x38>)
 80096fe:	461c      	mov	r4, r3
 8009700:	e7f3      	b.n	80096ea <__assert_func+0x12>
 8009702:	bf00      	nop
 8009704:	20000024 	.word	0x20000024
 8009708:	0800a562 	.word	0x0800a562
 800970c:	0800a56f 	.word	0x0800a56f
 8009710:	0800a59d 	.word	0x0800a59d

08009714 <_calloc_r>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	fba1 5402 	umull	r5, r4, r1, r2
 800971a:	b934      	cbnz	r4, 800972a <_calloc_r+0x16>
 800971c:	4629      	mov	r1, r5
 800971e:	f7fe f9cb 	bl	8007ab8 <_malloc_r>
 8009722:	4606      	mov	r6, r0
 8009724:	b928      	cbnz	r0, 8009732 <_calloc_r+0x1e>
 8009726:	4630      	mov	r0, r6
 8009728:	bd70      	pop	{r4, r5, r6, pc}
 800972a:	220c      	movs	r2, #12
 800972c:	6002      	str	r2, [r0, #0]
 800972e:	2600      	movs	r6, #0
 8009730:	e7f9      	b.n	8009726 <_calloc_r+0x12>
 8009732:	462a      	mov	r2, r5
 8009734:	4621      	mov	r1, r4
 8009736:	f7fd fa6a 	bl	8006c0e <memset>
 800973a:	e7f4      	b.n	8009726 <_calloc_r+0x12>

0800973c <rshift>:
 800973c:	6903      	ldr	r3, [r0, #16]
 800973e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009746:	ea4f 1261 	mov.w	r2, r1, asr #5
 800974a:	f100 0414 	add.w	r4, r0, #20
 800974e:	dd45      	ble.n	80097dc <rshift+0xa0>
 8009750:	f011 011f 	ands.w	r1, r1, #31
 8009754:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009758:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800975c:	d10c      	bne.n	8009778 <rshift+0x3c>
 800975e:	f100 0710 	add.w	r7, r0, #16
 8009762:	4629      	mov	r1, r5
 8009764:	42b1      	cmp	r1, r6
 8009766:	d334      	bcc.n	80097d2 <rshift+0x96>
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	1eea      	subs	r2, r5, #3
 800976e:	4296      	cmp	r6, r2
 8009770:	bf38      	it	cc
 8009772:	2300      	movcc	r3, #0
 8009774:	4423      	add	r3, r4
 8009776:	e015      	b.n	80097a4 <rshift+0x68>
 8009778:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800977c:	f1c1 0820 	rsb	r8, r1, #32
 8009780:	40cf      	lsrs	r7, r1
 8009782:	f105 0e04 	add.w	lr, r5, #4
 8009786:	46a1      	mov	r9, r4
 8009788:	4576      	cmp	r6, lr
 800978a:	46f4      	mov	ip, lr
 800978c:	d815      	bhi.n	80097ba <rshift+0x7e>
 800978e:	1a9a      	subs	r2, r3, r2
 8009790:	0092      	lsls	r2, r2, #2
 8009792:	3a04      	subs	r2, #4
 8009794:	3501      	adds	r5, #1
 8009796:	42ae      	cmp	r6, r5
 8009798:	bf38      	it	cc
 800979a:	2200      	movcc	r2, #0
 800979c:	18a3      	adds	r3, r4, r2
 800979e:	50a7      	str	r7, [r4, r2]
 80097a0:	b107      	cbz	r7, 80097a4 <rshift+0x68>
 80097a2:	3304      	adds	r3, #4
 80097a4:	1b1a      	subs	r2, r3, r4
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097ac:	bf08      	it	eq
 80097ae:	2300      	moveq	r3, #0
 80097b0:	6102      	str	r2, [r0, #16]
 80097b2:	bf08      	it	eq
 80097b4:	6143      	streq	r3, [r0, #20]
 80097b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ba:	f8dc c000 	ldr.w	ip, [ip]
 80097be:	fa0c fc08 	lsl.w	ip, ip, r8
 80097c2:	ea4c 0707 	orr.w	r7, ip, r7
 80097c6:	f849 7b04 	str.w	r7, [r9], #4
 80097ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097ce:	40cf      	lsrs	r7, r1
 80097d0:	e7da      	b.n	8009788 <rshift+0x4c>
 80097d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80097d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80097da:	e7c3      	b.n	8009764 <rshift+0x28>
 80097dc:	4623      	mov	r3, r4
 80097de:	e7e1      	b.n	80097a4 <rshift+0x68>

080097e0 <__hexdig_fun>:
 80097e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80097e4:	2b09      	cmp	r3, #9
 80097e6:	d802      	bhi.n	80097ee <__hexdig_fun+0xe>
 80097e8:	3820      	subs	r0, #32
 80097ea:	b2c0      	uxtb	r0, r0
 80097ec:	4770      	bx	lr
 80097ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d801      	bhi.n	80097fa <__hexdig_fun+0x1a>
 80097f6:	3847      	subs	r0, #71	@ 0x47
 80097f8:	e7f7      	b.n	80097ea <__hexdig_fun+0xa>
 80097fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d801      	bhi.n	8009806 <__hexdig_fun+0x26>
 8009802:	3827      	subs	r0, #39	@ 0x27
 8009804:	e7f1      	b.n	80097ea <__hexdig_fun+0xa>
 8009806:	2000      	movs	r0, #0
 8009808:	4770      	bx	lr
	...

0800980c <__gethex>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	b085      	sub	sp, #20
 8009812:	468a      	mov	sl, r1
 8009814:	9302      	str	r3, [sp, #8]
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	9001      	str	r0, [sp, #4]
 800981a:	4690      	mov	r8, r2
 800981c:	1c9c      	adds	r4, r3, #2
 800981e:	46a1      	mov	r9, r4
 8009820:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009824:	2830      	cmp	r0, #48	@ 0x30
 8009826:	d0fa      	beq.n	800981e <__gethex+0x12>
 8009828:	eba9 0303 	sub.w	r3, r9, r3
 800982c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009830:	f7ff ffd6 	bl	80097e0 <__hexdig_fun>
 8009834:	4605      	mov	r5, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d168      	bne.n	800990c <__gethex+0x100>
 800983a:	49a0      	ldr	r1, [pc, #640]	@ (8009abc <__gethex+0x2b0>)
 800983c:	2201      	movs	r2, #1
 800983e:	4648      	mov	r0, r9
 8009840:	f7ff ff12 	bl	8009668 <strncmp>
 8009844:	4607      	mov	r7, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d167      	bne.n	800991a <__gethex+0x10e>
 800984a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800984e:	4626      	mov	r6, r4
 8009850:	f7ff ffc6 	bl	80097e0 <__hexdig_fun>
 8009854:	2800      	cmp	r0, #0
 8009856:	d062      	beq.n	800991e <__gethex+0x112>
 8009858:	4623      	mov	r3, r4
 800985a:	7818      	ldrb	r0, [r3, #0]
 800985c:	2830      	cmp	r0, #48	@ 0x30
 800985e:	4699      	mov	r9, r3
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	d0f9      	beq.n	800985a <__gethex+0x4e>
 8009866:	f7ff ffbb 	bl	80097e0 <__hexdig_fun>
 800986a:	fab0 f580 	clz	r5, r0
 800986e:	096d      	lsrs	r5, r5, #5
 8009870:	f04f 0b01 	mov.w	fp, #1
 8009874:	464a      	mov	r2, r9
 8009876:	4616      	mov	r6, r2
 8009878:	3201      	adds	r2, #1
 800987a:	7830      	ldrb	r0, [r6, #0]
 800987c:	f7ff ffb0 	bl	80097e0 <__hexdig_fun>
 8009880:	2800      	cmp	r0, #0
 8009882:	d1f8      	bne.n	8009876 <__gethex+0x6a>
 8009884:	498d      	ldr	r1, [pc, #564]	@ (8009abc <__gethex+0x2b0>)
 8009886:	2201      	movs	r2, #1
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff feed 	bl	8009668 <strncmp>
 800988e:	2800      	cmp	r0, #0
 8009890:	d13f      	bne.n	8009912 <__gethex+0x106>
 8009892:	b944      	cbnz	r4, 80098a6 <__gethex+0x9a>
 8009894:	1c74      	adds	r4, r6, #1
 8009896:	4622      	mov	r2, r4
 8009898:	4616      	mov	r6, r2
 800989a:	3201      	adds	r2, #1
 800989c:	7830      	ldrb	r0, [r6, #0]
 800989e:	f7ff ff9f 	bl	80097e0 <__hexdig_fun>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1f8      	bne.n	8009898 <__gethex+0x8c>
 80098a6:	1ba4      	subs	r4, r4, r6
 80098a8:	00a7      	lsls	r7, r4, #2
 80098aa:	7833      	ldrb	r3, [r6, #0]
 80098ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80098b0:	2b50      	cmp	r3, #80	@ 0x50
 80098b2:	d13e      	bne.n	8009932 <__gethex+0x126>
 80098b4:	7873      	ldrb	r3, [r6, #1]
 80098b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80098b8:	d033      	beq.n	8009922 <__gethex+0x116>
 80098ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80098bc:	d034      	beq.n	8009928 <__gethex+0x11c>
 80098be:	1c71      	adds	r1, r6, #1
 80098c0:	2400      	movs	r4, #0
 80098c2:	7808      	ldrb	r0, [r1, #0]
 80098c4:	f7ff ff8c 	bl	80097e0 <__hexdig_fun>
 80098c8:	1e43      	subs	r3, r0, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b18      	cmp	r3, #24
 80098ce:	d830      	bhi.n	8009932 <__gethex+0x126>
 80098d0:	f1a0 0210 	sub.w	r2, r0, #16
 80098d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098d8:	f7ff ff82 	bl	80097e0 <__hexdig_fun>
 80098dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80098e0:	fa5f fc8c 	uxtb.w	ip, ip
 80098e4:	f1bc 0f18 	cmp.w	ip, #24
 80098e8:	f04f 030a 	mov.w	r3, #10
 80098ec:	d91e      	bls.n	800992c <__gethex+0x120>
 80098ee:	b104      	cbz	r4, 80098f2 <__gethex+0xe6>
 80098f0:	4252      	negs	r2, r2
 80098f2:	4417      	add	r7, r2
 80098f4:	f8ca 1000 	str.w	r1, [sl]
 80098f8:	b1ed      	cbz	r5, 8009936 <__gethex+0x12a>
 80098fa:	f1bb 0f00 	cmp.w	fp, #0
 80098fe:	bf0c      	ite	eq
 8009900:	2506      	moveq	r5, #6
 8009902:	2500      	movne	r5, #0
 8009904:	4628      	mov	r0, r5
 8009906:	b005      	add	sp, #20
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	2500      	movs	r5, #0
 800990e:	462c      	mov	r4, r5
 8009910:	e7b0      	b.n	8009874 <__gethex+0x68>
 8009912:	2c00      	cmp	r4, #0
 8009914:	d1c7      	bne.n	80098a6 <__gethex+0x9a>
 8009916:	4627      	mov	r7, r4
 8009918:	e7c7      	b.n	80098aa <__gethex+0x9e>
 800991a:	464e      	mov	r6, r9
 800991c:	462f      	mov	r7, r5
 800991e:	2501      	movs	r5, #1
 8009920:	e7c3      	b.n	80098aa <__gethex+0x9e>
 8009922:	2400      	movs	r4, #0
 8009924:	1cb1      	adds	r1, r6, #2
 8009926:	e7cc      	b.n	80098c2 <__gethex+0xb6>
 8009928:	2401      	movs	r4, #1
 800992a:	e7fb      	b.n	8009924 <__gethex+0x118>
 800992c:	fb03 0002 	mla	r0, r3, r2, r0
 8009930:	e7ce      	b.n	80098d0 <__gethex+0xc4>
 8009932:	4631      	mov	r1, r6
 8009934:	e7de      	b.n	80098f4 <__gethex+0xe8>
 8009936:	eba6 0309 	sub.w	r3, r6, r9
 800993a:	3b01      	subs	r3, #1
 800993c:	4629      	mov	r1, r5
 800993e:	2b07      	cmp	r3, #7
 8009940:	dc0a      	bgt.n	8009958 <__gethex+0x14c>
 8009942:	9801      	ldr	r0, [sp, #4]
 8009944:	f7fe f944 	bl	8007bd0 <_Balloc>
 8009948:	4604      	mov	r4, r0
 800994a:	b940      	cbnz	r0, 800995e <__gethex+0x152>
 800994c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ac0 <__gethex+0x2b4>)
 800994e:	4602      	mov	r2, r0
 8009950:	21e4      	movs	r1, #228	@ 0xe4
 8009952:	485c      	ldr	r0, [pc, #368]	@ (8009ac4 <__gethex+0x2b8>)
 8009954:	f7ff fec0 	bl	80096d8 <__assert_func>
 8009958:	3101      	adds	r1, #1
 800995a:	105b      	asrs	r3, r3, #1
 800995c:	e7ef      	b.n	800993e <__gethex+0x132>
 800995e:	f100 0a14 	add.w	sl, r0, #20
 8009962:	2300      	movs	r3, #0
 8009964:	4655      	mov	r5, sl
 8009966:	469b      	mov	fp, r3
 8009968:	45b1      	cmp	r9, r6
 800996a:	d337      	bcc.n	80099dc <__gethex+0x1d0>
 800996c:	f845 bb04 	str.w	fp, [r5], #4
 8009970:	eba5 050a 	sub.w	r5, r5, sl
 8009974:	10ad      	asrs	r5, r5, #2
 8009976:	6125      	str	r5, [r4, #16]
 8009978:	4658      	mov	r0, fp
 800997a:	f7fe fa1b 	bl	8007db4 <__hi0bits>
 800997e:	016d      	lsls	r5, r5, #5
 8009980:	f8d8 6000 	ldr.w	r6, [r8]
 8009984:	1a2d      	subs	r5, r5, r0
 8009986:	42b5      	cmp	r5, r6
 8009988:	dd54      	ble.n	8009a34 <__gethex+0x228>
 800998a:	1bad      	subs	r5, r5, r6
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	f7fe fda7 	bl	80084e2 <__any_on>
 8009994:	4681      	mov	r9, r0
 8009996:	b178      	cbz	r0, 80099b8 <__gethex+0x1ac>
 8009998:	1e6b      	subs	r3, r5, #1
 800999a:	1159      	asrs	r1, r3, #5
 800999c:	f003 021f 	and.w	r2, r3, #31
 80099a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099a4:	f04f 0901 	mov.w	r9, #1
 80099a8:	fa09 f202 	lsl.w	r2, r9, r2
 80099ac:	420a      	tst	r2, r1
 80099ae:	d003      	beq.n	80099b8 <__gethex+0x1ac>
 80099b0:	454b      	cmp	r3, r9
 80099b2:	dc36      	bgt.n	8009a22 <__gethex+0x216>
 80099b4:	f04f 0902 	mov.w	r9, #2
 80099b8:	4629      	mov	r1, r5
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7ff febe 	bl	800973c <rshift>
 80099c0:	442f      	add	r7, r5
 80099c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099c6:	42bb      	cmp	r3, r7
 80099c8:	da42      	bge.n	8009a50 <__gethex+0x244>
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7fe f93f 	bl	8007c50 <_Bfree>
 80099d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d4:	2300      	movs	r3, #0
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	25a3      	movs	r5, #163	@ 0xa3
 80099da:	e793      	b.n	8009904 <__gethex+0xf8>
 80099dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80099e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80099e2:	d012      	beq.n	8009a0a <__gethex+0x1fe>
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d104      	bne.n	80099f2 <__gethex+0x1e6>
 80099e8:	f845 bb04 	str.w	fp, [r5], #4
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	465b      	mov	r3, fp
 80099f2:	7830      	ldrb	r0, [r6, #0]
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	f7ff fef3 	bl	80097e0 <__hexdig_fun>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	f000 000f 	and.w	r0, r0, #15
 8009a00:	4098      	lsls	r0, r3
 8009a02:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a06:	3304      	adds	r3, #4
 8009a08:	e7ae      	b.n	8009968 <__gethex+0x15c>
 8009a0a:	45b1      	cmp	r9, r6
 8009a0c:	d8ea      	bhi.n	80099e4 <__gethex+0x1d8>
 8009a0e:	492b      	ldr	r1, [pc, #172]	@ (8009abc <__gethex+0x2b0>)
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fe27 	bl	8009668 <strncmp>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1e1      	bne.n	80099e4 <__gethex+0x1d8>
 8009a20:	e7a2      	b.n	8009968 <__gethex+0x15c>
 8009a22:	1ea9      	subs	r1, r5, #2
 8009a24:	4620      	mov	r0, r4
 8009a26:	f7fe fd5c 	bl	80084e2 <__any_on>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d0c2      	beq.n	80099b4 <__gethex+0x1a8>
 8009a2e:	f04f 0903 	mov.w	r9, #3
 8009a32:	e7c1      	b.n	80099b8 <__gethex+0x1ac>
 8009a34:	da09      	bge.n	8009a4a <__gethex+0x23e>
 8009a36:	1b75      	subs	r5, r6, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	9801      	ldr	r0, [sp, #4]
 8009a3c:	462a      	mov	r2, r5
 8009a3e:	f7fe fb17 	bl	8008070 <__lshift>
 8009a42:	1b7f      	subs	r7, r7, r5
 8009a44:	4604      	mov	r4, r0
 8009a46:	f100 0a14 	add.w	sl, r0, #20
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	e7b8      	b.n	80099c2 <__gethex+0x1b6>
 8009a50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a54:	42bd      	cmp	r5, r7
 8009a56:	dd6f      	ble.n	8009b38 <__gethex+0x32c>
 8009a58:	1bed      	subs	r5, r5, r7
 8009a5a:	42ae      	cmp	r6, r5
 8009a5c:	dc34      	bgt.n	8009ac8 <__gethex+0x2bc>
 8009a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d022      	beq.n	8009aac <__gethex+0x2a0>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d024      	beq.n	8009ab4 <__gethex+0x2a8>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d115      	bne.n	8009a9a <__gethex+0x28e>
 8009a6e:	42ae      	cmp	r6, r5
 8009a70:	d113      	bne.n	8009a9a <__gethex+0x28e>
 8009a72:	2e01      	cmp	r6, #1
 8009a74:	d10b      	bne.n	8009a8e <__gethex+0x282>
 8009a76:	9a02      	ldr	r2, [sp, #8]
 8009a78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	f8ca 3000 	str.w	r3, [sl]
 8009a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a88:	2562      	movs	r5, #98	@ 0x62
 8009a8a:	601c      	str	r4, [r3, #0]
 8009a8c:	e73a      	b.n	8009904 <__gethex+0xf8>
 8009a8e:	1e71      	subs	r1, r6, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f7fe fd26 	bl	80084e2 <__any_on>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d1ed      	bne.n	8009a76 <__gethex+0x26a>
 8009a9a:	9801      	ldr	r0, [sp, #4]
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7fe f8d7 	bl	8007c50 <_Bfree>
 8009aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	2550      	movs	r5, #80	@ 0x50
 8009aaa:	e72b      	b.n	8009904 <__gethex+0xf8>
 8009aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f3      	bne.n	8009a9a <__gethex+0x28e>
 8009ab2:	e7e0      	b.n	8009a76 <__gethex+0x26a>
 8009ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1dd      	bne.n	8009a76 <__gethex+0x26a>
 8009aba:	e7ee      	b.n	8009a9a <__gethex+0x28e>
 8009abc:	0800a547 	.word	0x0800a547
 8009ac0:	0800a4dd 	.word	0x0800a4dd
 8009ac4:	0800a59e 	.word	0x0800a59e
 8009ac8:	1e6f      	subs	r7, r5, #1
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	d130      	bne.n	8009b32 <__gethex+0x326>
 8009ad0:	b127      	cbz	r7, 8009adc <__gethex+0x2d0>
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7fe fd04 	bl	80084e2 <__any_on>
 8009ada:	4681      	mov	r9, r0
 8009adc:	117a      	asrs	r2, r7, #5
 8009ade:	2301      	movs	r3, #1
 8009ae0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ae4:	f007 071f 	and.w	r7, r7, #31
 8009ae8:	40bb      	lsls	r3, r7
 8009aea:	4213      	tst	r3, r2
 8009aec:	4629      	mov	r1, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	bf18      	it	ne
 8009af2:	f049 0902 	orrne.w	r9, r9, #2
 8009af6:	f7ff fe21 	bl	800973c <rshift>
 8009afa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009afe:	1b76      	subs	r6, r6, r5
 8009b00:	2502      	movs	r5, #2
 8009b02:	f1b9 0f00 	cmp.w	r9, #0
 8009b06:	d047      	beq.n	8009b98 <__gethex+0x38c>
 8009b08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d015      	beq.n	8009b3c <__gethex+0x330>
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d017      	beq.n	8009b44 <__gethex+0x338>
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d109      	bne.n	8009b2c <__gethex+0x320>
 8009b18:	f019 0f02 	tst.w	r9, #2
 8009b1c:	d006      	beq.n	8009b2c <__gethex+0x320>
 8009b1e:	f8da 3000 	ldr.w	r3, [sl]
 8009b22:	ea49 0903 	orr.w	r9, r9, r3
 8009b26:	f019 0f01 	tst.w	r9, #1
 8009b2a:	d10e      	bne.n	8009b4a <__gethex+0x33e>
 8009b2c:	f045 0510 	orr.w	r5, r5, #16
 8009b30:	e032      	b.n	8009b98 <__gethex+0x38c>
 8009b32:	f04f 0901 	mov.w	r9, #1
 8009b36:	e7d1      	b.n	8009adc <__gethex+0x2d0>
 8009b38:	2501      	movs	r5, #1
 8009b3a:	e7e2      	b.n	8009b02 <__gethex+0x2f6>
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3e:	f1c3 0301 	rsb	r3, r3, #1
 8009b42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0f0      	beq.n	8009b2c <__gethex+0x320>
 8009b4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b4e:	f104 0314 	add.w	r3, r4, #20
 8009b52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b5a:	f04f 0c00 	mov.w	ip, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b68:	d01b      	beq.n	8009ba2 <__gethex+0x396>
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	6002      	str	r2, [r0, #0]
 8009b6e:	2d02      	cmp	r5, #2
 8009b70:	f104 0314 	add.w	r3, r4, #20
 8009b74:	d13c      	bne.n	8009bf0 <__gethex+0x3e4>
 8009b76:	f8d8 2000 	ldr.w	r2, [r8]
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	42b2      	cmp	r2, r6
 8009b7e:	d109      	bne.n	8009b94 <__gethex+0x388>
 8009b80:	1171      	asrs	r1, r6, #5
 8009b82:	2201      	movs	r2, #1
 8009b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b88:	f006 061f 	and.w	r6, r6, #31
 8009b8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009b90:	421e      	tst	r6, r3
 8009b92:	d13a      	bne.n	8009c0a <__gethex+0x3fe>
 8009b94:	f045 0520 	orr.w	r5, r5, #32
 8009b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9a:	601c      	str	r4, [r3, #0]
 8009b9c:	9b02      	ldr	r3, [sp, #8]
 8009b9e:	601f      	str	r7, [r3, #0]
 8009ba0:	e6b0      	b.n	8009904 <__gethex+0xf8>
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ba8:	d8d9      	bhi.n	8009b5e <__gethex+0x352>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	459b      	cmp	fp, r3
 8009bae:	db17      	blt.n	8009be0 <__gethex+0x3d4>
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	9801      	ldr	r0, [sp, #4]
 8009bb4:	3101      	adds	r1, #1
 8009bb6:	f7fe f80b 	bl	8007bd0 <_Balloc>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	b918      	cbnz	r0, 8009bc6 <__gethex+0x3ba>
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <__gethex+0x41c>)
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	2184      	movs	r1, #132	@ 0x84
 8009bc4:	e6c5      	b.n	8009952 <__gethex+0x146>
 8009bc6:	6922      	ldr	r2, [r4, #16]
 8009bc8:	3202      	adds	r2, #2
 8009bca:	f104 010c 	add.w	r1, r4, #12
 8009bce:	0092      	lsls	r2, r2, #2
 8009bd0:	300c      	adds	r0, #12
 8009bd2:	f7ff fd6b 	bl	80096ac <memcpy>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	9801      	ldr	r0, [sp, #4]
 8009bda:	f7fe f839 	bl	8007c50 <_Bfree>
 8009bde:	464c      	mov	r4, r9
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be8:	6122      	str	r2, [r4, #16]
 8009bea:	2201      	movs	r2, #1
 8009bec:	615a      	str	r2, [r3, #20]
 8009bee:	e7be      	b.n	8009b6e <__gethex+0x362>
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	455a      	cmp	r2, fp
 8009bf4:	dd0b      	ble.n	8009c0e <__gethex+0x402>
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fd9f 	bl	800973c <rshift>
 8009bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c02:	3701      	adds	r7, #1
 8009c04:	42bb      	cmp	r3, r7
 8009c06:	f6ff aee0 	blt.w	80099ca <__gethex+0x1be>
 8009c0a:	2501      	movs	r5, #1
 8009c0c:	e7c2      	b.n	8009b94 <__gethex+0x388>
 8009c0e:	f016 061f 	ands.w	r6, r6, #31
 8009c12:	d0fa      	beq.n	8009c0a <__gethex+0x3fe>
 8009c14:	4453      	add	r3, sl
 8009c16:	f1c6 0620 	rsb	r6, r6, #32
 8009c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c1e:	f7fe f8c9 	bl	8007db4 <__hi0bits>
 8009c22:	42b0      	cmp	r0, r6
 8009c24:	dbe7      	blt.n	8009bf6 <__gethex+0x3ea>
 8009c26:	e7f0      	b.n	8009c0a <__gethex+0x3fe>
 8009c28:	0800a4dd 	.word	0x0800a4dd

08009c2c <L_shift>:
 8009c2c:	f1c2 0208 	rsb	r2, r2, #8
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	f1c2 0620 	rsb	r6, r2, #32
 8009c38:	6843      	ldr	r3, [r0, #4]
 8009c3a:	6804      	ldr	r4, [r0, #0]
 8009c3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c40:	432c      	orrs	r4, r5
 8009c42:	40d3      	lsrs	r3, r2
 8009c44:	6004      	str	r4, [r0, #0]
 8009c46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c4a:	4288      	cmp	r0, r1
 8009c4c:	d3f4      	bcc.n	8009c38 <L_shift+0xc>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__match>:
 8009c50:	b530      	push	{r4, r5, lr}
 8009c52:	6803      	ldr	r3, [r0, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	b914      	cbnz	r4, 8009c62 <__match+0x12>
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	2001      	movs	r0, #1
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c6a:	2d19      	cmp	r5, #25
 8009c6c:	bf98      	it	ls
 8009c6e:	3220      	addls	r2, #32
 8009c70:	42a2      	cmp	r2, r4
 8009c72:	d0f0      	beq.n	8009c56 <__match+0x6>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7f3      	b.n	8009c60 <__match+0x10>

08009c78 <__hexnan>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	6801      	ldr	r1, [r0, #0]
 8009c80:	115e      	asrs	r6, r3, #5
 8009c82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c86:	f013 031f 	ands.w	r3, r3, #31
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	bf18      	it	ne
 8009c8e:	3604      	addne	r6, #4
 8009c90:	2500      	movs	r5, #0
 8009c92:	1f37      	subs	r7, r6, #4
 8009c94:	4682      	mov	sl, r0
 8009c96:	4690      	mov	r8, r2
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c9e:	46b9      	mov	r9, r7
 8009ca0:	463c      	mov	r4, r7
 8009ca2:	9502      	str	r5, [sp, #8]
 8009ca4:	46ab      	mov	fp, r5
 8009ca6:	784a      	ldrb	r2, [r1, #1]
 8009ca8:	1c4b      	adds	r3, r1, #1
 8009caa:	9303      	str	r3, [sp, #12]
 8009cac:	b342      	cbz	r2, 8009d00 <__hexnan+0x88>
 8009cae:	4610      	mov	r0, r2
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	f7ff fd94 	bl	80097e0 <__hexdig_fun>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d151      	bne.n	8009d60 <__hexnan+0xe8>
 8009cbc:	9a04      	ldr	r2, [sp, #16]
 8009cbe:	9905      	ldr	r1, [sp, #20]
 8009cc0:	2a20      	cmp	r2, #32
 8009cc2:	d818      	bhi.n	8009cf6 <__hexnan+0x7e>
 8009cc4:	9b02      	ldr	r3, [sp, #8]
 8009cc6:	459b      	cmp	fp, r3
 8009cc8:	dd13      	ble.n	8009cf2 <__hexnan+0x7a>
 8009cca:	454c      	cmp	r4, r9
 8009ccc:	d206      	bcs.n	8009cdc <__hexnan+0x64>
 8009cce:	2d07      	cmp	r5, #7
 8009cd0:	dc04      	bgt.n	8009cdc <__hexnan+0x64>
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff ffa8 	bl	8009c2c <L_shift>
 8009cdc:	4544      	cmp	r4, r8
 8009cde:	d952      	bls.n	8009d86 <__hexnan+0x10e>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ce6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cea:	f8cd b008 	str.w	fp, [sp, #8]
 8009cee:	464c      	mov	r4, r9
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	9903      	ldr	r1, [sp, #12]
 8009cf4:	e7d7      	b.n	8009ca6 <__hexnan+0x2e>
 8009cf6:	2a29      	cmp	r2, #41	@ 0x29
 8009cf8:	d157      	bne.n	8009daa <__hexnan+0x132>
 8009cfa:	3102      	adds	r1, #2
 8009cfc:	f8ca 1000 	str.w	r1, [sl]
 8009d00:	f1bb 0f00 	cmp.w	fp, #0
 8009d04:	d051      	beq.n	8009daa <__hexnan+0x132>
 8009d06:	454c      	cmp	r4, r9
 8009d08:	d206      	bcs.n	8009d18 <__hexnan+0xa0>
 8009d0a:	2d07      	cmp	r5, #7
 8009d0c:	dc04      	bgt.n	8009d18 <__hexnan+0xa0>
 8009d0e:	462a      	mov	r2, r5
 8009d10:	4649      	mov	r1, r9
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff ff8a 	bl	8009c2c <L_shift>
 8009d18:	4544      	cmp	r4, r8
 8009d1a:	d936      	bls.n	8009d8a <__hexnan+0x112>
 8009d1c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d20:	4623      	mov	r3, r4
 8009d22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d26:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d2a:	429f      	cmp	r7, r3
 8009d2c:	d2f9      	bcs.n	8009d22 <__hexnan+0xaa>
 8009d2e:	1b3b      	subs	r3, r7, r4
 8009d30:	f023 0303 	bic.w	r3, r3, #3
 8009d34:	3304      	adds	r3, #4
 8009d36:	3401      	adds	r4, #1
 8009d38:	3e03      	subs	r6, #3
 8009d3a:	42b4      	cmp	r4, r6
 8009d3c:	bf88      	it	hi
 8009d3e:	2304      	movhi	r3, #4
 8009d40:	4443      	add	r3, r8
 8009d42:	2200      	movs	r2, #0
 8009d44:	f843 2b04 	str.w	r2, [r3], #4
 8009d48:	429f      	cmp	r7, r3
 8009d4a:	d2fb      	bcs.n	8009d44 <__hexnan+0xcc>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b91b      	cbnz	r3, 8009d58 <__hexnan+0xe0>
 8009d50:	4547      	cmp	r7, r8
 8009d52:	d128      	bne.n	8009da6 <__hexnan+0x12e>
 8009d54:	2301      	movs	r3, #1
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	2005      	movs	r0, #5
 8009d5a:	b007      	add	sp, #28
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	3501      	adds	r5, #1
 8009d62:	2d08      	cmp	r5, #8
 8009d64:	f10b 0b01 	add.w	fp, fp, #1
 8009d68:	dd06      	ble.n	8009d78 <__hexnan+0x100>
 8009d6a:	4544      	cmp	r4, r8
 8009d6c:	d9c1      	bls.n	8009cf2 <__hexnan+0x7a>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d74:	2501      	movs	r5, #1
 8009d76:	3c04      	subs	r4, #4
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	f000 000f 	and.w	r0, r0, #15
 8009d7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	e7b5      	b.n	8009cf2 <__hexnan+0x7a>
 8009d86:	2508      	movs	r5, #8
 8009d88:	e7b3      	b.n	8009cf2 <__hexnan+0x7a>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0dd      	beq.n	8009d4c <__hexnan+0xd4>
 8009d90:	f1c3 0320 	rsb	r3, r3, #32
 8009d94:	f04f 32ff 	mov.w	r2, #4294967295
 8009d98:	40da      	lsrs	r2, r3
 8009d9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009da4:	e7d2      	b.n	8009d4c <__hexnan+0xd4>
 8009da6:	3f04      	subs	r7, #4
 8009da8:	e7d0      	b.n	8009d4c <__hexnan+0xd4>
 8009daa:	2004      	movs	r0, #4
 8009dac:	e7d5      	b.n	8009d5a <__hexnan+0xe2>

08009dae <__ascii_mbtowc>:
 8009dae:	b082      	sub	sp, #8
 8009db0:	b901      	cbnz	r1, 8009db4 <__ascii_mbtowc+0x6>
 8009db2:	a901      	add	r1, sp, #4
 8009db4:	b142      	cbz	r2, 8009dc8 <__ascii_mbtowc+0x1a>
 8009db6:	b14b      	cbz	r3, 8009dcc <__ascii_mbtowc+0x1e>
 8009db8:	7813      	ldrb	r3, [r2, #0]
 8009dba:	600b      	str	r3, [r1, #0]
 8009dbc:	7812      	ldrb	r2, [r2, #0]
 8009dbe:	1e10      	subs	r0, r2, #0
 8009dc0:	bf18      	it	ne
 8009dc2:	2001      	movne	r0, #1
 8009dc4:	b002      	add	sp, #8
 8009dc6:	4770      	bx	lr
 8009dc8:	4610      	mov	r0, r2
 8009dca:	e7fb      	b.n	8009dc4 <__ascii_mbtowc+0x16>
 8009dcc:	f06f 0001 	mvn.w	r0, #1
 8009dd0:	e7f8      	b.n	8009dc4 <__ascii_mbtowc+0x16>

08009dd2 <_realloc_r>:
 8009dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	4614      	mov	r4, r2
 8009dda:	460d      	mov	r5, r1
 8009ddc:	b921      	cbnz	r1, 8009de8 <_realloc_r+0x16>
 8009dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009de2:	4611      	mov	r1, r2
 8009de4:	f7fd be68 	b.w	8007ab8 <_malloc_r>
 8009de8:	b92a      	cbnz	r2, 8009df6 <_realloc_r+0x24>
 8009dea:	f7fd fdf1 	bl	80079d0 <_free_r>
 8009dee:	4625      	mov	r5, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df6:	f000 f840 	bl	8009e7a <_malloc_usable_size_r>
 8009dfa:	4284      	cmp	r4, r0
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	d802      	bhi.n	8009e06 <_realloc_r+0x34>
 8009e00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e04:	d8f4      	bhi.n	8009df0 <_realloc_r+0x1e>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7fd fe55 	bl	8007ab8 <_malloc_r>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	b908      	cbnz	r0, 8009e16 <_realloc_r+0x44>
 8009e12:	4645      	mov	r5, r8
 8009e14:	e7ec      	b.n	8009df0 <_realloc_r+0x1e>
 8009e16:	42b4      	cmp	r4, r6
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	bf28      	it	cs
 8009e1e:	4632      	movcs	r2, r6
 8009e20:	f7ff fc44 	bl	80096ac <memcpy>
 8009e24:	4629      	mov	r1, r5
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7fd fdd2 	bl	80079d0 <_free_r>
 8009e2c:	e7f1      	b.n	8009e12 <_realloc_r+0x40>

08009e2e <__ascii_wctomb>:
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	b141      	cbz	r1, 8009e46 <__ascii_wctomb+0x18>
 8009e34:	2aff      	cmp	r2, #255	@ 0xff
 8009e36:	d904      	bls.n	8009e42 <__ascii_wctomb+0x14>
 8009e38:	228a      	movs	r2, #138	@ 0x8a
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	4770      	bx	lr
 8009e42:	700a      	strb	r2, [r1, #0]
 8009e44:	2001      	movs	r0, #1
 8009e46:	4770      	bx	lr

08009e48 <fiprintf>:
 8009e48:	b40e      	push	{r1, r2, r3}
 8009e4a:	b503      	push	{r0, r1, lr}
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	4805      	ldr	r0, [pc, #20]	@ (8009e68 <fiprintf+0x20>)
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	6800      	ldr	r0, [r0, #0]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	f000 f83f 	bl	8009edc <_vfiprintf_r>
 8009e5e:	b002      	add	sp, #8
 8009e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e64:	b003      	add	sp, #12
 8009e66:	4770      	bx	lr
 8009e68:	20000024 	.word	0x20000024

08009e6c <abort>:
 8009e6c:	b508      	push	{r3, lr}
 8009e6e:	2006      	movs	r0, #6
 8009e70:	f000 fa08 	bl	800a284 <raise>
 8009e74:	2001      	movs	r0, #1
 8009e76:	f7f8 f801 	bl	8001e7c <_exit>

08009e7a <_malloc_usable_size_r>:
 8009e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7e:	1f18      	subs	r0, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbc      	itt	lt
 8009e84:	580b      	ldrlt	r3, [r1, r0]
 8009e86:	18c0      	addlt	r0, r0, r3
 8009e88:	4770      	bx	lr

08009e8a <__sfputc_r>:
 8009e8a:	6893      	ldr	r3, [r2, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	b410      	push	{r4}
 8009e92:	6093      	str	r3, [r2, #8]
 8009e94:	da08      	bge.n	8009ea8 <__sfputc_r+0x1e>
 8009e96:	6994      	ldr	r4, [r2, #24]
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	db01      	blt.n	8009ea0 <__sfputc_r+0x16>
 8009e9c:	290a      	cmp	r1, #10
 8009e9e:	d103      	bne.n	8009ea8 <__sfputc_r+0x1e>
 8009ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea4:	f000 b932 	b.w	800a10c <__swbuf_r>
 8009ea8:	6813      	ldr	r3, [r2, #0]
 8009eaa:	1c58      	adds	r0, r3, #1
 8009eac:	6010      	str	r0, [r2, #0]
 8009eae:	7019      	strb	r1, [r3, #0]
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <__sfputs_r>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	18d5      	adds	r5, r2, r3
 8009ec2:	42ac      	cmp	r4, r5
 8009ec4:	d101      	bne.n	8009eca <__sfputs_r+0x12>
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	e007      	b.n	8009eda <__sfputs_r+0x22>
 8009eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ece:	463a      	mov	r2, r7
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff ffda 	bl	8009e8a <__sfputc_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d1f3      	bne.n	8009ec2 <__sfputs_r+0xa>
 8009eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009edc <_vfiprintf_r>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	b09d      	sub	sp, #116	@ 0x74
 8009ee4:	4614      	mov	r4, r2
 8009ee6:	4698      	mov	r8, r3
 8009ee8:	4606      	mov	r6, r0
 8009eea:	b118      	cbz	r0, 8009ef4 <_vfiprintf_r+0x18>
 8009eec:	6a03      	ldr	r3, [r0, #32]
 8009eee:	b90b      	cbnz	r3, 8009ef4 <_vfiprintf_r+0x18>
 8009ef0:	f7fc fdf2 	bl	8006ad8 <__sinit>
 8009ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ef6:	07d9      	lsls	r1, r3, #31
 8009ef8:	d405      	bmi.n	8009f06 <_vfiprintf_r+0x2a>
 8009efa:	89ab      	ldrh	r3, [r5, #12]
 8009efc:	059a      	lsls	r2, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_vfiprintf_r+0x2a>
 8009f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f02:	f7fc ff02 	bl	8006d0a <__retarget_lock_acquire_recursive>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	071b      	lsls	r3, r3, #28
 8009f0a:	d501      	bpl.n	8009f10 <_vfiprintf_r+0x34>
 8009f0c:	692b      	ldr	r3, [r5, #16]
 8009f0e:	b99b      	cbnz	r3, 8009f38 <_vfiprintf_r+0x5c>
 8009f10:	4629      	mov	r1, r5
 8009f12:	4630      	mov	r0, r6
 8009f14:	f000 f938 	bl	800a188 <__swsetup_r>
 8009f18:	b170      	cbz	r0, 8009f38 <_vfiprintf_r+0x5c>
 8009f1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f1c:	07dc      	lsls	r4, r3, #31
 8009f1e:	d504      	bpl.n	8009f2a <_vfiprintf_r+0x4e>
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	b01d      	add	sp, #116	@ 0x74
 8009f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2a:	89ab      	ldrh	r3, [r5, #12]
 8009f2c:	0598      	lsls	r0, r3, #22
 8009f2e:	d4f7      	bmi.n	8009f20 <_vfiprintf_r+0x44>
 8009f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f32:	f7fc feeb 	bl	8006d0c <__retarget_lock_release_recursive>
 8009f36:	e7f3      	b.n	8009f20 <_vfiprintf_r+0x44>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f46:	2330      	movs	r3, #48	@ 0x30
 8009f48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0f8 <_vfiprintf_r+0x21c>
 8009f4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f50:	f04f 0901 	mov.w	r9, #1
 8009f54:	4623      	mov	r3, r4
 8009f56:	469a      	mov	sl, r3
 8009f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f5c:	b10a      	cbz	r2, 8009f62 <_vfiprintf_r+0x86>
 8009f5e:	2a25      	cmp	r2, #37	@ 0x25
 8009f60:	d1f9      	bne.n	8009f56 <_vfiprintf_r+0x7a>
 8009f62:	ebba 0b04 	subs.w	fp, sl, r4
 8009f66:	d00b      	beq.n	8009f80 <_vfiprintf_r+0xa4>
 8009f68:	465b      	mov	r3, fp
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7ff ffa2 	bl	8009eb8 <__sfputs_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	f000 80a7 	beq.w	800a0c8 <_vfiprintf_r+0x1ec>
 8009f7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f7c:	445a      	add	r2, fp
 8009f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f80:	f89a 3000 	ldrb.w	r3, [sl]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 809f 	beq.w	800a0c8 <_vfiprintf_r+0x1ec>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f94:	f10a 0a01 	add.w	sl, sl, #1
 8009f98:	9304      	str	r3, [sp, #16]
 8009f9a:	9307      	str	r3, [sp, #28]
 8009f9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fa2:	4654      	mov	r4, sl
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009faa:	4853      	ldr	r0, [pc, #332]	@ (800a0f8 <_vfiprintf_r+0x21c>)
 8009fac:	f7f6 f910 	bl	80001d0 <memchr>
 8009fb0:	9a04      	ldr	r2, [sp, #16]
 8009fb2:	b9d8      	cbnz	r0, 8009fec <_vfiprintf_r+0x110>
 8009fb4:	06d1      	lsls	r1, r2, #27
 8009fb6:	bf44      	itt	mi
 8009fb8:	2320      	movmi	r3, #32
 8009fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fbe:	0713      	lsls	r3, r2, #28
 8009fc0:	bf44      	itt	mi
 8009fc2:	232b      	movmi	r3, #43	@ 0x2b
 8009fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fce:	d015      	beq.n	8009ffc <_vfiprintf_r+0x120>
 8009fd0:	9a07      	ldr	r2, [sp, #28]
 8009fd2:	4654      	mov	r4, sl
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	f04f 0c0a 	mov.w	ip, #10
 8009fda:	4621      	mov	r1, r4
 8009fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe0:	3b30      	subs	r3, #48	@ 0x30
 8009fe2:	2b09      	cmp	r3, #9
 8009fe4:	d94b      	bls.n	800a07e <_vfiprintf_r+0x1a2>
 8009fe6:	b1b0      	cbz	r0, 800a016 <_vfiprintf_r+0x13a>
 8009fe8:	9207      	str	r2, [sp, #28]
 8009fea:	e014      	b.n	800a016 <_vfiprintf_r+0x13a>
 8009fec:	eba0 0308 	sub.w	r3, r0, r8
 8009ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	9304      	str	r3, [sp, #16]
 8009ff8:	46a2      	mov	sl, r4
 8009ffa:	e7d2      	b.n	8009fa2 <_vfiprintf_r+0xc6>
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	1d19      	adds	r1, r3, #4
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	9103      	str	r1, [sp, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfbb      	ittet	lt
 800a008:	425b      	neglt	r3, r3
 800a00a:	f042 0202 	orrlt.w	r2, r2, #2
 800a00e:	9307      	strge	r3, [sp, #28]
 800a010:	9307      	strlt	r3, [sp, #28]
 800a012:	bfb8      	it	lt
 800a014:	9204      	strlt	r2, [sp, #16]
 800a016:	7823      	ldrb	r3, [r4, #0]
 800a018:	2b2e      	cmp	r3, #46	@ 0x2e
 800a01a:	d10a      	bne.n	800a032 <_vfiprintf_r+0x156>
 800a01c:	7863      	ldrb	r3, [r4, #1]
 800a01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a020:	d132      	bne.n	800a088 <_vfiprintf_r+0x1ac>
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	9203      	str	r2, [sp, #12]
 800a02a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a02e:	3402      	adds	r4, #2
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a108 <_vfiprintf_r+0x22c>
 800a036:	7821      	ldrb	r1, [r4, #0]
 800a038:	2203      	movs	r2, #3
 800a03a:	4650      	mov	r0, sl
 800a03c:	f7f6 f8c8 	bl	80001d0 <memchr>
 800a040:	b138      	cbz	r0, 800a052 <_vfiprintf_r+0x176>
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	eba0 000a 	sub.w	r0, r0, sl
 800a048:	2240      	movs	r2, #64	@ 0x40
 800a04a:	4082      	lsls	r2, r0
 800a04c:	4313      	orrs	r3, r2
 800a04e:	3401      	adds	r4, #1
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a056:	4829      	ldr	r0, [pc, #164]	@ (800a0fc <_vfiprintf_r+0x220>)
 800a058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a05c:	2206      	movs	r2, #6
 800a05e:	f7f6 f8b7 	bl	80001d0 <memchr>
 800a062:	2800      	cmp	r0, #0
 800a064:	d03f      	beq.n	800a0e6 <_vfiprintf_r+0x20a>
 800a066:	4b26      	ldr	r3, [pc, #152]	@ (800a100 <_vfiprintf_r+0x224>)
 800a068:	bb1b      	cbnz	r3, 800a0b2 <_vfiprintf_r+0x1d6>
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	3307      	adds	r3, #7
 800a06e:	f023 0307 	bic.w	r3, r3, #7
 800a072:	3308      	adds	r3, #8
 800a074:	9303      	str	r3, [sp, #12]
 800a076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a078:	443b      	add	r3, r7
 800a07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a07c:	e76a      	b.n	8009f54 <_vfiprintf_r+0x78>
 800a07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a082:	460c      	mov	r4, r1
 800a084:	2001      	movs	r0, #1
 800a086:	e7a8      	b.n	8009fda <_vfiprintf_r+0xfe>
 800a088:	2300      	movs	r3, #0
 800a08a:	3401      	adds	r4, #1
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	4619      	mov	r1, r3
 800a090:	f04f 0c0a 	mov.w	ip, #10
 800a094:	4620      	mov	r0, r4
 800a096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09a:	3a30      	subs	r2, #48	@ 0x30
 800a09c:	2a09      	cmp	r2, #9
 800a09e:	d903      	bls.n	800a0a8 <_vfiprintf_r+0x1cc>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0c6      	beq.n	800a032 <_vfiprintf_r+0x156>
 800a0a4:	9105      	str	r1, [sp, #20]
 800a0a6:	e7c4      	b.n	800a032 <_vfiprintf_r+0x156>
 800a0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e7f0      	b.n	800a094 <_vfiprintf_r+0x1b8>
 800a0b2:	ab03      	add	r3, sp, #12
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <_vfiprintf_r+0x228>)
 800a0ba:	a904      	add	r1, sp, #16
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f7fb febb 	bl	8005e38 <_printf_float>
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	1c78      	adds	r0, r7, #1
 800a0c6:	d1d6      	bne.n	800a076 <_vfiprintf_r+0x19a>
 800a0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ca:	07d9      	lsls	r1, r3, #31
 800a0cc:	d405      	bmi.n	800a0da <_vfiprintf_r+0x1fe>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	059a      	lsls	r2, r3, #22
 800a0d2:	d402      	bmi.n	800a0da <_vfiprintf_r+0x1fe>
 800a0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0d6:	f7fc fe19 	bl	8006d0c <__retarget_lock_release_recursive>
 800a0da:	89ab      	ldrh	r3, [r5, #12]
 800a0dc:	065b      	lsls	r3, r3, #25
 800a0de:	f53f af1f 	bmi.w	8009f20 <_vfiprintf_r+0x44>
 800a0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0e4:	e71e      	b.n	8009f24 <_vfiprintf_r+0x48>
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <_vfiprintf_r+0x228>)
 800a0ee:	a904      	add	r1, sp, #16
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7fc f939 	bl	8006368 <_printf_i>
 800a0f6:	e7e4      	b.n	800a0c2 <_vfiprintf_r+0x1e6>
 800a0f8:	0800a549 	.word	0x0800a549
 800a0fc:	0800a553 	.word	0x0800a553
 800a100:	08005e39 	.word	0x08005e39
 800a104:	08009eb9 	.word	0x08009eb9
 800a108:	0800a54f 	.word	0x0800a54f

0800a10c <__swbuf_r>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	460e      	mov	r6, r1
 800a110:	4614      	mov	r4, r2
 800a112:	4605      	mov	r5, r0
 800a114:	b118      	cbz	r0, 800a11e <__swbuf_r+0x12>
 800a116:	6a03      	ldr	r3, [r0, #32]
 800a118:	b90b      	cbnz	r3, 800a11e <__swbuf_r+0x12>
 800a11a:	f7fc fcdd 	bl	8006ad8 <__sinit>
 800a11e:	69a3      	ldr	r3, [r4, #24]
 800a120:	60a3      	str	r3, [r4, #8]
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	071a      	lsls	r2, r3, #28
 800a126:	d501      	bpl.n	800a12c <__swbuf_r+0x20>
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	b943      	cbnz	r3, 800a13e <__swbuf_r+0x32>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f82a 	bl	800a188 <__swsetup_r>
 800a134:	b118      	cbz	r0, 800a13e <__swbuf_r+0x32>
 800a136:	f04f 37ff 	mov.w	r7, #4294967295
 800a13a:	4638      	mov	r0, r7
 800a13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	6922      	ldr	r2, [r4, #16]
 800a142:	1a98      	subs	r0, r3, r2
 800a144:	6963      	ldr	r3, [r4, #20]
 800a146:	b2f6      	uxtb	r6, r6
 800a148:	4283      	cmp	r3, r0
 800a14a:	4637      	mov	r7, r6
 800a14c:	dc05      	bgt.n	800a15a <__swbuf_r+0x4e>
 800a14e:	4621      	mov	r1, r4
 800a150:	4628      	mov	r0, r5
 800a152:	f7ff fa47 	bl	80095e4 <_fflush_r>
 800a156:	2800      	cmp	r0, #0
 800a158:	d1ed      	bne.n	800a136 <__swbuf_r+0x2a>
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	60a3      	str	r3, [r4, #8]
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	6022      	str	r2, [r4, #0]
 800a166:	701e      	strb	r6, [r3, #0]
 800a168:	6962      	ldr	r2, [r4, #20]
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d004      	beq.n	800a17a <__swbuf_r+0x6e>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	07db      	lsls	r3, r3, #31
 800a174:	d5e1      	bpl.n	800a13a <__swbuf_r+0x2e>
 800a176:	2e0a      	cmp	r6, #10
 800a178:	d1df      	bne.n	800a13a <__swbuf_r+0x2e>
 800a17a:	4621      	mov	r1, r4
 800a17c:	4628      	mov	r0, r5
 800a17e:	f7ff fa31 	bl	80095e4 <_fflush_r>
 800a182:	2800      	cmp	r0, #0
 800a184:	d0d9      	beq.n	800a13a <__swbuf_r+0x2e>
 800a186:	e7d6      	b.n	800a136 <__swbuf_r+0x2a>

0800a188 <__swsetup_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4b29      	ldr	r3, [pc, #164]	@ (800a230 <__swsetup_r+0xa8>)
 800a18c:	4605      	mov	r5, r0
 800a18e:	6818      	ldr	r0, [r3, #0]
 800a190:	460c      	mov	r4, r1
 800a192:	b118      	cbz	r0, 800a19c <__swsetup_r+0x14>
 800a194:	6a03      	ldr	r3, [r0, #32]
 800a196:	b90b      	cbnz	r3, 800a19c <__swsetup_r+0x14>
 800a198:	f7fc fc9e 	bl	8006ad8 <__sinit>
 800a19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a0:	0719      	lsls	r1, r3, #28
 800a1a2:	d422      	bmi.n	800a1ea <__swsetup_r+0x62>
 800a1a4:	06da      	lsls	r2, r3, #27
 800a1a6:	d407      	bmi.n	800a1b8 <__swsetup_r+0x30>
 800a1a8:	2209      	movs	r2, #9
 800a1aa:	602a      	str	r2, [r5, #0]
 800a1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	e033      	b.n	800a220 <__swsetup_r+0x98>
 800a1b8:	0758      	lsls	r0, r3, #29
 800a1ba:	d512      	bpl.n	800a1e2 <__swsetup_r+0x5a>
 800a1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1be:	b141      	cbz	r1, 800a1d2 <__swsetup_r+0x4a>
 800a1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1c4:	4299      	cmp	r1, r3
 800a1c6:	d002      	beq.n	800a1ce <__swsetup_r+0x46>
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f7fd fc01 	bl	80079d0 <_free_r>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6063      	str	r3, [r4, #4]
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	f043 0308 	orr.w	r3, r3, #8
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	b94b      	cbnz	r3, 800a202 <__swsetup_r+0x7a>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1f8:	d003      	beq.n	800a202 <__swsetup_r+0x7a>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 f883 	bl	800a308 <__smakebuf_r>
 800a202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a206:	f013 0201 	ands.w	r2, r3, #1
 800a20a:	d00a      	beq.n	800a222 <__swsetup_r+0x9a>
 800a20c:	2200      	movs	r2, #0
 800a20e:	60a2      	str	r2, [r4, #8]
 800a210:	6962      	ldr	r2, [r4, #20]
 800a212:	4252      	negs	r2, r2
 800a214:	61a2      	str	r2, [r4, #24]
 800a216:	6922      	ldr	r2, [r4, #16]
 800a218:	b942      	cbnz	r2, 800a22c <__swsetup_r+0xa4>
 800a21a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a21e:	d1c5      	bne.n	800a1ac <__swsetup_r+0x24>
 800a220:	bd38      	pop	{r3, r4, r5, pc}
 800a222:	0799      	lsls	r1, r3, #30
 800a224:	bf58      	it	pl
 800a226:	6962      	ldrpl	r2, [r4, #20]
 800a228:	60a2      	str	r2, [r4, #8]
 800a22a:	e7f4      	b.n	800a216 <__swsetup_r+0x8e>
 800a22c:	2000      	movs	r0, #0
 800a22e:	e7f7      	b.n	800a220 <__swsetup_r+0x98>
 800a230:	20000024 	.word	0x20000024

0800a234 <_raise_r>:
 800a234:	291f      	cmp	r1, #31
 800a236:	b538      	push	{r3, r4, r5, lr}
 800a238:	4605      	mov	r5, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	d904      	bls.n	800a248 <_raise_r+0x14>
 800a23e:	2316      	movs	r3, #22
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a24a:	b112      	cbz	r2, 800a252 <_raise_r+0x1e>
 800a24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a250:	b94b      	cbnz	r3, 800a266 <_raise_r+0x32>
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f830 	bl	800a2b8 <_getpid_r>
 800a258:	4622      	mov	r2, r4
 800a25a:	4601      	mov	r1, r0
 800a25c:	4628      	mov	r0, r5
 800a25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a262:	f000 b817 	b.w	800a294 <_kill_r>
 800a266:	2b01      	cmp	r3, #1
 800a268:	d00a      	beq.n	800a280 <_raise_r+0x4c>
 800a26a:	1c59      	adds	r1, r3, #1
 800a26c:	d103      	bne.n	800a276 <_raise_r+0x42>
 800a26e:	2316      	movs	r3, #22
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	2001      	movs	r0, #1
 800a274:	e7e7      	b.n	800a246 <_raise_r+0x12>
 800a276:	2100      	movs	r1, #0
 800a278:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a27c:	4620      	mov	r0, r4
 800a27e:	4798      	blx	r3
 800a280:	2000      	movs	r0, #0
 800a282:	e7e0      	b.n	800a246 <_raise_r+0x12>

0800a284 <raise>:
 800a284:	4b02      	ldr	r3, [pc, #8]	@ (800a290 <raise+0xc>)
 800a286:	4601      	mov	r1, r0
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	f7ff bfd3 	b.w	800a234 <_raise_r>
 800a28e:	bf00      	nop
 800a290:	20000024 	.word	0x20000024

0800a294 <_kill_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	@ (800a2b4 <_kill_r+0x20>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	f7f7 fddb 	bl	8001e5c <_kill>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d102      	bne.n	800a2b0 <_kill_r+0x1c>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	b103      	cbz	r3, 800a2b0 <_kill_r+0x1c>
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2000074c 	.word	0x2000074c

0800a2b8 <_getpid_r>:
 800a2b8:	f7f7 bdc8 	b.w	8001e4c <_getpid>

0800a2bc <__swhatbuf_r>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	460c      	mov	r4, r1
 800a2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	b096      	sub	sp, #88	@ 0x58
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	461e      	mov	r6, r3
 800a2cc:	da0d      	bge.n	800a2ea <__swhatbuf_r+0x2e>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2d4:	f04f 0100 	mov.w	r1, #0
 800a2d8:	bf14      	ite	ne
 800a2da:	2340      	movne	r3, #64	@ 0x40
 800a2dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	6031      	str	r1, [r6, #0]
 800a2e4:	602b      	str	r3, [r5, #0]
 800a2e6:	b016      	add	sp, #88	@ 0x58
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ea:	466a      	mov	r2, sp
 800a2ec:	f000 f848 	bl	800a380 <_fstat_r>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dbec      	blt.n	800a2ce <__swhatbuf_r+0x12>
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2fe:	4259      	negs	r1, r3
 800a300:	4159      	adcs	r1, r3
 800a302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a306:	e7eb      	b.n	800a2e0 <__swhatbuf_r+0x24>

0800a308 <__smakebuf_r>:
 800a308:	898b      	ldrh	r3, [r1, #12]
 800a30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30c:	079d      	lsls	r5, r3, #30
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	d507      	bpl.n	800a324 <__smakebuf_r+0x1c>
 800a314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	2301      	movs	r3, #1
 800a31e:	6163      	str	r3, [r4, #20]
 800a320:	b003      	add	sp, #12
 800a322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a324:	ab01      	add	r3, sp, #4
 800a326:	466a      	mov	r2, sp
 800a328:	f7ff ffc8 	bl	800a2bc <__swhatbuf_r>
 800a32c:	9f00      	ldr	r7, [sp, #0]
 800a32e:	4605      	mov	r5, r0
 800a330:	4639      	mov	r1, r7
 800a332:	4630      	mov	r0, r6
 800a334:	f7fd fbc0 	bl	8007ab8 <_malloc_r>
 800a338:	b948      	cbnz	r0, 800a34e <__smakebuf_r+0x46>
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	059a      	lsls	r2, r3, #22
 800a340:	d4ee      	bmi.n	800a320 <__smakebuf_r+0x18>
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	f043 0302 	orr.w	r3, r3, #2
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	e7e2      	b.n	800a314 <__smakebuf_r+0xc>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	6020      	str	r0, [r4, #0]
 800a352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a356:	81a3      	strh	r3, [r4, #12]
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a35e:	b15b      	cbz	r3, 800a378 <__smakebuf_r+0x70>
 800a360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a364:	4630      	mov	r0, r6
 800a366:	f000 f81d 	bl	800a3a4 <_isatty_r>
 800a36a:	b128      	cbz	r0, 800a378 <__smakebuf_r+0x70>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	81a3      	strh	r3, [r4, #12]
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	431d      	orrs	r5, r3
 800a37c:	81a5      	strh	r5, [r4, #12]
 800a37e:	e7cf      	b.n	800a320 <__smakebuf_r+0x18>

0800a380 <_fstat_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	@ (800a3a0 <_fstat_r+0x20>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	f7f7 fda9 	bl	8001ee4 <_fstat>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d102      	bne.n	800a39c <_fstat_r+0x1c>
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	b103      	cbz	r3, 800a39c <_fstat_r+0x1c>
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	bd38      	pop	{r3, r4, r5, pc}
 800a39e:	bf00      	nop
 800a3a0:	2000074c 	.word	0x2000074c

0800a3a4 <_isatty_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d06      	ldr	r5, [pc, #24]	@ (800a3c0 <_isatty_r+0x1c>)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	f7f7 fda8 	bl	8001f04 <_isatty>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_isatty_r+0x1a>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_isatty_r+0x1a>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	2000074c 	.word	0x2000074c

0800a3c4 <_init>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	bf00      	nop
 800a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ca:	bc08      	pop	{r3}
 800a3cc:	469e      	mov	lr, r3
 800a3ce:	4770      	bx	lr

0800a3d0 <_fini>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	bf00      	nop
 800a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d6:	bc08      	pop	{r3}
 800a3d8:	469e      	mov	lr, r3
 800a3da:	4770      	bx	lr
