
UserInterfaceDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004774  08004774  00005774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004838  08004838  00006024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004838  08004838  00005838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004840  08004840  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004844  08004844  00005844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004848  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000024  0800486c  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800486c  00006298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010069  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  000160bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00018428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b28  00000000  00000000  00019298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200c5  00000000  00000000  00019dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ae7  00000000  00000000  00039e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c13fe  00000000  00000000  0004a96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bd6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  0010bdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0010f94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800475c 	.word	0x0800475c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	0800475c 	.word	0x0800475c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000502:	4a38      	ldr	r2, [pc, #224]	@ (80005e4 <HD44780_Init+0xec>)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000508:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <HD44780_Init+0xf0>)
 800050a:	2208      	movs	r2, #8
 800050c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800050e:	4b37      	ldr	r3, [pc, #220]	@ (80005ec <HD44780_Init+0xf4>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000514:	4b33      	ldr	r3, [pc, #204]	@ (80005e4 <HD44780_Init+0xec>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d907      	bls.n	800052c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <HD44780_Init+0xf4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <HD44780_Init+0xf4>)
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	e006      	b.n	800053a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800052c:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <HD44780_Init+0xf4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <HD44780_Init+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800053a:	f000 f987 	bl	800084c <DelayInit>
  HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	@ 0x32
 8000540:	f000 fe9a 	bl	8001278 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000544:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <HD44780_Init+0xf0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f945 	bl	80007d8 <ExpanderWrite>
  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000552:	f000 fe91 	bl	8001278 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000556:	2030      	movs	r0, #48	@ 0x30
 8000558:	f000 f92c 	bl	80007b4 <Write4Bits>
  DelayUS(4500);
 800055c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000560:	f000 f99e 	bl	80008a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000564:	2030      	movs	r0, #48	@ 0x30
 8000566:	f000 f925 	bl	80007b4 <Write4Bits>
  DelayUS(4500);
 800056a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800056e:	f000 f997 	bl	80008a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000572:	2030      	movs	r0, #48	@ 0x30
 8000574:	f000 f91e 	bl	80007b4 <Write4Bits>
  DelayUS(4500);
 8000578:	f241 1094 	movw	r0, #4500	@ 0x1194
 800057c:	f000 f990 	bl	80008a0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000580:	2020      	movs	r0, #32
 8000582:	f000 f917 	bl	80007b4 <Write4Bits>
  DelayUS(100);
 8000586:	2064      	movs	r0, #100	@ 0x64
 8000588:	f000 f98a 	bl	80008a0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800058c:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <HD44780_Init+0xf4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f8cf 	bl	800073a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <HD44780_Init+0xf8>)
 800059e:	2204      	movs	r2, #4
 80005a0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005a2:	f000 f875 	bl	8000690 <HD44780_Display>
  HD44780_Clear();
 80005a6:	f000 f82b 	bl	8000600 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HD44780_Init+0xfc>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <HD44780_Init+0xfc>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f8bd 	bl	800073a <SendCommand>
  DelayUS(4500);
 80005c0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005c4:	f000 f96c 	bl	80008a0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005c8:	490b      	ldr	r1, [pc, #44]	@ (80005f8 <HD44780_Init+0x100>)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f876 	bl	80006bc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005d0:	490a      	ldr	r1, [pc, #40]	@ (80005fc <HD44780_Init+0x104>)
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f872 	bl	80006bc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005d8:	f000 f81d 	bl	8000616 <HD44780_Home>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000043 	.word	0x20000043
 80005e8:	20000044 	.word	0x20000044
 80005ec:	20000040 	.word	0x20000040
 80005f0:	20000041 	.word	0x20000041
 80005f4:	20000042 	.word	0x20000042
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008

08000600 <HD44780_Clear>:

void HD44780_Clear()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f898 	bl	800073a <SendCommand>
  DelayUS(2000);
 800060a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800060e:	f000 f947 	bl	80008a0 <DelayUS>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <HD44780_Home>:

void HD44780_Home()
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800061a:	2002      	movs	r0, #2
 800061c:	f000 f88d 	bl	800073a <SendCommand>
  DelayUS(2000);
 8000620:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000624:	f000 f93c 	bl	80008a0 <DelayUS>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b087      	sub	sp, #28
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HD44780_SetCursor+0x5c>)
 800063e:	f107 0408 	add.w	r4, r7, #8
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HD44780_SetCursor+0x60>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	429a      	cmp	r2, r3
 8000650:	d303      	bcc.n	800065a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HD44780_SetCursor+0x60>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3318      	adds	r3, #24
 8000660:	443b      	add	r3, r7
 8000662:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4413      	add	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	b25b      	sxtb	r3, r3
 8000670:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000674:	b25b      	sxtb	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f85e 	bl	800073a <SendCommand>
}
 800067e:	bf00      	nop
 8000680:	371c      	adds	r7, #28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	bf00      	nop
 8000688:	08004774 	.word	0x08004774
 800068c:	20000043 	.word	0x20000043

08000690 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HD44780_Display+0x28>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HD44780_Display+0x28>)
 80006a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <HD44780_Display+0x28>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f844 	bl	800073a <SendCommand>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000041 	.word	0x20000041

080006bc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f82a 	bl	800073a <SendCommand>
  for (int i=0; i<8; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e009      	b.n	8000700 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f82e 	bl	8000756 <SendChar>
  for (int i=0; i<8; i++)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b07      	cmp	r3, #7
 8000704:	ddf2      	ble.n	80006ec <HD44780_CreateSpecialChar+0x30>
  }
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000718:	e006      	b.n	8000728 <HD44780_PrintStr+0x18>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f817 	bl	8000756 <SendChar>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1f4      	bne.n	800071a <HD44780_PrintStr+0xa>
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f812 	bl	8000772 <Send>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f804 	bl	8000772 <Send>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	460a      	mov	r2, r1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	4613      	mov	r3, r2
 8000780:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f023 030f 	bic.w	r3, r3, #15
 8000788:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4313      	orrs	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f80b 	bl	80007b4 <Write4Bits>
  Write4Bits((lownib)|mode);
 800079e:	7bba      	ldrb	r2, [r7, #14]
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f804 	bl	80007b4 <Write4Bits>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f809 	bl	80007d8 <ExpanderWrite>
  PulseEnable(value);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f821 	bl	8000810 <PulseEnable>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <ExpanderWrite+0x30>)
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80007ee:	f107 020f 	add.w	r2, r7, #15
 80007f2:	230a      	movs	r3, #10
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	214e      	movs	r1, #78	@ 0x4e
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <ExpanderWrite+0x34>)
 80007fc:	f001 fcf4 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000044 	.word	0x20000044
 800080c:	20000070 	.word	0x20000070

08000810 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffd8 	bl	80007d8 <ExpanderWrite>
  DelayUS(20);
 8000828:	2014      	movs	r0, #20
 800082a:	f000 f839 	bl	80008a0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f023 0304 	bic.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffce 	bl	80007d8 <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f82f 	bl	80008a0 <DelayUS>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <DelayInit>:

static void DelayInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <DelayInit+0x4c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <DelayInit+0x4c>)
 8000856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800085a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <DelayInit+0x4c>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <DelayInit+0x4c>)
 8000862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000866:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <DelayInit+0x50>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <DelayInit+0x50>)
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <DelayInit+0x50>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a08      	ldr	r2, [pc, #32]	@ (800089c <DelayInit+0x50>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <DelayInit+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000886:	bf00      	nop
  __ASM volatile ("NOP");
 8000888:	bf00      	nop
  __ASM volatile ("NOP");
 800088a:	bf00      	nop
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000edf0 	.word	0xe000edf0
 800089c:	e0001000 	.word	0xe0001000

080008a0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <DelayUS+0x44>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <DelayUS+0x48>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	0c9a      	lsrs	r2, r3, #18
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <DelayUS+0x4c>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <DelayUS+0x4c>)
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f6      	bhi.n	80008c2 <DelayUS+0x22>
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000018 	.word	0x20000018
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	e0001000 	.word	0xe0001000

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fc4a 	bl	800118e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f911 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa53 	bl	8000da8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000902:	f000 fa21 	bl	8000d48 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000906:	f000 f96d 	bl	8000be4 <MX_CAN1_Init>
  MX_I2C1_Init();
 800090a:	f000 f9dd 	bl	8000cc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(4);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff fdf2 	bl	80004f8 <HD44780_Init>
  HD44780_Clear();
 8000914:	f7ff fe74 	bl	8000600 <HD44780_Clear>

  Timer = 0;
 8000918:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <main+0x1e0>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]

  /* Clear uart2 message buffer */
  for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	e006      	b.n	8000932 <main+0x42>
	  uartDataBuffer[i] = 0;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	4a6b      	ldr	r2, [pc, #428]	@ (8000ad4 <main+0x1e4>)
 8000928:	2100      	movs	r1, #0
 800092a:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	3301      	adds	r3, #1
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d9f5      	bls.n	8000924 <main+0x34>
  }
  strcpy(uartDataBuffer, "User Interface Connected!\n\r");
 8000938:	4a66      	ldr	r2, [pc, #408]	@ (8000ad4 <main+0x1e4>)
 800093a:	4b67      	ldr	r3, [pc, #412]	@ (8000ad8 <main+0x1e8>)
 800093c:	4614      	mov	r4, r2
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, uartDataBuffer, BUFFER_SIZE, 100);
 800094c:	2364      	movs	r3, #100	@ 0x64
 800094e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000952:	4960      	ldr	r1, [pc, #384]	@ (8000ad4 <main+0x1e4>)
 8000954:	4861      	ldr	r0, [pc, #388]	@ (8000adc <main+0x1ec>)
 8000956:	f003 fa03 	bl	8003d60 <HAL_UART_Transmit>
  {
	/* Once per second */


	/*CANbus reconnect if disconnected*/
    if (HAL_CAN_GetState(&hcan1) & HAL_CAN_STATE_RESET || HAL_CAN_GetError(&hcan1) != HAL_OK) {
 800095a:	4861      	ldr	r0, [pc, #388]	@ (8000ae0 <main+0x1f0>)
 800095c:	f001 f8d1 	bl	8001b02 <HAL_CAN_GetState>
 8000960:	485f      	ldr	r0, [pc, #380]	@ (8000ae0 <main+0x1f0>)
 8000962:	f001 f8f6 	bl	8001b52 <HAL_CAN_GetError>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d03f      	beq.n	80009ec <main+0xfc>
    	/* Clear errors */
    	HAL_CAN_ResetError(&hcan1);
 800096c:	485c      	ldr	r0, [pc, #368]	@ (8000ae0 <main+0x1f0>)
 800096e:	f001 f8fc 	bl	8001b6a <HAL_CAN_ResetError>

    	/* Clear uart msg buffer */

    	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	80bb      	strh	r3, [r7, #4]
 8000976:	e006      	b.n	8000986 <main+0x96>
    		uartDataBuffer[i] = 0;
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	4a56      	ldr	r2, [pc, #344]	@ (8000ad4 <main+0x1e4>)
 800097c:	2100      	movs	r1, #0
 800097e:	54d1      	strb	r1, [r2, r3]
    	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	80bb      	strh	r3, [r7, #4]
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	2bff      	cmp	r3, #255	@ 0xff
 800098a:	d9f5      	bls.n	8000978 <main+0x88>
    	}
    	strcpy(uartDataBuffer,"Attempting CAN1 startup...\n\r");
 800098c:	4a51      	ldr	r2, [pc, #324]	@ (8000ad4 <main+0x1e4>)
 800098e:	4b55      	ldr	r3, [pc, #340]	@ (8000ae4 <main+0x1f4>)
 8000990:	4614      	mov	r4, r2
 8000992:	461d      	mov	r5, r3
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800099c:	c407      	stmia	r4!, {r0, r1, r2}
 800099e:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, uartDataBuffer, BUFFER_SIZE, 100);
 80009a0:	2364      	movs	r3, #100	@ 0x64
 80009a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009a6:	494b      	ldr	r1, [pc, #300]	@ (8000ad4 <main+0x1e4>)
 80009a8:	484c      	ldr	r0, [pc, #304]	@ (8000adc <main+0x1ec>)
 80009aa:	f003 f9d9 	bl	8003d60 <HAL_UART_Transmit>
    	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80009ae:	484c      	ldr	r0, [pc, #304]	@ (8000ae0 <main+0x1f0>)
 80009b0:	f000 fe4b 	bl	800164a <HAL_CAN_Start>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d018      	beq.n	80009ec <main+0xfc>
        	/* Clear uart msg buffer */

        	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	807b      	strh	r3, [r7, #2]
 80009be:	e006      	b.n	80009ce <main+0xde>
        		uartDataBuffer[i] = 0;
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4a44      	ldr	r2, [pc, #272]	@ (8000ad4 <main+0x1e4>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	54d1      	strb	r1, [r2, r3]
        	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	3301      	adds	r3, #1
 80009cc:	807b      	strh	r3, [r7, #2]
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	2bff      	cmp	r3, #255	@ 0xff
 80009d2:	d9f5      	bls.n	80009c0 <main+0xd0>
        	}
        	strcpy(uartDataBuffer,"Failed.\n\r");
 80009d4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <main+0x1e4>)
 80009d6:	4a44      	ldr	r2, [pc, #272]	@ (8000ae8 <main+0x1f8>)
 80009d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009da:	c303      	stmia	r3!, {r0, r1}
 80009dc:	801a      	strh	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2, uartDataBuffer, BUFFER_SIZE, 100);
 80009de:	2364      	movs	r3, #100	@ 0x64
 80009e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e4:	493b      	ldr	r1, [pc, #236]	@ (8000ad4 <main+0x1e4>)
 80009e6:	483d      	ldr	r0, [pc, #244]	@ (8000adc <main+0x1ec>)
 80009e8:	f003 f9ba 	bl	8003d60 <HAL_UART_Transmit>
    	}
    }

    /* If there's a message, read it */
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_ERROR) {
 80009ec:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <main+0x1fc>)
 80009ee:	4a40      	ldr	r2, [pc, #256]	@ (8000af0 <main+0x200>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	483b      	ldr	r0, [pc, #236]	@ (8000ae0 <main+0x1f0>)
 80009f4:	f000 ff3d 	bl	8001872 <HAL_CAN_GetRxMessage>
    	//Error_Handler();
    }
    if (HAL_GetTick() - Timer < 1000){
 80009f8:	f000 fc32 	bl	8001260 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	4b34      	ldr	r3, [pc, #208]	@ (8000ad0 <main+0x1e0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a08:	d20a      	bcs.n	8000a20 <main+0x130>
    	Timer = HAL_GetTick();
 8000a0a:	f000 fc29 	bl	8001260 <HAL_GetTick>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad0 <main+0x1e0>)
 8000a12:	6013      	str	r3, [r2, #0]
    	/* Send CAN packet */
    	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000a14:	4b37      	ldr	r3, [pc, #220]	@ (8000af4 <main+0x204>)
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <main+0x208>)
 8000a18:	4938      	ldr	r1, [pc, #224]	@ (8000afc <main+0x20c>)
 8000a1a:	4831      	ldr	r0, [pc, #196]	@ (8000ae0 <main+0x1f0>)
 8000a1c:	f000 fe59 	bl	80016d2 <HAL_CAN_AddTxMessage>
        }
    }
    /* If message isn't empty, print to screen? */

    /* Read switches */
    currentSwitch1 = (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3));
 8000a20:	2108      	movs	r1, #8
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f001 fb13 	bl	8002050 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <main+0x210>)
 8000a3a:	701a      	strb	r2, [r3, #0]
    currentSwitch2 = (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4));
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f001 fb05 	bl	8002050 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2301      	moveq	r3, #1
 8000a4e:	2300      	movne	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <main+0x214>)
 8000a56:	701a      	strb	r2, [r3, #0]

    /* If state has changed */
    if (currentSwitch1 != lastSwitch1 || currentSwitch2 != lastSwitch2) {
 8000a58:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <main+0x210>)
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <main+0x218>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d106      	bne.n	8000a72 <main+0x182>
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <main+0x214>)
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <main+0x21c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f43f af74 	beq.w	800095a <main+0x6a>

      lastSwitch1 = currentSwitch1;
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <main+0x210>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <main+0x218>)
 8000a78:	701a      	strb	r2, [r3, #0]
	  lastSwitch2 = currentSwitch2;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <main+0x214>)
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <main+0x21c>)
 8000a80:	701a      	strb	r2, [r3, #0]
	  HD44780_Clear();
 8000a82:	f7ff fdbd 	bl	8000600 <HD44780_Clear>

  	  HD44780_SetCursor(0,0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fdcf 	bl	800062c <HD44780_SetCursor>
  	  HD44780_PrintStr("Switch 1: ");
 8000a8e:	4820      	ldr	r0, [pc, #128]	@ (8000b10 <main+0x220>)
 8000a90:	f7ff fe3e 	bl	8000710 <HD44780_PrintStr>

  	  if (currentSwitch1) {
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <main+0x210>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <main+0x1b4>
  		HD44780_PrintStr("On.");
 8000a9c:	481d      	ldr	r0, [pc, #116]	@ (8000b14 <main+0x224>)
 8000a9e:	f7ff fe37 	bl	8000710 <HD44780_PrintStr>
 8000aa2:	e002      	b.n	8000aaa <main+0x1ba>
  	  }
  	  else {
    	HD44780_PrintStr("Off.");
 8000aa4:	481c      	ldr	r0, [pc, #112]	@ (8000b18 <main+0x228>)
 8000aa6:	f7ff fe33 	bl	8000710 <HD44780_PrintStr>
      }

  	  HD44780_SetCursor(0,1);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fdbd 	bl	800062c <HD44780_SetCursor>
  	  HD44780_PrintStr("Switch 2: ");
 8000ab2:	481a      	ldr	r0, [pc, #104]	@ (8000b1c <main+0x22c>)
 8000ab4:	f7ff fe2c 	bl	8000710 <HD44780_PrintStr>

  	  if (currentSwitch2) {
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <main+0x214>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <main+0x1d8>
 		HD44780_PrintStr("On.");
 8000ac0:	4814      	ldr	r0, [pc, #80]	@ (8000b14 <main+0x224>)
 8000ac2:	f7ff fe25 	bl	8000710 <HD44780_PrintStr>
 8000ac6:	e748      	b.n	800095a <main+0x6a>
  	  }
 	  else {
     	HD44780_PrintStr("Off.");
 8000ac8:	4813      	ldr	r0, [pc, #76]	@ (8000b18 <main+0x228>)
 8000aca:	f7ff fe21 	bl	8000710 <HD44780_PrintStr>
    if (HAL_CAN_GetState(&hcan1) & HAL_CAN_STATE_RESET || HAL_CAN_GetError(&hcan1) != HAL_OK) {
 8000ace:	e744      	b.n	800095a <main+0x6a>
 8000ad0:	2000018c 	.word	0x2000018c
 8000ad4:	20000194 	.word	0x20000194
 8000ad8:	08004784 	.word	0x08004784
 8000adc:	200000c4 	.word	0x200000c4
 8000ae0:	20000048 	.word	0x20000048
 8000ae4:	080047a0 	.word	0x080047a0
 8000ae8:	080047c0 	.word	0x080047c0
 8000aec:	20000010 	.word	0x20000010
 8000af0:	20000164 	.word	0x20000164
 8000af4:	20000188 	.word	0x20000188
 8000af8:	20000180 	.word	0x20000180
 8000afc:	2000014c 	.word	0x2000014c
 8000b00:	20000190 	.word	0x20000190
 8000b04:	20000192 	.word	0x20000192
 8000b08:	20000191 	.word	0x20000191
 8000b0c:	20000193 	.word	0x20000193
 8000b10:	080047cc 	.word	0x080047cc
 8000b14:	080047d8 	.word	0x080047d8
 8000b18:	080047dc 	.word	0x080047dc
 8000b1c:	080047e4 	.word	0x080047e4

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b096      	sub	sp, #88	@ 0x58
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2244      	movs	r2, #68	@ 0x44
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fde7 	bl	8004702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b46:	f001 ff37 	bl	80029b8 <HAL_PWREx_ControlVoltageScaling>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b50:	f000 f982 	bl	8000e58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b54:	f001 ff12 	bl	800297c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b58:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <SystemClock_Config+0xc0>)
 8000b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b5e:	4a20      	ldr	r2, [pc, #128]	@ (8000be0 <SystemClock_Config+0xc0>)
 8000b60:	f023 0318 	bic.w	r3, r3, #24
 8000b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b68:	2314      	movs	r3, #20
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b78:	2360      	movs	r3, #96	@ 0x60
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b80:	2301      	movs	r3, #1
 8000b82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 ff61 	bl	8002a64 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 f956 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fb61 	bl	800328c <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bd0:	f000 f942 	bl	8000e58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bd4:	f002 ff74 	bl	8003ac0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bd8:	bf00      	nop
 8000bda:	3758      	adds	r7, #88	@ 0x58
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bea:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000bec:	4a34      	ldr	r2, [pc, #208]	@ (8000cc0 <MX_CAN1_Init+0xdc>)
 8000bee:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bf0:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c26:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c32:	4822      	ldr	r0, [pc, #136]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c34:	f000 fb44 	bl	80012c0 <HAL_CAN_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c3e:	f000 f90b 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* Configure CAN filter */
  sFilterConfig.FilterBank = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000c66:	230e      	movs	r3, #14
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c70:	f000 fc21 	bl	80014b6 <HAL_CAN_ConfigFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_CAN1_Init+0x9a>
  {
    /* Start Error */
    Error_Handler();
 8000c7a:	f000 f8ed 	bl	8000e58 <Error_Handler>
  }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000c7e:	2102      	movs	r1, #2
 8000c80:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <MX_CAN1_Init+0xd8>)
 8000c82:	f000 ff18 	bl	8001ab6 <HAL_CAN_ActivateNotification>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_CAN1_Init+0xac>
  {
    /* Notification Error */
    Error_Handler();
 8000c8c:	f000 f8e4 	bl	8000e58 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = USER_INTERFACE;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <MX_CAN1_Init+0xe0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000048 	.word	0x20000048
 8000cc0:	40006400 	.word	0x40006400
 8000cc4:	2000014c 	.word	0x2000014c

08000cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <MX_I2C1_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <MX_I2C1_Init+0x7c>)
 8000cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d02:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d04:	f001 f9d4 	bl	80020b0 <HAL_I2C_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0e:	f000 f8a3 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d16:	f001 fd99 	bl	800284c <HAL_I2CEx_ConfigAnalogFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f89a 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d28:	f001 fddb 	bl	80028e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f891 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000070 	.word	0x20000070
 8000d40:	40005400 	.word	0x40005400
 8000d44:	00b07cb4 	.word	0x00b07cb4

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <MX_USART2_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d8c:	f002 ff9a 	bl	8003cc4 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 f85f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000c4 	.word	0x200000c4
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a23      	ldr	r2, [pc, #140]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a1d      	ldr	r2, [pc, #116]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <MX_GPIO_Init+0xa8>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4812      	ldr	r0, [pc, #72]	@ (8000e54 <MX_GPIO_Init+0xac>)
 8000e0c:	f001 f938 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e10:	2318      	movs	r3, #24
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e26:	f000 ffa9 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_GPIO_Init+0xac>)
 8000e42:	f000 ff9b 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Still need to handle this */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <Error_Handler+0x8>

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a18      	ldr	r2, [pc, #96]	@ (8000f2c <HAL_CAN_MspInit+0x80>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d129      	bne.n	8000f22 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_CAN_MspInit+0x84>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000efe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f10:	2309      	movs	r3, #9
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1e:	f000 ff2d 	bl	8001d7c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40006400 	.word	0x40006400
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09e      	sub	sp, #120	@ 0x78
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2254      	movs	r2, #84	@ 0x54
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fbd4 	bl	8004702 <memset>
  if(hi2c->Instance==I2C1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d137      	bne.n	8000fd4 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fbaf 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff ff6c 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9e:	2312      	movs	r3, #18
 8000fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000faa:	2304      	movs	r3, #4
 8000fac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb8:	f000 fee0 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3778      	adds	r7, #120	@ 0x78
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09e      	sub	sp, #120	@ 0x78
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2254      	movs	r2, #84	@ 0x54
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fb7c 	bl	8004702 <memset>
  if(huart->Instance==USART2)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d148      	bne.n	80010a6 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fb57 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800102c:	f7ff ff14 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 8001036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103a:	6593      	str	r3, [r2, #88]	@ 0x58
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_UART_MspInit+0xd0>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001060:	2304      	movs	r3, #4
 8001062:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f000 fe7d 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001086:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001094:	2303      	movs	r3, #3
 8001096:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f000 fe6b 	bl	8001d7c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010a6:	bf00      	nop
 80010a8:	3778      	adds	r7, #120	@ 0x78
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f000 f893 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001140:	f7ff ffea 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f003 fad3 	bl	8004714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116e:	f7ff fbbf 	bl	80008f0 <main>

08001172 <LoopForever>:

LoopForever:
    b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001180:	08004848 	.word	0x08004848
  ldr r2, =_sbss
 8001184:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001188:	20000298 	.word	0x20000298

0800118c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_IRQHandler>

0800118e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 fdbb 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f80e 	bl	80011c0 <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e001      	b.n	80011b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b0:	f7ff fe58 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d023      	beq.n	800121c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_InitTick+0x70>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fdb9 	bl	8001d62 <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d809      	bhi.n	8001210 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 fd91 	bl	8001d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_InitTick+0x74>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e007      	b.n	8001220 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e004      	b.n	8001220 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e001      	b.n	8001220 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000020 	.word	0x20000020
 8001230:	20000018 	.word	0x20000018
 8001234:	2000001c 	.word	0x2000001c

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000020 	.word	0x20000020
 800125c:	20000294 	.word	0x20000294

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000294 	.word	0x20000294

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000020 	.word	0x20000020

080012c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0ed      	b.n	80014ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fde4 	bl	8000eac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f4:	f7ff ffb4 	bl	8001260 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012fa:	e012      	b.n	8001322 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012fc:	f7ff ffb0 	bl	8001260 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b0a      	cmp	r3, #10
 8001308:	d90b      	bls.n	8001322 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2205      	movs	r2, #5
 800131a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0c5      	b.n	80014ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0e5      	beq.n	80012fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0202 	bic.w	r2, r2, #2
 800133e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001340:	f7ff ff8e 	bl	8001260 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001346:	e012      	b.n	800136e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001348:	f7ff ff8a 	bl	8001260 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d90b      	bls.n	800136e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2205      	movs	r2, #5
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e09f      	b.n	80014ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e5      	bne.n	8001348 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7e1b      	ldrb	r3, [r3, #24]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e007      	b.n	80013a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7e5b      	ldrb	r3, [r3, #25]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0220 	orr.w	r2, r2, #32
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e007      	b.n	80013fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0220 	bic.w	r2, r2, #32
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7edb      	ldrb	r3, [r3, #27]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d108      	bne.n	8001414 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0210 	bic.w	r2, r2, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e007      	b.n	8001424 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7f1b      	ldrb	r3, [r3, #28]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0208 	orr.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e007      	b.n	800144e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0208 	bic.w	r2, r2, #8
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7f5b      	ldrb	r3, [r3, #29]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d108      	bne.n	8001468 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0204 	orr.w	r2, r2, #4
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e007      	b.n	8001478 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	ea42 0103 	orr.w	r1, r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_ConfigFilter+0x26>
 80014d4:	7cfb      	ldrb	r3, [r7, #19]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 80aa 	bne.w	8001630 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d123      	bne.n	800155e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	401a      	ands	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001538:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3248      	adds	r2, #72	@ 0x48
 800153e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001552:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001554:	6979      	ldr	r1, [r7, #20]
 8001556:	3348      	adds	r3, #72	@ 0x48
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d122      	bne.n	80015ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001586:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3248      	adds	r2, #72	@ 0x48
 800158c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a2:	6979      	ldr	r1, [r7, #20]
 80015a4:	3348      	adds	r3, #72	@ 0x48
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015c6:	e007      	b.n	80015d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015f2:	e007      	b.n	8001604 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e006      	b.n	800163e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d12e      	bne.n	80016bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001676:	f7ff fdf3 	bl	8001260 <HAL_GetTick>
 800167a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800167c:	e012      	b.n	80016a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800167e:	f7ff fdef 	bl	8001260 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b0a      	cmp	r3, #10
 800168a:	d90b      	bls.n	80016a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2205      	movs	r2, #5
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e5      	bne.n	800167e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e006      	b.n	80016ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b089      	sub	sp, #36	@ 0x24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d003      	beq.n	80016fe <HAL_CAN_AddTxMessage+0x2c>
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	f040 80ad 	bne.w	8001858 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10a      	bne.n	800171e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8095 	beq.w	8001848 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	0e1b      	lsrs	r3, r3, #24
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001728:	2201      	movs	r2, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	409a      	lsls	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	6809      	ldr	r1, [r1, #0]
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3318      	adds	r3, #24
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e00f      	b.n	8001776 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001760:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001766:	68f9      	ldr	r1, [r7, #12]
 8001768:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800176a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3318      	adds	r3, #24
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	440b      	add	r3, r1
 8001774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	7d1b      	ldrb	r3, [r3, #20]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d111      	bne.n	80017b6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3318      	adds	r3, #24
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6811      	ldr	r1, [r2, #0]
 80017a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3318      	adds	r3, #24
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	440b      	add	r3, r1
 80017b2:	3304      	adds	r3, #4
 80017b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3307      	adds	r3, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	061a      	lsls	r2, r3, #24
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3306      	adds	r3, #6
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3305      	adds	r3, #5
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	4313      	orrs	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	3204      	adds	r2, #4
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	4610      	mov	r0, r2
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	ea43 0200 	orr.w	r2, r3, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3303      	adds	r3, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	061a      	lsls	r2, r3, #24
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3302      	adds	r3, #2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4313      	orrs	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	4610      	mov	r0, r2
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	ea43 0200 	orr.w	r2, r3, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	440b      	add	r3, r1
 800181e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3318      	adds	r3, #24
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	6811      	ldr	r1, [r2, #0]
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3318      	adds	r3, #24
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	440b      	add	r3, r1
 8001842:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e00e      	b.n	8001866 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e006      	b.n	8001866 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <HAL_CAN_GetRxMessage+0x24>
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 8103 	bne.w	8001a9c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10e      	bne.n	80018ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0f7      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0e8      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	331b      	adds	r3, #27
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0204 	and.w	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	331b      	adds	r3, #27
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00b      	b.n	8001928 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	331b      	adds	r3, #27
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	331b      	adds	r3, #27
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0202 	and.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	331b      	adds	r3, #27
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	e00b      	b.n	8001976 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	331b      	adds	r3, #27
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	331b      	adds	r3, #27
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a1a      	lsrs	r2, r3, #8
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0c1a      	lsrs	r2, r3, #16
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3302      	adds	r3, #2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e1a      	lsrs	r2, r3, #24
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3303      	adds	r3, #3
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0a1a      	lsrs	r2, r3, #8
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3305      	adds	r3, #5
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0c1a      	lsrs	r2, r3, #16
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3306      	adds	r3, #6
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e1a      	lsrs	r2, r3, #24
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0220 	orr.w	r2, r2, #32
 8001a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d002      	beq.n	8001ad4 <HAL_CAN_ActivateNotification+0x1e>
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6959      	ldr	r1, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e006      	b.n	8001af6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b10:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d002      	beq.n	8001b1e <HAL_CAN_GetState+0x1c>
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d112      	bne.n	8001b44 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e008      	b.n	8001b44 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8001b40:	2303      	movs	r3, #3
 8001b42:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b7e:	7bbb      	ldrb	r3, [r7, #14]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d002      	beq.n	8001b8a <HAL_CAN_ResetError+0x20>
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff47 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff5c 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffb0 	bl	8001cd0 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e148      	b.n	800201e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 813a 	beq.w	8002018 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8094 	beq.w	8002018 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b52      	ldr	r3, [pc, #328]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef4:	4a51      	ldr	r2, [pc, #324]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efc:	4b4f      	ldr	r3, [pc, #316]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f08:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1d4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a43      	ldr	r2, [pc, #268]	@ (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1d0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1cc>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f48:	2307      	movs	r3, #7
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1d6>
 8001f50:	2300      	movs	r3, #0
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f62:	4937      	ldr	r1, [pc, #220]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f94:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fbe:	4a23      	ldr	r2, [pc, #140]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe8:	4a18      	ldr	r2, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002012:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	f47f aeaf 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	48000400 	.word	0x48000400
 8002048:	48000800 	.word	0x48000800
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08d      	b.n	80021de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe ff2c 	bl	8000f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e006      	b.n	8002138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d108      	bne.n	8002152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 80fd 	bne.w	8002404 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x30>
 8002214:	2302      	movs	r3, #2
 8002216:	e0f6      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002220:	f7ff f81e 	bl	8001260 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f914 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e1      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2bff      	cmp	r3, #255	@ 0xff
 8002272:	d906      	bls.n	8002282 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	22ff      	movs	r2, #255	@ 0xff
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800227a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e007      	b.n	8002292 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800228c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002290:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d024      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	8979      	ldrh	r1, [r7, #10]
 80022d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa83 	bl	80027e8 <I2C_TransferConfig>
 80022e2:	e066      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa78 	bl	80027e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022f8:	e05b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f907 	bl	8002512 <I2C_WaitOnTXISFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07b      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d034      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d130      	bne.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2200      	movs	r2, #0
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f880 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e04d      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2bff      	cmp	r3, #255	@ 0xff
 8002372:	d90e      	bls.n	8002392 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	b2da      	uxtb	r2, r3
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa2c 	bl	80027e8 <I2C_TransferConfig>
 8002390:	e00f      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa1b 	bl	80027e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d19e      	bne.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8ed 	bl	80025a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01a      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_I2C_Master_Transmit+0x22c>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	80002000 	.word	0x80002000
 8002414:	fe00e800 	.word	0xfe00e800

08002418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d103      	bne.n	8002436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	619a      	str	r2, [r3, #24]
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002470:	e03b      	b.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8d6 	bl	8002628 <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d02d      	beq.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe fee7 	bl	8001260 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d122      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d113      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	429a      	cmp	r2, r3
 8002506:	d0b4      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800251e:	e033      	b.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f87f 	bl	8002628 <I2C_IsErrorOccurred>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e031      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d025      	beq.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7fe fe90 	bl	8001260 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11a      	bne.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d013      	beq.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e007      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d1c4      	bne.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	e02f      	b.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f838 	bl	8002628 <I2C_IsErrorOccurred>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02d      	b.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fe4d 	bl	8001260 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11a      	bne.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d013      	beq.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d1c8      	bne.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d068      	beq.n	8002726 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265c:	e049      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d045      	beq.n	80026f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7fe fdfb 	bl	8001260 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_IsErrorOccurred+0x54>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13a      	bne.n	80026f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800268e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800269e:	d121      	bne.n	80026e4 <I2C_IsErrorOccurred+0xbc>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026a6:	d01d      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d01a      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026be:	f7fe fdcf 	bl	8001260 <HAL_GetTick>
 80026c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e00e      	b.n	80026e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c6:	f7fe fdcb 	bl	8001260 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b19      	cmp	r3, #25
 80026d2:	d907      	bls.n	80026e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026e2:	e006      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d1e9      	bne.n	80026c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d003      	beq.n	8002708 <I2C_IsErrorOccurred+0xe0>
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0aa      	beq.n	800265e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800276a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fe3b 	bl	8002418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <I2C_IsErrorOccurred+0x1bc>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	4613      	mov	r3, r2
 80027f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002800:	7a7b      	ldrb	r3, [r7, #9]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002808:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002816:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <I2C_TransferConfig+0x60>)
 8002828:	430b      	orrs	r3, r1
 800282a:	43db      	mvns	r3, r3
 800282c:	ea02 0103 	and.w	r1, r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	03ff63ff 	.word	0x03ff63ff

0800284c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d138      	bne.n	80028d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800286c:	2302      	movs	r3, #2
 800286e:	e032      	b.n	80028d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800289e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d139      	bne.n	800296c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002902:	2302      	movs	r3, #2
 8002904:	e033      	b.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2224      	movs	r2, #36	@ 0x24
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40007000 	.word	0x40007000

0800299c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000

080029b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c6:	d130      	bne.n	8002a2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c8:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029d4:	d038      	beq.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029de:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2232      	movs	r2, #50	@ 0x32
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9b      	lsrs	r3, r3, #18
 80029f8:	3301      	adds	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029fc:	e002      	b.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a10:	d102      	bne.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f2      	bne.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a24:	d110      	bne.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e00f      	b.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a36:	d007      	beq.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a40:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	20000018 	.word	0x20000018
 8002a60:	431bde83 	.word	0x431bde83

08002a64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f000 bc02 	b.w	800327c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a78:	4b96      	ldr	r3, [pc, #600]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a82:	4b94      	ldr	r3, [pc, #592]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80e4 	beq.w	8002c62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4c>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	f040 808b 	bne.w	8002bbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 8087 	bne.w	8002bbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab0:	4b88      	ldr	r3, [pc, #544]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e3d9      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	4b81      	ldr	r3, [pc, #516]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x7e>
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	e005      	b.n	8002aee <HAL_RCC_OscConfig+0x8a>
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d223      	bcs.n	8002b3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fd8c 	bl	8003614 <RCC_SetFlashLatencyFromMSIRange>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e3ba      	b.n	800327c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b06:	4b73      	ldr	r3, [pc, #460]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a72      	ldr	r2, [pc, #456]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b70      	ldr	r3, [pc, #448]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	496d      	ldr	r1, [pc, #436]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b24:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	4968      	ldr	r1, [pc, #416]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e025      	b.n	8002b86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b63      	ldr	r3, [pc, #396]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4960      	ldr	r1, [pc, #384]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b58:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	495b      	ldr	r1, [pc, #364]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fd4c 	bl	8003614 <RCC_SetFlashLatencyFromMSIRange>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e37a      	b.n	800327c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b86:	f000 fc81 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b51      	ldr	r3, [pc, #324]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4950      	ldr	r1, [pc, #320]	@ (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_RCC_OscConfig+0x278>)
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce0 <HAL_RCC_OscConfig+0x27c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fb08 	bl	80011c0 <HAL_InitTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d052      	beq.n	8002c60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	e35e      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d032      	beq.n	8002c2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bc6:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a42      	ldr	r2, [pc, #264]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fb45 	bl	8001260 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bda:	f7fe fb41 	bl	8001260 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e347      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bec:	4b39      	ldr	r3, [pc, #228]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a35      	ldr	r2, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4930      	ldr	r1, [pc, #192]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c16:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	492b      	ldr	r1, [pc, #172]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
 8002c2a:	e01a      	b.n	8002c62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c2c:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a28      	ldr	r2, [pc, #160]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fb12 	bl	8001260 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c40:	f7fe fb0e 	bl	8001260 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e314      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c52:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1dc>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d073      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x21c>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d10e      	bne.n	8002c98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d063      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d15f      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e2f1      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x24c>
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e025      	b.n	8002cfc <HAL_RCC_OscConfig+0x298>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb8:	d114      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x280>
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a02      	ldr	r2, [pc, #8]	@ (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x298>
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	080047f0 	.word	0x080047f0
 8002cdc:	20000018 	.word	0x20000018
 8002ce0:	2000001c 	.word	0x2000001c
 8002ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a9f      	ldr	r2, [pc, #636]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a9c      	ldr	r2, [pc, #624]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe faac 	bl	8001260 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe faa8 	bl	8001260 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e2ae      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1e:	4b92      	ldr	r3, [pc, #584]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x2a8>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fa98 	bl	8001260 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fe fa94 	bl	8001260 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	@ 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e29a      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d46:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2d0>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d060      	beq.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x310>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d116      	bne.n	8002da2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d74:	4b7c      	ldr	r3, [pc, #496]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x328>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e277      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b76      	ldr	r3, [pc, #472]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	4973      	ldr	r1, [pc, #460]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da0:	e040      	b.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d023      	beq.n	8002df2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002daa:	4b6f      	ldr	r3, [pc, #444]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6e      	ldr	r2, [pc, #440]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fa53 	bl	8001260 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fa4f 	bl	8001260 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e255      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd0:	4b65      	ldr	r3, [pc, #404]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b62      	ldr	r3, [pc, #392]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	495f      	ldr	r1, [pc, #380]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
 8002df0:	e018      	b.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fa2f 	bl	8001260 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fa2b 	bl	8001260 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e231      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e38:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe fa0a 	bl	8001260 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e50:	f7fe fa06 	bl	8001260 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e20c      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e62:	4b41      	ldr	r3, [pc, #260]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <HAL_RCC_OscConfig+0x3ec>
 8002e70:	e01b      	b.n	8002eaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e72:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e78:	4a3b      	ldr	r2, [pc, #236]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe f9ed 	bl	8001260 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f9e9 	bl	8001260 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1ef      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e9c:	4b32      	ldr	r3, [pc, #200]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ef      	bne.n	8002e8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a6 	beq.w	8003004 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	4a26      	ldr	r2, [pc, #152]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed4:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCC_OscConfig+0x508>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d118      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_RCC_OscConfig+0x508>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x508>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efc:	f7fe f9b0 	bl	8001260 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe f9ac 	bl	8001260 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1b2      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x508>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d108      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4d8>
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f3a:	e029      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d115      	bne.n	8002f70 <HAL_RCC_OscConfig+0x50c>
 8002f44:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	4a03      	ldr	r2, [pc, #12]	@ (8002f68 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x52c>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	4b9a      	ldr	r3, [pc, #616]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	4a99      	ldr	r2, [pc, #612]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f80:	4b96      	ldr	r3, [pc, #600]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	4a95      	ldr	r2, [pc, #596]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe f962 	bl	8001260 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe f95e 	bl	8001260 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e162      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb6:	4b89      	ldr	r3, [pc, #548]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ed      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x53c>
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f94b 	bl	8001260 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe f947 	bl	8001260 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e14b      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe4:	4b7d      	ldr	r3, [pc, #500]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ed      	bne.n	8002fce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b78      	ldr	r3, [pc, #480]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	4a77      	ldr	r2, [pc, #476]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d03c      	beq.n	800308a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01c      	beq.n	8003052 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003018:	4b70      	ldr	r3, [pc, #448]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800301a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800301e:	4a6f      	ldr	r2, [pc, #444]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe f91a 	bl	8001260 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003030:	f7fe f916 	bl	8001260 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e11c      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003042:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ef      	beq.n	8003030 <HAL_RCC_OscConfig+0x5cc>
 8003050:	e01b      	b.n	800308a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003052:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003054:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003058:	4a60      	ldr	r2, [pc, #384]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe f8fd 	bl	8001260 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800306a:	f7fe f8f9 	bl	8001260 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0ff      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800307c:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800307e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ef      	bne.n	800306a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80f3 	beq.w	800327a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	2b02      	cmp	r3, #2
 800309a:	f040 80c9 	bne.w	8003230 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800309e:	4b4f      	ldr	r3, [pc, #316]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 0203 	and.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d12c      	bne.n	800310c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	3b01      	subs	r3, #1
 80030be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d123      	bne.n	800310c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d11b      	bne.n	800310c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d113      	bne.n	800310c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d109      	bne.n	800310c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d06b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d062      	beq.n	80031d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003112:	4b32      	ldr	r3, [pc, #200]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0ac      	b.n	800327c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003122:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2d      	ldr	r2, [pc, #180]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003128:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800312c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800312e:	f7fe f897 	bl	8001260 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe f893 	bl	8001260 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e099      	b.n	800327c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x77c>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003164:	3a01      	subs	r2, #1
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800316e:	0212      	lsls	r2, r2, #8
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003176:	0852      	lsrs	r2, r2, #1
 8003178:	3a01      	subs	r2, #1
 800317a:	0552      	lsls	r2, r2, #21
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	3a01      	subs	r2, #1
 8003186:	0652      	lsls	r2, r2, #25
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800318e:	06d2      	lsls	r2, r2, #27
 8003190:	430a      	orrs	r2, r1
 8003192:	4912      	ldr	r1, [pc, #72]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003198:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0f      	ldr	r2, [pc, #60]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a4:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b0:	f7fe f856 	bl	8001260 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe f852 	bl	8001260 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e058      	b.n	800327c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <HAL_RCC_OscConfig+0x778>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d6:	e050      	b.n	800327a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e04f      	b.n	800327c <HAL_RCC_OscConfig+0x818>
 80031dc:	40021000 	.word	0x40021000
 80031e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e4:	4b27      	ldr	r3, [pc, #156]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d144      	bne.n	800327a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031f0:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031fc:	4b21      	ldr	r3, [pc, #132]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a20      	ldr	r2, [pc, #128]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003206:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003208:	f7fe f82a 	bl	8001260 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe f826 	bl	8001260 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e02c      	b.n	800327c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x7ac>
 800322e:	e024      	b.n	800327a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d01f      	beq.n	8003276 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 800323c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe f80d 	bl	8001260 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe f809 	bl	8001260 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	4905      	ldr	r1, [pc, #20]	@ (8003284 <HAL_RCC_OscConfig+0x820>)
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_OscConfig+0x824>)
 8003270:	4013      	ands	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
 8003274:	e001      	b.n	800327a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	feeefffc 	.word	0xfeeefffc

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0e7      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b75      	ldr	r3, [pc, #468]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b72      	ldr	r3, [pc, #456]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4970      	ldr	r1, [pc, #448]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b6e      	ldr	r3, [pc, #440]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0cf      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	4b66      	ldr	r3, [pc, #408]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d908      	bls.n	80032fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b63      	ldr	r3, [pc, #396]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4960      	ldr	r1, [pc, #384]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d04c      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	4b5a      	ldr	r3, [pc, #360]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d121      	bne.n	8003362 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0a6      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332a:	4b54      	ldr	r3, [pc, #336]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e09a      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003342:	4b4e      	ldr	r3, [pc, #312]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e08e      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003352:	4b4a      	ldr	r3, [pc, #296]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e086      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b46      	ldr	r3, [pc, #280]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4943      	ldr	r1, [pc, #268]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003374:	f7fd ff74 	bl	8001260 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd ff70 	bl	8001260 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e06e      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b31      	ldr	r3, [pc, #196]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033bc:	429a      	cmp	r2, r3
 80033be:	d208      	bcs.n	80033d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b2e      	ldr	r3, [pc, #184]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	492b      	ldr	r1, [pc, #172]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d2:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d210      	bcs.n	8003402 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e0:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 0207 	bic.w	r2, r3, #7
 80033e8:	4923      	ldr	r1, [pc, #140]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_RCC_ClockConfig+0x1ec>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e036      	b.n	8003470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340e:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4918      	ldr	r1, [pc, #96]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342c:	4b13      	ldr	r3, [pc, #76]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4910      	ldr	r1, [pc, #64]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003440:	f000 f824 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_RCC_ClockConfig+0x1f0>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	490b      	ldr	r1, [pc, #44]	@ (8003480 <HAL_RCC_ClockConfig+0x1f4>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
 800345c:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <HAL_RCC_ClockConfig+0x1f8>)
 800345e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_ClockConfig+0x1fc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd feab 	bl	80011c0 <HAL_InitTick>
 800346a:	4603      	mov	r3, r0
 800346c:	72fb      	strb	r3, [r7, #11]

  return status;
 800346e:	7afb      	ldrb	r3, [r7, #11]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40022000 	.word	0x40022000
 800347c:	40021000 	.word	0x40021000
 8003480:	080047f0 	.word	0x080047f0
 8003484:	20000018 	.word	0x20000018
 8003488:	2000001c 	.word	0x2000001c

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b3e      	ldr	r3, [pc, #248]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d11e      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034c0:	4b34      	ldr	r3, [pc, #208]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e005      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d102      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003504:	4b25      	ldr	r3, [pc, #148]	@ (800359c <HAL_RCC_GetSysClockFreq+0x110>)
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	e004      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d101      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003510:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003512:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d134      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0xa6>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d003      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xac>
 8003530:	e005      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003532:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <HAL_RCC_GetSysClockFreq+0x110>)
 8003534:	617b      	str	r3, [r7, #20]
      break;
 8003536:	e005      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800353a:	617b      	str	r3, [r7, #20]
      break;
 800353c:	e002      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	617b      	str	r3, [r7, #20]
      break;
 8003542:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	3301      	adds	r3, #1
 8003550:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	fb03 f202 	mul.w	r2, r3, r2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800356a:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x108>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	0e5b      	lsrs	r3, r3, #25
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	3301      	adds	r3, #1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	08004808 	.word	0x08004808
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200

080035a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	@ (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000018 	.word	0x20000018

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	08004800 	.word	0x08004800

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035ec:	f7ff ffda 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0adb      	lsrs	r3, r3, #11
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4904      	ldr	r1, [pc, #16]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	08004800 	.word	0x08004800

08003614 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003620:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800362c:	f7ff f9b6 	bl	800299c <HAL_PWREx_GetVoltageRange>
 8003630:	6178      	str	r0, [r7, #20]
 8003632:	e014      	b.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4b25      	ldr	r3, [pc, #148]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	4a24      	ldr	r2, [pc, #144]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003640:	4b22      	ldr	r3, [pc, #136]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800364c:	f7ff f9a6 	bl	800299c <HAL_PWREx_GetVoltageRange>
 8003650:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003664:	d10b      	bne.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d919      	bls.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003670:	d902      	bls.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003672:	2302      	movs	r3, #2
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e013      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003678:	2301      	movs	r3, #1
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e010      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b80      	cmp	r3, #128	@ 0x80
 8003682:	d902      	bls.n	800368a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003684:	2303      	movs	r3, #3
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e00a      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b80      	cmp	r3, #128	@ 0x80
 800368e:	d102      	bne.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003690:	2302      	movs	r3, #2
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	e004      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b70      	cmp	r3, #112	@ 0x70
 800369a:	d101      	bne.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800369c:	2301      	movs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036a0:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 0207 	bic.w	r2, r3, #7
 80036a8:	4909      	ldr	r1, [pc, #36]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036b0:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40022000 	.word	0x40022000

080036d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036dc:	2300      	movs	r3, #0
 80036de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036e0:	2300      	movs	r3, #0
 80036e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d031      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036f8:	d01a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036fe:	d814      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003704:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003708:	d10f      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800370a:	4b5d      	ldr	r3, [pc, #372]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a5c      	ldr	r2, [pc, #368]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003714:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003716:	e00c      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f9de 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	74fb      	strb	r3, [r7, #19]
      break;
 800372e:	e000      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003738:	4b51      	ldr	r3, [pc, #324]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	494e      	ldr	r1, [pc, #312]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800374e:	e001      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 809e 	beq.w	800389e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003766:	4b46      	ldr	r3, [pc, #280]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003780:	4a3f      	ldr	r2, [pc, #252]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003786:	6593      	str	r3, [r2, #88]	@ 0x58
 8003788:	4b3d      	ldr	r3, [pc, #244]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003794:	2301      	movs	r3, #1
 8003796:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003798:	4b3a      	ldr	r3, [pc, #232]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a39      	ldr	r2, [pc, #228]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a4:	f7fd fd5c 	bl	8001260 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037aa:	e009      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ac:	f7fd fd58 	bl	8001260 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	74fb      	strb	r3, [r7, #19]
        break;
 80037be:	e005      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037c0:	4b30      	ldr	r3, [pc, #192]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d15a      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01e      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d019      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037fa:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800380a:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800381a:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d016      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd fd18 	bl	8001260 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003832:	e00b      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fd fd14 	bl	8001260 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d902      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	74fb      	strb	r3, [r7, #19]
            break;
 800384a:	e006      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ec      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003860:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003876:	e009      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
 800387c:	e006      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388c:	7c7b      	ldrb	r3, [r7, #17]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b8a      	ldr	r3, [pc, #552]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	4a89      	ldr	r2, [pc, #548]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038aa:	4b84      	ldr	r3, [pc, #528]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b0:	f023 0203 	bic.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4980      	ldr	r1, [pc, #512]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038cc:	4b7b      	ldr	r3, [pc, #492]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d2:	f023 020c 	bic.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	4978      	ldr	r1, [pc, #480]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ee:	4b73      	ldr	r3, [pc, #460]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	496f      	ldr	r1, [pc, #444]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003910:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	4967      	ldr	r1, [pc, #412]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003932:	4b62      	ldr	r3, [pc, #392]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	495e      	ldr	r1, [pc, #376]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003954:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	4956      	ldr	r1, [pc, #344]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003976:	4b51      	ldr	r3, [pc, #324]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	494d      	ldr	r1, [pc, #308]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003998:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	4945      	ldr	r1, [pc, #276]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a3f      	ldr	r2, [pc, #252]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f882 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f6:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	492d      	ldr	r1, [pc, #180]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a28      	ldr	r2, [pc, #160]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f853 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01c      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a62:	4916      	ldr	r1, [pc, #88]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f830 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a9a:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	4904      	ldr	r1, [pc, #16]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aee:	4b74      	ldr	r3, [pc, #464]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003afa:	4b71      	ldr	r3, [pc, #452]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d10d      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b12:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
       ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d047      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	e044      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d018      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x86>
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d825      	bhi.n	8003b84 <RCCEx_PLLSAI1_Config+0xa4>
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x62>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d009      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x74>
 8003b40:	e020      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b42:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11d      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b52:	e01a      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b54:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e013      	b.n	8003b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b66:	4b56      	ldr	r3, [pc, #344]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b72:	4b53      	ldr	r3, [pc, #332]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b82:	e006      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e004      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e002      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b9a:	4b49      	ldr	r3, [pc, #292]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	4943      	ldr	r1, [pc, #268]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d17c      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bbc:	4b40      	ldr	r3, [pc, #256]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fb4a 	bl	8001260 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bce:	e009      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd0:	f7fd fb46 	bl	8001260 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d902      	bls.n	8003be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	73fb      	strb	r3, [r7, #15]
        break;
 8003be2:	e005      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003be4:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ef      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d15f      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfc:	4b30      	ldr	r3, [pc, #192]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003c04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68d2      	ldr	r2, [r2, #12]
 8003c12:	06d2      	lsls	r2, r2, #27
 8003c14:	430a      	orrs	r2, r1
 8003c16:	492a      	ldr	r1, [pc, #168]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]
 8003c1c:	e027      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d112      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c24:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6912      	ldr	r2, [r2, #16]
 8003c3a:	0852      	lsrs	r2, r2, #1
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0552      	lsls	r2, r2, #21
 8003c40:	430a      	orrs	r2, r1
 8003c42:	491f      	ldr	r1, [pc, #124]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	610b      	str	r3, [r1, #16]
 8003c48:	e011      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	0211      	lsls	r1, r2, #8
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6952      	ldr	r2, [r2, #20]
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0652      	lsls	r2, r2, #25
 8003c66:	430a      	orrs	r2, r1
 8003c68:	4915      	ldr	r1, [pc, #84]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c6e:	4b14      	ldr	r3, [pc, #80]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a13      	ldr	r2, [pc, #76]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd faf1 	bl	8001260 <HAL_GetTick>
 8003c7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c80:	e009      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c82:	f7fd faed 	bl	8001260 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d902      	bls.n	8003c96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	73fb      	strb	r3, [r7, #15]
          break;
 8003c94:	e005      	b.n	8003ca2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ef      	beq.n	8003c82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	4903      	ldr	r1, [pc, #12]	@ (8003cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000

08003cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e040      	b.n	8003d58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd f97c 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	@ 0x24
 8003cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fade 	bl	80042cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8af 	bl	8003e74 <UART_SetConfig>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e01b      	b.n	8003d58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fb5d 	bl	8004410 <UART_CheckIdleState>
 8003d56:	4603      	mov	r3, r0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d177      	bne.n	8003e68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Transmit+0x24>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e070      	b.n	8003e6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	@ 0x21
 8003d94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d96:	f7fd fa63 	bl	8001260 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db4:	d108      	bne.n	8003dc8 <HAL_UART_Transmit+0x68>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd0:	e02f      	b.n	8003e32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fbbf 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e03b      	b.n	8003e6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	b292      	uxth	r2, r2
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	e007      	b.n	8003e20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1c9      	bne.n	8003dd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2140      	movs	r1, #64	@ 0x40
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb89 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e005      	b.n	8003e6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b08a      	sub	sp, #40	@ 0x28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4bb4      	ldr	r3, [pc, #720]	@ (8004174 <UART_SetConfig+0x300>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4aa9      	ldr	r2, [pc, #676]	@ (8004178 <UART_SetConfig+0x304>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003edc:	4313      	orrs	r3, r2
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4aa0      	ldr	r2, [pc, #640]	@ (800417c <UART_SetConfig+0x308>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d126      	bne.n	8003f4c <UART_SetConfig+0xd8>
 8003efe:	4ba0      	ldr	r3, [pc, #640]	@ (8004180 <UART_SetConfig+0x30c>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d81b      	bhi.n	8003f44 <UART_SetConfig+0xd0>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <UART_SetConfig+0xa0>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2a:	e080      	b.n	800402e <UART_SetConfig+0x1ba>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e07c      	b.n	800402e <UART_SetConfig+0x1ba>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e078      	b.n	800402e <UART_SetConfig+0x1ba>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e074      	b.n	800402e <UART_SetConfig+0x1ba>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e070      	b.n	800402e <UART_SetConfig+0x1ba>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a8c      	ldr	r2, [pc, #560]	@ (8004184 <UART_SetConfig+0x310>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d138      	bne.n	8003fc8 <UART_SetConfig+0x154>
 8003f56:	4b8a      	ldr	r3, [pc, #552]	@ (8004180 <UART_SetConfig+0x30c>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d82d      	bhi.n	8003fc0 <UART_SetConfig+0x14c>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <UART_SetConfig+0xf8>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003fa1 	.word	0x08003fa1
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fc1 	.word	0x08003fc1
 8003f78:	08003fc1 	.word	0x08003fc1
 8003f7c:	08003fb1 	.word	0x08003fb1
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08003fc1 	.word	0x08003fc1
 8003f88:	08003fc1 	.word	0x08003fc1
 8003f8c:	08003fa9 	.word	0x08003fa9
 8003f90:	08003fc1 	.word	0x08003fc1
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e042      	b.n	800402e <UART_SetConfig+0x1ba>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e03e      	b.n	800402e <UART_SetConfig+0x1ba>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e03a      	b.n	800402e <UART_SetConfig+0x1ba>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e036      	b.n	800402e <UART_SetConfig+0x1ba>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e032      	b.n	800402e <UART_SetConfig+0x1ba>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004178 <UART_SetConfig+0x304>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d12a      	bne.n	8004028 <UART_SetConfig+0x1b4>
 8003fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8004180 <UART_SetConfig+0x30c>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe0:	d01a      	beq.n	8004018 <UART_SetConfig+0x1a4>
 8003fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe6:	d81b      	bhi.n	8004020 <UART_SetConfig+0x1ac>
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fec:	d00c      	beq.n	8004008 <UART_SetConfig+0x194>
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff2:	d815      	bhi.n	8004020 <UART_SetConfig+0x1ac>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <UART_SetConfig+0x18c>
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0x19c>
 8003ffe:	e00f      	b.n	8004020 <UART_SetConfig+0x1ac>
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e012      	b.n	800402e <UART_SetConfig+0x1ba>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e00e      	b.n	800402e <UART_SetConfig+0x1ba>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e00a      	b.n	800402e <UART_SetConfig+0x1ba>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e006      	b.n	800402e <UART_SetConfig+0x1ba>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e002      	b.n	800402e <UART_SetConfig+0x1ba>
 8004028:	2310      	movs	r3, #16
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a51      	ldr	r2, [pc, #324]	@ (8004178 <UART_SetConfig+0x304>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d17a      	bne.n	800412e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800403c:	2b08      	cmp	r3, #8
 800403e:	d824      	bhi.n	800408a <UART_SetConfig+0x216>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <UART_SetConfig+0x1d4>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800408b 	.word	0x0800408b
 8004050:	08004075 	.word	0x08004075
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800407b 	.word	0x0800407b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800408b 	.word	0x0800408b
 8004068:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7ff faa6 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e010      	b.n	8004096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b44      	ldr	r3, [pc, #272]	@ (8004188 <UART_SetConfig+0x314>)
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e00d      	b.n	8004096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7ff fa07 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800407e:	61f8      	str	r0, [r7, #28]
        break;
 8004080:	e009      	b.n	8004096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e005      	b.n	8004096 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8107 	beq.w	80042ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d305      	bcc.n	80040ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040c0:	e0f4      	b.n	80042ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2200      	movs	r2, #0
 80040c6:	461c      	mov	r4, r3
 80040c8:	4615      	mov	r5, r2
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	022b      	lsls	r3, r5, #8
 80040d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d8:	0222      	lsls	r2, r4, #8
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6849      	ldr	r1, [r1, #4]
 80040de:	0849      	lsrs	r1, r1, #1
 80040e0:	2000      	movs	r0, #0
 80040e2:	4688      	mov	r8, r1
 80040e4:	4681      	mov	r9, r0
 80040e6:	eb12 0a08 	adds.w	sl, r2, r8
 80040ea:	eb43 0b09 	adc.w	fp, r3, r9
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	4650      	mov	r0, sl
 80040fe:	4659      	mov	r1, fp
 8004100:	f7fc f864 	bl	80001cc <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004112:	d308      	bcc.n	8004126 <UART_SetConfig+0x2b2>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411a:	d204      	bcs.n	8004126 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e0c2      	b.n	80042ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800412c:	e0be      	b.n	80042ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004136:	d16a      	bne.n	800420e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800413c:	2b08      	cmp	r3, #8
 800413e:	d834      	bhi.n	80041aa <UART_SetConfig+0x336>
 8004140:	a201      	add	r2, pc, #4	@ (adr r2, 8004148 <UART_SetConfig+0x2d4>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	0800418d 	.word	0x0800418d
 8004150:	08004195 	.word	0x08004195
 8004154:	080041ab 	.word	0x080041ab
 8004158:	0800419b 	.word	0x0800419b
 800415c:	080041ab 	.word	0x080041ab
 8004160:	080041ab 	.word	0x080041ab
 8004164:	080041ab 	.word	0x080041ab
 8004168:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff fa26 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e020      	b.n	80041b6 <UART_SetConfig+0x342>
 8004174:	efff69f3 	.word	0xefff69f3
 8004178:	40008000 	.word	0x40008000
 800417c:	40013800 	.word	0x40013800
 8004180:	40021000 	.word	0x40021000
 8004184:	40004400 	.word	0x40004400
 8004188:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7ff fa2c 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8004190:	61f8      	str	r0, [r7, #28]
        break;
 8004192:	e010      	b.n	80041b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b4c      	ldr	r3, [pc, #304]	@ (80042c8 <UART_SetConfig+0x454>)
 8004196:	61fb      	str	r3, [r7, #28]
        break;
 8004198:	e00d      	b.n	80041b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7ff f977 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800419e:	61f8      	str	r0, [r7, #28]
        break;
 80041a0:	e009      	b.n	80041b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	61fb      	str	r3, [r7, #28]
        break;
 80041a8:	e005      	b.n	80041b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d077      	beq.n	80042ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005a      	lsls	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	441a      	add	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d916      	bls.n	8004206 <UART_SetConfig+0x392>
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041de:	d212      	bcs.n	8004206 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f023 030f 	bic.w	r3, r3, #15
 80041e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	8afb      	ldrh	r3, [r7, #22]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	8afa      	ldrh	r2, [r7, #22]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e052      	b.n	80042ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800420c:	e04e      	b.n	80042ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004212:	2b08      	cmp	r3, #8
 8004214:	d827      	bhi.n	8004266 <UART_SetConfig+0x3f2>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0x3a8>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004241 	.word	0x08004241
 8004220:	08004249 	.word	0x08004249
 8004224:	08004251 	.word	0x08004251
 8004228:	08004267 	.word	0x08004267
 800422c:	08004257 	.word	0x08004257
 8004230:	08004267 	.word	0x08004267
 8004234:	08004267 	.word	0x08004267
 8004238:	08004267 	.word	0x08004267
 800423c:	0800425f 	.word	0x0800425f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7ff f9bc 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004244:	61f8      	str	r0, [r7, #28]
        break;
 8004246:	e014      	b.n	8004272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7ff f9ce 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 800424c:	61f8      	str	r0, [r7, #28]
        break;
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004250:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <UART_SetConfig+0x454>)
 8004252:	61fb      	str	r3, [r7, #28]
        break;
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004256:	f7ff f919 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800425a:	61f8      	str	r0, [r7, #28]
        break;
 800425c:	e009      	b.n	8004272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004262:	61fb      	str	r3, [r7, #28]
        break;
 8004264:	e005      	b.n	8004272 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004270:	bf00      	nop
    }

    if (pclk != 0U)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	085a      	lsrs	r2, r3, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	441a      	add	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b0f      	cmp	r3, #15
 8004290:	d909      	bls.n	80042a6 <UART_SetConfig+0x432>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d205      	bcs.n	80042a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	e002      	b.n	80042ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	00f42400 	.word	0x00f42400

080042cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ca:	d10a      	bne.n	80043e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b098      	sub	sp, #96	@ 0x60
 8004414:	af02      	add	r7, sp, #8
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004420:	f7fc ff1e 	bl	8001260 <HAL_GetTick>
 8004424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d12e      	bne.n	8004492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f88c 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	653b      	str	r3, [r7, #80]	@ 0x50
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446c:	647b      	str	r3, [r7, #68]	@ 0x44
 800446e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e062      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d149      	bne.n	8004534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	2200      	movs	r2, #0
 80044aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f856 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d03c      	beq.n	8004534 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	617b      	str	r3, [r7, #20]
   return(result);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e011      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3758      	adds	r7, #88	@ 0x58
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e04f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d04b      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fc fe71 	bl	8001260 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e04e      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d037      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	d034      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d031      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d110      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2208      	movs	r2, #8
 80045c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f838 	bl	800463a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2208      	movs	r2, #8
 80045ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e029      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ec:	d111      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f81e 	bl	800463a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	429a      	cmp	r2, r3
 800462e:	d0a0      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b095      	sub	sp, #84	@ 0x54
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004660:	643b      	str	r3, [r7, #64]	@ 0x40
 8004662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	61fb      	str	r3, [r7, #28]
   return(result);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800469a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d118      	bne.n	80046e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0310 	bic.w	r3, r3, #16
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	613b      	str	r3, [r7, #16]
   return(result);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e6      	bne.n	80046b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046f6:	bf00      	nop
 80046f8:	3754      	adds	r7, #84	@ 0x54
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <memset>:
 8004702:	4402      	add	r2, r0
 8004704:	4603      	mov	r3, r0
 8004706:	4293      	cmp	r3, r2
 8004708:	d100      	bne.n	800470c <memset+0xa>
 800470a:	4770      	bx	lr
 800470c:	f803 1b01 	strb.w	r1, [r3], #1
 8004710:	e7f9      	b.n	8004706 <memset+0x4>
	...

08004714 <__libc_init_array>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	4d0d      	ldr	r5, [pc, #52]	@ (800474c <__libc_init_array+0x38>)
 8004718:	4c0d      	ldr	r4, [pc, #52]	@ (8004750 <__libc_init_array+0x3c>)
 800471a:	1b64      	subs	r4, r4, r5
 800471c:	10a4      	asrs	r4, r4, #2
 800471e:	2600      	movs	r6, #0
 8004720:	42a6      	cmp	r6, r4
 8004722:	d109      	bne.n	8004738 <__libc_init_array+0x24>
 8004724:	4d0b      	ldr	r5, [pc, #44]	@ (8004754 <__libc_init_array+0x40>)
 8004726:	4c0c      	ldr	r4, [pc, #48]	@ (8004758 <__libc_init_array+0x44>)
 8004728:	f000 f818 	bl	800475c <_init>
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	2600      	movs	r6, #0
 8004732:	42a6      	cmp	r6, r4
 8004734:	d105      	bne.n	8004742 <__libc_init_array+0x2e>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	f855 3b04 	ldr.w	r3, [r5], #4
 800473c:	4798      	blx	r3
 800473e:	3601      	adds	r6, #1
 8004740:	e7ee      	b.n	8004720 <__libc_init_array+0xc>
 8004742:	f855 3b04 	ldr.w	r3, [r5], #4
 8004746:	4798      	blx	r3
 8004748:	3601      	adds	r6, #1
 800474a:	e7f2      	b.n	8004732 <__libc_init_array+0x1e>
 800474c:	08004840 	.word	0x08004840
 8004750:	08004840 	.word	0x08004840
 8004754:	08004840 	.word	0x08004840
 8004758:	08004844 	.word	0x08004844

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
