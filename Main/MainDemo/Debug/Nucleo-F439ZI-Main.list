
Nucleo-F439ZI-Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800ba80  0800ba80  0000ca80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c03c  0800c03c  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c03c  0800c03c  0000d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c044  0800c044  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c044  0800c044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c048  0800c048  0000d048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c04c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1f0  2**0
                  CONTENTS
 10 .bss          00000610  200001f0  200001f0  0000e1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  0000e1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016243  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed4  00000000  00000000  00024463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f54  00000000  00000000  000286b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002815c  00000000  00000000  0002960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001796d  00000000  00000000  00051768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f16fa  00000000  00000000  000690d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a7cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b04  00000000  00000000  0015a814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00161318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ba68 	.word	0x0800ba68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0800ba68 	.word	0x0800ba68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f001 fa23 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f004 ffd2 	bl	800601c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fa3b 	bl	800251e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f001 fa03 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000024 	.word	0x20000024
 80010dc:	20000004 	.word	0x20000004
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000004 	.word	0x20000004
 8001108:	2000020c 	.word	0x2000020c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e033      	b.n	80011ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f004 ff74 	bl	8006078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d118      	bne.n	80011dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011b2:	f023 0302 	bic.w	r3, r3, #2
 80011b6:	f043 0202 	orr.w	r2, r3, #2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f94a 	bl	8001458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f023 0303 	bic.w	r3, r3, #3
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80011da:	e001      	b.n	80011e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1c>
 800120c:	2302      	movs	r3, #2
 800120e:	e113      	b.n	8001438 <HAL_ADC_ConfigChannel+0x244>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b09      	cmp	r3, #9
 800121e:	d925      	bls.n	800126c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d9      	ldr	r1, [r3, #12]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	3b1e      	subs	r3, #30
 8001236:	2207      	movs	r2, #7
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43da      	mvns	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	4603      	mov	r3, r0
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4403      	add	r3, r0
 800125e:	3b1e      	subs	r3, #30
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	e022      	b.n	80012b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	2207      	movs	r2, #7
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6919      	ldr	r1, [r3, #16]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4403      	add	r3, r0
 80012a8:	409a      	lsls	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d824      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b05      	subs	r3, #5
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b05      	subs	r3, #5
 80012f6:	fa00 f203 	lsl.w	r2, r0, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
 8001302:	e04c      	b.n	800139e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d824      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	3b23      	subs	r3, #35	@ 0x23
 800131e:	221f      	movs	r2, #31
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b23      	subs	r3, #35	@ 0x23
 8001348:	fa00 f203 	lsl.w	r2, r0, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	631a      	str	r2, [r3, #48]	@ 0x30
 8001354:	e023      	b.n	800139e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b41      	subs	r3, #65	@ 0x41
 8001368:	221f      	movs	r2, #31
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b41      	subs	r3, #65	@ 0x41
 8001392:	fa00 f203 	lsl.w	r2, r0, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <HAL_ADC_ConfigChannel+0x250>)
 80013a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a28      	ldr	r2, [pc, #160]	@ (8001448 <HAL_ADC_ConfigChannel+0x254>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d10f      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d8>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_ADC_ConfigChannel+0x254>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_ADC_ConfigChannel+0x23a>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <HAL_ADC_ConfigChannel+0x258>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x1f4>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b11      	cmp	r3, #17
 80013e6:	d122      	bne.n	800142e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_ADC_ConfigChannel+0x258>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d111      	bne.n	800142e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_ADC_ConfigChannel+0x25c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_ADC_ConfigChannel+0x260>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9a      	lsrs	r2, r3, #18
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001420:	e002      	b.n	8001428 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40012300 	.word	0x40012300
 8001448:	40012000 	.word	0x40012000
 800144c:	10000012 	.word	0x10000012
 8001450:	20000024 	.word	0x20000024
 8001454:	431bde83 	.word	0x431bde83

08001458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <ADC_Init+0x1f0>)
 8001462:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	431a      	orrs	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800148c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	021a      	lsls	r2, r3, #8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6899      	ldr	r1, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	4a58      	ldr	r2, [pc, #352]	@ (800164c <ADC_Init+0x1f4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d022      	beq.n	8001536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6899      	ldr	r1, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e00f      	b.n	8001556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001554:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0202 	bic.w	r2, r2, #2
 8001564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6899      	ldr	r1, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e1b      	ldrb	r3, [r3, #24]
 8001570:	005a      	lsls	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01b      	beq.n	80015bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001592:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6859      	ldr	r1, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	3b01      	subs	r3, #1
 80015b0:	035a      	lsls	r2, r3, #13
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e007      	b.n	80015cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	051a      	lsls	r2, r3, #20
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800160e:	025a      	lsls	r2, r3, #9
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	029a      	lsls	r2, r3, #10
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40012300 	.word	0x40012300
 800164c:	0f000001 	.word	0x0f000001

08001650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0ed      	b.n	800183e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f004 fd46 	bl	8006100 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff fd42 	bl	800110c <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168a:	e012      	b.n	80016b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800168c:	f7ff fd3e 	bl	800110c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0c5      	b.n	800183e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0e5      	beq.n	800168c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0202 	bic.w	r2, r2, #2
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d0:	f7ff fd1c 	bl	800110c <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d6:	e012      	b.n	80016fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d8:	f7ff fd18 	bl	800110c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	d90b      	bls.n	80016fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2205      	movs	r2, #5
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e09f      	b.n	800183e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e5      	bne.n	80016d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e1b      	ldrb	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7e5b      	ldrb	r3, [r3, #25]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7e9b      	ldrb	r3, [r3, #26]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e007      	b.n	800178a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0220 	bic.w	r2, r2, #32
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7edb      	ldrb	r3, [r3, #27]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0210 	bic.w	r2, r2, #16
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0210 	orr.w	r2, r2, #16
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7f1b      	ldrb	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0208 	orr.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0208 	bic.w	r2, r2, #8
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7f5b      	ldrb	r3, [r3, #29]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0204 	orr.w	r2, r2, #4
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0204 	bic.w	r2, r2, #4
 8001806:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	ea42 0103 	orr.w	r1, r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001860:	7cfb      	ldrb	r3, [r7, #19]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d003      	beq.n	800186e <HAL_CAN_ConfigFilter+0x26>
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 80be 	bne.w	80019ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800186e:	4b65      	ldr	r3, [pc, #404]	@ (8001a04 <HAL_CAN_ConfigFilter+0x1bc>)
 8001870:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001888:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	431a      	orrs	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2201      	movs	r2, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	401a      	ands	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d123      	bne.n	8001918 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3248      	adds	r2, #72	@ 0x48
 80018f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800190c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800190e:	6979      	ldr	r1, [r7, #20]
 8001910:	3348      	adds	r3, #72	@ 0x48
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d122      	bne.n	8001966 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001940:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3248      	adds	r2, #72	@ 0x48
 8001946:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800195a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	3348      	adds	r3, #72	@ 0x48
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	401a      	ands	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001980:	e007      	b.n	8001992 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	431a      	orrs	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019ac:	e007      	b.n	80019be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019dc:	f023 0201 	bic.w	r2, r3, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e006      	b.n	80019f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
  }
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40006400 	.word	0x40006400

08001a08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d12e      	bne.n	8001a7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fb6a 	bl	800110c <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a3a:	e012      	b.n	8001a62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a3c:	f7ff fb66 	bl	800110c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b0a      	cmp	r3, #10
 8001a48:	d90b      	bls.n	8001a62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e012      	b.n	8001a88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e5      	bne.n	8001a3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e006      	b.n	8001a88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
  }
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d003      	beq.n	8001abc <HAL_CAN_AddTxMessage+0x2c>
 8001ab4:	7ffb      	ldrb	r3, [r7, #31]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	f040 80b8 	bne.w	8001c2c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10a      	bne.n	8001adc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a0 	beq.w	8001c1c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	0e1b      	lsrs	r3, r3, #24
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d907      	bls.n	8001afc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e09e      	b.n	8001c3a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001afc:	2201      	movs	r2, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	409a      	lsls	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	6809      	ldr	r1, [r1, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e00f      	b.n	8001b4a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3318      	adds	r3, #24
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	440b      	add	r3, r1
 8001b48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d111      	bne.n	8001b8a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3318      	adds	r3, #24
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	440b      	add	r3, r1
 8001b86:	3304      	adds	r3, #4
 8001b88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3307      	adds	r3, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	061a      	lsls	r2, r3, #24
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3306      	adds	r3, #6
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3305      	adds	r3, #5
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	3204      	adds	r2, #4
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	4610      	mov	r0, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6811      	ldr	r1, [r2, #0]
 8001bb2:	ea43 0200 	orr.w	r2, r3, r0
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	061a      	lsls	r2, r3, #24
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4610      	mov	r0, r2
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	6811      	ldr	r1, [r2, #0]
 8001be8:	ea43 0200 	orr.w	r2, r3, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3318      	adds	r3, #24
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	6811      	ldr	r1, [r2, #0]
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3318      	adds	r3, #24
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	440b      	add	r3, r1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e00e      	b.n	8001c3a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e006      	b.n	8001c3a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d003      	beq.n	8001c6a <HAL_CAN_GetRxMessage+0x24>
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 80f3 	bne.w	8001e50 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10e      	bne.n	8001c8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0e7      	b.n	8001e5e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0d8      	b.n	8001e5e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	331b      	adds	r3, #27
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0204 	and.w	r2, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	331b      	adds	r3, #27
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0d5b      	lsrs	r3, r3, #21
 8001cda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	331b      	adds	r3, #27
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	331b      	adds	r3, #27
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4413      	add	r3, r2
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0202 	and.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	331b      	adds	r3, #27
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	331b      	adds	r3, #27
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	331b      	adds	r3, #27
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0a1a      	lsrs	r2, r3, #8
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0c1a      	lsrs	r2, r3, #16
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e1a      	lsrs	r2, r3, #24
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3303      	adds	r3, #3
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0a1a      	lsrs	r2, r3, #8
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	3305      	adds	r3, #5
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0c1a      	lsrs	r2, r3, #16
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3306      	adds	r3, #6
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0e1a      	lsrs	r2, r3, #24
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3307      	adds	r3, #7
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d108      	bne.n	8001e3c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0220 	orr.w	r2, r2, #32
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e006      	b.n	8001e5e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d002      	beq.n	8001e88 <HAL_CAN_ActivateNotification+0x1e>
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d109      	bne.n	8001e9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6959      	ldr	r1, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e006      	b.n	8001eaa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	@ 0x28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d07c      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d023      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f983 	bl	8002224 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f1e:	e016      	b.n	8001f4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	e00c      	b.n	8001f4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f46:	e002      	b.n	8001f4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f989 	bl	8002260 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d024      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f963 	bl	8002238 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f72:	e016      	b.n	8001fa2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f86:	e00c      	b.n	8001fa2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e002      	b.n	8001fa2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f969 	bl	8002274 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d024      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f943 	bl	800224c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fc6:	e016      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e00c      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e002      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f949 	bl	8002288 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2210      	movs	r2, #16
 8002018:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00b      	beq.n	800203c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2208      	movs	r2, #8
 8002034:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f930 	bl	800229c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f003 f88b 	bl	8005170 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2210      	movs	r2, #16
 800207c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2208      	movs	r2, #8
 8002098:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f912 	bl	80022c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8f9 	bl	80022b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2210      	movs	r2, #16
 80020d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8fc 	bl	80022d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8f5 	bl	80022ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d07b      	beq.n	8002204 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d072      	beq.n	80021fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d043      	beq.n	80021fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03e      	beq.n	80021fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002184:	2b60      	cmp	r3, #96	@ 0x60
 8002186:	d02b      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x32a>
 8002188:	2b60      	cmp	r3, #96	@ 0x60
 800218a:	d82e      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x334>
 800218c:	2b50      	cmp	r3, #80	@ 0x50
 800218e:	d022      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x320>
 8002190:	2b50      	cmp	r3, #80	@ 0x50
 8002192:	d82a      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x334>
 8002194:	2b40      	cmp	r3, #64	@ 0x40
 8002196:	d019      	beq.n	80021cc <HAL_CAN_IRQHandler+0x316>
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	d826      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x334>
 800219c:	2b30      	cmp	r3, #48	@ 0x30
 800219e:	d010      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x30c>
 80021a0:	2b30      	cmp	r3, #48	@ 0x30
 80021a2:	d822      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x334>
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d002      	beq.n	80021ae <HAL_CAN_IRQHandler+0x2f8>
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d005      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021ac:	e01d      	b.n	80021ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021b6:	e019      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c0:	e014      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ca:	e00f      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d4:	e00a      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021de:	e005      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e8:	e000      	b.n	80021ec <HAL_CAN_IRQHandler+0x336>
            break;
 80021ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2204      	movs	r2, #4
 8002202:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f872 	bl	8002300 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	@ 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e177      	b.n	8002844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8166 	bne.w	800283e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80c0 	beq.w	800283e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b66      	ldr	r3, [pc, #408]	@ (800285c <HAL_GPIO_Init+0x324>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a65      	ldr	r2, [pc, #404]	@ (800285c <HAL_GPIO_Init+0x324>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b63      	ldr	r3, [pc, #396]	@ (800285c <HAL_GPIO_Init+0x324>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a61      	ldr	r2, [pc, #388]	@ (8002860 <HAL_GPIO_Init+0x328>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d037      	beq.n	8002776 <HAL_GPIO_Init+0x23e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d031      	beq.n	8002772 <HAL_GPIO_Init+0x23a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a56      	ldr	r2, [pc, #344]	@ (800286c <HAL_GPIO_Init+0x334>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02b      	beq.n	800276e <HAL_GPIO_Init+0x236>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a55      	ldr	r2, [pc, #340]	@ (8002870 <HAL_GPIO_Init+0x338>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d025      	beq.n	800276a <HAL_GPIO_Init+0x232>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a54      	ldr	r2, [pc, #336]	@ (8002874 <HAL_GPIO_Init+0x33c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a53      	ldr	r2, [pc, #332]	@ (8002878 <HAL_GPIO_Init+0x340>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x22a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	@ (800287c <HAL_GPIO_Init+0x344>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a51      	ldr	r2, [pc, #324]	@ (8002880 <HAL_GPIO_Init+0x348>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a50      	ldr	r2, [pc, #320]	@ (8002884 <HAL_GPIO_Init+0x34c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_GPIO_Init+0x350>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x21a>
 800274e:	2309      	movs	r3, #9
 8002750:	e012      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002752:	230a      	movs	r3, #10
 8002754:	e010      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002756:	2308      	movs	r3, #8
 8002758:	e00e      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275a:	2307      	movs	r3, #7
 800275c:	e00c      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275e:	2306      	movs	r3, #6
 8002760:	e00a      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002766:	2304      	movs	r3, #4
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002788:	4935      	ldr	r1, [pc, #212]	@ (8002860 <HAL_GPIO_Init+0x328>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_GPIO_Init+0x354>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_GPIO_Init+0x354>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_GPIO_Init+0x354>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a29      	ldr	r2, [pc, #164]	@ (800288c <HAL_GPIO_Init+0x354>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_GPIO_Init+0x354>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280e:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_GPIO_Init+0x354>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f ae84 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	40022400 	.word	0x40022400
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e12b      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f003 fc70 	bl	80061d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	@ 0x24
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002928:	f000 fdfc 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a81      	ldr	r2, [pc, #516]	@ (8002b38 <HAL_I2C_Init+0x274>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d807      	bhi.n	8002948 <HAL_I2C_Init+0x84>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a80      	ldr	r2, [pc, #512]	@ (8002b3c <HAL_I2C_Init+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e006      	b.n	8002956 <HAL_I2C_Init+0x92>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b40 <HAL_I2C_Init+0x27c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0e7      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a78      	ldr	r2, [pc, #480]	@ (8002b44 <HAL_I2C_Init+0x280>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b38 <HAL_I2C_Init+0x274>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d802      	bhi.n	8002998 <HAL_I2C_Init+0xd4>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3301      	adds	r3, #1
 8002996:	e009      	b.n	80029ac <HAL_I2C_Init+0xe8>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a69      	ldr	r2, [pc, #420]	@ (8002b48 <HAL_I2C_Init+0x284>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	3301      	adds	r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	495c      	ldr	r1, [pc, #368]	@ (8002b38 <HAL_I2C_Init+0x274>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d819      	bhi.n	8002a00 <HAL_I2C_Init+0x13c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e59      	subs	r1, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029da:	1c59      	adds	r1, r3, #1
 80029dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_I2C_Init+0x138>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e59      	subs	r1, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	e051      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e04f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_I2C_Init+0x168>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e012      	b.n	8002a52 <HAL_I2C_Init+0x18e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Init+0x196>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e022      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10e      	bne.n	8002a80 <HAL_I2C_Init+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e58      	subs	r0, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a7e:	e00f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6809      	ldr	r1, [r1, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6911      	ldr	r1, [r2, #16]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	4311      	orrs	r1, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	000186a0 	.word	0x000186a0
 8002b3c:	001e847f 	.word	0x001e847f
 8002b40:	003d08ff 	.word	0x003d08ff
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d129      	bne.n	8002bb6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2224      	movs	r2, #36	@ 0x24
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0210 	bic.w	r2, r2, #16
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
  }
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d12a      	bne.n	8002c34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2224      	movs	r2, #36	@ 0x24
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	f023 030f 	bic.w	r3, r3, #15
 8002c04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	89fa      	ldrh	r2, [r7, #14]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e267      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d075      	beq.n	8002d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c62:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d00c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d112      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4b82      	ldr	r3, [pc, #520]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	4b7e      	ldr	r3, [pc, #504]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x108>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d157      	bne.n	8002d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e242      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x74>
 8002caa:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x98>
 8002cc2:	4b70      	ldr	r3, [pc, #448]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6d      	ldr	r3, [pc, #436]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6c      	ldr	r2, [pc, #432]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	4b69      	ldr	r3, [pc, #420]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a68      	ldr	r2, [pc, #416]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b66      	ldr	r3, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a65      	ldr	r2, [pc, #404]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fa06 	bl	800110c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fa02 	bl	800110c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e207      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xc0>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe f9f2 	bl	800110c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe f9ee 	bl	800110c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1f3      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b51      	ldr	r3, [pc, #324]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0xe8>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b44      	ldr	r3, [pc, #272]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c7      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4937      	ldr	r1, [pc, #220]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCC_OscConfig+0x244>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe f9a7 	bl	800110c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f9a3 	bl	800110c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a8      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4925      	ldr	r1, [pc, #148]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <HAL_RCC_OscConfig+0x244>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f986 	bl	800110c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe f982 	bl	800110c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e187      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d036      	beq.n	8002e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_OscConfig+0x248>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f966 	bl	800110c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe f962 	bl	800110c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e167      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x200>
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <HAL_RCC_OscConfig+0x248>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe f94f 	bl	800110c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e00e      	b.n	8002e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fe f94b 	bl	800110c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d907      	bls.n	8002e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e150      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	42470000 	.word	0x42470000
 8002e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b88      	ldr	r3, [pc, #544]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8097 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b81      	ldr	r3, [pc, #516]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b7a      	ldr	r3, [pc, #488]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b77      	ldr	r3, [pc, #476]	@ (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b74      	ldr	r3, [pc, #464]	@ (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a73      	ldr	r2, [pc, #460]	@ (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f90b 	bl	800110c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe f907 	bl	800110c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e10c      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2ea>
 8002f20:	4b64      	ldr	r3, [pc, #400]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	4a63      	ldr	r2, [pc, #396]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCC_OscConfig+0x324>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x30c>
 8002f36:	4b5f      	ldr	r3, [pc, #380]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f42:	4b5c      	ldr	r3, [pc, #368]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	4a5b      	ldr	r2, [pc, #364]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0x324>
 8002f50:	4b58      	ldr	r3, [pc, #352]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	4a57      	ldr	r2, [pc, #348]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5c:	4b55      	ldr	r3, [pc, #340]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a54      	ldr	r2, [pc, #336]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe f8cc 	bl	800110c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe f8c8 	bl	800110c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0cb      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	4b49      	ldr	r3, [pc, #292]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ee      	beq.n	8002f78 <HAL_RCC_OscConfig+0x334>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe f8b6 	bl	800110c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe f8b2 	bl	800110c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0b5      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ee      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	4a38      	ldr	r2, [pc, #224]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a1 	beq.w	8003124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe2:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d05c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d141      	bne.n	800307a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <HAL_RCC_OscConfig+0x478>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f886 	bl	800110c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f882 	bl	800110c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e087      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	491b      	ldr	r1, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x478>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe f85b 	bl	800110c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe f857 	bl	800110c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e05c      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x416>
 8003078:	e054      	b.n	8003124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <HAL_RCC_OscConfig+0x478>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe f844 	bl	800110c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f840 	bl	800110c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e045      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCC_OscConfig+0x470>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x444>
 80030a6:	e03d      	b.n	8003124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e038      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40007000 	.word	0x40007000
 80030bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCC_OscConfig+0x4ec>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d028      	beq.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d121      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d11a      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	3b01      	subs	r3, #1
 800310a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0cc      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b68      	ldr	r3, [pc, #416]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d90c      	bls.n	8003170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b65      	ldr	r3, [pc, #404]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b63      	ldr	r3, [pc, #396]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b8      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b59      	ldr	r3, [pc, #356]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a58      	ldr	r2, [pc, #352]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a52      	ldr	r2, [pc, #328]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b50      	ldr	r3, [pc, #320]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	494d      	ldr	r1, [pc, #308]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d044      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b3f      	ldr	r3, [pc, #252]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e067      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b37      	ldr	r3, [pc, #220]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4934      	ldr	r1, [pc, #208]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7fd ff72 	bl	800110c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fd ff6e 	bl	800110c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e04f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b25      	ldr	r3, [pc, #148]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d20c      	bcs.n	800327c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e032      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b19      	ldr	r3, [pc, #100]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4916      	ldr	r1, [pc, #88]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a6:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	490e      	ldr	r1, [pc, #56]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ba:	f000 f821 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80032be:	4602      	mov	r2, r0
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	490a      	ldr	r1, [pc, #40]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	5ccb      	ldrb	r3, [r1, r3]
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a09      	ldr	r2, [pc, #36]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032d6:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fed2 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00
 80032f0:	40023800 	.word	0x40023800
 80032f4:	0800bbe4 	.word	0x0800bbe4
 80032f8:	20000024 	.word	0x20000024
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b094      	sub	sp, #80	@ 0x50
 8003306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	647b      	str	r3, [r7, #68]	@ 0x44
 800330c:	2300      	movs	r3, #0
 800330e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003310:	2300      	movs	r3, #0
 8003312:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003318:	4b79      	ldr	r3, [pc, #484]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d00d      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x40>
 8003324:	2b08      	cmp	r3, #8
 8003326:	f200 80e1 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x34>
 800332e:	2b04      	cmp	r3, #4
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x3a>
 8003332:	e0db      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b73      	ldr	r3, [pc, #460]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x204>)
 8003336:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003338:	e0db      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333a:	4b73      	ldr	r3, [pc, #460]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x208>)
 800333c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800333e:	e0d8      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003340:	4b6f      	ldr	r3, [pc, #444]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334a:	4b6d      	ldr	r3, [pc, #436]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d063      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b6a      	ldr	r3, [pc, #424]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	2200      	movs	r2, #0
 800335e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003360:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003368:	633b      	str	r3, [r7, #48]	@ 0x30
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
 800336e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003372:	4622      	mov	r2, r4
 8003374:	462b      	mov	r3, r5
 8003376:	f04f 0000 	mov.w	r0, #0
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003384:	0150      	lsls	r0, r2, #5
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4621      	mov	r1, r4
 800338c:	1a51      	subs	r1, r2, r1
 800338e:	6139      	str	r1, [r7, #16]
 8003390:	4629      	mov	r1, r5
 8003392:	eb63 0301 	sbc.w	r3, r3, r1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a4:	4659      	mov	r1, fp
 80033a6:	018b      	lsls	r3, r1, #6
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ae:	4651      	mov	r1, sl
 80033b0:	018a      	lsls	r2, r1, #6
 80033b2:	4651      	mov	r1, sl
 80033b4:	ebb2 0801 	subs.w	r8, r2, r1
 80033b8:	4659      	mov	r1, fp
 80033ba:	eb63 0901 	sbc.w	r9, r3, r1
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d2:	4690      	mov	r8, r2
 80033d4:	4699      	mov	r9, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	eb18 0303 	adds.w	r3, r8, r3
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	462b      	mov	r3, r5
 80033e0:	eb49 0303 	adc.w	r3, r9, r3
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033f2:	4629      	mov	r1, r5
 80033f4:	024b      	lsls	r3, r1, #9
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033fc:	4621      	mov	r1, r4
 80033fe:	024a      	lsls	r2, r1, #9
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003406:	2200      	movs	r2, #0
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003410:	f7fd fc4a 	bl	8000ca8 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800341c:	e058      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b38      	ldr	r3, [pc, #224]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	2200      	movs	r2, #0
 8003426:	4618      	mov	r0, r3
 8003428:	4611      	mov	r1, r2
 800342a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
 8003434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0159      	lsls	r1, r3, #5
 8003446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344a:	0150      	lsls	r0, r2, #5
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4641      	mov	r1, r8
 8003452:	ebb2 0a01 	subs.w	sl, r2, r1
 8003456:	4649      	mov	r1, r9
 8003458:	eb63 0b01 	sbc.w	fp, r3, r1
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800346c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003470:	ebb2 040a 	subs.w	r4, r2, sl
 8003474:	eb63 050b 	sbc.w	r5, r3, fp
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	00eb      	lsls	r3, r5, #3
 8003482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003486:	00e2      	lsls	r2, r4, #3
 8003488:	4614      	mov	r4, r2
 800348a:	461d      	mov	r5, r3
 800348c:	4643      	mov	r3, r8
 800348e:	18e3      	adds	r3, r4, r3
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	464b      	mov	r3, r9
 8003494:	eb45 0303 	adc.w	r3, r5, r3
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034a6:	4629      	mov	r1, r5
 80034a8:	028b      	lsls	r3, r1, #10
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b0:	4621      	mov	r1, r4
 80034b2:	028a      	lsls	r2, r1, #10
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ba:	2200      	movs	r2, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	61fa      	str	r2, [r7, #28]
 80034c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c4:	f7fd fbf0 	bl	8000ca8 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	3301      	adds	r3, #1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80034e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3750      	adds	r7, #80	@ 0x50
 80034f8:	46bd      	mov	sp, r7
 80034fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	00f42400 	.word	0x00f42400
 8003508:	007a1200 	.word	0x007a1200

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000024 	.word	0x20000024

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003528:	f7ff fff0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	@ (8003548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	0800bbf4 	.word	0x0800bbf4

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003550:	f7ff ffdc 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	0800bbf4 	.word	0x0800bbf4

08003574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e041      	b.n	800360a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f002 fe90 	bl	80062c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f000 fae0 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d001      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04e      	b.n	80036ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a23      	ldr	r2, [pc, #140]	@ (80036d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	d01d      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1f      	ldr	r2, [pc, #124]	@ (80036dc <HAL_TIM_Base_Start_IT+0xc8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1e      	ldr	r2, [pc, #120]	@ (80036e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1c      	ldr	r2, [pc, #112]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1b      	ldr	r2, [pc, #108]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d111      	bne.n	80036b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d010      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	e007      	b.n	80036c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40001800 	.word	0x40001800

080036f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e041      	b.n	800378a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f002 fda0 	bl	8006260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f000 fa20 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d122      	bne.n	80037ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d11b      	bne.n	80037ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0202 	mvn.w	r2, #2
 80037be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9b1 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80037da:	e005      	b.n	80037e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f9a3 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9b4 	bl	8003b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d122      	bne.n	8003842 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d11b      	bne.n	8003842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0204 	mvn.w	r2, #4
 8003812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f987 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 800382e:	e005      	b.n	800383c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f979 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f98a 	bl	8003b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d122      	bne.n	8003896 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d11b      	bne.n	8003896 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0208 	mvn.w	r2, #8
 8003866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2204      	movs	r2, #4
 800386c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f95d 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003882:	e005      	b.n	8003890 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f94f 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f960 	bl	8003b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d122      	bne.n	80038ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d11b      	bne.n	80038ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f06f 0210 	mvn.w	r2, #16
 80038ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2208      	movs	r2, #8
 80038c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f933 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80038d6:	e005      	b.n	80038e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f925 	bl	8003b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f936 	bl	8003b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10e      	bne.n	8003916 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0201 	mvn.w	r2, #1
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f001 fc9f 	bl	8005254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d10e      	bne.n	8003942 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d107      	bne.n	8003942 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fc43 	bl	80041c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d10e      	bne.n	800396e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d107      	bne.n	800396e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8fb 	bl	8003b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0220 	mvn.w	r2, #32
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fc0d 	bl	80041b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0ae      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	f200 809f 	bhi.w	8003b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039d2:	a201      	add	r2, pc, #4	@ (adr r2, 80039d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003b11 	.word	0x08003b11
 80039e0:	08003b11 	.word	0x08003b11
 80039e4:	08003b11 	.word	0x08003b11
 80039e8:	08003a4d 	.word	0x08003a4d
 80039ec:	08003b11 	.word	0x08003b11
 80039f0:	08003b11 	.word	0x08003b11
 80039f4:	08003b11 	.word	0x08003b11
 80039f8:	08003a8f 	.word	0x08003a8f
 80039fc:	08003b11 	.word	0x08003b11
 8003a00:	08003b11 	.word	0x08003b11
 8003a04:	08003b11 	.word	0x08003b11
 8003a08:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f950 	bl	8003cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
      break;
 8003a4a:	e064      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9a0 	bl	8003d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
      break;
 8003a8c:	e043      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f9f5 	bl	8003e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0208 	orr.w	r2, r2, #8
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0204 	bic.w	r2, r2, #4
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]
      break;
 8003acc:	e023      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fa49 	bl	8003f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	61da      	str	r2, [r3, #28]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <TIM_Base_SetConfig+0x114>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b96:	d00f      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c90 <TIM_Base_SetConfig+0x118>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8003c94 <TIM_Base_SetConfig+0x11c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3b      	ldr	r2, [pc, #236]	@ (8003c98 <TIM_Base_SetConfig+0x120>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3a      	ldr	r2, [pc, #232]	@ (8003c9c <TIM_Base_SetConfig+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d108      	bne.n	8003bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <TIM_Base_SetConfig+0x114>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d02b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd8:	d027      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003c90 <TIM_Base_SetConfig+0x118>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d023      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c94 <TIM_Base_SetConfig+0x11c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <TIM_Base_SetConfig+0x120>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a29      	ldr	r2, [pc, #164]	@ (8003c9c <TIM_Base_SetConfig+0x124>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d017      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <TIM_Base_SetConfig+0x128>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a27      	ldr	r2, [pc, #156]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ca8 <TIM_Base_SetConfig+0x130>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a25      	ldr	r2, [pc, #148]	@ (8003cac <TIM_Base_SetConfig+0x134>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <TIM_Base_SetConfig+0x138>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <TIM_Base_SetConfig+0x13c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <TIM_Base_SetConfig+0x114>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0xf8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c9c <TIM_Base_SetConfig+0x124>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d103      	bne.n	8003c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40010400 	.word	0x40010400
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	40001800 	.word	0x40001800
 8003cb0:	40001c00 	.word	0x40001c00
 8003cb4:	40002000 	.word	0x40002000

08003cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a20      	ldr	r2, [pc, #128]	@ (8003d90 <TIM_OC1_SetConfig+0xd8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC1_SetConfig+0x64>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	@ (8003d94 <TIM_OC1_SetConfig+0xdc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10c      	bne.n	8003d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0308 	bic.w	r3, r3, #8
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <TIM_OC1_SetConfig+0xd8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_OC1_SetConfig+0x8e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a14      	ldr	r2, [pc, #80]	@ (8003d94 <TIM_OC1_SetConfig+0xdc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0210 	bic.w	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <TIM_OC2_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC2_SetConfig+0x68>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <TIM_OC2_SetConfig+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10d      	bne.n	8003e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <TIM_OC2_SetConfig+0xe4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC2_SetConfig+0x94>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <TIM_OC2_SetConfig+0xe8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d113      	bne.n	8003e54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010400 	.word	0x40010400

08003e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <TIM_OC3_SetConfig+0xe0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x66>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a20      	ldr	r2, [pc, #128]	@ (8003f68 <TIM_OC3_SetConfig+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10d      	bne.n	8003f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <TIM_OC3_SetConfig+0xe0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC3_SetConfig+0x92>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a15      	ldr	r2, [pc, #84]	@ (8003f68 <TIM_OC3_SetConfig+0xe4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d113      	bne.n	8003f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40010400 	.word	0x40010400

08003f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	031b      	lsls	r3, r3, #12
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a12      	ldr	r2, [pc, #72]	@ (8004010 <TIM_OC4_SetConfig+0xa4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC4_SetConfig+0x68>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <TIM_OC4_SetConfig+0xa8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e05a      	b.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a21      	ldr	r2, [pc, #132]	@ (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d01d      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1d      	ldr	r2, [pc, #116]	@ (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1b      	ldr	r2, [pc, #108]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1a      	ldr	r2, [pc, #104]	@ (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10c      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40010400 	.word	0x40010400
 8004108:	40014000 	.word	0x40014000
 800410c:	40001800 	.word	0x40001800

08004110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e03d      	b.n	80041a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e03f      	b.n	800426e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f002 f918 	bl	8006438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800421e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f929 	bl	8004478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b08a      	sub	sp, #40	@ 0x28
 800427a:	af02      	add	r7, sp, #8
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	d17c      	bne.n	8004390 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_UART_Transmit+0x2c>
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e075      	b.n	8004392 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Transmit+0x3e>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e06e      	b.n	8004392 <HAL_UART_Transmit+0x11c>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2221      	movs	r2, #33	@ 0x21
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ca:	f7fc ff1f 	bl	800110c <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e4:	d108      	bne.n	80042f8 <HAL_UART_Transmit+0x82>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e003      	b.n	8004300 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004308:	e02a      	b.n	8004360 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f840 	bl	800439a <UART_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e036      	b.n	8004392 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	3302      	adds	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	e007      	b.n	8004352 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	3301      	adds	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1cf      	bne.n	800430a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2140      	movs	r1, #64	@ 0x40
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f810 	bl	800439a <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e006      	b.n	8004392 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b090      	sub	sp, #64	@ 0x40
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	e050      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d04c      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x30>
 80043ba:	f7fc fea7 	bl	800110c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d241      	bcs.n	800444e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ea:	637a      	str	r2, [r7, #52]	@ 0x34
 80043ec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	613b      	str	r3, [r7, #16]
   return(result);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800441e:	623a      	str	r2, [r7, #32]
 8004420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	69f9      	ldr	r1, [r7, #28]
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	61bb      	str	r3, [r7, #24]
   return(result);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00f      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	429a      	cmp	r2, r3
 800446a:	d09f      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3740      	adds	r7, #64	@ 0x40
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800447c:	b0c0      	sub	sp, #256	@ 0x100
 800447e:	af00      	add	r7, sp, #0
 8004480:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	ea40 0301 	orr.w	r3, r0, r1
 80044a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044d0:	f021 010c 	bic.w	r1, r1, #12
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044de:	430b      	orrs	r3, r1
 80044e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	6999      	ldr	r1, [r3, #24]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	ea40 0301 	orr.w	r3, r0, r1
 80044fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b8f      	ldr	r3, [pc, #572]	@ (8004744 <UART_SetConfig+0x2cc>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d005      	beq.n	8004518 <UART_SetConfig+0xa0>
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b8d      	ldr	r3, [pc, #564]	@ (8004748 <UART_SetConfig+0x2d0>)
 8004514:	429a      	cmp	r2, r3
 8004516:	d104      	bne.n	8004522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004518:	f7ff f818 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 800451c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004520:	e003      	b.n	800452a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004522:	f7fe ffff 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8004526:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004534:	f040 810c 	bne.w	8004750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004542:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800454a:	4622      	mov	r2, r4
 800454c:	462b      	mov	r3, r5
 800454e:	1891      	adds	r1, r2, r2
 8004550:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004552:	415b      	adcs	r3, r3
 8004554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800455a:	4621      	mov	r1, r4
 800455c:	eb12 0801 	adds.w	r8, r2, r1
 8004560:	4629      	mov	r1, r5
 8004562:	eb43 0901 	adc.w	r9, r3, r1
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457a:	4690      	mov	r8, r2
 800457c:	4699      	mov	r9, r3
 800457e:	4623      	mov	r3, r4
 8004580:	eb18 0303 	adds.w	r3, r8, r3
 8004584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004588:	462b      	mov	r3, r5
 800458a:	eb49 0303 	adc.w	r3, r9, r3
 800458e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800459e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045a6:	460b      	mov	r3, r1
 80045a8:	18db      	adds	r3, r3, r3
 80045aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ac:	4613      	mov	r3, r2
 80045ae:	eb42 0303 	adc.w	r3, r2, r3
 80045b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045bc:	f7fc fb74 	bl	8000ca8 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b61      	ldr	r3, [pc, #388]	@ (800474c <UART_SetConfig+0x2d4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045e8:	415b      	adcs	r3, r3
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045f0:	4641      	mov	r1, r8
 80045f2:	eb12 0a01 	adds.w	sl, r2, r1
 80045f6:	4649      	mov	r1, r9
 80045f8:	eb43 0b01 	adc.w	fp, r3, r1
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800460c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004610:	4692      	mov	sl, r2
 8004612:	469b      	mov	fp, r3
 8004614:	4643      	mov	r3, r8
 8004616:	eb1a 0303 	adds.w	r3, sl, r3
 800461a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800461e:	464b      	mov	r3, r9
 8004620:	eb4b 0303 	adc.w	r3, fp, r3
 8004624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004634:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800463c:	460b      	mov	r3, r1
 800463e:	18db      	adds	r3, r3, r3
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
 8004642:	4613      	mov	r3, r2
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	647b      	str	r3, [r7, #68]	@ 0x44
 800464a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800464e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004652:	f7fc fb29 	bl	8000ca8 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4611      	mov	r1, r2
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <UART_SetConfig+0x2d4>)
 800465e:	fba3 2301 	umull	r2, r3, r3, r1
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2264      	movs	r2, #100	@ 0x64
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	1acb      	subs	r3, r1, r3
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004672:	4b36      	ldr	r3, [pc, #216]	@ (800474c <UART_SetConfig+0x2d4>)
 8004674:	fba3 2302 	umull	r2, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004680:	441c      	add	r4, r3
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800468c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800469c:	415b      	adcs	r3, r3
 800469e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046a4:	4641      	mov	r1, r8
 80046a6:	1851      	adds	r1, r2, r1
 80046a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80046aa:	4649      	mov	r1, r9
 80046ac:	414b      	adcs	r3, r1
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046bc:	4659      	mov	r1, fp
 80046be:	00cb      	lsls	r3, r1, #3
 80046c0:	4651      	mov	r1, sl
 80046c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c6:	4651      	mov	r1, sl
 80046c8:	00ca      	lsls	r2, r1, #3
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	4642      	mov	r2, r8
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046d8:	464b      	mov	r3, r9
 80046da:	460a      	mov	r2, r1
 80046dc:	eb42 0303 	adc.w	r3, r2, r3
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046f8:	460b      	mov	r3, r1
 80046fa:	18db      	adds	r3, r3, r3
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fe:	4613      	mov	r3, r2
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800470a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800470e:	f7fc facb 	bl	8000ca8 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <UART_SetConfig+0x2d4>)
 8004718:	fba3 1302 	umull	r1, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	2164      	movs	r1, #100	@ 0x64
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	3332      	adds	r3, #50	@ 0x32
 800472a:	4a08      	ldr	r2, [pc, #32]	@ (800474c <UART_SetConfig+0x2d4>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	f003 0207 	and.w	r2, r3, #7
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4422      	add	r2, r4
 800473e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004740:	e106      	b.n	8004950 <UART_SetConfig+0x4d8>
 8004742:	bf00      	nop
 8004744:	40011000 	.word	0x40011000
 8004748:	40011400 	.word	0x40011400
 800474c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004754:	2200      	movs	r2, #0
 8004756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800475a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800475e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004762:	4642      	mov	r2, r8
 8004764:	464b      	mov	r3, r9
 8004766:	1891      	adds	r1, r2, r2
 8004768:	6239      	str	r1, [r7, #32]
 800476a:	415b      	adcs	r3, r3
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004772:	4641      	mov	r1, r8
 8004774:	1854      	adds	r4, r2, r1
 8004776:	4649      	mov	r1, r9
 8004778:	eb43 0501 	adc.w	r5, r3, r1
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	00eb      	lsls	r3, r5, #3
 8004786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478a:	00e2      	lsls	r2, r4, #3
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
 8004790:	4643      	mov	r3, r8
 8004792:	18e3      	adds	r3, r4, r3
 8004794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004798:	464b      	mov	r3, r9
 800479a:	eb45 0303 	adc.w	r3, r5, r3
 800479e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047be:	4629      	mov	r1, r5
 80047c0:	008b      	lsls	r3, r1, #2
 80047c2:	4621      	mov	r1, r4
 80047c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c8:	4621      	mov	r1, r4
 80047ca:	008a      	lsls	r2, r1, #2
 80047cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047d0:	f7fc fa6a 	bl	8000ca8 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4b60      	ldr	r3, [pc, #384]	@ (800495c <UART_SetConfig+0x4e4>)
 80047da:	fba3 2302 	umull	r2, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	011c      	lsls	r4, r3, #4
 80047e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	61b9      	str	r1, [r7, #24]
 80047fc:	415b      	adcs	r3, r3
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004804:	4641      	mov	r1, r8
 8004806:	1851      	adds	r1, r2, r1
 8004808:	6139      	str	r1, [r7, #16]
 800480a:	4649      	mov	r1, r9
 800480c:	414b      	adcs	r3, r1
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800481c:	4659      	mov	r1, fp
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4651      	mov	r1, sl
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4651      	mov	r1, sl
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4642      	mov	r2, r8
 8004832:	189b      	adds	r3, r3, r2
 8004834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004838:	464b      	mov	r3, r9
 800483a:	460a      	mov	r2, r1
 800483c:	eb42 0303 	adc.w	r3, r2, r3
 8004840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800484e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800485c:	4649      	mov	r1, r9
 800485e:	008b      	lsls	r3, r1, #2
 8004860:	4641      	mov	r1, r8
 8004862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004866:	4641      	mov	r1, r8
 8004868:	008a      	lsls	r2, r1, #2
 800486a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800486e:	f7fc fa1b 	bl	8000ca8 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4611      	mov	r1, r2
 8004878:	4b38      	ldr	r3, [pc, #224]	@ (800495c <UART_SetConfig+0x4e4>)
 800487a:	fba3 2301 	umull	r2, r3, r3, r1
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2264      	movs	r2, #100	@ 0x64
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	1acb      	subs	r3, r1, r3
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	3332      	adds	r3, #50	@ 0x32
 800488c:	4a33      	ldr	r2, [pc, #204]	@ (800495c <UART_SetConfig+0x4e4>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004898:	441c      	add	r4, r3
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80048a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80048a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048a8:	4642      	mov	r2, r8
 80048aa:	464b      	mov	r3, r9
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	415b      	adcs	r3, r3
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048b8:	4641      	mov	r1, r8
 80048ba:	1851      	adds	r1, r2, r1
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	4649      	mov	r1, r9
 80048c0:	414b      	adcs	r3, r1
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048d0:	4659      	mov	r1, fp
 80048d2:	00cb      	lsls	r3, r1, #3
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048da:	4651      	mov	r1, sl
 80048dc:	00ca      	lsls	r2, r1, #3
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	4642      	mov	r2, r8
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ea:	464b      	mov	r3, r9
 80048ec:	460a      	mov	r2, r1
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80048fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800490c:	4649      	mov	r1, r9
 800490e:	008b      	lsls	r3, r1, #2
 8004910:	4641      	mov	r1, r8
 8004912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004916:	4641      	mov	r1, r8
 8004918:	008a      	lsls	r2, r1, #2
 800491a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800491e:	f7fc f9c3 	bl	8000ca8 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <UART_SetConfig+0x4e4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	@ 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	3332      	adds	r3, #50	@ 0x32
 800493a:	4a08      	ldr	r2, [pc, #32]	@ (800495c <UART_SetConfig+0x4e4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 020f 	and.w	r2, r3, #15
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4422      	add	r2, r4
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004956:	46bd      	mov	sp, r7
 8004958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495c:	51eb851f 	.word	0x51eb851f

08004960 <joy_steer_to_steer>:
#define JOY_STEERING_INDEX 1
#define JOY_THROTTLE_INDEX 0
#define JOY_EMK_INDEX 4
#define JOY_MODE_INDEX 5

static void joy_steer_to_steer(app_state_t *app){
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	int steer_val = app->rc_receiver_state.channels[JOY_STEERING_INDEX].servo_position;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800496e:	60fb      	str	r3, [r7, #12]

	if (steer_val > SPEKTRUM_STEER_NEUTRAL){
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800497a:	4b1f      	ldr	r3, [pc, #124]	@ (80049f8 <joy_steer_to_steer+0x98>)
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	dd17      	ble.n	80049ba <joy_steer_to_steer+0x5a>
		app->steer_percent = (steer_val - SPEKTRUM_STEER_NEUTRAL) / (SPEKTRUM_STEER_MAX - SPEKTRUM_STEER_NEUTRAL);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004994:	4b18      	ldr	r3, [pc, #96]	@ (80049f8 <joy_steer_to_steer+0x98>)
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800499e:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <joy_steer_to_steer+0x9c>)
 80049a0:	ed93 7a00 	vldr	s14, [r3]
 80049a4:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <joy_steer_to_steer+0x98>)
 80049a6:	edd3 7a00 	vldr	s15, [r3]
 80049aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	edc3 7a01 	vstr	s15, [r3, #4]
	} else{
		app->steer_percent = -(SPEKTRUM_STEER_NEUTRAL - steer_val) / (SPEKTRUM_STEER_NEUTRAL - SPEKTRUM_STEER_MIN);
	}
}
 80049b8:	e018      	b.n	80049ec <joy_steer_to_steer+0x8c>
		app->steer_percent = -(SPEKTRUM_STEER_NEUTRAL - steer_val) / (SPEKTRUM_STEER_NEUTRAL - SPEKTRUM_STEER_MIN);
 80049ba:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <joy_steer_to_steer+0x98>)
 80049bc:	ed93 7a00 	vldr	s14, [r3]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ce:	eef1 6a67 	vneg.f32	s13, s15
 80049d2:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <joy_steer_to_steer+0x98>)
 80049d4:	ed93 7a00 	vldr	s14, [r3]
 80049d8:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <joy_steer_to_steer+0xa0>)
 80049da:	edd3 7a00 	vldr	s15, [r3]
 80049de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	20000018 	.word	0x20000018
 80049fc:	20000014 	.word	0x20000014
 8004a00:	20000010 	.word	0x20000010

08004a04 <joy_acc_to_acc>:

static void joy_acc_to_acc(app_state_t *app){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	int acc_val = app->rc_receiver_state.channels[JOY_THROTTLE_INDEX].servo_position;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a12:	60fb      	str	r3, [r7, #12]
	float acc_percent = (acc_val - SPEKTRUM_THROTTLE_NEUTRAL) / (SPEKTRUM_THROTTLE_MAX - SPEKTRUM_THROTTLE_NEUTRAL);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <joy_acc_to_acc+0x70>)
 8004a20:	edd3 7a00 	vldr	s15, [r3]
 8004a24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <joy_acc_to_acc+0x74>)
 8004a2a:	ed93 7a00 	vldr	s14, [r3]
 8004a2e:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <joy_acc_to_acc+0x70>)
 8004a30:	edd3 7a00 	vldr	s15, [r3]
 8004a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	edc7 7a02 	vstr	s15, [r7, #8]

	app->acc_percent = acc_percent;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	601a      	str	r2, [r3, #0]

	if (acc_percent < 0.0){
 8004a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a52:	d505      	bpl.n	8004a60 <joy_acc_to_acc+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004a54:	2201      	movs	r2, #1
 8004a56:	2180      	movs	r1, #128	@ 0x80
 8004a58:	4808      	ldr	r0, [pc, #32]	@ (8004a7c <joy_acc_to_acc+0x78>)
 8004a5a:	f7fd ff19 	bl	8002890 <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
	}
}
 8004a5e:	e004      	b.n	8004a6a <joy_acc_to_acc+0x66>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	4805      	ldr	r0, [pc, #20]	@ (8004a7c <joy_acc_to_acc+0x78>)
 8004a66:	f7fd ff13 	bl	8002890 <HAL_GPIO_WritePin>
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	20000008 	.word	0x20000008
 8004a7c:	40020400 	.word	0x40020400

08004a80 <joy_control_to_control>:

static void joy_control_to_control(app_state_t *app){
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	int control_val = app->rc_receiver_state.channels[5].servo_position;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a8e:	60fb      	str	r3, [r7, #12]

	if (control_val == 1706){
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f240 62aa 	movw	r2, #1706	@ 0x6aa
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <joy_control_to_control+0x22>
		app->control_mode = 2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e00e      	b.n	8004ac0 <joy_control_to_control+0x40>
	} else if (control_val == 1024){
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa8:	d103      	bne.n	8004ab2 <joy_control_to_control+0x32>
		app->control_mode = 1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	e006      	b.n	8004ac0 <joy_control_to_control+0x40>
	} else if (control_val == 342){
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8004ab8:	d102      	bne.n	8004ac0 <joy_control_to_control+0x40>
		app->control_mode = 0;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
	}

	int deadmanswitch = app->rc_receiver_state.channels[4].servo_position;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004ac6:	60bb      	str	r3, [r7, #8]

	if (deadmanswitch == 342){
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8004ace:	d103      	bne.n	8004ad8 <joy_control_to_control+0x58>
		app->gokart_status = 0;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
	} else if (deadmanswitch == 1706){
		app->gokart_status = 1;
	}
}
 8004ad6:	e007      	b.n	8004ae8 <joy_control_to_control+0x68>
	} else if (deadmanswitch == 1706){
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f240 62aa 	movw	r2, #1706	@ 0x6aa
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d102      	bne.n	8004ae8 <joy_control_to_control+0x68>
		app->gokart_status = 1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	60da      	str	r2, [r3, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <convert_channels_to_commands>:

static void convert_channels_to_commands(app_state_t *app) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	joy_steer_to_steer(app);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff2f 	bl	8004960 <joy_steer_to_steer>
	joy_acc_to_acc(app);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ff7e 	bl	8004a04 <joy_acc_to_acc>
	joy_control_to_control(app);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ffb9 	bl	8004a80 <joy_control_to_control>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <handle_spektrum_msg>:

static void handle_spektrum_msg(const spektrum_internal_msg_t *msg, void *context) {
 8004b16:	b590      	push	{r4, r7, lr}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
	app_state_t *app = (app_state_t *) context;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	60fb      	str	r3, [r7, #12]
	spektrum_msg_to_state(msg, &app->rc_receiver_state, (long) HAL_GetTick());
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8004b2a:	f7fc faef 	bl	800110c <HAL_GetTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	4621      	mov	r1, r4
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f001 f8e0 	bl	8005cfa <spektrum_msg_to_state>
	convert_channels_to_commands(app);
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ffda 	bl	8004af4 <convert_channels_to_commands>
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <app_run>:

void app_run(app_state_t *app) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	app->steer_percent = 0.0;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
	app->acc_percent = 0.0;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
	app->control_mode = 0;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
	app->gokart_status = 0;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	60da      	str	r2, [r3, #12]

	spektrum_nucleo_state_t *rc_receiver = &app->rc_receiver;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3310      	adds	r3, #16
 8004b70:	60fb      	str	r3, [r7, #12]

	spektrum_nucleo_init(rc_receiver);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f001 f925 	bl	8005dc2 <spektrum_nucleo_init>
	spektrum_nucleo_start_receiving(SPEKTRUM_UART);
 8004b78:	4807      	ldr	r0, [pc, #28]	@ (8004b98 <app_run+0x50>)
 8004b7a:	f001 f9eb 	bl	8005f54 <spektrum_nucleo_start_receiving>

	rc_receiver->msg_handler = handle_spektrum_msg;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <app_run+0x54>)
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	rc_receiver->msg_handler_context = app;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000043c 	.word	0x2000043c
 8004b9c:	08004b17 	.word	0x08004b17

08004ba0 <mergearray>:
	return -1;
}

// This function merges array a, b, c into array d in sequence (no sort)
void mergearray(char *a, char *b, char *c, char *out)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
	strcpy(out, a);       // copy first string
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	6838      	ldr	r0, [r7, #0]
 8004bb2:	f003 f89a 	bl	8007cea <strcpy>
	strcat(out, b);       // append second
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	6838      	ldr	r0, [r7, #0]
 8004bba:	f003 f80f 	bl	8007bdc <strcat>
	strcat(out, c);       // append third
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	6838      	ldr	r0, [r7, #0]
 8004bc2:	f003 f80b 	bl	8007bdc <strcat>
    // copying array 3 elements in to c array
    for (i = 0, j = arr1size + arr2size;
         j < arr1size + arr2size + arr3size && i < arr3size; i++, j++) {
        d[j] = c[i];
    }*/
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <send_gokart_info>:

void send_gokart_info(float steer, float speed, int is_info){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0a8      	sub	sp, #160	@ 0xa0
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004bda:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bde:	6078      	str	r0, [r7, #4]
	char info_steer[20];
	char info_speed[20];
	char info_type[15];
	char info_out[60];

    sprintf(steer_val, "%.2f", steer / 180.0 * 3.14);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7fb fcc1 	bl	8000568 <__aeabi_f2d>
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	4b37      	ldr	r3, [pc, #220]	@ (8004cc8 <send_gokart_info+0xf8>)
 8004bec:	f7fb fe3e 	bl	800086c <__aeabi_ddiv>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	a331      	add	r3, pc, #196	@ (adr r3, 8004cc0 <send_gokart_info+0xf0>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fd0b 	bl	8000618 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8004c0a:	4930      	ldr	r1, [pc, #192]	@ (8004ccc <send_gokart_info+0xfc>)
 8004c0c:	f002 feb6 	bl	800797c <siprintf>
    mergearray("steer ", steer_val, " ", info_steer);
 8004c10:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004c14:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004c18:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd0 <send_gokart_info+0x100>)
 8004c1a:	482e      	ldr	r0, [pc, #184]	@ (8004cd4 <send_gokart_info+0x104>)
 8004c1c:	f7ff ffc0 	bl	8004ba0 <mergearray>

    sprintf(speed_val, "%.2f", speed);
 8004c20:	68b8      	ldr	r0, [r7, #8]
 8004c22:	f7fb fca1 	bl	8000568 <__aeabi_f2d>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8004c2e:	4927      	ldr	r1, [pc, #156]	@ (8004ccc <send_gokart_info+0xfc>)
 8004c30:	f002 fea4 	bl	800797c <siprintf>
    mergearray("speed ", speed_val, " ", info_speed);
 8004c34:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004c38:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8004c3c:	4a24      	ldr	r2, [pc, #144]	@ (8004cd0 <send_gokart_info+0x100>)
 8004c3e:	4826      	ldr	r0, [pc, #152]	@ (8004cd8 <send_gokart_info+0x108>)
 8004c40:	f7ff ffae 	bl	8004ba0 <mergearray>

    if (is_info == 0) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <send_gokart_info+0x8a>
    	mergearray("type ", "cmnd", "", info_type);
 8004c4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004c4e:	4a23      	ldr	r2, [pc, #140]	@ (8004cdc <send_gokart_info+0x10c>)
 8004c50:	4923      	ldr	r1, [pc, #140]	@ (8004ce0 <send_gokart_info+0x110>)
 8004c52:	4824      	ldr	r0, [pc, #144]	@ (8004ce4 <send_gokart_info+0x114>)
 8004c54:	f7ff ffa4 	bl	8004ba0 <mergearray>
 8004c58:	e006      	b.n	8004c68 <send_gokart_info+0x98>
    } else {
    	mergearray("type ", "info", "", info_type);
 8004c5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cdc <send_gokart_info+0x10c>)
 8004c60:	4921      	ldr	r1, [pc, #132]	@ (8004ce8 <send_gokart_info+0x118>)
 8004c62:	4820      	ldr	r0, [pc, #128]	@ (8004ce4 <send_gokart_info+0x114>)
 8004c64:	f7ff ff9c 	bl	8004ba0 <mergearray>
    }

    // Combine all parts into final output
    strcpy(info_out, info_steer);
 8004c68:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f003 f839 	bl	8007cea <strcpy>
    strcat(info_out, info_speed);
 8004c78:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f002 ffaa 	bl	8007bdc <strcat>
    strcat(info_out, info_type);
 8004c88:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f002 ffa2 	bl	8007bdc <strcat>

    HAL_UART_Transmit(&huart6, (uint8_t *)info_out, strlen(info_out), 10); // Sending in normal mode
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb faf7 	bl	8000290 <strlen>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f107 0114 	add.w	r1, r7, #20
 8004caa:	230a      	movs	r3, #10
 8004cac:	480f      	ldr	r0, [pc, #60]	@ (8004cec <send_gokart_info+0x11c>)
 8004cae:	f7ff fae2 	bl	8004276 <HAL_UART_Transmit>
	}

	mergearray(info_steer, info_speed, info_type, info_out, 13, 13, 9);

	HAL_UART_Transmit(&huart6, info_out, sizeof(info_out), 10); // Sending in normal mode*/
}
 8004cb2:	bf00      	nop
 8004cb4:	37a0      	adds	r7, #160	@ 0xa0
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	51eb851f 	.word	0x51eb851f
 8004cc4:	40091eb8 	.word	0x40091eb8
 8004cc8:	40668000 	.word	0x40668000
 8004ccc:	0800ba80 	.word	0x0800ba80
 8004cd0:	0800ba88 	.word	0x0800ba88
 8004cd4:	0800ba8c 	.word	0x0800ba8c
 8004cd8:	0800ba94 	.word	0x0800ba94
 8004cdc:	0800ba9c 	.word	0x0800ba9c
 8004ce0:	0800baa0 	.word	0x0800baa0
 8004ce4:	0800baa8 	.word	0x0800baa8
 8004ce8:	0800bab0 	.word	0x0800bab0
 8004cec:	200004c4 	.word	0x200004c4

08004cf0 <handle_remote_command>:

void handle_remote_command(){
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	float acc_percent = app.acc_percent;
 8004cf6:	4b28      	ldr	r3, [pc, #160]	@ (8004d98 <handle_remote_command+0xa8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
	float gear_shift = app.gokart_status;
 8004cfc:	4b26      	ldr	r3, [pc, #152]	@ (8004d98 <handle_remote_command+0xa8>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d08:	edc7 7a02 	vstr	s15, [r7, #8]
	float steer_percent = app.steer_percent;
 8004d0c:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <handle_remote_command+0xa8>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	607b      	str	r3, [r7, #4]

	if(acc_percent > 0.00){
 8004d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	dd0d      	ble.n	8004d3c <handle_remote_command+0x4c>
		throttle_desired = acc_percent * 100.0;
 8004d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d24:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d9c <handle_remote_command+0xac>
 8004d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <handle_remote_command+0xb0>)
 8004d2e:	edc3 7a00 	vstr	s15, [r3]
		brake_desired = 0.0;
 8004d32:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <handle_remote_command+0xb4>)
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e00f      	b.n	8004d5c <handle_remote_command+0x6c>
	} else{
		throttle_desired = 0.0;
 8004d3c:	4b18      	ldr	r3, [pc, #96]	@ (8004da0 <handle_remote_command+0xb0>)
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
		brake_desired = -acc_percent * brake_max;
 8004d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d48:	eeb1 7a67 	vneg.f32	s14, s15
 8004d4c:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <handle_remote_command+0xb8>)
 8004d4e:	edd3 7a00 	vldr	s15, [r3]
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	4b13      	ldr	r3, [pc, #76]	@ (8004da4 <handle_remote_command+0xb4>)
 8004d58:	edc3 7a00 	vstr	s15, [r3]
	}

	if (gear_shift == 0){
 8004d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d68:	d103      	bne.n	8004d72 <handle_remote_command+0x82>
		motor_direction = 0;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <handle_remote_command+0xbc>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e002      	b.n	8004d78 <handle_remote_command+0x88>
	} else{
		motor_direction = 1;
 8004d72:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <handle_remote_command+0xbc>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
	}

	steer_desired = steer_percent * steer_max;
 8004d78:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <handle_remote_command+0xc0>)
 8004d7a:	ed93 7a00 	vldr	s14, [r3]
 8004d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <handle_remote_command+0xc4>)
 8004d88:	edc3 7a00 	vstr	s15, [r3]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000530 	.word	0x20000530
 8004d9c:	42c80000 	.word	0x42c80000
 8004da0:	20000510 	.word	0x20000510
 8004da4:	20000528 	.word	0x20000528
 8004da8:	20000020 	.word	0x20000020
 8004dac:	2000050c 	.word	0x2000050c
 8004db0:	2000001c 	.word	0x2000001c
 8004db4:	2000051c 	.word	0x2000051c

08004db8 <handle_autonomous_command>:

void handle_autonomous_command(){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
	uint8_t place_holder[10];
	sscanf((const char *)drive_msg, "%s %f %s %f", place_holder, &steer_desired, place_holder, &speed_desired);
 8004dbe:	1d3a      	adds	r2, r7, #4
 8004dc0:	4b07      	ldr	r3, [pc, #28]	@ (8004de0 <handle_autonomous_command+0x28>)
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <handle_autonomous_command+0x2c>)
 8004dca:	4907      	ldr	r1, [pc, #28]	@ (8004de8 <handle_autonomous_command+0x30>)
 8004dcc:	4807      	ldr	r0, [pc, #28]	@ (8004dec <handle_autonomous_command+0x34>)
 8004dce:	f002 fdf7 	bl	80079c0 <siscanf>

	compute_auto_brake();
 8004dd2:	f000 f81d 	bl	8004e10 <compute_auto_brake>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000518 	.word	0x20000518
 8004de4:	2000051c 	.word	0x2000051c
 8004de8:	0800bab8 	.word	0x0800bab8
 8004dec:	20000698 	.word	0x20000698

08004df0 <handle_manual_command>:

void handle_manual_command(){
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
	steer_desired = steering_wheel;
 8004df4:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <handle_manual_command+0x18>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <handle_manual_command+0x1c>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000524 	.word	0x20000524
 8004e0c:	2000051c 	.word	0x2000051c

08004e10 <compute_auto_brake>:

void compute_auto_brake(){
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
	float speed_error = speed_desired - speed_measured;
 8004e16:	4b26      	ldr	r3, [pc, #152]	@ (8004eb0 <compute_auto_brake+0xa0>)
 8004e18:	ed93 7a00 	vldr	s14, [r3]
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <compute_auto_brake+0xa4>)
 8004e1e:	edd3 7a00 	vldr	s15, [r3]
 8004e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e26:	edc7 7a01 	vstr	s15, [r7, #4]

	if (speed_error < -1.5){
 8004e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e2e:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8004e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3a:	d530      	bpl.n	8004e9e <compute_auto_brake+0x8e>
		brake_desired = (-speed_error - 1.5) * brake_max / 2;
 8004e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e40:	eef1 7a67 	vneg.f32	s15, s15
 8004e44:	ee17 3a90 	vmov	r3, s15
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fb fb8d 	bl	8000568 <__aeabi_f2d>
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <compute_auto_brake+0xa8>)
 8004e54:	f7fb fa28 	bl	80002a8 <__aeabi_dsub>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	461d      	mov	r5, r3
 8004e60:	4b16      	ldr	r3, [pc, #88]	@ (8004ebc <compute_auto_brake+0xac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fb7f 	bl	8000568 <__aeabi_f2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb fbd1 	bl	8000618 <__aeabi_dmul>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004e86:	f7fb fcf1 	bl	800086c <__aeabi_ddiv>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7fb feb9 	bl	8000c08 <__aeabi_d2f>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <compute_auto_brake+0xb0>)
 8004e9a:	6013      	str	r3, [r2, #0]
	} else{
		brake_desired = 0.0;
	}
}
 8004e9c:	e003      	b.n	8004ea6 <compute_auto_brake+0x96>
		brake_desired = 0.0;
 8004e9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <compute_auto_brake+0xb0>)
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000518 	.word	0x20000518
 8004eb4:	20000514 	.word	0x20000514
 8004eb8:	3ff80000 	.word	0x3ff80000
 8004ebc:	20000020 	.word	0x20000020
 8004ec0:	20000528 	.word	0x20000528

08004ec4 <cast_command>:

void cast_command(){
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	if(steer_desired > steer_max){
 8004ec8:	4b30      	ldr	r3, [pc, #192]	@ (8004f8c <cast_command+0xc8>)
 8004eca:	ed93 7a00 	vldr	s14, [r3]
 8004ece:	4b30      	ldr	r3, [pc, #192]	@ (8004f90 <cast_command+0xcc>)
 8004ed0:	edd3 7a00 	vldr	s15, [r3]
 8004ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004edc:	dd04      	ble.n	8004ee8 <cast_command+0x24>
		steer_desired = steer_max;
 8004ede:	4b2c      	ldr	r3, [pc, #176]	@ (8004f90 <cast_command+0xcc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f8c <cast_command+0xc8>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e014      	b.n	8004f12 <cast_command+0x4e>
	} else if (steer_desired < -steer_max){
 8004ee8:	4b29      	ldr	r3, [pc, #164]	@ (8004f90 <cast_command+0xcc>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eeb1 7a67 	vneg.f32	s14, s15
 8004ef2:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <cast_command+0xc8>)
 8004ef4:	edd3 7a00 	vldr	s15, [r3]
 8004ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	dd07      	ble.n	8004f12 <cast_command+0x4e>
		steer_desired = -steer_max;
 8004f02:	4b23      	ldr	r3, [pc, #140]	@ (8004f90 <cast_command+0xcc>)
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eef1 7a67 	vneg.f32	s15, s15
 8004f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <cast_command+0xc8>)
 8004f0e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (brake_desired > brake_max){
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <cast_command+0xd0>)
 8004f14:	ed93 7a00 	vldr	s14, [r3]
 8004f18:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <cast_command+0xd4>)
 8004f1a:	edd3 7a00 	vldr	s15, [r3]
 8004f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	dd04      	ble.n	8004f32 <cast_command+0x6e>
		brake_desired = brake_max;
 8004f28:	4b1b      	ldr	r3, [pc, #108]	@ (8004f98 <cast_command+0xd4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	@ (8004f94 <cast_command+0xd0>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e00b      	b.n	8004f4a <cast_command+0x86>
	} else if (brake_desired < 0.0){
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <cast_command+0xd0>)
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d503      	bpl.n	8004f4a <cast_command+0x86>
		brake_desired = 0.0;
 8004f42:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <cast_command+0xd0>)
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
	}

	if (throttle_desired > 100.0){
 8004f4a:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <cast_command+0xd8>)
 8004f4c:	edd3 7a00 	vldr	s15, [r3]
 8004f50:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004fa0 <cast_command+0xdc>
 8004f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd03      	ble.n	8004f66 <cast_command+0xa2>
		throttle_desired = 100.0;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <cast_command+0xd8>)
 8004f60:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <cast_command+0xe0>)
 8004f62:	601a      	str	r2, [r3, #0]
	} else if (throttle_desired < 0.0){
		throttle_desired = 0.0;
	}
}
 8004f64:	e00c      	b.n	8004f80 <cast_command+0xbc>
	} else if (throttle_desired < 0.0){
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <cast_command+0xd8>)
 8004f68:	edd3 7a00 	vldr	s15, [r3]
 8004f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	d400      	bmi.n	8004f78 <cast_command+0xb4>
}
 8004f76:	e003      	b.n	8004f80 <cast_command+0xbc>
		throttle_desired = 0.0;
 8004f78:	4b08      	ldr	r3, [pc, #32]	@ (8004f9c <cast_command+0xd8>)
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000051c 	.word	0x2000051c
 8004f90:	2000001c 	.word	0x2000001c
 8004f94:	20000528 	.word	0x20000528
 8004f98:	20000020 	.word	0x20000020
 8004f9c:	20000510 	.word	0x20000510
 8004fa0:	42c80000 	.word	0x42c80000
 8004fa4:	42c80000 	.word	0x42c80000

08004fa8 <send_command>:

void send_command(){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	// Send CANBus command
	CAN_TxData[0] = (int)(steer_desired + steer_max);
 8004fae:	4b19      	ldr	r3, [pc, #100]	@ (8005014 <send_command+0x6c>)
 8004fb0:	ed93 7a00 	vldr	s14, [r3]
 8004fb4:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <send_command+0x70>)
 8004fb6:	edd3 7a00 	vldr	s15, [r3]
 8004fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fc6:	793a      	ldrb	r2, [r7, #4]
 8004fc8:	4b14      	ldr	r3, [pc, #80]	@ (800501c <send_command+0x74>)
 8004fca:	701a      	strb	r2, [r3, #0]
	CAN_TxData[1] = (int)(brake_desired);
 8004fcc:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <send_command+0x78>)
 8004fce:	edd3 7a00 	vldr	s15, [r3]
 8004fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fda:	793a      	ldrb	r2, [r7, #4]
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <send_command+0x74>)
 8004fde:	705a      	strb	r2, [r3, #1]
	CAN_TxData[2] = (int)(throttle_desired);
 8004fe0:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <send_command+0x7c>)
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fea:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fee:	793a      	ldrb	r2, [r7, #4]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <send_command+0x74>)
 8004ff2:	709a      	strb	r2, [r3, #2]
	CAN_TxData[3] = (int)(motor_direction);
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <send_command+0x80>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b08      	ldr	r3, [pc, #32]	@ (800501c <send_command+0x74>)
 8004ffc:	70da      	strb	r2, [r3, #3]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData, &TxMailbox);
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <send_command+0x84>)
 8005000:	4a06      	ldr	r2, [pc, #24]	@ (800501c <send_command+0x74>)
 8005002:	490b      	ldr	r1, [pc, #44]	@ (8005030 <send_command+0x88>)
 8005004:	480b      	ldr	r0, [pc, #44]	@ (8005034 <send_command+0x8c>)
 8005006:	f7fc fd43 	bl	8001a90 <HAL_CAN_AddTxMessage>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000051c 	.word	0x2000051c
 8005018:	2000001c 	.word	0x2000001c
 800501c:	20000684 	.word	0x20000684
 8005020:	20000528 	.word	0x20000528
 8005024:	20000510 	.word	0x20000510
 8005028:	2000050c 	.word	0x2000050c
 800502c:	20000680 	.word	0x20000680
 8005030:	2000064c 	.word	0x2000064c
 8005034:	20000258 	.word	0x20000258

08005038 <print_info>:

void print_info(){
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	if (gokart_mode == 0){
 800503c:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <print_info+0xe0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <print_info+0x14>
		printf("mode: remote \r\n");
 8005044:	4835      	ldr	r0, [pc, #212]	@ (800511c <print_info+0xe4>)
 8005046:	f002 fc91 	bl	800796c <puts>
 800504a:	e00e      	b.n	800506a <print_info+0x32>
	} else if (gokart_mode == 1){
 800504c:	4b32      	ldr	r3, [pc, #200]	@ (8005118 <print_info+0xe0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d103      	bne.n	800505c <print_info+0x24>
		printf("mode: autonomous \r\n");
 8005054:	4832      	ldr	r0, [pc, #200]	@ (8005120 <print_info+0xe8>)
 8005056:	f002 fc89 	bl	800796c <puts>
 800505a:	e006      	b.n	800506a <print_info+0x32>
	} else if (gokart_mode == 2){
 800505c:	4b2e      	ldr	r3, [pc, #184]	@ (8005118 <print_info+0xe0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d102      	bne.n	800506a <print_info+0x32>
		printf("mode: manual \r\n");
 8005064:	482f      	ldr	r0, [pc, #188]	@ (8005124 <print_info+0xec>)
 8005066:	f002 fc81 	bl	800796c <puts>
	}

	if (motor_direction == 0){
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <print_info+0xf0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <print_info+0x42>
		printf("motor_direction: reverse \r\n\n");
 8005072:	482e      	ldr	r0, [pc, #184]	@ (800512c <print_info+0xf4>)
 8005074:	f002 fc7a 	bl	800796c <puts>
 8005078:	e002      	b.n	8005080 <print_info+0x48>
	} else{
		printf("motor_direction: forward \r\n");
 800507a:	482d      	ldr	r0, [pc, #180]	@ (8005130 <print_info+0xf8>)
 800507c:	f002 fc76 	bl	800796c <puts>
	}

	printf("throttle desired %.2f \r\n\n", throttle_desired);
 8005080:	4b2c      	ldr	r3, [pc, #176]	@ (8005134 <print_info+0xfc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7fb fa6f 	bl	8000568 <__aeabi_f2d>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	482a      	ldr	r0, [pc, #168]	@ (8005138 <print_info+0x100>)
 8005090:	f002 fc04 	bl	800789c <iprintf>
	printf("steer desired %.2f ", steer_desired);
 8005094:	4b29      	ldr	r3, [pc, #164]	@ (800513c <print_info+0x104>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fa65 	bl	8000568 <__aeabi_f2d>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4827      	ldr	r0, [pc, #156]	@ (8005140 <print_info+0x108>)
 80050a4:	f002 fbfa 	bl	800789c <iprintf>
	printf("steer measured %.2f \r\n", steer_measured);
 80050a8:	4b26      	ldr	r3, [pc, #152]	@ (8005144 <print_info+0x10c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fb fa5b 	bl	8000568 <__aeabi_f2d>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4824      	ldr	r0, [pc, #144]	@ (8005148 <print_info+0x110>)
 80050b8:	f002 fbf0 	bl	800789c <iprintf>
	printf("brake desired %.2f ", brake_desired);
 80050bc:	4b23      	ldr	r3, [pc, #140]	@ (800514c <print_info+0x114>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fa51 	bl	8000568 <__aeabi_f2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4821      	ldr	r0, [pc, #132]	@ (8005150 <print_info+0x118>)
 80050cc:	f002 fbe6 	bl	800789c <iprintf>
	printf("brake measured %.2f \r\n", brake_measured);
 80050d0:	4b20      	ldr	r3, [pc, #128]	@ (8005154 <print_info+0x11c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fb fa47 	bl	8000568 <__aeabi_f2d>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	481e      	ldr	r0, [pc, #120]	@ (8005158 <print_info+0x120>)
 80050e0:	f002 fbdc 	bl	800789c <iprintf>
	printf("speed desired %.2f  ", speed_desired);
 80050e4:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <print_info+0x124>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb fa3d 	bl	8000568 <__aeabi_f2d>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	481b      	ldr	r0, [pc, #108]	@ (8005160 <print_info+0x128>)
 80050f4:	f002 fbd2 	bl	800789c <iprintf>
	printf("speed measured %.2f \r\n", speed_measured);
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <print_info+0x12c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb fa33 	bl	8000568 <__aeabi_f2d>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4818      	ldr	r0, [pc, #96]	@ (8005168 <print_info+0x130>)
 8005108:	f002 fbc8 	bl	800789c <iprintf>
	printf("\r\n");
 800510c:	4817      	ldr	r0, [pc, #92]	@ (800516c <print_info+0x134>)
 800510e:	f002 fc2d 	bl	800796c <puts>
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000508 	.word	0x20000508
 800511c:	0800bac4 	.word	0x0800bac4
 8005120:	0800bad4 	.word	0x0800bad4
 8005124:	0800bae8 	.word	0x0800bae8
 8005128:	2000050c 	.word	0x2000050c
 800512c:	0800baf8 	.word	0x0800baf8
 8005130:	0800bb14 	.word	0x0800bb14
 8005134:	20000510 	.word	0x20000510
 8005138:	0800bb30 	.word	0x0800bb30
 800513c:	2000051c 	.word	0x2000051c
 8005140:	0800bb4c 	.word	0x0800bb4c
 8005144:	20000520 	.word	0x20000520
 8005148:	0800bb60 	.word	0x0800bb60
 800514c:	20000528 	.word	0x20000528
 8005150:	0800bb78 	.word	0x0800bb78
 8005154:	2000052c 	.word	0x2000052c
 8005158:	0800bb8c 	.word	0x0800bb8c
 800515c:	20000518 	.word	0x20000518
 8005160:	0800bba4 	.word	0x0800bba4
 8005164:	20000514 	.word	0x20000514
 8005168:	0800bbbc 	.word	0x0800bbbc
 800516c:	0800bbd4 	.word	0x0800bbd4

08005170 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8005178:	4b2e      	ldr	r3, [pc, #184]	@ (8005234 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800517a:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800517c:	2100      	movs	r1, #0
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc fd61 	bl	8001c46 <HAL_CAN_GetRxMessage>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
	  Error_Handler();
 800518a:	f000 fd2f 	bl	8005bec <Error_Handler>
  }

  if (RxHeader.StdId == 0x101)
 800518e:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f240 1201 	movw	r2, #257	@ 0x101
 8005196:	4293      	cmp	r3, r2
 8005198:	d112      	bne.n	80051c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
  {
	  speed_measured = CAN_RxData[0] / 10.0;
 800519a:	4b26      	ldr	r3, [pc, #152]	@ (8005234 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb f9d0 	bl	8000544 <__aeabi_i2d>
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80051aa:	f7fb fb5f 	bl	800086c <__aeabi_ddiv>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7fb fd27 	bl	8000c08 <__aeabi_d2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a20      	ldr	r2, [pc, #128]	@ (8005240 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80051be:	6013      	str	r3, [r2, #0]
  }

  if (RxHeader.StdId == 0x102)
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80051c8:	d108      	bne.n	80051dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
  {
	  brake_measured = CAN_RxData[0];
 80051ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80051d8:	edc3 7a00 	vstr	s15, [r3]
  }

  if (RxHeader.StdId == 0x103)
 80051dc:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f240 1203 	movw	r2, #259	@ 0x103
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10d      	bne.n	8005204 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
  {
	  steer_measured = CAN_RxData[0] - steer_max;
 80051e8:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f4:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80051f6:	edd3 7a00 	vldr	s15, [r3]
 80051fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fe:	4b13      	ldr	r3, [pc, #76]	@ (800524c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005200:	edc3 7a00 	vstr	s15, [r3]
  }

  if (RxHeader.StdId == 0x104)
 8005204:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520c:	d10d      	bne.n	800522a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
  {
	  steering_wheel = CAN_RxData[0] - steer_max;
 800520e:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521a:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005224:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8005226:	edc3 7a00 	vstr	s15, [r3]
  }
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	2000068c 	.word	0x2000068c
 8005238:	20000664 	.word	0x20000664
 800523c:	40240000 	.word	0x40240000
 8005240:	20000514 	.word	0x20000514
 8005244:	2000052c 	.word	0x2000052c
 8005248:	2000001c 	.word	0x2000001c
 800524c:	20000520 	.word	0x20000520
 8005250:	20000524 	.word	0x20000524

08005254 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	// 40Hz - 25ms handle gokart command and send to subsystems
	if (htim == &htim6) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a25      	ldr	r2, [pc, #148]	@ (80052f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d11b      	bne.n	800529c <HAL_TIM_PeriodElapsedCallback+0x48>
		gokart_mode = app.control_mode;
 8005264:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a24      	ldr	r2, [pc, #144]	@ (80052fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800526a:	6013      	str	r3, [r2, #0]

		if (gokart_mode == 0){
 800526c:	4b23      	ldr	r3, [pc, #140]	@ (80052fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_TIM_PeriodElapsedCallback+0x26>
			handle_remote_command();
 8005274:	f7ff fd3c 	bl	8004cf0 <handle_remote_command>
 8005278:	e00c      	b.n	8005294 <HAL_TIM_PeriodElapsedCallback+0x40>
		} else if (gokart_mode == 1){
 800527a:	4b20      	ldr	r3, [pc, #128]	@ (80052fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <HAL_TIM_PeriodElapsedCallback+0x34>
			handle_autonomous_command();
 8005282:	f7ff fd99 	bl	8004db8 <handle_autonomous_command>
 8005286:	e005      	b.n	8005294 <HAL_TIM_PeriodElapsedCallback+0x40>
		} else if (gokart_mode == 2){
 8005288:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d101      	bne.n	8005294 <HAL_TIM_PeriodElapsedCallback+0x40>
			handle_manual_command();
 8005290:	f7ff fdae 	bl	8004df0 <handle_manual_command>
		}

		cast_command();
 8005294:	f7ff fe16 	bl	8004ec4 <cast_command>
		send_command();
 8005298:	f7ff fe86 	bl	8004fa8 <send_command>
	}

	// 40Hz - 25ms send out gokart drive info to higher level device
	if (htim == &htim7){
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <HAL_TIM_PeriodElapsedCallback+0x6a>
		 // the current gokart drive state information
	     send_gokart_info(steer_measured, speed_measured, 1);
 80052a4:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80052ac:	ed93 7a00 	vldr	s14, [r3]
 80052b0:	2001      	movs	r0, #1
 80052b2:	eef0 0a47 	vmov.f32	s1, s14
 80052b6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ba:	f7ff fc89 	bl	8004bd0 <send_gokart_info>
	}

	// 10Hz - 100ms send out gokart drive command to higher level device
	if(htim == &htim10){
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a12      	ldr	r2, [pc, #72]	@ (800530c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0x8c>
	    send_gokart_info(steer_desired, speed_desired, 0);
 80052c6:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80052c8:	edd3 7a00 	vldr	s15, [r3]
 80052cc:	4b11      	ldr	r3, [pc, #68]	@ (8005314 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80052ce:	ed93 7a00 	vldr	s14, [r3]
 80052d2:	2000      	movs	r0, #0
 80052d4:	eef0 0a47 	vmov.f32	s1, s14
 80052d8:	eeb0 0a67 	vmov.f32	s0, s15
 80052dc:	f7ff fc78 	bl	8004bd0 <send_gokart_info>
	}

	// 5Hz - 200ms print gokart info
	if (htim == &htim11){
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005318 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_PeriodElapsedCallback+0x98>
		 print_info();
 80052e8:	f7ff fea6 	bl	8005038 <print_info>
	}
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	2000031c 	.word	0x2000031c
 80052f8:	20000530 	.word	0x20000530
 80052fc:	20000508 	.word	0x20000508
 8005300:	20000364 	.word	0x20000364
 8005304:	20000520 	.word	0x20000520
 8005308:	20000514 	.word	0x20000514
 800530c:	200003ac 	.word	0x200003ac
 8005310:	2000051c 	.word	0x2000051c
 8005314:	20000518 	.word	0x20000518
 8005318:	200003f4 	.word	0x200003f4

0800531c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005320:	f7fb fe8e 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005324:	f000 f824 	bl	8005370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005328:	f000 fb50 	bl	80059cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800532c:	f000 faf8 	bl	8005920 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8005330:	f000 facc 	bl	80058cc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8005334:	f000 f986 	bl	8005644 <MX_TIM1_Init>
  MX_CAN1_Init();
 8005338:	f000 f8d6 	bl	80054e8 <MX_CAN1_Init>
  MX_ADC1_Init();
 800533c:	f000 f882 	bl	8005444 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8005340:	f000 fb18 	bl	8005974 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8005344:	f000 fa02 	bl	800574c <MX_TIM6_Init>
  MX_I2C1_Init();
 8005348:	f000 f93c 	bl	80055c4 <MX_I2C1_Init>
  MX_TIM7_Init();
 800534c:	f000 fa36 	bl	80057bc <MX_TIM7_Init>
  MX_TIM10_Init();
 8005350:	f000 fa6c 	bl	800582c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005354:	f000 fa92 	bl	800587c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  main_app = &app;
 8005358:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <main+0x4c>)
 800535a:	4a04      	ldr	r2, [pc, #16]	@ (800536c <main+0x50>)
 800535c:	601a      	str	r2, [r3, #0]
  app_run(&app);
 800535e:	4803      	ldr	r0, [pc, #12]	@ (800536c <main+0x50>)
 8005360:	f7ff fbf2 	bl	8004b48 <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <main+0x48>
 8005368:	20000648 	.word	0x20000648
 800536c:	20000530 	.word	0x20000530

08005370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b094      	sub	sp, #80	@ 0x50
 8005374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005376:	f107 0320 	add.w	r3, r7, #32
 800537a:	2230      	movs	r2, #48	@ 0x30
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f002 fc24 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	4b28      	ldr	r3, [pc, #160]	@ (800543c <SystemClock_Config+0xcc>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	4a27      	ldr	r2, [pc, #156]	@ (800543c <SystemClock_Config+0xcc>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80053a4:	4b25      	ldr	r3, [pc, #148]	@ (800543c <SystemClock_Config+0xcc>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b0:	2300      	movs	r3, #0
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	4b22      	ldr	r3, [pc, #136]	@ (8005440 <SystemClock_Config+0xd0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <SystemClock_Config+0xd0>)
 80053ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005440 <SystemClock_Config+0xd0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053cc:	2302      	movs	r3, #2
 80053ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053d0:	2301      	movs	r3, #1
 80053d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053d4:	2310      	movs	r3, #16
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053d8:	2302      	movs	r3, #2
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80053e0:	2308      	movs	r3, #8
 80053e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80053e4:	23a8      	movs	r3, #168	@ 0xa8
 80053e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053e8:	2302      	movs	r3, #2
 80053ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80053ec:	2307      	movs	r3, #7
 80053ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053f0:	f107 0320 	add.w	r3, r7, #32
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fd fc25 	bl	8002c44 <HAL_RCC_OscConfig>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005400:	f000 fbf4 	bl	8005bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005404:	230f      	movs	r3, #15
 8005406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005408:	2302      	movs	r3, #2
 800540a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005410:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800541a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	2105      	movs	r1, #5
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd fe86 	bl	8003134 <HAL_RCC_ClockConfig>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800542e:	f000 fbdd 	bl	8005bec <Error_Handler>
  }
}
 8005432:	bf00      	nop
 8005434:	3750      	adds	r7, #80	@ 0x50
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	40007000 	.word	0x40007000

08005444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800544a:	463b      	mov	r3, r7
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005456:	4b21      	ldr	r3, [pc, #132]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005458:	4a21      	ldr	r2, [pc, #132]	@ (80054e0 <MX_ADC1_Init+0x9c>)
 800545a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800545c:	4b1f      	ldr	r3, [pc, #124]	@ (80054dc <MX_ADC1_Init+0x98>)
 800545e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005462:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005464:	4b1d      	ldr	r3, [pc, #116]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005466:	2200      	movs	r2, #0
 8005468:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800546a:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <MX_ADC1_Init+0x98>)
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005470:	4b1a      	ldr	r3, [pc, #104]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005472:	2200      	movs	r2, #0
 8005474:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005476:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800547e:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005480:	2200      	movs	r2, #0
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005484:	4b15      	ldr	r3, [pc, #84]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005486:	4a17      	ldr	r2, [pc, #92]	@ (80054e4 <MX_ADC1_Init+0xa0>)
 8005488:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800548a:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <MX_ADC1_Init+0x98>)
 800548c:	2200      	movs	r2, #0
 800548e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005492:	2201      	movs	r2, #1
 8005494:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005496:	4b11      	ldr	r3, [pc, #68]	@ (80054dc <MX_ADC1_Init+0x98>)
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800549e:	4b0f      	ldr	r3, [pc, #60]	@ (80054dc <MX_ADC1_Init+0x98>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80054a4:	480d      	ldr	r0, [pc, #52]	@ (80054dc <MX_ADC1_Init+0x98>)
 80054a6:	f7fb fe61 	bl	800116c <HAL_ADC_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80054b0:	f000 fb9c 	bl	8005bec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80054b4:	2303      	movs	r3, #3
 80054b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80054bc:	2300      	movs	r3, #0
 80054be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054c0:	463b      	mov	r3, r7
 80054c2:	4619      	mov	r1, r3
 80054c4:	4805      	ldr	r0, [pc, #20]	@ (80054dc <MX_ADC1_Init+0x98>)
 80054c6:	f7fb fe95 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80054d0:	f000 fb8c 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000210 	.word	0x20000210
 80054e0:	40012000 	.word	0x40012000
 80054e4:	0f000001 	.word	0x0f000001

080054e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.DLC = 4;
 80054ee:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 80054f0:	2204      	movs	r2, #4
 80054f2:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80054f4:	4b30      	ldr	r3, [pc, #192]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80054fa:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8005500:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 8005502:	2200      	movs	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x100;
 8005506:	4b2c      	ldr	r3, [pc, #176]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 8005508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800550c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800550e:	4b2a      	ldr	r3, [pc, #168]	@ (80055b8 <MX_CAN1_Init+0xd0>)
 8005510:	2200      	movs	r2, #0
 8005512:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005514:	4b29      	ldr	r3, [pc, #164]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005516:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <MX_CAN1_Init+0xd8>)
 8005518:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 42;
 800551a:	4b28      	ldr	r3, [pc, #160]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800551c:	222a      	movs	r2, #42	@ 0x2a
 800551e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005520:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005526:	4b25      	ldr	r3, [pc, #148]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005528:	2200      	movs	r2, #0
 800552a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800552c:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800552e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8005532:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8005534:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005536:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 800553a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800553c:	4b1f      	ldr	r3, [pc, #124]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800553e:	2200      	movs	r2, #0
 8005540:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8005542:	4b1e      	ldr	r3, [pc, #120]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005544:	2201      	movs	r2, #1
 8005546:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8005548:	4b1c      	ldr	r3, [pc, #112]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800554a:	2201      	movs	r2, #1
 800554c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800554e:	4b1b      	ldr	r3, [pc, #108]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005550:	2201      	movs	r2, #1
 8005552:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005554:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800555a:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800555c:	2200      	movs	r2, #0
 800555e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005560:	4816      	ldr	r0, [pc, #88]	@ (80055bc <MX_CAN1_Init+0xd4>)
 8005562:	f7fc f875 	bl	8001650 <HAL_CAN_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_CAN1_Init+0x88>
  {
    Error_Handler();
 800556c:	f000 fb3e 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8005570:	2301      	movs	r3, #1
 8005572:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8005574:	230a      	movs	r3, #10
 8005576:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8005580:	2300      	movs	r3, #0
 8005582:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005590:	2301      	movs	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8005598:	463b      	mov	r3, r7
 800559a:	4619      	mov	r1, r3
 800559c:	4807      	ldr	r0, [pc, #28]	@ (80055bc <MX_CAN1_Init+0xd4>)
 800559e:	f7fc f953 	bl	8001848 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80055a2:	4806      	ldr	r0, [pc, #24]	@ (80055bc <MX_CAN1_Init+0xd4>)
 80055a4:	f7fc fa30 	bl	8001a08 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80055a8:	2102      	movs	r1, #2
 80055aa:	4804      	ldr	r0, [pc, #16]	@ (80055bc <MX_CAN1_Init+0xd4>)
 80055ac:	f7fc fc5d 	bl	8001e6a <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 80055b0:	bf00      	nop
 80055b2:	3728      	adds	r7, #40	@ 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000064c 	.word	0x2000064c
 80055bc:	20000258 	.word	0x20000258
 80055c0:	40006400 	.word	0x40006400

080055c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055ca:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <MX_I2C1_Init+0x78>)
 80055cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80055ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005640 <MX_I2C1_Init+0x7c>)
 80055d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055d4:	4b18      	ldr	r3, [pc, #96]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055da:	4b17      	ldr	r3, [pc, #92]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055dc:	2200      	movs	r2, #0
 80055de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055e0:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055e8:	4b13      	ldr	r3, [pc, #76]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055f4:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <MX_I2C1_Init+0x74>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005600:	480d      	ldr	r0, [pc, #52]	@ (8005638 <MX_I2C1_Init+0x74>)
 8005602:	f7fd f95f 	bl	80028c4 <HAL_I2C_Init>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800560c:	f000 faee 	bl	8005bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005610:	2100      	movs	r1, #0
 8005612:	4809      	ldr	r0, [pc, #36]	@ (8005638 <MX_I2C1_Init+0x74>)
 8005614:	f7fd fa9a 	bl	8002b4c <HAL_I2CEx_ConfigAnalogFilter>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800561e:	f000 fae5 	bl	8005bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005622:	2100      	movs	r1, #0
 8005624:	4804      	ldr	r0, [pc, #16]	@ (8005638 <MX_I2C1_Init+0x74>)
 8005626:	f7fd facd 	bl	8002bc4 <HAL_I2CEx_ConfigDigitalFilter>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8005630:	f000 fadc 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000280 	.word	0x20000280
 800563c:	40005400 	.word	0x40005400
 8005640:	000186a0 	.word	0x000186a0

08005644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b092      	sub	sp, #72	@ 0x48
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	611a      	str	r2, [r3, #16]
 8005664:	615a      	str	r2, [r3, #20]
 8005666:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	2220      	movs	r2, #32
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f002 faac 	bl	8007bcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005674:	4b33      	ldr	r3, [pc, #204]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005676:	4a34      	ldr	r2, [pc, #208]	@ (8005748 <MX_TIM1_Init+0x104>)
 8005678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3*168-1;
 800567a:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <MX_TIM1_Init+0x100>)
 800567c:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8005680:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005682:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005684:	2200      	movs	r2, #0
 8005686:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8005688:	4b2e      	ldr	r3, [pc, #184]	@ (8005744 <MX_TIM1_Init+0x100>)
 800568a:	22c7      	movs	r2, #199	@ 0xc7
 800568c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800568e:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005690:	2200      	movs	r2, #0
 8005692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005694:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005696:	2200      	movs	r2, #0
 8005698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800569a:	4b2a      	ldr	r3, [pc, #168]	@ (8005744 <MX_TIM1_Init+0x100>)
 800569c:	2200      	movs	r2, #0
 800569e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056a0:	4828      	ldr	r0, [pc, #160]	@ (8005744 <MX_TIM1_Init+0x100>)
 80056a2:	f7fe f827 	bl	80036f4 <HAL_TIM_PWM_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80056ac:	f000 fa9e 	bl	8005bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056b0:	2300      	movs	r3, #0
 80056b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80056bc:	4619      	mov	r1, r3
 80056be:	4821      	ldr	r0, [pc, #132]	@ (8005744 <MX_TIM1_Init+0x100>)
 80056c0:	f7fe fcaa 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80056ca:	f000 fa8f 	bl	8005bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056ce:	2360      	movs	r3, #96	@ 0x60
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056d6:	2300      	movs	r3, #0
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056da:	2300      	movs	r3, #0
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056ee:	2200      	movs	r2, #0
 80056f0:	4619      	mov	r1, r3
 80056f2:	4814      	ldr	r0, [pc, #80]	@ (8005744 <MX_TIM1_Init+0x100>)
 80056f4:	f7fe f956 	bl	80039a4 <HAL_TIM_PWM_ConfigChannel>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80056fe:	f000 fa75 	bl	8005bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800571a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800571c:	2300      	movs	r3, #0
 800571e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	4619      	mov	r1, r3
 8005724:	4807      	ldr	r0, [pc, #28]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005726:	f7fe fcf3 	bl	8004110 <HAL_TIMEx_ConfigBreakDeadTime>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8005730:	f000 fa5c 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005734:	4803      	ldr	r0, [pc, #12]	@ (8005744 <MX_TIM1_Init+0x100>)
 8005736:	f000 fe45 	bl	80063c4 <HAL_TIM_MspPostInit>

}
 800573a:	bf00      	nop
 800573c:	3748      	adds	r7, #72	@ 0x48
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200002d4 	.word	0x200002d4
 8005748:	40010000 	.word	0x40010000

0800574c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005752:	463b      	mov	r3, r7
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800575a:	4b16      	ldr	r3, [pc, #88]	@ (80057b4 <MX_TIM6_Init+0x68>)
 800575c:	4a16      	ldr	r2, [pc, #88]	@ (80057b8 <MX_TIM6_Init+0x6c>)
 800575e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 8005760:	4b14      	ldr	r3, [pc, #80]	@ (80057b4 <MX_TIM6_Init+0x68>)
 8005762:	22a7      	movs	r2, #167	@ 0xa7
 8005764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <MX_TIM6_Init+0x68>)
 8005768:	2200      	movs	r2, #0
 800576a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 25000;
 800576c:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <MX_TIM6_Init+0x68>)
 800576e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8005772:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005774:	4b0f      	ldr	r3, [pc, #60]	@ (80057b4 <MX_TIM6_Init+0x68>)
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800577a:	480e      	ldr	r0, [pc, #56]	@ (80057b4 <MX_TIM6_Init+0x68>)
 800577c:	f7fd fefa 	bl	8003574 <HAL_TIM_Base_Init>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005786:	f000 fa31 	bl	8005bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800578a:	2300      	movs	r3, #0
 800578c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005792:	463b      	mov	r3, r7
 8005794:	4619      	mov	r1, r3
 8005796:	4807      	ldr	r0, [pc, #28]	@ (80057b4 <MX_TIM6_Init+0x68>)
 8005798:	f7fe fc3e 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80057a2:	f000 fa23 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80057a6:	4803      	ldr	r0, [pc, #12]	@ (80057b4 <MX_TIM6_Init+0x68>)
 80057a8:	f7fd ff34 	bl	8003614 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2000031c 	.word	0x2000031c
 80057b8:	40001000 	.word	0x40001000

080057bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057c2:	463b      	mov	r3, r7
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057ca:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057cc:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <MX_TIM7_Init+0x6c>)
 80057ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 168-1;
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057d2:	22a7      	movs	r2, #167	@ 0xa7
 80057d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057d6:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 25000;
 80057dc:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057de:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80057e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057ea:	480e      	ldr	r0, [pc, #56]	@ (8005824 <MX_TIM7_Init+0x68>)
 80057ec:	f7fd fec2 	bl	8003574 <HAL_TIM_Base_Init>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80057f6:	f000 f9f9 	bl	8005bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005802:	463b      	mov	r3, r7
 8005804:	4619      	mov	r1, r3
 8005806:	4807      	ldr	r0, [pc, #28]	@ (8005824 <MX_TIM7_Init+0x68>)
 8005808:	f7fe fc06 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005812:	f000 f9eb 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8005816:	4803      	ldr	r0, [pc, #12]	@ (8005824 <MX_TIM7_Init+0x68>)
 8005818:	f7fd fefc 	bl	8003614 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000364 	.word	0x20000364
 8005828:	40001400 	.word	0x40001400

0800582c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005830:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <MX_TIM10_Init+0x48>)
 8005832:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <MX_TIM10_Init+0x4c>)
 8005834:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 336-1;
 8005836:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <MX_TIM10_Init+0x48>)
 8005838:	f240 124f 	movw	r2, #335	@ 0x14f
 800583c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <MX_TIM10_Init+0x48>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <MX_TIM10_Init+0x48>)
 8005846:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800584a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <MX_TIM10_Init+0x48>)
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <MX_TIM10_Init+0x48>)
 8005854:	2200      	movs	r2, #0
 8005856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005858:	4806      	ldr	r0, [pc, #24]	@ (8005874 <MX_TIM10_Init+0x48>)
 800585a:	f7fd fe8b 	bl	8003574 <HAL_TIM_Base_Init>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005864:	f000 f9c2 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8005868:	4802      	ldr	r0, [pc, #8]	@ (8005874 <MX_TIM10_Init+0x48>)
 800586a:	f7fd fed3 	bl	8003614 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_Init 2 */

}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200003ac 	.word	0x200003ac
 8005878:	40014400 	.word	0x40014400

0800587c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005880:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <MX_TIM11_Init+0x48>)
 8005882:	4a11      	ldr	r2, [pc, #68]	@ (80058c8 <MX_TIM11_Init+0x4c>)
 8005884:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1344-1;
 8005886:	4b0f      	ldr	r3, [pc, #60]	@ (80058c4 <MX_TIM11_Init+0x48>)
 8005888:	f240 523f 	movw	r2, #1343	@ 0x53f
 800588c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <MX_TIM11_Init+0x48>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 25000;
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <MX_TIM11_Init+0x48>)
 8005896:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800589a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <MX_TIM11_Init+0x48>)
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a2:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <MX_TIM11_Init+0x48>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80058a8:	4806      	ldr	r0, [pc, #24]	@ (80058c4 <MX_TIM11_Init+0x48>)
 80058aa:	f7fd fe63 	bl	8003574 <HAL_TIM_Base_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80058b4:	f000 f99a 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 80058b8:	4802      	ldr	r0, [pc, #8]	@ (80058c4 <MX_TIM11_Init+0x48>)
 80058ba:	f7fd feab 	bl	8003614 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM11_Init 2 */

}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200003f4 	.word	0x200003f4
 80058c8:	40014800 	.word	0x40014800

080058cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058d2:	4a12      	ldr	r2, [pc, #72]	@ (800591c <MX_USART2_UART_Init+0x50>)
 80058d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80058dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80058de:	4b0e      	ldr	r3, [pc, #56]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80058f0:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058f2:	2204      	movs	r2, #4
 80058f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058f6:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058fc:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 80058fe:	2200      	movs	r2, #0
 8005900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005902:	4805      	ldr	r0, [pc, #20]	@ (8005918 <MX_USART2_UART_Init+0x4c>)
 8005904:	f7fe fc6a 	bl	80041dc <HAL_UART_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800590e:	f000 f96d 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2000043c 	.word	0x2000043c
 800591c:	40004400 	.word	0x40004400

08005920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005924:	4b11      	ldr	r3, [pc, #68]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005926:	4a12      	ldr	r2, [pc, #72]	@ (8005970 <MX_USART3_UART_Init+0x50>)
 8005928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800592a:	4b10      	ldr	r3, [pc, #64]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 800592c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005932:	4b0e      	ldr	r3, [pc, #56]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 800593a:	2200      	movs	r2, #0
 800593c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800593e:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005940:	2200      	movs	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005944:	4b09      	ldr	r3, [pc, #36]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005946:	220c      	movs	r2, #12
 8005948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800594a:	4b08      	ldr	r3, [pc, #32]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005952:	2200      	movs	r2, #0
 8005954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005956:	4805      	ldr	r0, [pc, #20]	@ (800596c <MX_USART3_UART_Init+0x4c>)
 8005958:	f7fe fc40 	bl	80041dc <HAL_UART_Init>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005962:	f000 f943 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000480 	.word	0x20000480
 8005970:	40004800 	.word	0x40004800

08005974 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005978:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 800597a:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <MX_USART6_UART_Init+0x54>)
 800597c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800597e:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 8005980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005984:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005986:	4b0f      	ldr	r3, [pc, #60]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800598c:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 800598e:	2200      	movs	r2, #0
 8005990:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 8005994:	2200      	movs	r2, #0
 8005996:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 800599a:	220c      	movs	r2, #12
 800599c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800599e:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80059a4:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80059aa:	4806      	ldr	r0, [pc, #24]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 80059ac:	f7fe fc16 	bl	80041dc <HAL_UART_Init>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80059b6:	f000 f919 	bl	8005bec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  uart_serial_start(&huart6);
 80059ba:	4802      	ldr	r0, [pc, #8]	@ (80059c4 <MX_USART6_UART_Init+0x50>)
 80059bc:	f000 ff8c 	bl	80068d8 <uart_serial_start>
  /* USER CODE END USART6_Init 2 */

}
 80059c0:	bf00      	nop
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200004c4 	.word	0x200004c4
 80059c8:	40011400 	.word	0x40011400

080059cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08c      	sub	sp, #48	@ 0x30
 80059d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d2:	f107 031c 	add.w	r3, r7, #28
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	4a7b      	ldr	r2, [pc, #492]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80059f2:	4b79      	ldr	r3, [pc, #484]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	4b75      	ldr	r3, [pc, #468]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	4a74      	ldr	r2, [pc, #464]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a0e:	4b72      	ldr	r3, [pc, #456]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a2a:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	4b67      	ldr	r3, [pc, #412]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	4a66      	ldr	r2, [pc, #408]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a40:	f043 0302 	orr.w	r3, r3, #2
 8005a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a46:	4b64      	ldr	r3, [pc, #400]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	4b60      	ldr	r3, [pc, #384]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	4a5f      	ldr	r2, [pc, #380]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a5c:	f043 0310 	orr.w	r3, r3, #16
 8005a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a62:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	4b59      	ldr	r3, [pc, #356]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	4a58      	ldr	r2, [pc, #352]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a78:	f043 0308 	orr.w	r3, r3, #8
 8005a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a7e:	4b56      	ldr	r3, [pc, #344]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	4b52      	ldr	r3, [pc, #328]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	4a51      	ldr	r2, [pc, #324]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd8 <MX_GPIO_Init+0x20c>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005aac:	484b      	ldr	r0, [pc, #300]	@ (8005bdc <MX_GPIO_Init+0x210>)
 8005aae:	f7fc feef 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2160      	movs	r1, #96	@ 0x60
 8005ab6:	484a      	ldr	r0, [pc, #296]	@ (8005be0 <MX_GPIO_Init+0x214>)
 8005ab8:	f7fc feea 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005abc:	2332      	movs	r3, #50	@ 0x32
 8005abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005acc:	230b      	movs	r3, #11
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ad0:	f107 031c 	add.w	r3, r7, #28
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4843      	ldr	r0, [pc, #268]	@ (8005be4 <MX_GPIO_Init+0x218>)
 8005ad8:	f7fc fd2e 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005adc:	2386      	movs	r3, #134	@ 0x86
 8005ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005aec:	230b      	movs	r3, #11
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005af0:	f107 031c 	add.w	r3, r7, #28
 8005af4:	4619      	mov	r1, r3
 8005af6:	483c      	ldr	r0, [pc, #240]	@ (8005be8 <MX_GPIO_Init+0x21c>)
 8005af8:	f7fc fd1e 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005afc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b02:	2301      	movs	r3, #1
 8005b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4619      	mov	r1, r3
 8005b14:	4831      	ldr	r0, [pc, #196]	@ (8005bdc <MX_GPIO_Init+0x210>)
 8005b16:	f7fc fd0f 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005b1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b20:	2302      	movs	r3, #2
 8005b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b2c:	230b      	movs	r3, #11
 8005b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005b30:	f107 031c 	add.w	r3, r7, #28
 8005b34:	4619      	mov	r1, r3
 8005b36:	4829      	ldr	r0, [pc, #164]	@ (8005bdc <MX_GPIO_Init+0x210>)
 8005b38:	f7fc fcfe 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 USB_OverCurrent_Pin Speed_Sensor_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|USB_OverCurrent_Pin|Speed_Sensor_Pin;
 8005b3c:	f244 0390 	movw	r3, #16528	@ 0x4090
 8005b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b42:	2300      	movs	r3, #0
 8005b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b4a:	f107 031c 	add.w	r3, r7, #28
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4823      	ldr	r0, [pc, #140]	@ (8005be0 <MX_GPIO_Init+0x214>)
 8005b52:	f7fc fcf1 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|USB_PowerSwitchOn_Pin;
 8005b56:	2360      	movs	r3, #96	@ 0x60
 8005b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b66:	f107 031c 	add.w	r3, r7, #28
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	481c      	ldr	r0, [pc, #112]	@ (8005be0 <MX_GPIO_Init+0x214>)
 8005b6e:	f7fc fce3 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005b72:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b80:	2303      	movs	r3, #3
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b84:	230a      	movs	r3, #10
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4816      	ldr	r0, [pc, #88]	@ (8005be8 <MX_GPIO_Init+0x21c>)
 8005b90:	f7fc fcd2 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005ba2:	f107 031c 	add.w	r3, r7, #28
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	480f      	ldr	r0, [pc, #60]	@ (8005be8 <MX_GPIO_Init+0x21c>)
 8005baa:	f7fc fcc5 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005bae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bc0:	230b      	movs	r3, #11
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bc4:	f107 031c 	add.w	r3, r7, #28
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4805      	ldr	r0, [pc, #20]	@ (8005be0 <MX_GPIO_Init+0x214>)
 8005bcc:	f7fc fcb4 	bl	8002538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005bd0:	bf00      	nop
 8005bd2:	3730      	adds	r7, #48	@ 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020400 	.word	0x40020400
 8005be0:	40021800 	.word	0x40021800
 8005be4:	40020800 	.word	0x40020800
 8005be8:	40020000 	.word	0x40020000

08005bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf0:	b672      	cpsid	i
}
 8005bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4813      	ldr	r0, [pc, #76]	@ (8005c48 <Error_Handler+0x5c>)
 8005bfa:	f7fc fe49 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2180      	movs	r1, #128	@ 0x80
 8005c02:	4811      	ldr	r0, [pc, #68]	@ (8005c48 <Error_Handler+0x5c>)
 8005c04:	f7fc fe44 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c0e:	480e      	ldr	r0, [pc, #56]	@ (8005c48 <Error_Handler+0x5c>)
 8005c10:	f7fc fe3e 	bl	8002890 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8005c14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005c18:	f7fb fa84 	bl	8001124 <HAL_Delay>

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4809      	ldr	r0, [pc, #36]	@ (8005c48 <Error_Handler+0x5c>)
 8005c22:	f7fc fe35 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	@ 0x80
 8005c2a:	4807      	ldr	r0, [pc, #28]	@ (8005c48 <Error_Handler+0x5c>)
 8005c2c:	f7fc fe30 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005c30:	2200      	movs	r2, #0
 8005c32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c36:	4804      	ldr	r0, [pc, #16]	@ (8005c48 <Error_Handler+0x5c>)
 8005c38:	f7fc fe2a 	bl	8002890 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8005c3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005c40:	f7fb fa70 	bl	8001124 <HAL_Delay>
//	while (1) {
//	}
  /* USER CODE END Error_Handler_Debug */
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40020400 	.word	0x40020400

08005c4c <spektrum_packet_to_msg>:
	"Aux_5",
	"Aux_6",
	"Aux_7",
};

void spektrum_packet_to_msg(spektrum_internal_packet_t *packet, spektrum_internal_msg_t *msg) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	msg->fades = packet->fades;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	701a      	strb	r2, [r3, #0]
	msg->system = packet->system;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	785a      	ldrb	r2, [r3, #1]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 7; ++i) {
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e03c      	b.n	8005ce6 <spektrum_packet_to_msg+0x9a>
		uint16_t value = ntohs(packet->servo[i]);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	885b      	ldrh	r3, [r3, #2]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ba5b      	rev16	r3, r3
 8005c7a:	827b      	strh	r3, [r7, #18]
		spektrum_channel_data_t *servo = &msg->data[i];
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
		if (packet->system == SPEKTRUM_SYSTEM_22MS_1024_DSM2) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10e      	bne.n	8005cb4 <spektrum_packet_to_msg+0x68>
			servo->servo_phase = false;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_1024_CHANNEL_ID & value) >> 10u;
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	0a9b      	lsrs	r3, r3, #10
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_1024_SERVO_POS & value;
 8005ca8:	8a7b      	ldrh	r3, [r7, #18]
 8005caa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	e015      	b.n	8005ce0 <spektrum_packet_to_msg+0x94>
		} else {
			// else 2048
			servo->servo_phase = 0x8000u & value;
 8005cb4:	8a7b      	ldrh	r3, [r7, #18]
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_2048_CHANNEL_ID & value) >> 11u;
 8005cc8:	8a7b      	ldrh	r3, [r7, #18]
 8005cca:	0adb      	lsrs	r3, r3, #11
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_2048_SERVO_POS & value;
 8005cd6:	8a7b      	ldrh	r3, [r7, #18]
 8005cd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 7; ++i) {
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	ddbf      	ble.n	8005c6c <spektrum_packet_to_msg+0x20>
		}
	}
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <spektrum_msg_to_state>:

	}

}

void spektrum_msg_to_state(const spektrum_internal_msg_t *msg, spektrum_state_t *state, long current_time) {
 8005cfa:	b480      	push	{r7}
 8005cfc:	b089      	sub	sp, #36	@ 0x24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]

	state->fades = msg->fades;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	701a      	strb	r2, [r3, #0]
	state->system = msg->system;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	785a      	ldrb	r2, [r3, #1]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	705a      	strb	r2, [r3, #1]

	if (state->last_msg_ts > 0) {
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dd0c      	ble.n	8005d38 <spektrum_msg_to_state+0x3e>
		long delay = current_time - state->last_msg_ts;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	61bb      	str	r3, [r7, #24]
		if (delay > state->max_msg_delay) {
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dd02      	ble.n	8005d38 <spektrum_msg_to_state+0x3e>
			state->max_msg_delay = delay;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	671a      	str	r2, [r3, #112]	@ 0x70
		}
	}

	state->connected = true;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	state->last_msg_ts = current_time;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	66da      	str	r2, [r3, #108]	@ 0x6c

	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	e030      	b.n	8005dae <spektrum_msg_to_state+0xb4>
		const spektrum_channel_data_t *channel = &msg->data[i];
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	617b      	str	r3, [r7, #20]
		if (channel->channel_id == SPEKTRUM_CHANNEL_LAST) {
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d01f      	beq.n	8005da6 <spektrum_msg_to_state+0xac>
			// skip the special channel that is used as the end of the data section of the packet
			continue;
		}
		if (channel->channel_id < 0 || channel->channel_id >= SPEKTRUM_NUM_STD_CHANNELS) {
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db03      	blt.n	8005d76 <spektrum_msg_to_state+0x7c>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b0b      	cmp	r3, #11
 8005d74:	dd05      	ble.n	8005d82 <spektrum_msg_to_state+0x88>
			state->num_unexpected_channels++;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	669a      	str	r2, [r3, #104]	@ 0x68
			continue;
 8005d80:	e012      	b.n	8005da8 <spektrum_msg_to_state+0xae>
		}
		state->channels[channel->channel_id].servo_phase = channel->servo_phase;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	7811      	ldrb	r1, [r2, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	460a      	mov	r2, r1
 8005d92:	711a      	strb	r2, [r3, #4]
		state->channels[channel->channel_id].servo_position = channel->servo_position;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	6892      	ldr	r2, [r2, #8]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	440b      	add	r3, r1
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	e000      	b.n	8005da8 <spektrum_msg_to_state+0xae>
			continue;
 8005da6:	bf00      	nop
	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b06      	cmp	r3, #6
 8005db2:	ddcb      	ble.n	8005d4c <spektrum_msg_to_state+0x52>
	}

}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	3724      	adds	r7, #36	@ 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <spektrum_nucleo_init>:
#include <string.h>
#include "spektrum_nucleo.h"

void spektrum_nucleo_init(spektrum_nucleo_state_t *state) {
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
	memset(state, 0, sizeof(spektrum_nucleo_state_t));
 8005dca:	2294      	movs	r2, #148	@ 0x94
 8005dcc:	2100      	movs	r1, #0
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fefc 	bl	8007bcc <memset>
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <spektrum_nucleo_reset_receiver>:

void spektrum_nucleo_reset_receiver(spektrum_nucleo_state_t *state, bool full) {
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
	state->num_lost_bytes += state->buffer_size;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	67da      	str	r2, [r3, #124]	@ 0x7c
	state->buffer_size = 0;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	615a      	str	r2, [r3, #20]
	if (full) {
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <spektrum_nucleo_reset_receiver+0x2c>
		state->receiver_state = UNINITIALIZED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
	}
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <spektrum_nucleo_process_packet>:

static void spektrum_nucleo_process_packet(spektrum_nucleo_state_t *state) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	// check packet structure first
	uint8_t system = state->packet.system;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	789b      	ldrb	r3, [r3, #2]
 8005e20:	73fb      	strb	r3, [r7, #15]
	if (
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d013      	beq.n	8005e50 <spektrum_nucleo_process_packet+0x3c>
		system != SPEKTRUM_SYSTEM_22MS_1024_DSM2
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSM2
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b12      	cmp	r3, #18
 8005e2c:	d010      	beq.n	8005e50 <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_22MS_2048_DSMS
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2ba2      	cmp	r3, #162	@ 0xa2
 8005e32:	d00d      	beq.n	8005e50 <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSMX
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2bb2      	cmp	r3, #178	@ 0xb2
 8005e38:	d00a      	beq.n	8005e50 <spektrum_nucleo_process_packet+0x3c>
		) {
		state->num_invalid_packets++;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		state->buffer_size = 0;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	615a      	str	r2, [r3, #20]
		return;
 8005e4e:	e015      	b.n	8005e7c <spektrum_nucleo_process_packet+0x68>
	}

	// parse it
	spektrum_packet_to_msg(&state->packet, &state->msg);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7ff fef6 	bl	8005c4c <spektrum_packet_to_msg>

	state->msg_handler(&state->msg, state->msg_handler_context);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	f102 0018 	add.w	r0, r2, #24
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 8005e72:	4611      	mov	r1, r2
 8005e74:	4798      	blx	r3

	// reset buffer
	state->buffer_size = 0;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	615a      	str	r2, [r3, #20]
}
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <spektrum_nucleo_handle_overrun>:

void spektrum_nucleo_handle_overrun(spektrum_nucleo_state_t *state) {
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
	state->num_overruns++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	spektrum_nucleo_reset_receiver(state, true);
 8005e98:	2101      	movs	r1, #1
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff9e 	bl	8005ddc <spektrum_nucleo_reset_receiver>
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <spektrum_nucleo_handle_byte>:

void spektrum_nucleo_handle_byte(spektrum_nucleo_state_t *state, uint8_t data) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]

	if (state->receiver_state == EXPECTING_DELAY) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d105      	bne.n	8005eca <spektrum_nucleo_handle_byte+0x22>
		state->num_lost_bytes++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	67da      	str	r2, [r3, #124]	@ 0x7c
		return;
 8005ec8:	e01d      	b.n	8005f06 <spektrum_nucleo_handle_byte+0x5e>
	}

	if (state->receiver_state == UNINITIALIZED) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <spektrum_nucleo_handle_byte+0x32>
		state->receiver_state = RECEIVING_PACKET;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t *buffer = (uint8_t *) &state->packet;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3301      	adds	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]

	buffer[state->buffer_size++] = data;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6151      	str	r1, [r2, #20]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	701a      	strb	r2, [r3, #0]

	if (state->buffer_size == sizeof(spektrum_internal_packet_t)) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d105      	bne.n	8005f06 <spektrum_nucleo_handle_byte+0x5e>
		spektrum_nucleo_process_packet(state);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ff8a 	bl	8005e14 <spektrum_nucleo_process_packet>
		state->receiver_state = EXPECTING_DELAY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	701a      	strb	r2, [r3, #0]
	}

}
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <spektrum_nucleo_handle_idle>:

void spektrum_nucleo_handle_idle(spektrum_nucleo_state_t *state, uint32_t ts) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	state->uart_idle_it_last_ts = ts;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	679a      	str	r2, [r3, #120]	@ 0x78
	state->uart_idle_it_count += 1u;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	675a      	str	r2, [r3, #116]	@ 0x74

	if (state->receiver_state == RECEIVING_PACKET) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10b      	bne.n	8005f48 <spektrum_nucleo_handle_idle+0x3c>
		state->num_lost_packets += 1u;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		spektrum_nucleo_reset_receiver(state, false);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff4b 	bl	8005ddc <spektrum_nucleo_reset_receiver>
		return;
 8005f46:	e002      	b.n	8005f4e <spektrum_nucleo_handle_idle+0x42>
	}

	state->receiver_state = RECEIVING_PACKET;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]

}
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <spektrum_nucleo_start_receiving>:
	state->num_lost_packets = 0u;
	state->num_invalid_packets = 0u;
	state->num_overruns = 0u;
}

void spektrum_nucleo_start_receiving(UART_HandleTypeDef *huart) {
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0210 	orr.w	r2, r2, #16
 8005f6a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0220 	orr.w	r2, r2, #32
 8005f7a:	60da      	str	r2, [r3, #12]
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <spektrum_nucleo_irq_handler>:
void spektrum_nucleo_stop_receiving(UART_HandleTypeDef *huart) {
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
}

void spektrum_nucleo_irq_handler(spektrum_nucleo_state_t *state, UART_HandleTypeDef *huart) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10e      	bne.n	8005fbe <spektrum_nucleo_irq_handler+0x36>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
		spektrum_nucleo_handle_overrun(state);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff63 	bl	8005e82 <spektrum_nucleo_handle_overrun>
		return;
 8005fbc:	e02a      	b.n	8006014 <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET) {
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d109      	bne.n	8005fe0 <spektrum_nucleo_irq_handler+0x58>
		uint8_t data = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	75fb      	strb	r3, [r7, #23]
		spektrum_nucleo_handle_byte(state, data);
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff65 	bl	8005ea8 <spektrum_nucleo_handle_byte>
		return;
 8005fde:	e019      	b.n	8006014 <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d112      	bne.n	8006014 <spektrum_nucleo_irq_handler+0x8c>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
		spektrum_nucleo_handle_idle(state, HAL_GetTick());
 8006004:	f7fb f882 	bl	800110c <HAL_GetTick>
 8006008:	4603      	mov	r3, r0
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff7d 	bl	8005f0c <spektrum_nucleo_handle_idle>
		return;
 8006012:	bf00      	nop
	}
};
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	4b13      	ldr	r3, [pc, #76]	@ (8006074 <HAL_MspInit+0x58>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <HAL_MspInit+0x58>)
 800602c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006030:	6453      	str	r3, [r2, #68]	@ 0x44
 8006032:	4b10      	ldr	r3, [pc, #64]	@ (8006074 <HAL_MspInit+0x58>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <HAL_MspInit+0x58>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	4a0b      	ldr	r2, [pc, #44]	@ (8006074 <HAL_MspInit+0x58>)
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604c:	6413      	str	r3, [r2, #64]	@ 0x40
 800604e:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <HAL_MspInit+0x58>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	2005      	movs	r0, #5
 8006060:	f7fc fa33 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006064:	2005      	movs	r0, #5
 8006066:	f7fc fa4c 	bl	8002502 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800

08006078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	@ 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <HAL_ADC_MspInit+0x7c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d127      	bne.n	80060ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	4b16      	ldr	r3, [pc, #88]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80060aa:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4b0f      	ldr	r3, [pc, #60]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	4a0e      	ldr	r2, [pc, #56]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c6:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060d2:	2308      	movs	r3, #8
 80060d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d6:	2303      	movs	r3, #3
 80060d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	4619      	mov	r1, r3
 80060e4:	4805      	ldr	r0, [pc, #20]	@ (80060fc <HAL_ADC_MspInit+0x84>)
 80060e6:	f7fc fa27 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80060ea:	bf00      	nop
 80060ec:	3728      	adds	r7, #40	@ 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40012000 	.word	0x40012000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40020000 	.word	0x40020000

08006100 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a29      	ldr	r2, [pc, #164]	@ (80061c4 <HAL_CAN_MspInit+0xc4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d14b      	bne.n	80061ba <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	4b28      	ldr	r3, [pc, #160]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	4a27      	ldr	r2, [pc, #156]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 800612c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006130:	6413      	str	r3, [r2, #64]	@ 0x40
 8006132:	4b25      	ldr	r3, [pc, #148]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 8006148:	f043 0308 	orr.w	r3, r3, #8
 800614c:	6313      	str	r3, [r2, #48]	@ 0x30
 800614e:	4b1e      	ldr	r3, [pc, #120]	@ (80061c8 <HAL_CAN_MspInit+0xc8>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800615a:	2303      	movs	r3, #3
 800615c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615e:	2302      	movs	r3, #2
 8006160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006166:	2303      	movs	r3, #3
 8006168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800616a:	2309      	movs	r3, #9
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4619      	mov	r1, r3
 8006174:	4815      	ldr	r0, [pc, #84]	@ (80061cc <HAL_CAN_MspInit+0xcc>)
 8006176:	f7fc f9df 	bl	8002538 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800617a:	2200      	movs	r2, #0
 800617c:	2100      	movs	r1, #0
 800617e:	2013      	movs	r0, #19
 8006180:	f7fc f9a3 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006184:	2013      	movs	r0, #19
 8006186:	f7fc f9bc 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	2014      	movs	r0, #20
 8006190:	f7fc f99b 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006194:	2014      	movs	r0, #20
 8006196:	f7fc f9b4 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	2015      	movs	r0, #21
 80061a0:	f7fc f993 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80061a4:	2015      	movs	r0, #21
 80061a6:	f7fc f9ac 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	2016      	movs	r0, #22
 80061b0:	f7fc f98b 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80061b4:	2016      	movs	r0, #22
 80061b6:	f7fc f9a4 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80061ba:	bf00      	nop
 80061bc:	3728      	adds	r7, #40	@ 0x28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40006400 	.word	0x40006400
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40020c00 	.word	0x40020c00

080061d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	@ 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a19      	ldr	r2, [pc, #100]	@ (8006254 <HAL_I2C_MspInit+0x84>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d12c      	bne.n	800624c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	4a17      	ldr	r2, [pc, #92]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 80061fc:	f043 0302 	orr.w	r3, r3, #2
 8006200:	6313      	str	r3, [r2, #48]	@ 0x30
 8006202:	4b15      	ldr	r3, [pc, #84]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800620e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8006212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006214:	2312      	movs	r3, #18
 8006216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621c:	2303      	movs	r3, #3
 800621e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006220:	2304      	movs	r3, #4
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006224:	f107 0314 	add.w	r3, r7, #20
 8006228:	4619      	mov	r1, r3
 800622a:	480c      	ldr	r0, [pc, #48]	@ (800625c <HAL_I2C_MspInit+0x8c>)
 800622c:	f7fc f984 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	4a07      	ldr	r2, [pc, #28]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 800623a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800623e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_I2C_MspInit+0x88>)
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800624c:	bf00      	nop
 800624e:	3728      	adds	r7, #40	@ 0x28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40005400 	.word	0x40005400
 8006258:	40023800 	.word	0x40023800
 800625c:	40020400 	.word	0x40020400

08006260 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <HAL_TIM_PWM_MspInit+0x58>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d11d      	bne.n	80062ae <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	4b11      	ldr	r3, [pc, #68]	@ (80062bc <HAL_TIM_PWM_MspInit+0x5c>)
 8006278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627a:	4a10      	ldr	r2, [pc, #64]	@ (80062bc <HAL_TIM_PWM_MspInit+0x5c>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6453      	str	r3, [r2, #68]	@ 0x44
 8006282:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <HAL_TIM_PWM_MspInit+0x5c>)
 8006284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	2019      	movs	r0, #25
 8006294:	f7fc f919 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006298:	2019      	movs	r0, #25
 800629a:	f7fc f932 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	201a      	movs	r0, #26
 80062a4:	f7fc f911 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80062a8:	201a      	movs	r0, #26
 80062aa:	f7fc f92a 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40023800 	.word	0x40023800

080062c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a38      	ldr	r2, [pc, #224]	@ (80063b0 <HAL_TIM_Base_MspInit+0xf0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d116      	bne.n	8006300 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062da:	4a36      	ldr	r2, [pc, #216]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 80062dc:	f043 0310 	orr.w	r3, r3, #16
 80062e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062e2:	4b34      	ldr	r3, [pc, #208]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	2036      	movs	r0, #54	@ 0x36
 80062f4:	f7fc f8e9 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062f8:	2036      	movs	r0, #54	@ 0x36
 80062fa:	f7fc f902 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80062fe:	e052      	b.n	80063a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2c      	ldr	r2, [pc, #176]	@ (80063b8 <HAL_TIM_Base_MspInit+0xf8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d116      	bne.n	8006338 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	4b29      	ldr	r3, [pc, #164]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	4a28      	ldr	r2, [pc, #160]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006314:	f043 0320 	orr.w	r3, r3, #32
 8006318:	6413      	str	r3, [r2, #64]	@ 0x40
 800631a:	4b26      	ldr	r3, [pc, #152]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	2037      	movs	r0, #55	@ 0x37
 800632c:	f7fc f8cd 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006330:	2037      	movs	r0, #55	@ 0x37
 8006332:	f7fc f8e6 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8006336:	e036      	b.n	80063a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1f      	ldr	r2, [pc, #124]	@ (80063bc <HAL_TIM_Base_MspInit+0xfc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d116      	bne.n	8006370 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	4a1a      	ldr	r2, [pc, #104]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 800634c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006350:	6453      	str	r3, [r2, #68]	@ 0x44
 8006352:	4b18      	ldr	r3, [pc, #96]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	2019      	movs	r0, #25
 8006364:	f7fc f8b1 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006368:	2019      	movs	r0, #25
 800636a:	f7fc f8ca 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 800636e:	e01a      	b.n	80063a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <HAL_TIM_Base_MspInit+0x100>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d115      	bne.n	80063a6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	4b0d      	ldr	r3, [pc, #52]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	4a0c      	ldr	r2, [pc, #48]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 8006384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006388:	6453      	str	r3, [r2, #68]	@ 0x44
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <HAL_TIM_Base_MspInit+0xf4>)
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	201a      	movs	r0, #26
 800639c:	f7fc f895 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80063a0:	201a      	movs	r0, #26
 80063a2:	f7fc f8ae 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 80063a6:	bf00      	nop
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40001000 	.word	0x40001000
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40001400 	.word	0x40001400
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800

080063c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a12      	ldr	r2, [pc, #72]	@ (800642c <HAL_TIM_MspPostInit+0x68>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d11e      	bne.n	8006424 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <HAL_TIM_MspPostInit+0x6c>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	4a10      	ldr	r2, [pc, #64]	@ (8006430 <HAL_TIM_MspPostInit+0x6c>)
 80063f0:	f043 0310 	orr.w	r3, r3, #16
 80063f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80063f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <HAL_TIM_MspPostInit+0x6c>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	60bb      	str	r3, [r7, #8]
 8006400:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006406:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006408:	2302      	movs	r3, #2
 800640a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006414:	2301      	movs	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006418:	f107 030c 	add.w	r3, r7, #12
 800641c:	4619      	mov	r1, r3
 800641e:	4805      	ldr	r0, [pc, #20]	@ (8006434 <HAL_TIM_MspPostInit+0x70>)
 8006420:	f7fc f88a 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40010000 	.word	0x40010000
 8006430:	40023800 	.word	0x40023800
 8006434:	40021000 	.word	0x40021000

08006438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	@ 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a53      	ldr	r2, [pc, #332]	@ (80065a4 <HAL_UART_MspInit+0x16c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d134      	bne.n	80064c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	4b52      	ldr	r3, [pc, #328]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	4a51      	ldr	r2, [pc, #324]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006468:	6413      	str	r3, [r2, #64]	@ 0x40
 800646a:	4b4f      	ldr	r3, [pc, #316]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006472:	623b      	str	r3, [r7, #32]
 8006474:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	4b4b      	ldr	r3, [pc, #300]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	4a4a      	ldr	r2, [pc, #296]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006480:	f043 0308 	orr.w	r3, r3, #8
 8006484:	6313      	str	r3, [r2, #48]	@ 0x30
 8006486:	4b48      	ldr	r3, [pc, #288]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SPEKTRUM_TX_Pin|SPEKTRUM_RX_Pin;
 8006492:	2360      	movs	r3, #96	@ 0x60
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006496:	2302      	movs	r3, #2
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800649e:	2303      	movs	r3, #3
 80064a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064a2:	2307      	movs	r3, #7
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064aa:	4619      	mov	r1, r3
 80064ac:	483f      	ldr	r0, [pc, #252]	@ (80065ac <HAL_UART_MspInit+0x174>)
 80064ae:	f7fc f843 	bl	8002538 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80064b2:	2200      	movs	r2, #0
 80064b4:	2101      	movs	r1, #1
 80064b6:	2026      	movs	r0, #38	@ 0x26
 80064b8:	f7fc f807 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064bc:	2026      	movs	r0, #38	@ 0x26
 80064be:	f7fc f820 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80064c2:	e06b      	b.n	800659c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART3)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a39      	ldr	r2, [pc, #228]	@ (80065b0 <HAL_UART_MspInit+0x178>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d12d      	bne.n	800652a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	4b35      	ldr	r3, [pc, #212]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	4a34      	ldr	r2, [pc, #208]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	4b2e      	ldr	r3, [pc, #184]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	4a2d      	ldr	r2, [pc, #180]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80064fa:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006506:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800650a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650c:	2302      	movs	r3, #2
 800650e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006514:	2303      	movs	r3, #3
 8006516:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006518:	2307      	movs	r3, #7
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800651c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006520:	4619      	mov	r1, r3
 8006522:	4822      	ldr	r0, [pc, #136]	@ (80065ac <HAL_UART_MspInit+0x174>)
 8006524:	f7fc f808 	bl	8002538 <HAL_GPIO_Init>
}
 8006528:	e038      	b.n	800659c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	@ (80065b4 <HAL_UART_MspInit+0x17c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d133      	bne.n	800659c <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 800653a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653c:	4a1a      	ldr	r2, [pc, #104]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 800653e:	f043 0320 	orr.w	r3, r3, #32
 8006542:	6453      	str	r3, [r2, #68]	@ 0x44
 8006544:	4b18      	ldr	r3, [pc, #96]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006558:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006560:	4b11      	ldr	r3, [pc, #68]	@ (80065a8 <HAL_UART_MspInit+0x170>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800656c:	23c0      	movs	r3, #192	@ 0xc0
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006570:	2302      	movs	r3, #2
 8006572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006578:	2303      	movs	r3, #3
 800657a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800657c:	2308      	movs	r3, #8
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006584:	4619      	mov	r1, r3
 8006586:	480c      	ldr	r0, [pc, #48]	@ (80065b8 <HAL_UART_MspInit+0x180>)
 8006588:	f7fb ffd6 	bl	8002538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	2047      	movs	r0, #71	@ 0x47
 8006592:	f7fb ff9a 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006596:	2047      	movs	r0, #71	@ 0x47
 8006598:	f7fb ffb3 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 800659c:	bf00      	nop
 800659e:	3738      	adds	r7, #56	@ 0x38
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40004400 	.word	0x40004400
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020c00 	.word	0x40020c00
 80065b0:	40004800 	.word	0x40004800
 80065b4:	40011400 	.word	0x40011400
 80065b8:	40020800 	.word	0x40020800

080065bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <NMI_Handler+0x4>

080065c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <HardFault_Handler+0x4>

080065cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <MemManage_Handler+0x4>

080065d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <BusFault_Handler+0x4>

080065dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <UsageFault_Handler+0x4>

080065e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006612:	f7fa fd67 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}

0800661a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800662c:	4802      	ldr	r0, [pc, #8]	@ (8006638 <CAN1_TX_IRQHandler+0x10>)
 800662e:	f7fb fc42 	bl	8001eb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000258 	.word	0x20000258

0800663c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006640:	4802      	ldr	r0, [pc, #8]	@ (800664c <CAN1_RX0_IRQHandler+0x10>)
 8006642:	f7fb fc38 	bl	8001eb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000258 	.word	0x20000258

08006650 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006654:	4802      	ldr	r0, [pc, #8]	@ (8006660 <CAN1_RX1_IRQHandler+0x10>)
 8006656:	f7fb fc2e 	bl	8001eb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000258 	.word	0x20000258

08006664 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006668:	4802      	ldr	r0, [pc, #8]	@ (8006674 <CAN1_SCE_IRQHandler+0x10>)
 800666a:	f7fb fc24 	bl	8001eb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000258 	.word	0x20000258

08006678 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800667c:	4803      	ldr	r0, [pc, #12]	@ (800668c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800667e:	f7fd f888 	bl	8003792 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8006682:	4803      	ldr	r0, [pc, #12]	@ (8006690 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8006684:	f7fd f885 	bl	8003792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006688:	bf00      	nop
 800668a:	bd80      	pop	{r7, pc}
 800668c:	200002d4 	.word	0x200002d4
 8006690:	200003ac 	.word	0x200003ac

08006694 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006698:	4803      	ldr	r0, [pc, #12]	@ (80066a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800669a:	f7fd f87a 	bl	8003792 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800669e:	4803      	ldr	r0, [pc, #12]	@ (80066ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80066a0:	f7fd f877 	bl	8003792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80066a4:	bf00      	nop
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200002d4 	.word	0x200002d4
 80066ac:	200003f4 	.word	0x200003f4

080066b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  spektrum_nucleo_irq_handler(&main_app->rc_receiver, SPEKTRUM_UART);
 80066b4:	4b04      	ldr	r3, [pc, #16]	@ (80066c8 <USART2_IRQHandler+0x18>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3310      	adds	r3, #16
 80066ba:	4904      	ldr	r1, [pc, #16]	@ (80066cc <USART2_IRQHandler+0x1c>)
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fc63 	bl	8005f88 <spektrum_nucleo_irq_handler>
  return;
 80066c2:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000648 	.word	0x20000648
 80066cc:	2000043c 	.word	0x2000043c

080066d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80066d4:	4802      	ldr	r0, [pc, #8]	@ (80066e0 <TIM6_DAC_IRQHandler+0x10>)
 80066d6:	f7fd f85c 	bl	8003792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000031c 	.word	0x2000031c

080066e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80066e8:	4802      	ldr	r0, [pc, #8]	@ (80066f4 <TIM7_IRQHandler+0x10>)
 80066ea:	f7fd f852 	bl	8003792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000364 	.word	0x20000364

080066f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  uart_serial_irq_handler(&huart6);
 80066fc:	4802      	ldr	r0, [pc, #8]	@ (8006708 <USART6_IRQHandler+0x10>)
 80066fe:	f000 f905 	bl	800690c <uart_serial_irq_handler>
  return;
 8006702:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200004c4 	.word	0x200004c4

0800670c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
	return 1;
 8006710:	2301      	movs	r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <_kill>:

int _kill(int pid, int sig) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006726:	f001 fab3 	bl	8007c90 <__errno>
 800672a:	4603      	mov	r3, r0
 800672c:	2216      	movs	r2, #22
 800672e:	601a      	str	r2, [r3, #0]
	return -1;
 8006730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <_exit>:

void _exit(int status) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006744:	f04f 31ff 	mov.w	r1, #4294967295
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ffe7 	bl	800671c <_kill>
	while (1) {}        /* Make sure we hang here */
 800674e:	bf00      	nop
 8006750:	e7fd      	b.n	800674e <_exit+0x12>

08006752 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e00a      	b.n	800677a <_read+0x28>
		*ptr++ = __io_getchar();
 8006764:	f3af 8000 	nop.w
 8006768:	4601      	mov	r1, r0
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	60ba      	str	r2, [r7, #8]
 8006770:	b2ca      	uxtb	r2, r1
 8006772:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3301      	adds	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	429a      	cmp	r2, r3
 8006780:	dbf0      	blt.n	8006764 <_read+0x12>
	}

	return len;
 8006782:	687b      	ldr	r3, [r7, #4]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_write>:

// see https://electronics.stackexchange.com/questions/206113/how-do-i-use-the-printf-function-on-stm32
// see https://github.com/ARMmbed/mbed-os/tree/master/platform/source/minimal-printf
int _write(int file, char *data, int len) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]

	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d00a      	beq.n	80067b4 <_write+0x28>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d007      	beq.n	80067b4 <_write+0x28>
		errno = EBADF;
 80067a4:	f001 fa74 	bl	8007c90 <__errno>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2209      	movs	r2, #9
 80067ac:	601a      	str	r2, [r3, #0]
		return -1;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	e00f      	b.n	80067d4 <_write+0x48>
	}

	HAL_StatusTypeDef status = HAL_UART_Transmit(
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4807      	ldr	r0, [pc, #28]	@ (80067dc <_write+0x50>)
 80067c0:	f7fd fd59 	bl	8004276 <HAL_UART_Transmit>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
		len,
		HAL_MAX_DELAY
	);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <_write+0x46>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	e000      	b.n	80067d4 <_write+0x48>
 80067d2:	2300      	movs	r3, #0

}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20000480 	.word	0x20000480

080067e0 <_close>:

int _close(int file) {
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	return -1;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <_fstat>:


int _fstat(int file, struct stat *st) {
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006808:	605a      	str	r2, [r3, #4]
	return 0;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <_isatty>:

int _isatty(int file) {
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	return 1;
 8006820:	2301      	movs	r3, #1
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
	return 0;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006850:	4a14      	ldr	r2, [pc, #80]	@ (80068a4 <_sbrk+0x5c>)
 8006852:	4b15      	ldr	r3, [pc, #84]	@ (80068a8 <_sbrk+0x60>)
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t *) stack_limit;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800685c:	4b13      	ldr	r3, [pc, #76]	@ (80068ac <_sbrk+0x64>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8006864:	4b11      	ldr	r3, [pc, #68]	@ (80068ac <_sbrk+0x64>)
 8006866:	4a12      	ldr	r2, [pc, #72]	@ (80068b0 <_sbrk+0x68>)
 8006868:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800686a:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <_sbrk+0x64>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d207      	bcs.n	8006888 <_sbrk+0x40>
		errno = ENOMEM;
 8006878:	f001 fa0a 	bl	8007c90 <__errno>
 800687c:	4603      	mov	r3, r0
 800687e:	220c      	movs	r2, #12
 8006880:	601a      	str	r2, [r3, #0]
		return (void *) -1;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	e009      	b.n	800689c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8006888:	4b08      	ldr	r3, [pc, #32]	@ (80068ac <_sbrk+0x64>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <_sbrk+0x64>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	4a05      	ldr	r2, [pc, #20]	@ (80068ac <_sbrk+0x64>)
 8006898:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800689a:	68fb      	ldr	r3, [r7, #12]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20030000 	.word	0x20030000
 80068a8:	00000400 	.word	0x00000400
 80068ac:	20000694 	.word	0x20000694
 80068b0:	20000800 	.word	0x20000800

080068b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068b8:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <SystemInit+0x20>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	4a05      	ldr	r2, [pc, #20]	@ (80068d4 <SystemInit+0x20>)
 80068c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <uart_serial_start>:
#include <uart_serial.h>

uint8_t drive_msg[25];
uint8_t current_pos = 0;

void uart_serial_start(UART_HandleTypeDef *huart) {
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0210 	orr.w	r2, r2, #16
 80068ee:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0220 	orr.w	r2, r2, #32
 80068fe:	60da      	str	r2, [r3, #12]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <uart_serial_irq_handler>:
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
}


// make sure you go to stm32f4xx_it.c and replace the default usart6 handler with this function
void uart_serial_irq_handler(UART_HandleTypeDef *huart) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	// If data overrun, clear the overrun flag and reset
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d113      	bne.n	800694a <uart_serial_irq_handler+0x3e>
		current_pos = 0;
 8006922:	4b2c      	ldr	r3, [pc, #176]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
		memset(drive_msg, '\0', sizeof(drive_msg));
 8006928:	2219      	movs	r2, #25
 800692a:	2100      	movs	r1, #0
 800692c:	482a      	ldr	r0, [pc, #168]	@ (80069d8 <uart_serial_irq_handler+0xcc>)
 800692e:	f001 f94d 	bl	8007bcc <memset>

		__HAL_UART_CLEAR_OREFLAG(huart);
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693b      	ldr	r3, [r7, #16]
		return;
 8006948:	e040      	b.n	80069cc <uart_serial_irq_handler+0xc0>
	}

	// receive the data and reset to start upon completion
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b20      	cmp	r3, #32
 8006956:	d117      	bne.n	8006988 <uart_serial_irq_handler+0x7c>
		uint8_t data = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	75fb      	strb	r3, [r7, #23]
		drive_msg[current_pos] = data;
 8006960:	4b1c      	ldr	r3, [pc, #112]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <uart_serial_irq_handler+0xcc>)
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	5453      	strb	r3, [r2, r1]
		current_pos ++;
 800696c:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	4b17      	ldr	r3, [pc, #92]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 8006976:	701a      	strb	r2, [r3, #0]

		if (current_pos == 25){
 8006978:	4b16      	ldr	r3, [pc, #88]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b19      	cmp	r3, #25
 800697e:	d122      	bne.n	80069c6 <uart_serial_irq_handler+0xba>
			current_pos = 0;
 8006980:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
		}

		return;
 8006986:	e01e      	b.n	80069c6 <uart_serial_irq_handler+0xba>
	}

	// If dataline idle, clear the idle flag
	// If we are somehow in the middle of receiving an array
	// clear the data and reset to start so we don't get bit shift in the next cycle
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d11a      	bne.n	80069cc <uart_serial_irq_handler+0xc0>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	68fb      	ldr	r3, [r7, #12]

		if(current_pos != 0){
 80069ac:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <uart_serial_irq_handler+0xbe>
			current_pos = 0;
 80069b4:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <uart_serial_irq_handler+0xc8>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
			memset(drive_msg, '\0', sizeof(drive_msg));
 80069ba:	2219      	movs	r2, #25
 80069bc:	2100      	movs	r1, #0
 80069be:	4806      	ldr	r0, [pc, #24]	@ (80069d8 <uart_serial_irq_handler+0xcc>)
 80069c0:	f001 f904 	bl	8007bcc <memset>
		}
		return;
 80069c4:	e001      	b.n	80069ca <uart_serial_irq_handler+0xbe>
		return;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <uart_serial_irq_handler+0xc0>
		return;
 80069ca:	bf00      	nop
	}
};
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200006b1 	.word	0x200006b1
 80069d8:	20000698 	.word	0x20000698

080069dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80069dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80069e0:	480d      	ldr	r0, [pc, #52]	@ (8006a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80069e2:	490e      	ldr	r1, [pc, #56]	@ (8006a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80069e4:	4a0e      	ldr	r2, [pc, #56]	@ (8006a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80069e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069e8:	e002      	b.n	80069f0 <LoopCopyDataInit>

080069ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069ee:	3304      	adds	r3, #4

080069f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069f4:	d3f9      	bcc.n	80069ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80069f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80069fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069fc:	e001      	b.n	8006a02 <LoopFillZerobss>

080069fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a00:	3204      	adds	r2, #4

08006a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a04:	d3fb      	bcc.n	80069fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006a06:	f7ff ff55 	bl	80068b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a0a:	f001 f947 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a0e:	f7fe fc85 	bl	800531c <main>
  bx  lr    
 8006a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a1c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006a20:	0800c04c 	.word	0x0800c04c
  ldr r2, =_sbss
 8006a24:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8006a28:	20000800 	.word	0x20000800

08006a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a2c:	e7fe      	b.n	8006a2c <ADC_IRQHandler>

08006a2e <__cvt>:
 8006a2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a32:	ec57 6b10 	vmov	r6, r7, d0
 8006a36:	2f00      	cmp	r7, #0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	bfbb      	ittet	lt
 8006a40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a44:	461f      	movlt	r7, r3
 8006a46:	2300      	movge	r3, #0
 8006a48:	232d      	movlt	r3, #45	@ 0x2d
 8006a4a:	700b      	strb	r3, [r1, #0]
 8006a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a52:	4691      	mov	r9, r2
 8006a54:	f023 0820 	bic.w	r8, r3, #32
 8006a58:	bfbc      	itt	lt
 8006a5a:	4632      	movlt	r2, r6
 8006a5c:	4616      	movlt	r6, r2
 8006a5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a62:	d005      	beq.n	8006a70 <__cvt+0x42>
 8006a64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a68:	d100      	bne.n	8006a6c <__cvt+0x3e>
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	e000      	b.n	8006a72 <__cvt+0x44>
 8006a70:	2103      	movs	r1, #3
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	ab02      	add	r3, sp, #8
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	ec47 6b10 	vmov	d0, r6, r7
 8006a7e:	4653      	mov	r3, sl
 8006a80:	4622      	mov	r2, r4
 8006a82:	f001 f9c9 	bl	8007e18 <_dtoa_r>
 8006a86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	d119      	bne.n	8006ac2 <__cvt+0x94>
 8006a8e:	f019 0f01 	tst.w	r9, #1
 8006a92:	d00e      	beq.n	8006ab2 <__cvt+0x84>
 8006a94:	eb00 0904 	add.w	r9, r0, r4
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7fa f822 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aa4:	b108      	cbz	r0, 8006aaa <__cvt+0x7c>
 8006aa6:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aaa:	2230      	movs	r2, #48	@ 0x30
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	454b      	cmp	r3, r9
 8006ab0:	d31e      	bcc.n	8006af0 <__cvt+0xc2>
 8006ab2:	9b03      	ldr	r3, [sp, #12]
 8006ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ab6:	1b5b      	subs	r3, r3, r5
 8006ab8:	4628      	mov	r0, r5
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ac6:	eb00 0904 	add.w	r9, r0, r4
 8006aca:	d1e5      	bne.n	8006a98 <__cvt+0x6a>
 8006acc:	7803      	ldrb	r3, [r0, #0]
 8006ace:	2b30      	cmp	r3, #48	@ 0x30
 8006ad0:	d10a      	bne.n	8006ae8 <__cvt+0xba>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7fa f805 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ade:	b918      	cbnz	r0, 8006ae8 <__cvt+0xba>
 8006ae0:	f1c4 0401 	rsb	r4, r4, #1
 8006ae4:	f8ca 4000 	str.w	r4, [sl]
 8006ae8:	f8da 3000 	ldr.w	r3, [sl]
 8006aec:	4499      	add	r9, r3
 8006aee:	e7d3      	b.n	8006a98 <__cvt+0x6a>
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e7d9      	b.n	8006aac <__cvt+0x7e>

08006af8 <__exponent>:
 8006af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afa:	2900      	cmp	r1, #0
 8006afc:	bfba      	itte	lt
 8006afe:	4249      	neglt	r1, r1
 8006b00:	232d      	movlt	r3, #45	@ 0x2d
 8006b02:	232b      	movge	r3, #43	@ 0x2b
 8006b04:	2909      	cmp	r1, #9
 8006b06:	7002      	strb	r2, [r0, #0]
 8006b08:	7043      	strb	r3, [r0, #1]
 8006b0a:	dd29      	ble.n	8006b60 <__exponent+0x68>
 8006b0c:	f10d 0307 	add.w	r3, sp, #7
 8006b10:	461d      	mov	r5, r3
 8006b12:	270a      	movs	r7, #10
 8006b14:	461a      	mov	r2, r3
 8006b16:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b1a:	fb07 1416 	mls	r4, r7, r6, r1
 8006b1e:	3430      	adds	r4, #48	@ 0x30
 8006b20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b24:	460c      	mov	r4, r1
 8006b26:	2c63      	cmp	r4, #99	@ 0x63
 8006b28:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	dcf1      	bgt.n	8006b14 <__exponent+0x1c>
 8006b30:	3130      	adds	r1, #48	@ 0x30
 8006b32:	1e94      	subs	r4, r2, #2
 8006b34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b38:	1c41      	adds	r1, r0, #1
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	42ab      	cmp	r3, r5
 8006b3e:	d30a      	bcc.n	8006b56 <__exponent+0x5e>
 8006b40:	f10d 0309 	add.w	r3, sp, #9
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	42ac      	cmp	r4, r5
 8006b48:	bf88      	it	hi
 8006b4a:	2300      	movhi	r3, #0
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	4403      	add	r3, r0
 8006b50:	1a18      	subs	r0, r3, r0
 8006b52:	b003      	add	sp, #12
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b5e:	e7ed      	b.n	8006b3c <__exponent+0x44>
 8006b60:	2330      	movs	r3, #48	@ 0x30
 8006b62:	3130      	adds	r1, #48	@ 0x30
 8006b64:	7083      	strb	r3, [r0, #2]
 8006b66:	70c1      	strb	r1, [r0, #3]
 8006b68:	1d03      	adds	r3, r0, #4
 8006b6a:	e7f1      	b.n	8006b50 <__exponent+0x58>

08006b6c <_printf_float>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	b08d      	sub	sp, #52	@ 0x34
 8006b72:	460c      	mov	r4, r1
 8006b74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b78:	4616      	mov	r6, r2
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	f001 f83d 	bl	8007bfc <_localeconv_r>
 8006b82:	6803      	ldr	r3, [r0, #0]
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fb82 	bl	8000290 <strlen>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b90:	f8d8 3000 	ldr.w	r3, [r8]
 8006b94:	9005      	str	r0, [sp, #20]
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	f103 0208 	add.w	r2, r3, #8
 8006ba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ba8:	f8c8 2000 	str.w	r2, [r8]
 8006bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bb4:	9307      	str	r3, [sp, #28]
 8006bb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e34 <_printf_float+0x2c8>)
 8006bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc8:	f7f9 ffc0 	bl	8000b4c <__aeabi_dcmpun>
 8006bcc:	bb70      	cbnz	r0, 8006c2c <_printf_float+0xc0>
 8006bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd2:	4b98      	ldr	r3, [pc, #608]	@ (8006e34 <_printf_float+0x2c8>)
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd8:	f7f9 ff9a 	bl	8000b10 <__aeabi_dcmple>
 8006bdc:	bb30      	cbnz	r0, 8006c2c <_printf_float+0xc0>
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 ff89 	bl	8000afc <__aeabi_dcmplt>
 8006bea:	b110      	cbz	r0, 8006bf2 <_printf_float+0x86>
 8006bec:	232d      	movs	r3, #45	@ 0x2d
 8006bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bf2:	4a91      	ldr	r2, [pc, #580]	@ (8006e38 <_printf_float+0x2cc>)
 8006bf4:	4b91      	ldr	r3, [pc, #580]	@ (8006e3c <_printf_float+0x2d0>)
 8006bf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006bfa:	bf8c      	ite	hi
 8006bfc:	4690      	movhi	r8, r2
 8006bfe:	4698      	movls	r8, r3
 8006c00:	2303      	movs	r3, #3
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	f02b 0304 	bic.w	r3, fp, #4
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	9700      	str	r7, [sp, #0]
 8006c10:	4633      	mov	r3, r6
 8006c12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f9d2 	bl	8006fc0 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f040 808d 	bne.w	8006d3c <_printf_float+0x1d0>
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	b00d      	add	sp, #52	@ 0x34
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff8a 	bl	8000b4c <__aeabi_dcmpun>
 8006c38:	b140      	cbz	r0, 8006c4c <_printf_float+0xe0>
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bfbc      	itt	lt
 8006c40:	232d      	movlt	r3, #45	@ 0x2d
 8006c42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c46:	4a7e      	ldr	r2, [pc, #504]	@ (8006e40 <_printf_float+0x2d4>)
 8006c48:	4b7e      	ldr	r3, [pc, #504]	@ (8006e44 <_printf_float+0x2d8>)
 8006c4a:	e7d4      	b.n	8006bf6 <_printf_float+0x8a>
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c52:	9206      	str	r2, [sp, #24]
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	d13b      	bne.n	8006cd0 <_printf_float+0x164>
 8006c58:	2306      	movs	r3, #6
 8006c5a:	6063      	str	r3, [r4, #4]
 8006c5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c60:	2300      	movs	r3, #0
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	9303      	str	r3, [sp, #12]
 8006c66:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c6c:	ab09      	add	r3, sp, #36	@ 0x24
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	6861      	ldr	r1, [r4, #4]
 8006c72:	ec49 8b10 	vmov	d0, r8, r9
 8006c76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f7ff fed7 	bl	8006a2e <__cvt>
 8006c80:	9b06      	ldr	r3, [sp, #24]
 8006c82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c84:	2b47      	cmp	r3, #71	@ 0x47
 8006c86:	4680      	mov	r8, r0
 8006c88:	d129      	bne.n	8006cde <_printf_float+0x172>
 8006c8a:	1cc8      	adds	r0, r1, #3
 8006c8c:	db02      	blt.n	8006c94 <_printf_float+0x128>
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	4299      	cmp	r1, r3
 8006c92:	dd41      	ble.n	8006d18 <_printf_float+0x1ac>
 8006c94:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c98:	fa5f fa8a 	uxtb.w	sl, sl
 8006c9c:	3901      	subs	r1, #1
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ca4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ca6:	f7ff ff27 	bl	8006af8 <__exponent>
 8006caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cac:	1813      	adds	r3, r2, r0
 8006cae:	2a01      	cmp	r2, #1
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	dc02      	bgt.n	8006cbc <_printf_float+0x150>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	07d2      	lsls	r2, r2, #31
 8006cba:	d501      	bpl.n	8006cc0 <_printf_float+0x154>
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0a2      	beq.n	8006c0e <_printf_float+0xa2>
 8006cc8:	232d      	movs	r3, #45	@ 0x2d
 8006cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cce:	e79e      	b.n	8006c0e <_printf_float+0xa2>
 8006cd0:	9a06      	ldr	r2, [sp, #24]
 8006cd2:	2a47      	cmp	r2, #71	@ 0x47
 8006cd4:	d1c2      	bne.n	8006c5c <_printf_float+0xf0>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1c0      	bne.n	8006c5c <_printf_float+0xf0>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e7bd      	b.n	8006c5a <_printf_float+0xee>
 8006cde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ce2:	d9db      	bls.n	8006c9c <_printf_float+0x130>
 8006ce4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ce8:	d118      	bne.n	8006d1c <_printf_float+0x1b0>
 8006cea:	2900      	cmp	r1, #0
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	dd0b      	ble.n	8006d08 <_printf_float+0x19c>
 8006cf0:	6121      	str	r1, [r4, #16]
 8006cf2:	b913      	cbnz	r3, 8006cfa <_printf_float+0x18e>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	07d0      	lsls	r0, r2, #31
 8006cf8:	d502      	bpl.n	8006d00 <_printf_float+0x194>
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	440b      	add	r3, r1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	e7db      	b.n	8006cc0 <_printf_float+0x154>
 8006d08:	b913      	cbnz	r3, 8006d10 <_printf_float+0x1a4>
 8006d0a:	6822      	ldr	r2, [r4, #0]
 8006d0c:	07d2      	lsls	r2, r2, #31
 8006d0e:	d501      	bpl.n	8006d14 <_printf_float+0x1a8>
 8006d10:	3302      	adds	r3, #2
 8006d12:	e7f4      	b.n	8006cfe <_printf_float+0x192>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7f2      	b.n	8006cfe <_printf_float+0x192>
 8006d18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	db05      	blt.n	8006d2e <_printf_float+0x1c2>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	6121      	str	r1, [r4, #16]
 8006d26:	07d8      	lsls	r0, r3, #31
 8006d28:	d5ea      	bpl.n	8006d00 <_printf_float+0x194>
 8006d2a:	1c4b      	adds	r3, r1, #1
 8006d2c:	e7e7      	b.n	8006cfe <_printf_float+0x192>
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	bfd4      	ite	le
 8006d32:	f1c1 0202 	rsble	r2, r1, #2
 8006d36:	2201      	movgt	r2, #1
 8006d38:	4413      	add	r3, r2
 8006d3a:	e7e0      	b.n	8006cfe <_printf_float+0x192>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	055a      	lsls	r2, r3, #21
 8006d40:	d407      	bmi.n	8006d52 <_printf_float+0x1e6>
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	4642      	mov	r2, r8
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d12b      	bne.n	8006da8 <_printf_float+0x23c>
 8006d50:	e767      	b.n	8006c22 <_printf_float+0xb6>
 8006d52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d56:	f240 80dd 	bls.w	8006f14 <_printf_float+0x3a8>
 8006d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	f7f9 fec1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d033      	beq.n	8006dd2 <_printf_float+0x266>
 8006d6a:	4a37      	ldr	r2, [pc, #220]	@ (8006e48 <_printf_float+0x2dc>)
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	f43f af54 	beq.w	8006c22 <_printf_float+0xb6>
 8006d7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d7e:	4543      	cmp	r3, r8
 8006d80:	db02      	blt.n	8006d88 <_printf_float+0x21c>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	07d8      	lsls	r0, r3, #31
 8006d86:	d50f      	bpl.n	8006da8 <_printf_float+0x23c>
 8006d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f af45 	beq.w	8006c22 <_printf_float+0xb6>
 8006d98:	f04f 0900 	mov.w	r9, #0
 8006d9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006da0:	f104 0a1a 	add.w	sl, r4, #26
 8006da4:	45c8      	cmp	r8, r9
 8006da6:	dc09      	bgt.n	8006dbc <_printf_float+0x250>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	079b      	lsls	r3, r3, #30
 8006dac:	f100 8103 	bmi.w	8006fb6 <_printf_float+0x44a>
 8006db0:	68e0      	ldr	r0, [r4, #12]
 8006db2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006db4:	4298      	cmp	r0, r3
 8006db6:	bfb8      	it	lt
 8006db8:	4618      	movlt	r0, r3
 8006dba:	e734      	b.n	8006c26 <_printf_float+0xba>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f43f af2b 	beq.w	8006c22 <_printf_float+0xb6>
 8006dcc:	f109 0901 	add.w	r9, r9, #1
 8006dd0:	e7e8      	b.n	8006da4 <_printf_float+0x238>
 8006dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dc39      	bgt.n	8006e4c <_printf_float+0x2e0>
 8006dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <_printf_float+0x2dc>)
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af1d 	beq.w	8006c22 <_printf_float+0xb6>
 8006de8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006dec:	ea59 0303 	orrs.w	r3, r9, r3
 8006df0:	d102      	bne.n	8006df8 <_printf_float+0x28c>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	d5d7      	bpl.n	8006da8 <_printf_float+0x23c>
 8006df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af0d 	beq.w	8006c22 <_printf_float+0xb6>
 8006e08:	f04f 0a00 	mov.w	sl, #0
 8006e0c:	f104 0b1a 	add.w	fp, r4, #26
 8006e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e12:	425b      	negs	r3, r3
 8006e14:	4553      	cmp	r3, sl
 8006e16:	dc01      	bgt.n	8006e1c <_printf_float+0x2b0>
 8006e18:	464b      	mov	r3, r9
 8006e1a:	e793      	b.n	8006d44 <_printf_float+0x1d8>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	465a      	mov	r2, fp
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f aefb 	beq.w	8006c22 <_printf_float+0xb6>
 8006e2c:	f10a 0a01 	add.w	sl, sl, #1
 8006e30:	e7ee      	b.n	8006e10 <_printf_float+0x2a4>
 8006e32:	bf00      	nop
 8006e34:	7fefffff 	.word	0x7fefffff
 8006e38:	0800bc00 	.word	0x0800bc00
 8006e3c:	0800bbfc 	.word	0x0800bbfc
 8006e40:	0800bc08 	.word	0x0800bc08
 8006e44:	0800bc04 	.word	0x0800bc04
 8006e48:	0800bd42 	.word	0x0800bd42
 8006e4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e52:	4553      	cmp	r3, sl
 8006e54:	bfa8      	it	ge
 8006e56:	4653      	movge	r3, sl
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	4699      	mov	r9, r3
 8006e5c:	dc36      	bgt.n	8006ecc <_printf_float+0x360>
 8006e5e:	f04f 0b00 	mov.w	fp, #0
 8006e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e66:	f104 021a 	add.w	r2, r4, #26
 8006e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e6c:	9306      	str	r3, [sp, #24]
 8006e6e:	eba3 0309 	sub.w	r3, r3, r9
 8006e72:	455b      	cmp	r3, fp
 8006e74:	dc31      	bgt.n	8006eda <_printf_float+0x36e>
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	459a      	cmp	sl, r3
 8006e7a:	dc3a      	bgt.n	8006ef2 <_printf_float+0x386>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	07da      	lsls	r2, r3, #31
 8006e80:	d437      	bmi.n	8006ef2 <_printf_float+0x386>
 8006e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e84:	ebaa 0903 	sub.w	r9, sl, r3
 8006e88:	9b06      	ldr	r3, [sp, #24]
 8006e8a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e8e:	4599      	cmp	r9, r3
 8006e90:	bfa8      	it	ge
 8006e92:	4699      	movge	r9, r3
 8006e94:	f1b9 0f00 	cmp.w	r9, #0
 8006e98:	dc33      	bgt.n	8006f02 <_printf_float+0x396>
 8006e9a:	f04f 0800 	mov.w	r8, #0
 8006e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea2:	f104 0b1a 	add.w	fp, r4, #26
 8006ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8006eac:	eba3 0309 	sub.w	r3, r3, r9
 8006eb0:	4543      	cmp	r3, r8
 8006eb2:	f77f af79 	ble.w	8006da8 <_printf_float+0x23c>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	465a      	mov	r2, fp
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f aeae 	beq.w	8006c22 <_printf_float+0xb6>
 8006ec6:	f108 0801 	add.w	r8, r8, #1
 8006eca:	e7ec      	b.n	8006ea6 <_printf_float+0x33a>
 8006ecc:	4642      	mov	r2, r8
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d1c2      	bne.n	8006e5e <_printf_float+0x2f2>
 8006ed8:	e6a3      	b.n	8006c22 <_printf_float+0xb6>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	9206      	str	r2, [sp, #24]
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f ae9c 	beq.w	8006c22 <_printf_float+0xb6>
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	f10b 0b01 	add.w	fp, fp, #1
 8006ef0:	e7bb      	b.n	8006e6a <_printf_float+0x2fe>
 8006ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	d1c0      	bne.n	8006e82 <_printf_float+0x316>
 8006f00:	e68f      	b.n	8006c22 <_printf_float+0xb6>
 8006f02:	9a06      	ldr	r2, [sp, #24]
 8006f04:	464b      	mov	r3, r9
 8006f06:	4442      	add	r2, r8
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d1c3      	bne.n	8006e9a <_printf_float+0x32e>
 8006f12:	e686      	b.n	8006c22 <_printf_float+0xb6>
 8006f14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f18:	f1ba 0f01 	cmp.w	sl, #1
 8006f1c:	dc01      	bgt.n	8006f22 <_printf_float+0x3b6>
 8006f1e:	07db      	lsls	r3, r3, #31
 8006f20:	d536      	bpl.n	8006f90 <_printf_float+0x424>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4642      	mov	r2, r8
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae78 	beq.w	8006c22 <_printf_float+0xb6>
 8006f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae70 	beq.w	8006c22 <_printf_float+0xb6>
 8006f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f4e:	f7f9 fdcb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f52:	b9c0      	cbnz	r0, 8006f86 <_printf_float+0x41a>
 8006f54:	4653      	mov	r3, sl
 8006f56:	f108 0201 	add.w	r2, r8, #1
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d10c      	bne.n	8006f7e <_printf_float+0x412>
 8006f64:	e65d      	b.n	8006c22 <_printf_float+0xb6>
 8006f66:	2301      	movs	r3, #1
 8006f68:	465a      	mov	r2, fp
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae56 	beq.w	8006c22 <_printf_float+0xb6>
 8006f76:	f108 0801 	add.w	r8, r8, #1
 8006f7a:	45d0      	cmp	r8, sl
 8006f7c:	dbf3      	blt.n	8006f66 <_printf_float+0x3fa>
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f84:	e6df      	b.n	8006d46 <_printf_float+0x1da>
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	f104 0b1a 	add.w	fp, r4, #26
 8006f8e:	e7f4      	b.n	8006f7a <_printf_float+0x40e>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4642      	mov	r2, r8
 8006f94:	e7e1      	b.n	8006f5a <_printf_float+0x3ee>
 8006f96:	2301      	movs	r3, #1
 8006f98:	464a      	mov	r2, r9
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae3e 	beq.w	8006c22 <_printf_float+0xb6>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	68e3      	ldr	r3, [r4, #12]
 8006fac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fae:	1a5b      	subs	r3, r3, r1
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	dcf0      	bgt.n	8006f96 <_printf_float+0x42a>
 8006fb4:	e6fc      	b.n	8006db0 <_printf_float+0x244>
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	f104 0919 	add.w	r9, r4, #25
 8006fbe:	e7f4      	b.n	8006faa <_printf_float+0x43e>

08006fc0 <_printf_common>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	4698      	mov	r8, r3
 8006fc8:	688a      	ldr	r2, [r1, #8]
 8006fca:	690b      	ldr	r3, [r1, #16]
 8006fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bfb8      	it	lt
 8006fd4:	4613      	movlt	r3, r2
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fdc:	4607      	mov	r7, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_printf_common+0x26>
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	0699      	lsls	r1, r3, #26
 8006fea:	bf42      	ittt	mi
 8006fec:	6833      	ldrmi	r3, [r6, #0]
 8006fee:	3302      	addmi	r3, #2
 8006ff0:	6033      	strmi	r3, [r6, #0]
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	f015 0506 	ands.w	r5, r5, #6
 8006ff8:	d106      	bne.n	8007008 <_printf_common+0x48>
 8006ffa:	f104 0a19 	add.w	sl, r4, #25
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	6832      	ldr	r2, [r6, #0]
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	42ab      	cmp	r3, r5
 8007006:	dc26      	bgt.n	8007056 <_printf_common+0x96>
 8007008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	3b00      	subs	r3, #0
 8007010:	bf18      	it	ne
 8007012:	2301      	movne	r3, #1
 8007014:	0692      	lsls	r2, r2, #26
 8007016:	d42b      	bmi.n	8007070 <_printf_common+0xb0>
 8007018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800701c:	4641      	mov	r1, r8
 800701e:	4638      	mov	r0, r7
 8007020:	47c8      	blx	r9
 8007022:	3001      	adds	r0, #1
 8007024:	d01e      	beq.n	8007064 <_printf_common+0xa4>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	6922      	ldr	r2, [r4, #16]
 800702a:	f003 0306 	and.w	r3, r3, #6
 800702e:	2b04      	cmp	r3, #4
 8007030:	bf02      	ittt	eq
 8007032:	68e5      	ldreq	r5, [r4, #12]
 8007034:	6833      	ldreq	r3, [r6, #0]
 8007036:	1aed      	subeq	r5, r5, r3
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	bf0c      	ite	eq
 800703c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007040:	2500      	movne	r5, #0
 8007042:	4293      	cmp	r3, r2
 8007044:	bfc4      	itt	gt
 8007046:	1a9b      	subgt	r3, r3, r2
 8007048:	18ed      	addgt	r5, r5, r3
 800704a:	2600      	movs	r6, #0
 800704c:	341a      	adds	r4, #26
 800704e:	42b5      	cmp	r5, r6
 8007050:	d11a      	bne.n	8007088 <_printf_common+0xc8>
 8007052:	2000      	movs	r0, #0
 8007054:	e008      	b.n	8007068 <_printf_common+0xa8>
 8007056:	2301      	movs	r3, #1
 8007058:	4652      	mov	r2, sl
 800705a:	4641      	mov	r1, r8
 800705c:	4638      	mov	r0, r7
 800705e:	47c8      	blx	r9
 8007060:	3001      	adds	r0, #1
 8007062:	d103      	bne.n	800706c <_printf_common+0xac>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706c:	3501      	adds	r5, #1
 800706e:	e7c6      	b.n	8006ffe <_printf_common+0x3e>
 8007070:	18e1      	adds	r1, r4, r3
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	2030      	movs	r0, #48	@ 0x30
 8007076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800707a:	4422      	add	r2, r4
 800707c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007084:	3302      	adds	r3, #2
 8007086:	e7c7      	b.n	8007018 <_printf_common+0x58>
 8007088:	2301      	movs	r3, #1
 800708a:	4622      	mov	r2, r4
 800708c:	4641      	mov	r1, r8
 800708e:	4638      	mov	r0, r7
 8007090:	47c8      	blx	r9
 8007092:	3001      	adds	r0, #1
 8007094:	d0e6      	beq.n	8007064 <_printf_common+0xa4>
 8007096:	3601      	adds	r6, #1
 8007098:	e7d9      	b.n	800704e <_printf_common+0x8e>
	...

0800709c <_printf_i>:
 800709c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	7e0f      	ldrb	r7, [r1, #24]
 80070a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070a4:	2f78      	cmp	r7, #120	@ 0x78
 80070a6:	4691      	mov	r9, r2
 80070a8:	4680      	mov	r8, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	469a      	mov	sl, r3
 80070ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070b2:	d807      	bhi.n	80070c4 <_printf_i+0x28>
 80070b4:	2f62      	cmp	r7, #98	@ 0x62
 80070b6:	d80a      	bhi.n	80070ce <_printf_i+0x32>
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	f000 80d1 	beq.w	8007260 <_printf_i+0x1c4>
 80070be:	2f58      	cmp	r7, #88	@ 0x58
 80070c0:	f000 80b8 	beq.w	8007234 <_printf_i+0x198>
 80070c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070cc:	e03a      	b.n	8007144 <_printf_i+0xa8>
 80070ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070d2:	2b15      	cmp	r3, #21
 80070d4:	d8f6      	bhi.n	80070c4 <_printf_i+0x28>
 80070d6:	a101      	add	r1, pc, #4	@ (adr r1, 80070dc <_printf_i+0x40>)
 80070d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007149 	.word	0x08007149
 80070e4:	080070c5 	.word	0x080070c5
 80070e8:	080070c5 	.word	0x080070c5
 80070ec:	080070c5 	.word	0x080070c5
 80070f0:	080070c5 	.word	0x080070c5
 80070f4:	08007149 	.word	0x08007149
 80070f8:	080070c5 	.word	0x080070c5
 80070fc:	080070c5 	.word	0x080070c5
 8007100:	080070c5 	.word	0x080070c5
 8007104:	080070c5 	.word	0x080070c5
 8007108:	08007247 	.word	0x08007247
 800710c:	08007173 	.word	0x08007173
 8007110:	08007201 	.word	0x08007201
 8007114:	080070c5 	.word	0x080070c5
 8007118:	080070c5 	.word	0x080070c5
 800711c:	08007269 	.word	0x08007269
 8007120:	080070c5 	.word	0x080070c5
 8007124:	08007173 	.word	0x08007173
 8007128:	080070c5 	.word	0x080070c5
 800712c:	080070c5 	.word	0x080070c5
 8007130:	08007209 	.word	0x08007209
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6032      	str	r2, [r6, #0]
 800713c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007144:	2301      	movs	r3, #1
 8007146:	e09c      	b.n	8007282 <_printf_i+0x1e6>
 8007148:	6833      	ldr	r3, [r6, #0]
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	6031      	str	r1, [r6, #0]
 8007150:	0606      	lsls	r6, r0, #24
 8007152:	d501      	bpl.n	8007158 <_printf_i+0xbc>
 8007154:	681d      	ldr	r5, [r3, #0]
 8007156:	e003      	b.n	8007160 <_printf_i+0xc4>
 8007158:	0645      	lsls	r5, r0, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0xb8>
 800715c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007160:	2d00      	cmp	r5, #0
 8007162:	da03      	bge.n	800716c <_printf_i+0xd0>
 8007164:	232d      	movs	r3, #45	@ 0x2d
 8007166:	426d      	negs	r5, r5
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800716c:	4858      	ldr	r0, [pc, #352]	@ (80072d0 <_printf_i+0x234>)
 800716e:	230a      	movs	r3, #10
 8007170:	e011      	b.n	8007196 <_printf_i+0xfa>
 8007172:	6821      	ldr	r1, [r4, #0]
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	0608      	lsls	r0, r1, #24
 8007178:	f853 5b04 	ldr.w	r5, [r3], #4
 800717c:	d402      	bmi.n	8007184 <_printf_i+0xe8>
 800717e:	0649      	lsls	r1, r1, #25
 8007180:	bf48      	it	mi
 8007182:	b2ad      	uxthmi	r5, r5
 8007184:	2f6f      	cmp	r7, #111	@ 0x6f
 8007186:	4852      	ldr	r0, [pc, #328]	@ (80072d0 <_printf_i+0x234>)
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	bf14      	ite	ne
 800718c:	230a      	movne	r3, #10
 800718e:	2308      	moveq	r3, #8
 8007190:	2100      	movs	r1, #0
 8007192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007196:	6866      	ldr	r6, [r4, #4]
 8007198:	60a6      	str	r6, [r4, #8]
 800719a:	2e00      	cmp	r6, #0
 800719c:	db05      	blt.n	80071aa <_printf_i+0x10e>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	432e      	orrs	r6, r5
 80071a2:	f021 0104 	bic.w	r1, r1, #4
 80071a6:	6021      	str	r1, [r4, #0]
 80071a8:	d04b      	beq.n	8007242 <_printf_i+0x1a6>
 80071aa:	4616      	mov	r6, r2
 80071ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80071b0:	fb03 5711 	mls	r7, r3, r1, r5
 80071b4:	5dc7      	ldrb	r7, [r0, r7]
 80071b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ba:	462f      	mov	r7, r5
 80071bc:	42bb      	cmp	r3, r7
 80071be:	460d      	mov	r5, r1
 80071c0:	d9f4      	bls.n	80071ac <_printf_i+0x110>
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d10b      	bne.n	80071de <_printf_i+0x142>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	07df      	lsls	r7, r3, #31
 80071ca:	d508      	bpl.n	80071de <_printf_i+0x142>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	6861      	ldr	r1, [r4, #4]
 80071d0:	4299      	cmp	r1, r3
 80071d2:	bfde      	ittt	le
 80071d4:	2330      	movle	r3, #48	@ 0x30
 80071d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071de:	1b92      	subs	r2, r2, r6
 80071e0:	6122      	str	r2, [r4, #16]
 80071e2:	f8cd a000 	str.w	sl, [sp]
 80071e6:	464b      	mov	r3, r9
 80071e8:	aa03      	add	r2, sp, #12
 80071ea:	4621      	mov	r1, r4
 80071ec:	4640      	mov	r0, r8
 80071ee:	f7ff fee7 	bl	8006fc0 <_printf_common>
 80071f2:	3001      	adds	r0, #1
 80071f4:	d14a      	bne.n	800728c <_printf_i+0x1f0>
 80071f6:	f04f 30ff 	mov.w	r0, #4294967295
 80071fa:	b004      	add	sp, #16
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	f043 0320 	orr.w	r3, r3, #32
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	4832      	ldr	r0, [pc, #200]	@ (80072d4 <_printf_i+0x238>)
 800720a:	2778      	movs	r7, #120	@ 0x78
 800720c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	6831      	ldr	r1, [r6, #0]
 8007214:	061f      	lsls	r7, r3, #24
 8007216:	f851 5b04 	ldr.w	r5, [r1], #4
 800721a:	d402      	bmi.n	8007222 <_printf_i+0x186>
 800721c:	065f      	lsls	r7, r3, #25
 800721e:	bf48      	it	mi
 8007220:	b2ad      	uxthmi	r5, r5
 8007222:	6031      	str	r1, [r6, #0]
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	bf44      	itt	mi
 8007228:	f043 0320 	orrmi.w	r3, r3, #32
 800722c:	6023      	strmi	r3, [r4, #0]
 800722e:	b11d      	cbz	r5, 8007238 <_printf_i+0x19c>
 8007230:	2310      	movs	r3, #16
 8007232:	e7ad      	b.n	8007190 <_printf_i+0xf4>
 8007234:	4826      	ldr	r0, [pc, #152]	@ (80072d0 <_printf_i+0x234>)
 8007236:	e7e9      	b.n	800720c <_printf_i+0x170>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	f023 0320 	bic.w	r3, r3, #32
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	e7f6      	b.n	8007230 <_printf_i+0x194>
 8007242:	4616      	mov	r6, r2
 8007244:	e7bd      	b.n	80071c2 <_printf_i+0x126>
 8007246:	6833      	ldr	r3, [r6, #0]
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	6961      	ldr	r1, [r4, #20]
 800724c:	1d18      	adds	r0, r3, #4
 800724e:	6030      	str	r0, [r6, #0]
 8007250:	062e      	lsls	r6, r5, #24
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	d501      	bpl.n	800725a <_printf_i+0x1be>
 8007256:	6019      	str	r1, [r3, #0]
 8007258:	e002      	b.n	8007260 <_printf_i+0x1c4>
 800725a:	0668      	lsls	r0, r5, #25
 800725c:	d5fb      	bpl.n	8007256 <_printf_i+0x1ba>
 800725e:	8019      	strh	r1, [r3, #0]
 8007260:	2300      	movs	r3, #0
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	4616      	mov	r6, r2
 8007266:	e7bc      	b.n	80071e2 <_printf_i+0x146>
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	6032      	str	r2, [r6, #0]
 800726e:	681e      	ldr	r6, [r3, #0]
 8007270:	6862      	ldr	r2, [r4, #4]
 8007272:	2100      	movs	r1, #0
 8007274:	4630      	mov	r0, r6
 8007276:	f7f8 ffbb 	bl	80001f0 <memchr>
 800727a:	b108      	cbz	r0, 8007280 <_printf_i+0x1e4>
 800727c:	1b80      	subs	r0, r0, r6
 800727e:	6060      	str	r0, [r4, #4]
 8007280:	6863      	ldr	r3, [r4, #4]
 8007282:	6123      	str	r3, [r4, #16]
 8007284:	2300      	movs	r3, #0
 8007286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800728a:	e7aa      	b.n	80071e2 <_printf_i+0x146>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	4632      	mov	r2, r6
 8007290:	4649      	mov	r1, r9
 8007292:	4640      	mov	r0, r8
 8007294:	47d0      	blx	sl
 8007296:	3001      	adds	r0, #1
 8007298:	d0ad      	beq.n	80071f6 <_printf_i+0x15a>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	079b      	lsls	r3, r3, #30
 800729e:	d413      	bmi.n	80072c8 <_printf_i+0x22c>
 80072a0:	68e0      	ldr	r0, [r4, #12]
 80072a2:	9b03      	ldr	r3, [sp, #12]
 80072a4:	4298      	cmp	r0, r3
 80072a6:	bfb8      	it	lt
 80072a8:	4618      	movlt	r0, r3
 80072aa:	e7a6      	b.n	80071fa <_printf_i+0x15e>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4632      	mov	r2, r6
 80072b0:	4649      	mov	r1, r9
 80072b2:	4640      	mov	r0, r8
 80072b4:	47d0      	blx	sl
 80072b6:	3001      	adds	r0, #1
 80072b8:	d09d      	beq.n	80071f6 <_printf_i+0x15a>
 80072ba:	3501      	adds	r5, #1
 80072bc:	68e3      	ldr	r3, [r4, #12]
 80072be:	9903      	ldr	r1, [sp, #12]
 80072c0:	1a5b      	subs	r3, r3, r1
 80072c2:	42ab      	cmp	r3, r5
 80072c4:	dcf2      	bgt.n	80072ac <_printf_i+0x210>
 80072c6:	e7eb      	b.n	80072a0 <_printf_i+0x204>
 80072c8:	2500      	movs	r5, #0
 80072ca:	f104 0619 	add.w	r6, r4, #25
 80072ce:	e7f5      	b.n	80072bc <_printf_i+0x220>
 80072d0:	0800bc0c 	.word	0x0800bc0c
 80072d4:	0800bc1d 	.word	0x0800bc1d

080072d8 <_scanf_float>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b087      	sub	sp, #28
 80072de:	4691      	mov	r9, r2
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	688b      	ldr	r3, [r1, #8]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80072ea:	bf81      	itttt	hi
 80072ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80072f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80072f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072f8:	608b      	strhi	r3, [r1, #8]
 80072fa:	680b      	ldr	r3, [r1, #0]
 80072fc:	460a      	mov	r2, r1
 80072fe:	f04f 0500 	mov.w	r5, #0
 8007302:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007306:	f842 3b1c 	str.w	r3, [r2], #28
 800730a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800730e:	4680      	mov	r8, r0
 8007310:	460c      	mov	r4, r1
 8007312:	bf98      	it	ls
 8007314:	f04f 0b00 	movls.w	fp, #0
 8007318:	9201      	str	r2, [sp, #4]
 800731a:	4616      	mov	r6, r2
 800731c:	46aa      	mov	sl, r5
 800731e:	462f      	mov	r7, r5
 8007320:	9502      	str	r5, [sp, #8]
 8007322:	68a2      	ldr	r2, [r4, #8]
 8007324:	b15a      	cbz	r2, 800733e <_scanf_float+0x66>
 8007326:	f8d9 3000 	ldr.w	r3, [r9]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b4e      	cmp	r3, #78	@ 0x4e
 800732e:	d863      	bhi.n	80073f8 <_scanf_float+0x120>
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d83b      	bhi.n	80073ac <_scanf_float+0xd4>
 8007334:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007338:	b2c8      	uxtb	r0, r1
 800733a:	280e      	cmp	r0, #14
 800733c:	d939      	bls.n	80073b2 <_scanf_float+0xda>
 800733e:	b11f      	cbz	r7, 8007348 <_scanf_float+0x70>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800734c:	f1ba 0f01 	cmp.w	sl, #1
 8007350:	f200 8114 	bhi.w	800757c <_scanf_float+0x2a4>
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	429e      	cmp	r6, r3
 8007358:	f200 8105 	bhi.w	8007566 <_scanf_float+0x28e>
 800735c:	2001      	movs	r0, #1
 800735e:	b007      	add	sp, #28
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007368:	2a0d      	cmp	r2, #13
 800736a:	d8e8      	bhi.n	800733e <_scanf_float+0x66>
 800736c:	a101      	add	r1, pc, #4	@ (adr r1, 8007374 <_scanf_float+0x9c>)
 800736e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007372:	bf00      	nop
 8007374:	080074bd 	.word	0x080074bd
 8007378:	0800733f 	.word	0x0800733f
 800737c:	0800733f 	.word	0x0800733f
 8007380:	0800733f 	.word	0x0800733f
 8007384:	08007519 	.word	0x08007519
 8007388:	080074f3 	.word	0x080074f3
 800738c:	0800733f 	.word	0x0800733f
 8007390:	0800733f 	.word	0x0800733f
 8007394:	080074cb 	.word	0x080074cb
 8007398:	0800733f 	.word	0x0800733f
 800739c:	0800733f 	.word	0x0800733f
 80073a0:	0800733f 	.word	0x0800733f
 80073a4:	0800733f 	.word	0x0800733f
 80073a8:	08007487 	.word	0x08007487
 80073ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073b0:	e7da      	b.n	8007368 <_scanf_float+0x90>
 80073b2:	290e      	cmp	r1, #14
 80073b4:	d8c3      	bhi.n	800733e <_scanf_float+0x66>
 80073b6:	a001      	add	r0, pc, #4	@ (adr r0, 80073bc <_scanf_float+0xe4>)
 80073b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073bc:	08007477 	.word	0x08007477
 80073c0:	0800733f 	.word	0x0800733f
 80073c4:	08007477 	.word	0x08007477
 80073c8:	08007507 	.word	0x08007507
 80073cc:	0800733f 	.word	0x0800733f
 80073d0:	08007419 	.word	0x08007419
 80073d4:	0800745d 	.word	0x0800745d
 80073d8:	0800745d 	.word	0x0800745d
 80073dc:	0800745d 	.word	0x0800745d
 80073e0:	0800745d 	.word	0x0800745d
 80073e4:	0800745d 	.word	0x0800745d
 80073e8:	0800745d 	.word	0x0800745d
 80073ec:	0800745d 	.word	0x0800745d
 80073f0:	0800745d 	.word	0x0800745d
 80073f4:	0800745d 	.word	0x0800745d
 80073f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80073fa:	d809      	bhi.n	8007410 <_scanf_float+0x138>
 80073fc:	2b60      	cmp	r3, #96	@ 0x60
 80073fe:	d8b1      	bhi.n	8007364 <_scanf_float+0x8c>
 8007400:	2b54      	cmp	r3, #84	@ 0x54
 8007402:	d07b      	beq.n	80074fc <_scanf_float+0x224>
 8007404:	2b59      	cmp	r3, #89	@ 0x59
 8007406:	d19a      	bne.n	800733e <_scanf_float+0x66>
 8007408:	2d07      	cmp	r5, #7
 800740a:	d198      	bne.n	800733e <_scanf_float+0x66>
 800740c:	2508      	movs	r5, #8
 800740e:	e02f      	b.n	8007470 <_scanf_float+0x198>
 8007410:	2b74      	cmp	r3, #116	@ 0x74
 8007412:	d073      	beq.n	80074fc <_scanf_float+0x224>
 8007414:	2b79      	cmp	r3, #121	@ 0x79
 8007416:	e7f6      	b.n	8007406 <_scanf_float+0x12e>
 8007418:	6821      	ldr	r1, [r4, #0]
 800741a:	05c8      	lsls	r0, r1, #23
 800741c:	d51e      	bpl.n	800745c <_scanf_float+0x184>
 800741e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007422:	6021      	str	r1, [r4, #0]
 8007424:	3701      	adds	r7, #1
 8007426:	f1bb 0f00 	cmp.w	fp, #0
 800742a:	d003      	beq.n	8007434 <_scanf_float+0x15c>
 800742c:	3201      	adds	r2, #1
 800742e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007432:	60a2      	str	r2, [r4, #8]
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007444:	3b01      	subs	r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	f8c9 3004 	str.w	r3, [r9, #4]
 800744c:	f340 8082 	ble.w	8007554 <_scanf_float+0x27c>
 8007450:	f8d9 3000 	ldr.w	r3, [r9]
 8007454:	3301      	adds	r3, #1
 8007456:	f8c9 3000 	str.w	r3, [r9]
 800745a:	e762      	b.n	8007322 <_scanf_float+0x4a>
 800745c:	eb1a 0105 	adds.w	r1, sl, r5
 8007460:	f47f af6d 	bne.w	800733e <_scanf_float+0x66>
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800746a:	6022      	str	r2, [r4, #0]
 800746c:	460d      	mov	r5, r1
 800746e:	468a      	mov	sl, r1
 8007470:	f806 3b01 	strb.w	r3, [r6], #1
 8007474:	e7de      	b.n	8007434 <_scanf_float+0x15c>
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	0610      	lsls	r0, r2, #24
 800747a:	f57f af60 	bpl.w	800733e <_scanf_float+0x66>
 800747e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007482:	6022      	str	r2, [r4, #0]
 8007484:	e7f4      	b.n	8007470 <_scanf_float+0x198>
 8007486:	f1ba 0f00 	cmp.w	sl, #0
 800748a:	d10c      	bne.n	80074a6 <_scanf_float+0x1ce>
 800748c:	b977      	cbnz	r7, 80074ac <_scanf_float+0x1d4>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007494:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007498:	d108      	bne.n	80074ac <_scanf_float+0x1d4>
 800749a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	f04f 0a01 	mov.w	sl, #1
 80074a4:	e7e4      	b.n	8007470 <_scanf_float+0x198>
 80074a6:	f1ba 0f02 	cmp.w	sl, #2
 80074aa:	d050      	beq.n	800754e <_scanf_float+0x276>
 80074ac:	2d01      	cmp	r5, #1
 80074ae:	d002      	beq.n	80074b6 <_scanf_float+0x1de>
 80074b0:	2d04      	cmp	r5, #4
 80074b2:	f47f af44 	bne.w	800733e <_scanf_float+0x66>
 80074b6:	3501      	adds	r5, #1
 80074b8:	b2ed      	uxtb	r5, r5
 80074ba:	e7d9      	b.n	8007470 <_scanf_float+0x198>
 80074bc:	f1ba 0f01 	cmp.w	sl, #1
 80074c0:	f47f af3d 	bne.w	800733e <_scanf_float+0x66>
 80074c4:	f04f 0a02 	mov.w	sl, #2
 80074c8:	e7d2      	b.n	8007470 <_scanf_float+0x198>
 80074ca:	b975      	cbnz	r5, 80074ea <_scanf_float+0x212>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	f47f af37 	bne.w	8007340 <_scanf_float+0x68>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074dc:	f040 8103 	bne.w	80076e6 <_scanf_float+0x40e>
 80074e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	2501      	movs	r5, #1
 80074e8:	e7c2      	b.n	8007470 <_scanf_float+0x198>
 80074ea:	2d03      	cmp	r5, #3
 80074ec:	d0e3      	beq.n	80074b6 <_scanf_float+0x1de>
 80074ee:	2d05      	cmp	r5, #5
 80074f0:	e7df      	b.n	80074b2 <_scanf_float+0x1da>
 80074f2:	2d02      	cmp	r5, #2
 80074f4:	f47f af23 	bne.w	800733e <_scanf_float+0x66>
 80074f8:	2503      	movs	r5, #3
 80074fa:	e7b9      	b.n	8007470 <_scanf_float+0x198>
 80074fc:	2d06      	cmp	r5, #6
 80074fe:	f47f af1e 	bne.w	800733e <_scanf_float+0x66>
 8007502:	2507      	movs	r5, #7
 8007504:	e7b4      	b.n	8007470 <_scanf_float+0x198>
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	0591      	lsls	r1, r2, #22
 800750a:	f57f af18 	bpl.w	800733e <_scanf_float+0x66>
 800750e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007512:	6022      	str	r2, [r4, #0]
 8007514:	9702      	str	r7, [sp, #8]
 8007516:	e7ab      	b.n	8007470 <_scanf_float+0x198>
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800751e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007522:	d005      	beq.n	8007530 <_scanf_float+0x258>
 8007524:	0550      	lsls	r0, r2, #21
 8007526:	f57f af0a 	bpl.w	800733e <_scanf_float+0x66>
 800752a:	2f00      	cmp	r7, #0
 800752c:	f000 80db 	beq.w	80076e6 <_scanf_float+0x40e>
 8007530:	0591      	lsls	r1, r2, #22
 8007532:	bf58      	it	pl
 8007534:	9902      	ldrpl	r1, [sp, #8]
 8007536:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800753a:	bf58      	it	pl
 800753c:	1a79      	subpl	r1, r7, r1
 800753e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007542:	bf58      	it	pl
 8007544:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	2700      	movs	r7, #0
 800754c:	e790      	b.n	8007470 <_scanf_float+0x198>
 800754e:	f04f 0a03 	mov.w	sl, #3
 8007552:	e78d      	b.n	8007470 <_scanf_float+0x198>
 8007554:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007558:	4649      	mov	r1, r9
 800755a:	4640      	mov	r0, r8
 800755c:	4798      	blx	r3
 800755e:	2800      	cmp	r0, #0
 8007560:	f43f aedf 	beq.w	8007322 <_scanf_float+0x4a>
 8007564:	e6eb      	b.n	800733e <_scanf_float+0x66>
 8007566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800756a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800756e:	464a      	mov	r2, r9
 8007570:	4640      	mov	r0, r8
 8007572:	4798      	blx	r3
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	3b01      	subs	r3, #1
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	e6eb      	b.n	8007354 <_scanf_float+0x7c>
 800757c:	1e6b      	subs	r3, r5, #1
 800757e:	2b06      	cmp	r3, #6
 8007580:	d824      	bhi.n	80075cc <_scanf_float+0x2f4>
 8007582:	2d02      	cmp	r5, #2
 8007584:	d836      	bhi.n	80075f4 <_scanf_float+0x31c>
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	429e      	cmp	r6, r3
 800758a:	f67f aee7 	bls.w	800735c <_scanf_float+0x84>
 800758e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007596:	464a      	mov	r2, r9
 8007598:	4640      	mov	r0, r8
 800759a:	4798      	blx	r3
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	3b01      	subs	r3, #1
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	e7f0      	b.n	8007586 <_scanf_float+0x2ae>
 80075a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075ac:	464a      	mov	r2, r9
 80075ae:	4640      	mov	r0, r8
 80075b0:	4798      	blx	r3
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075bc:	fa5f fa8a 	uxtb.w	sl, sl
 80075c0:	f1ba 0f02 	cmp.w	sl, #2
 80075c4:	d1ee      	bne.n	80075a4 <_scanf_float+0x2cc>
 80075c6:	3d03      	subs	r5, #3
 80075c8:	b2ed      	uxtb	r5, r5
 80075ca:	1b76      	subs	r6, r6, r5
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	05da      	lsls	r2, r3, #23
 80075d0:	d530      	bpl.n	8007634 <_scanf_float+0x35c>
 80075d2:	055b      	lsls	r3, r3, #21
 80075d4:	d511      	bpl.n	80075fa <_scanf_float+0x322>
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	429e      	cmp	r6, r3
 80075da:	f67f aebf 	bls.w	800735c <_scanf_float+0x84>
 80075de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075e6:	464a      	mov	r2, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	4798      	blx	r3
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	e7f0      	b.n	80075d6 <_scanf_float+0x2fe>
 80075f4:	46aa      	mov	sl, r5
 80075f6:	46b3      	mov	fp, r6
 80075f8:	e7de      	b.n	80075b8 <_scanf_float+0x2e0>
 80075fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	2965      	cmp	r1, #101	@ 0x65
 8007602:	f103 33ff 	add.w	r3, r3, #4294967295
 8007606:	f106 35ff 	add.w	r5, r6, #4294967295
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	d00c      	beq.n	8007628 <_scanf_float+0x350>
 800760e:	2945      	cmp	r1, #69	@ 0x45
 8007610:	d00a      	beq.n	8007628 <_scanf_float+0x350>
 8007612:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007616:	464a      	mov	r2, r9
 8007618:	4640      	mov	r0, r8
 800761a:	4798      	blx	r3
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007622:	3b01      	subs	r3, #1
 8007624:	1eb5      	subs	r5, r6, #2
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800762c:	464a      	mov	r2, r9
 800762e:	4640      	mov	r0, r8
 8007630:	4798      	blx	r3
 8007632:	462e      	mov	r6, r5
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	f012 0210 	ands.w	r2, r2, #16
 800763a:	d001      	beq.n	8007640 <_scanf_float+0x368>
 800763c:	2000      	movs	r0, #0
 800763e:	e68e      	b.n	800735e <_scanf_float+0x86>
 8007640:	7032      	strb	r2, [r6, #0]
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764c:	d125      	bne.n	800769a <_scanf_float+0x3c2>
 800764e:	9b02      	ldr	r3, [sp, #8]
 8007650:	429f      	cmp	r7, r3
 8007652:	d00a      	beq.n	800766a <_scanf_float+0x392>
 8007654:	1bda      	subs	r2, r3, r7
 8007656:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800765a:	429e      	cmp	r6, r3
 800765c:	bf28      	it	cs
 800765e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007662:	4922      	ldr	r1, [pc, #136]	@ (80076ec <_scanf_float+0x414>)
 8007664:	4630      	mov	r0, r6
 8007666:	f000 f989 	bl	800797c <siprintf>
 800766a:	9901      	ldr	r1, [sp, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	4640      	mov	r0, r8
 8007670:	f002 fd4e 	bl	800a110 <_strtod_r>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f011 0f02 	tst.w	r1, #2
 800767e:	ec57 6b10 	vmov	r6, r7, d0
 8007682:	f103 0204 	add.w	r2, r3, #4
 8007686:	d015      	beq.n	80076b4 <_scanf_float+0x3dc>
 8007688:	9903      	ldr	r1, [sp, #12]
 800768a:	600a      	str	r2, [r1, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	e9c3 6700 	strd	r6, r7, [r3]
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60e3      	str	r3, [r4, #12]
 8007698:	e7d0      	b.n	800763c <_scanf_float+0x364>
 800769a:	9b04      	ldr	r3, [sp, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0e4      	beq.n	800766a <_scanf_float+0x392>
 80076a0:	9905      	ldr	r1, [sp, #20]
 80076a2:	230a      	movs	r3, #10
 80076a4:	3101      	adds	r1, #1
 80076a6:	4640      	mov	r0, r8
 80076a8:	f002 fdb2 	bl	800a210 <_strtol_r>
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	9e05      	ldr	r6, [sp, #20]
 80076b0:	1ac2      	subs	r2, r0, r3
 80076b2:	e7d0      	b.n	8007656 <_scanf_float+0x37e>
 80076b4:	f011 0f04 	tst.w	r1, #4
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	600a      	str	r2, [r1, #0]
 80076bc:	d1e6      	bne.n	800768c <_scanf_float+0x3b4>
 80076be:	681d      	ldr	r5, [r3, #0]
 80076c0:	4632      	mov	r2, r6
 80076c2:	463b      	mov	r3, r7
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 fa40 	bl	8000b4c <__aeabi_dcmpun>
 80076cc:	b128      	cbz	r0, 80076da <_scanf_float+0x402>
 80076ce:	4808      	ldr	r0, [pc, #32]	@ (80076f0 <_scanf_float+0x418>)
 80076d0:	f000 fb14 	bl	8007cfc <nanf>
 80076d4:	ed85 0a00 	vstr	s0, [r5]
 80076d8:	e7db      	b.n	8007692 <_scanf_float+0x3ba>
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 fa93 	bl	8000c08 <__aeabi_d2f>
 80076e2:	6028      	str	r0, [r5, #0]
 80076e4:	e7d5      	b.n	8007692 <_scanf_float+0x3ba>
 80076e6:	2700      	movs	r7, #0
 80076e8:	e62e      	b.n	8007348 <_scanf_float+0x70>
 80076ea:	bf00      	nop
 80076ec:	0800bc2e 	.word	0x0800bc2e
 80076f0:	0800bd8a 	.word	0x0800bd8a

080076f4 <std>:
 80076f4:	2300      	movs	r3, #0
 80076f6:	b510      	push	{r4, lr}
 80076f8:	4604      	mov	r4, r0
 80076fa:	e9c0 3300 	strd	r3, r3, [r0]
 80076fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007702:	6083      	str	r3, [r0, #8]
 8007704:	8181      	strh	r1, [r0, #12]
 8007706:	6643      	str	r3, [r0, #100]	@ 0x64
 8007708:	81c2      	strh	r2, [r0, #14]
 800770a:	6183      	str	r3, [r0, #24]
 800770c:	4619      	mov	r1, r3
 800770e:	2208      	movs	r2, #8
 8007710:	305c      	adds	r0, #92	@ 0x5c
 8007712:	f000 fa5b 	bl	8007bcc <memset>
 8007716:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <std+0x58>)
 8007718:	6263      	str	r3, [r4, #36]	@ 0x24
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <std+0x5c>)
 800771c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800771e:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <std+0x60>)
 8007720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x64>)
 8007724:	6323      	str	r3, [r4, #48]	@ 0x30
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x68>)
 8007728:	6224      	str	r4, [r4, #32]
 800772a:	429c      	cmp	r4, r3
 800772c:	d006      	beq.n	800773c <std+0x48>
 800772e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007732:	4294      	cmp	r4, r2
 8007734:	d002      	beq.n	800773c <std+0x48>
 8007736:	33d0      	adds	r3, #208	@ 0xd0
 8007738:	429c      	cmp	r4, r3
 800773a:	d105      	bne.n	8007748 <std+0x54>
 800773c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f000 bace 	b.w	8007ce4 <__retarget_lock_init_recursive>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	08007a19 	.word	0x08007a19
 8007750:	08007a3f 	.word	0x08007a3f
 8007754:	08007a77 	.word	0x08007a77
 8007758:	08007a9b 	.word	0x08007a9b
 800775c:	200006b4 	.word	0x200006b4

08007760 <stdio_exit_handler>:
 8007760:	4a02      	ldr	r2, [pc, #8]	@ (800776c <stdio_exit_handler+0xc>)
 8007762:	4903      	ldr	r1, [pc, #12]	@ (8007770 <stdio_exit_handler+0x10>)
 8007764:	4803      	ldr	r0, [pc, #12]	@ (8007774 <stdio_exit_handler+0x14>)
 8007766:	f000 b87b 	b.w	8007860 <_fwalk_sglue>
 800776a:	bf00      	nop
 800776c:	20000028 	.word	0x20000028
 8007770:	0800ae8d 	.word	0x0800ae8d
 8007774:	20000038 	.word	0x20000038

08007778 <cleanup_stdio>:
 8007778:	6841      	ldr	r1, [r0, #4]
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <cleanup_stdio+0x34>)
 800777c:	4299      	cmp	r1, r3
 800777e:	b510      	push	{r4, lr}
 8007780:	4604      	mov	r4, r0
 8007782:	d001      	beq.n	8007788 <cleanup_stdio+0x10>
 8007784:	f003 fb82 	bl	800ae8c <_fflush_r>
 8007788:	68a1      	ldr	r1, [r4, #8]
 800778a:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <cleanup_stdio+0x38>)
 800778c:	4299      	cmp	r1, r3
 800778e:	d002      	beq.n	8007796 <cleanup_stdio+0x1e>
 8007790:	4620      	mov	r0, r4
 8007792:	f003 fb7b 	bl	800ae8c <_fflush_r>
 8007796:	68e1      	ldr	r1, [r4, #12]
 8007798:	4b06      	ldr	r3, [pc, #24]	@ (80077b4 <cleanup_stdio+0x3c>)
 800779a:	4299      	cmp	r1, r3
 800779c:	d004      	beq.n	80077a8 <cleanup_stdio+0x30>
 800779e:	4620      	mov	r0, r4
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f003 bb72 	b.w	800ae8c <_fflush_r>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	200006b4 	.word	0x200006b4
 80077b0:	2000071c 	.word	0x2000071c
 80077b4:	20000784 	.word	0x20000784

080077b8 <global_stdio_init.part.0>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <global_stdio_init.part.0+0x30>)
 80077bc:	4c0b      	ldr	r4, [pc, #44]	@ (80077ec <global_stdio_init.part.0+0x34>)
 80077be:	4a0c      	ldr	r2, [pc, #48]	@ (80077f0 <global_stdio_init.part.0+0x38>)
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	4620      	mov	r0, r4
 80077c4:	2200      	movs	r2, #0
 80077c6:	2104      	movs	r1, #4
 80077c8:	f7ff ff94 	bl	80076f4 <std>
 80077cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077d0:	2201      	movs	r2, #1
 80077d2:	2109      	movs	r1, #9
 80077d4:	f7ff ff8e 	bl	80076f4 <std>
 80077d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077dc:	2202      	movs	r2, #2
 80077de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e2:	2112      	movs	r1, #18
 80077e4:	f7ff bf86 	b.w	80076f4 <std>
 80077e8:	200007ec 	.word	0x200007ec
 80077ec:	200006b4 	.word	0x200006b4
 80077f0:	08007761 	.word	0x08007761

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	@ (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f000 ba76 	b.w	8007ce6 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	200007f5 	.word	0x200007f5

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	@ (8007808 <__sfp_lock_release+0x8>)
 8007802:	f000 ba71 	b.w	8007ce8 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	200007f5 	.word	0x200007f5

0800780c <__sinit>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	f7ff fff0 	bl	80077f4 <__sfp_lock_acquire>
 8007814:	6a23      	ldr	r3, [r4, #32]
 8007816:	b11b      	cbz	r3, 8007820 <__sinit+0x14>
 8007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781c:	f7ff bff0 	b.w	8007800 <__sfp_lock_release>
 8007820:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <__sinit+0x28>)
 8007822:	6223      	str	r3, [r4, #32]
 8007824:	4b04      	ldr	r3, [pc, #16]	@ (8007838 <__sinit+0x2c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f5      	bne.n	8007818 <__sinit+0xc>
 800782c:	f7ff ffc4 	bl	80077b8 <global_stdio_init.part.0>
 8007830:	e7f2      	b.n	8007818 <__sinit+0xc>
 8007832:	bf00      	nop
 8007834:	08007779 	.word	0x08007779
 8007838:	200007ec 	.word	0x200007ec

0800783c <fiprintf>:
 800783c:	b40e      	push	{r1, r2, r3}
 800783e:	b503      	push	{r0, r1, lr}
 8007840:	4601      	mov	r1, r0
 8007842:	ab03      	add	r3, sp, #12
 8007844:	4805      	ldr	r0, [pc, #20]	@ (800785c <fiprintf+0x20>)
 8007846:	f853 2b04 	ldr.w	r2, [r3], #4
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	f003 f833 	bl	800a8b8 <_vfiprintf_r>
 8007852:	b002      	add	sp, #8
 8007854:	f85d eb04 	ldr.w	lr, [sp], #4
 8007858:	b003      	add	sp, #12
 800785a:	4770      	bx	lr
 800785c:	20000034 	.word	0x20000034

08007860 <_fwalk_sglue>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	4607      	mov	r7, r0
 8007866:	4688      	mov	r8, r1
 8007868:	4614      	mov	r4, r2
 800786a:	2600      	movs	r6, #0
 800786c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007870:	f1b9 0901 	subs.w	r9, r9, #1
 8007874:	d505      	bpl.n	8007882 <_fwalk_sglue+0x22>
 8007876:	6824      	ldr	r4, [r4, #0]
 8007878:	2c00      	cmp	r4, #0
 800787a:	d1f7      	bne.n	800786c <_fwalk_sglue+0xc>
 800787c:	4630      	mov	r0, r6
 800787e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d907      	bls.n	8007898 <_fwalk_sglue+0x38>
 8007888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800788c:	3301      	adds	r3, #1
 800788e:	d003      	beq.n	8007898 <_fwalk_sglue+0x38>
 8007890:	4629      	mov	r1, r5
 8007892:	4638      	mov	r0, r7
 8007894:	47c0      	blx	r8
 8007896:	4306      	orrs	r6, r0
 8007898:	3568      	adds	r5, #104	@ 0x68
 800789a:	e7e9      	b.n	8007870 <_fwalk_sglue+0x10>

0800789c <iprintf>:
 800789c:	b40f      	push	{r0, r1, r2, r3}
 800789e:	b507      	push	{r0, r1, r2, lr}
 80078a0:	4906      	ldr	r1, [pc, #24]	@ (80078bc <iprintf+0x20>)
 80078a2:	ab04      	add	r3, sp, #16
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078aa:	6881      	ldr	r1, [r0, #8]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f003 f803 	bl	800a8b8 <_vfiprintf_r>
 80078b2:	b003      	add	sp, #12
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	b004      	add	sp, #16
 80078ba:	4770      	bx	lr
 80078bc:	20000034 	.word	0x20000034

080078c0 <_puts_r>:
 80078c0:	6a03      	ldr	r3, [r0, #32]
 80078c2:	b570      	push	{r4, r5, r6, lr}
 80078c4:	6884      	ldr	r4, [r0, #8]
 80078c6:	4605      	mov	r5, r0
 80078c8:	460e      	mov	r6, r1
 80078ca:	b90b      	cbnz	r3, 80078d0 <_puts_r+0x10>
 80078cc:	f7ff ff9e 	bl	800780c <__sinit>
 80078d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_puts_r+0x22>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_puts_r+0x22>
 80078dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078de:	f000 fa02 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	0719      	lsls	r1, r3, #28
 80078e6:	d502      	bpl.n	80078ee <_puts_r+0x2e>
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d135      	bne.n	800795a <_puts_r+0x9a>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f915 	bl	8007b20 <__swsetup_r>
 80078f6:	b380      	cbz	r0, 800795a <_puts_r+0x9a>
 80078f8:	f04f 35ff 	mov.w	r5, #4294967295
 80078fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078fe:	07da      	lsls	r2, r3, #31
 8007900:	d405      	bmi.n	800790e <_puts_r+0x4e>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	059b      	lsls	r3, r3, #22
 8007906:	d402      	bmi.n	800790e <_puts_r+0x4e>
 8007908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800790a:	f000 f9ed 	bl	8007ce8 <__retarget_lock_release_recursive>
 800790e:	4628      	mov	r0, r5
 8007910:	bd70      	pop	{r4, r5, r6, pc}
 8007912:	2b00      	cmp	r3, #0
 8007914:	da04      	bge.n	8007920 <_puts_r+0x60>
 8007916:	69a2      	ldr	r2, [r4, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	dc17      	bgt.n	800794c <_puts_r+0x8c>
 800791c:	290a      	cmp	r1, #10
 800791e:	d015      	beq.n	800794c <_puts_r+0x8c>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	7019      	strb	r1, [r3, #0]
 8007928:	68a3      	ldr	r3, [r4, #8]
 800792a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800792e:	3b01      	subs	r3, #1
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	2900      	cmp	r1, #0
 8007934:	d1ed      	bne.n	8007912 <_puts_r+0x52>
 8007936:	2b00      	cmp	r3, #0
 8007938:	da11      	bge.n	800795e <_puts_r+0x9e>
 800793a:	4622      	mov	r2, r4
 800793c:	210a      	movs	r1, #10
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f8af 	bl	8007aa2 <__swbuf_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d0d7      	beq.n	80078f8 <_puts_r+0x38>
 8007948:	250a      	movs	r5, #10
 800794a:	e7d7      	b.n	80078fc <_puts_r+0x3c>
 800794c:	4622      	mov	r2, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f000 f8a7 	bl	8007aa2 <__swbuf_r>
 8007954:	3001      	adds	r0, #1
 8007956:	d1e7      	bne.n	8007928 <_puts_r+0x68>
 8007958:	e7ce      	b.n	80078f8 <_puts_r+0x38>
 800795a:	3e01      	subs	r6, #1
 800795c:	e7e4      	b.n	8007928 <_puts_r+0x68>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	220a      	movs	r2, #10
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	e7ee      	b.n	8007948 <_puts_r+0x88>
	...

0800796c <puts>:
 800796c:	4b02      	ldr	r3, [pc, #8]	@ (8007978 <puts+0xc>)
 800796e:	4601      	mov	r1, r0
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	f7ff bfa5 	b.w	80078c0 <_puts_r>
 8007976:	bf00      	nop
 8007978:	20000034 	.word	0x20000034

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b510      	push	{r4, lr}
 8007980:	b09d      	sub	sp, #116	@ 0x74
 8007982:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800798c:	480a      	ldr	r0, [pc, #40]	@ (80079b8 <siprintf+0x3c>)
 800798e:	9107      	str	r1, [sp, #28]
 8007990:	9104      	str	r1, [sp, #16]
 8007992:	490a      	ldr	r1, [pc, #40]	@ (80079bc <siprintf+0x40>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	2400      	movs	r4, #0
 800799c:	a902      	add	r1, sp, #8
 800799e:	6800      	ldr	r0, [r0, #0]
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80079a4:	f002 fc92 	bl	800a2cc <_svfiprintf_r>
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	701c      	strb	r4, [r3, #0]
 80079ac:	b01d      	add	sp, #116	@ 0x74
 80079ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b2:	b003      	add	sp, #12
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000034 	.word	0x20000034
 80079bc:	ffff0208 	.word	0xffff0208

080079c0 <siscanf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b570      	push	{r4, r5, r6, lr}
 80079c4:	b09d      	sub	sp, #116	@ 0x74
 80079c6:	ac21      	add	r4, sp, #132	@ 0x84
 80079c8:	2500      	movs	r5, #0
 80079ca:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80079ce:	f854 6b04 	ldr.w	r6, [r4], #4
 80079d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80079d6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9006      	str	r0, [sp, #24]
 80079dc:	f7f8 fc58 	bl	8000290 <strlen>
 80079e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a10 <siscanf+0x50>)
 80079e2:	9003      	str	r0, [sp, #12]
 80079e4:	9007      	str	r0, [sp, #28]
 80079e6:	480b      	ldr	r0, [pc, #44]	@ (8007a14 <siscanf+0x54>)
 80079e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079f2:	4632      	mov	r2, r6
 80079f4:	4623      	mov	r3, r4
 80079f6:	a902      	add	r1, sp, #8
 80079f8:	6800      	ldr	r0, [r0, #0]
 80079fa:	950f      	str	r5, [sp, #60]	@ 0x3c
 80079fc:	9514      	str	r5, [sp, #80]	@ 0x50
 80079fe:	9401      	str	r4, [sp, #4]
 8007a00:	f002 fdba 	bl	800a578 <__ssvfiscanf_r>
 8007a04:	b01d      	add	sp, #116	@ 0x74
 8007a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a0a:	b003      	add	sp, #12
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	20000034 	.word	0x20000034

08007a18 <__sread>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	f000 f912 	bl	8007c48 <_read_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	bfab      	itete	ge
 8007a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a2c:	181b      	addge	r3, r3, r0
 8007a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a32:	bfac      	ite	ge
 8007a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a36:	81a3      	strhlt	r3, [r4, #12]
 8007a38:	bd10      	pop	{r4, pc}

08007a3a <__seofread>:
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	4770      	bx	lr

08007a3e <__swrite>:
 8007a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a42:	461f      	mov	r7, r3
 8007a44:	898b      	ldrh	r3, [r1, #12]
 8007a46:	05db      	lsls	r3, r3, #23
 8007a48:	4605      	mov	r5, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	d505      	bpl.n	8007a5c <__swrite+0x1e>
 8007a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a54:	2302      	movs	r3, #2
 8007a56:	2200      	movs	r2, #0
 8007a58:	f000 f8e4 	bl	8007c24 <_lseek_r>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	4632      	mov	r2, r6
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a72:	f000 b8fb 	b.w	8007c6c <_write_r>

08007a76 <__sseek>:
 8007a76:	b510      	push	{r4, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7e:	f000 f8d1 	bl	8007c24 <_lseek_r>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	bf15      	itete	ne
 8007a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a92:	81a3      	strheq	r3, [r4, #12]
 8007a94:	bf18      	it	ne
 8007a96:	81a3      	strhne	r3, [r4, #12]
 8007a98:	bd10      	pop	{r4, pc}

08007a9a <__sclose>:
 8007a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9e:	f000 b8b1 	b.w	8007c04 <_close_r>

08007aa2 <__swbuf_r>:
 8007aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	b118      	cbz	r0, 8007ab4 <__swbuf_r+0x12>
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <__swbuf_r+0x12>
 8007ab0:	f7ff feac 	bl	800780c <__sinit>
 8007ab4:	69a3      	ldr	r3, [r4, #24]
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	071a      	lsls	r2, r3, #28
 8007abc:	d501      	bpl.n	8007ac2 <__swbuf_r+0x20>
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	b943      	cbnz	r3, 8007ad4 <__swbuf_r+0x32>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f82b 	bl	8007b20 <__swsetup_r>
 8007aca:	b118      	cbz	r0, 8007ad4 <__swbuf_r+0x32>
 8007acc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	1a98      	subs	r0, r3, r2
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	b2f6      	uxtb	r6, r6
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	4637      	mov	r7, r6
 8007ae2:	dc05      	bgt.n	8007af0 <__swbuf_r+0x4e>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f003 f9d0 	bl	800ae8c <_fflush_r>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1ed      	bne.n	8007acc <__swbuf_r+0x2a>
 8007af0:	68a3      	ldr	r3, [r4, #8]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	6022      	str	r2, [r4, #0]
 8007afc:	701e      	strb	r6, [r3, #0]
 8007afe:	6962      	ldr	r2, [r4, #20]
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d004      	beq.n	8007b10 <__swbuf_r+0x6e>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	07db      	lsls	r3, r3, #31
 8007b0a:	d5e1      	bpl.n	8007ad0 <__swbuf_r+0x2e>
 8007b0c:	2e0a      	cmp	r6, #10
 8007b0e:	d1df      	bne.n	8007ad0 <__swbuf_r+0x2e>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f003 f9ba 	bl	800ae8c <_fflush_r>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d0d9      	beq.n	8007ad0 <__swbuf_r+0x2e>
 8007b1c:	e7d6      	b.n	8007acc <__swbuf_r+0x2a>
	...

08007b20 <__swsetup_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4b29      	ldr	r3, [pc, #164]	@ (8007bc8 <__swsetup_r+0xa8>)
 8007b24:	4605      	mov	r5, r0
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	460c      	mov	r4, r1
 8007b2a:	b118      	cbz	r0, 8007b34 <__swsetup_r+0x14>
 8007b2c:	6a03      	ldr	r3, [r0, #32]
 8007b2e:	b90b      	cbnz	r3, 8007b34 <__swsetup_r+0x14>
 8007b30:	f7ff fe6c 	bl	800780c <__sinit>
 8007b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b38:	0719      	lsls	r1, r3, #28
 8007b3a:	d422      	bmi.n	8007b82 <__swsetup_r+0x62>
 8007b3c:	06da      	lsls	r2, r3, #27
 8007b3e:	d407      	bmi.n	8007b50 <__swsetup_r+0x30>
 8007b40:	2209      	movs	r2, #9
 8007b42:	602a      	str	r2, [r5, #0]
 8007b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	e033      	b.n	8007bb8 <__swsetup_r+0x98>
 8007b50:	0758      	lsls	r0, r3, #29
 8007b52:	d512      	bpl.n	8007b7a <__swsetup_r+0x5a>
 8007b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b56:	b141      	cbz	r1, 8007b6a <__swsetup_r+0x4a>
 8007b58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__swsetup_r+0x46>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 ff29 	bl	80089b8 <_free_r>
 8007b66:	2300      	movs	r3, #0
 8007b68:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	2300      	movs	r3, #0
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f043 0308 	orr.w	r3, r3, #8
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	b94b      	cbnz	r3, 8007b9a <__swsetup_r+0x7a>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b90:	d003      	beq.n	8007b9a <__swsetup_r+0x7a>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f003 f9c7 	bl	800af28 <__smakebuf_r>
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	f013 0201 	ands.w	r2, r3, #1
 8007ba2:	d00a      	beq.n	8007bba <__swsetup_r+0x9a>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	60a2      	str	r2, [r4, #8]
 8007ba8:	6962      	ldr	r2, [r4, #20]
 8007baa:	4252      	negs	r2, r2
 8007bac:	61a2      	str	r2, [r4, #24]
 8007bae:	6922      	ldr	r2, [r4, #16]
 8007bb0:	b942      	cbnz	r2, 8007bc4 <__swsetup_r+0xa4>
 8007bb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bb6:	d1c5      	bne.n	8007b44 <__swsetup_r+0x24>
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	0799      	lsls	r1, r3, #30
 8007bbc:	bf58      	it	pl
 8007bbe:	6962      	ldrpl	r2, [r4, #20]
 8007bc0:	60a2      	str	r2, [r4, #8]
 8007bc2:	e7f4      	b.n	8007bae <__swsetup_r+0x8e>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e7f7      	b.n	8007bb8 <__swsetup_r+0x98>
 8007bc8:	20000034 	.word	0x20000034

08007bcc <memset>:
 8007bcc:	4402      	add	r2, r0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <strcat>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4602      	mov	r2, r0
 8007be0:	7814      	ldrb	r4, [r2, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	3201      	adds	r2, #1
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d1fa      	bne.n	8007be0 <strcat+0x4>
 8007bea:	3b01      	subs	r3, #1
 8007bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d1f9      	bne.n	8007bec <strcat+0x10>
 8007bf8:	bd10      	pop	{r4, pc}
	...

08007bfc <_localeconv_r>:
 8007bfc:	4800      	ldr	r0, [pc, #0]	@ (8007c00 <_localeconv_r+0x4>)
 8007bfe:	4770      	bx	lr
 8007c00:	20000174 	.word	0x20000174

08007c04 <_close_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d06      	ldr	r5, [pc, #24]	@ (8007c20 <_close_r+0x1c>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	602b      	str	r3, [r5, #0]
 8007c10:	f7fe fde6 	bl	80067e0 <_close>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_close_r+0x1a>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_close_r+0x1a>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	200007f0 	.word	0x200007f0

08007c24 <_lseek_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_lseek_r+0x20>)
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	602a      	str	r2, [r5, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f7fe fdfb 	bl	800682e <_lseek>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_lseek_r+0x1e>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_lseek_r+0x1e>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	200007f0 	.word	0x200007f0

08007c48 <_read_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	@ (8007c68 <_read_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7fe fd7b 	bl	8006752 <_read>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_read_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_read_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	200007f0 	.word	0x200007f0

08007c6c <_write_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d07      	ldr	r5, [pc, #28]	@ (8007c8c <_write_r+0x20>)
 8007c70:	4604      	mov	r4, r0
 8007c72:	4608      	mov	r0, r1
 8007c74:	4611      	mov	r1, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	602a      	str	r2, [r5, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f7fe fd86 	bl	800678c <_write>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_write_r+0x1e>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_write_r+0x1e>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	200007f0 	.word	0x200007f0

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	@ (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000034 	.word	0x20000034

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	@ (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f003 feda 	bl	800ba68 <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	0800c044 	.word	0x0800c044
 8007cd8:	0800c044 	.word	0x0800c044
 8007cdc:	0800c044 	.word	0x0800c044
 8007ce0:	0800c048 	.word	0x0800c048

08007ce4 <__retarget_lock_init_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_acquire_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <__retarget_lock_release_recursive>:
 8007ce8:	4770      	bx	lr

08007cea <strcpy>:
 8007cea:	4603      	mov	r3, r0
 8007cec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf0:	f803 2b01 	strb.w	r2, [r3], #1
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d1f9      	bne.n	8007cec <strcpy+0x2>
 8007cf8:	4770      	bx	lr
	...

08007cfc <nanf>:
 8007cfc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007d04 <nanf+0x8>
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	7fc00000 	.word	0x7fc00000

08007d08 <quorem>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	6903      	ldr	r3, [r0, #16]
 8007d0e:	690c      	ldr	r4, [r1, #16]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	4607      	mov	r7, r0
 8007d14:	db7e      	blt.n	8007e14 <quorem+0x10c>
 8007d16:	3c01      	subs	r4, #1
 8007d18:	f101 0814 	add.w	r8, r1, #20
 8007d1c:	00a3      	lsls	r3, r4, #2
 8007d1e:	f100 0514 	add.w	r5, r0, #20
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d32:	3301      	adds	r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d3e:	d32e      	bcc.n	8007d9e <quorem+0x96>
 8007d40:	f04f 0a00 	mov.w	sl, #0
 8007d44:	46c4      	mov	ip, r8
 8007d46:	46ae      	mov	lr, r5
 8007d48:	46d3      	mov	fp, sl
 8007d4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d4e:	b298      	uxth	r0, r3
 8007d50:	fb06 a000 	mla	r0, r6, r0, sl
 8007d54:	0c02      	lsrs	r2, r0, #16
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	fb06 2303 	mla	r3, r6, r3, r2
 8007d5c:	f8de 2000 	ldr.w	r2, [lr]
 8007d60:	b280      	uxth	r0, r0
 8007d62:	b292      	uxth	r2, r2
 8007d64:	1a12      	subs	r2, r2, r0
 8007d66:	445a      	add	r2, fp
 8007d68:	f8de 0000 	ldr.w	r0, [lr]
 8007d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d7a:	b292      	uxth	r2, r2
 8007d7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d80:	45e1      	cmp	r9, ip
 8007d82:	f84e 2b04 	str.w	r2, [lr], #4
 8007d86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d8a:	d2de      	bcs.n	8007d4a <quorem+0x42>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	58eb      	ldr	r3, [r5, r3]
 8007d90:	b92b      	cbnz	r3, 8007d9e <quorem+0x96>
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	3b04      	subs	r3, #4
 8007d96:	429d      	cmp	r5, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	d32f      	bcc.n	8007dfc <quorem+0xf4>
 8007d9c:	613c      	str	r4, [r7, #16]
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f001 f9c6 	bl	8009130 <__mcmp>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	db25      	blt.n	8007df4 <quorem+0xec>
 8007da8:	4629      	mov	r1, r5
 8007daa:	2000      	movs	r0, #0
 8007dac:	f858 2b04 	ldr.w	r2, [r8], #4
 8007db0:	f8d1 c000 	ldr.w	ip, [r1]
 8007db4:	fa1f fe82 	uxth.w	lr, r2
 8007db8:	fa1f f38c 	uxth.w	r3, ip
 8007dbc:	eba3 030e 	sub.w	r3, r3, lr
 8007dc0:	4403      	add	r3, r0
 8007dc2:	0c12      	lsrs	r2, r2, #16
 8007dc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007dc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd2:	45c1      	cmp	r9, r8
 8007dd4:	f841 3b04 	str.w	r3, [r1], #4
 8007dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ddc:	d2e6      	bcs.n	8007dac <quorem+0xa4>
 8007dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007de6:	b922      	cbnz	r2, 8007df2 <quorem+0xea>
 8007de8:	3b04      	subs	r3, #4
 8007dea:	429d      	cmp	r5, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	d30b      	bcc.n	8007e08 <quorem+0x100>
 8007df0:	613c      	str	r4, [r7, #16]
 8007df2:	3601      	adds	r6, #1
 8007df4:	4630      	mov	r0, r6
 8007df6:	b003      	add	sp, #12
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	3b04      	subs	r3, #4
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	d1cb      	bne.n	8007d9c <quorem+0x94>
 8007e04:	3c01      	subs	r4, #1
 8007e06:	e7c6      	b.n	8007d96 <quorem+0x8e>
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	3b04      	subs	r3, #4
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	d1ef      	bne.n	8007df0 <quorem+0xe8>
 8007e10:	3c01      	subs	r4, #1
 8007e12:	e7ea      	b.n	8007dea <quorem+0xe2>
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7ee      	b.n	8007df6 <quorem+0xee>

08007e18 <_dtoa_r>:
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	69c7      	ldr	r7, [r0, #28]
 8007e1e:	b097      	sub	sp, #92	@ 0x5c
 8007e20:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e24:	ec55 4b10 	vmov	r4, r5, d0
 8007e28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007e2a:	9107      	str	r1, [sp, #28]
 8007e2c:	4681      	mov	r9, r0
 8007e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e32:	b97f      	cbnz	r7, 8007e54 <_dtoa_r+0x3c>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f000 fe09 	bl	8008a4c <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e40:	b920      	cbnz	r0, 8007e4c <_dtoa_r+0x34>
 8007e42:	4ba9      	ldr	r3, [pc, #676]	@ (80080e8 <_dtoa_r+0x2d0>)
 8007e44:	21ef      	movs	r1, #239	@ 0xef
 8007e46:	48a9      	ldr	r0, [pc, #676]	@ (80080ec <_dtoa_r+0x2d4>)
 8007e48:	f003 f992 	bl	800b170 <__assert_func>
 8007e4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e50:	6007      	str	r7, [r0, #0]
 8007e52:	60c7      	str	r7, [r0, #12]
 8007e54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	b159      	cbz	r1, 8007e74 <_dtoa_r+0x5c>
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	604a      	str	r2, [r1, #4]
 8007e60:	2301      	movs	r3, #1
 8007e62:	4093      	lsls	r3, r2
 8007e64:	608b      	str	r3, [r1, #8]
 8007e66:	4648      	mov	r0, r9
 8007e68:	f000 fee6 	bl	8008c38 <_Bfree>
 8007e6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	1e2b      	subs	r3, r5, #0
 8007e76:	bfb9      	ittee	lt
 8007e78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e7c:	9305      	strlt	r3, [sp, #20]
 8007e7e:	2300      	movge	r3, #0
 8007e80:	6033      	strge	r3, [r6, #0]
 8007e82:	9f05      	ldr	r7, [sp, #20]
 8007e84:	4b9a      	ldr	r3, [pc, #616]	@ (80080f0 <_dtoa_r+0x2d8>)
 8007e86:	bfbc      	itt	lt
 8007e88:	2201      	movlt	r2, #1
 8007e8a:	6032      	strlt	r2, [r6, #0]
 8007e8c:	43bb      	bics	r3, r7
 8007e8e:	d112      	bne.n	8007eb6 <_dtoa_r+0x9e>
 8007e90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007e92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e9c:	4323      	orrs	r3, r4
 8007e9e:	f000 855a 	beq.w	8008956 <_dtoa_r+0xb3e>
 8007ea2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ea4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008104 <_dtoa_r+0x2ec>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 855c 	beq.w	8008966 <_dtoa_r+0xb4e>
 8007eae:	f10a 0303 	add.w	r3, sl, #3
 8007eb2:	f000 bd56 	b.w	8008962 <_dtoa_r+0xb4a>
 8007eb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	ec51 0b17 	vmov	r0, r1, d7
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ec6:	f7f8 fe0f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007eca:	4680      	mov	r8, r0
 8007ecc:	b158      	cbz	r0, 8007ee6 <_dtoa_r+0xce>
 8007ece:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ed6:	b113      	cbz	r3, 8007ede <_dtoa_r+0xc6>
 8007ed8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007eda:	4b86      	ldr	r3, [pc, #536]	@ (80080f4 <_dtoa_r+0x2dc>)
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008108 <_dtoa_r+0x2f0>
 8007ee2:	f000 bd40 	b.w	8008966 <_dtoa_r+0xb4e>
 8007ee6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007eea:	aa14      	add	r2, sp, #80	@ 0x50
 8007eec:	a915      	add	r1, sp, #84	@ 0x54
 8007eee:	4648      	mov	r0, r9
 8007ef0:	f001 fa3e 	bl	8009370 <__d2b>
 8007ef4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d078      	beq.n	8007ff0 <_dtoa_r+0x1d8>
 8007efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4b76      	ldr	r3, [pc, #472]	@ (80080f8 <_dtoa_r+0x2e0>)
 8007f1e:	f7f8 f9c3 	bl	80002a8 <__aeabi_dsub>
 8007f22:	a36b      	add	r3, pc, #428	@ (adr r3, 80080d0 <_dtoa_r+0x2b8>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fb76 	bl	8000618 <__aeabi_dmul>
 8007f2c:	a36a      	add	r3, pc, #424	@ (adr r3, 80080d8 <_dtoa_r+0x2c0>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9bb 	bl	80002ac <__adddf3>
 8007f36:	4604      	mov	r4, r0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	460d      	mov	r5, r1
 8007f3c:	f7f8 fb02 	bl	8000544 <__aeabi_i2d>
 8007f40:	a367      	add	r3, pc, #412	@ (adr r3, 80080e0 <_dtoa_r+0x2c8>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 fb67 	bl	8000618 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 f9ab 	bl	80002ac <__adddf3>
 8007f56:	4604      	mov	r4, r0
 8007f58:	460d      	mov	r5, r1
 8007f5a:	f7f8 fe0d 	bl	8000b78 <__aeabi_d2iz>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4607      	mov	r7, r0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4620      	mov	r0, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 fdc8 	bl	8000afc <__aeabi_dcmplt>
 8007f6c:	b140      	cbz	r0, 8007f80 <_dtoa_r+0x168>
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7f8 fae8 	bl	8000544 <__aeabi_i2d>
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f7f8 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f7c:	b900      	cbnz	r0, 8007f80 <_dtoa_r+0x168>
 8007f7e:	3f01      	subs	r7, #1
 8007f80:	2f16      	cmp	r7, #22
 8007f82:	d852      	bhi.n	800802a <_dtoa_r+0x212>
 8007f84:	4b5d      	ldr	r3, [pc, #372]	@ (80080fc <_dtoa_r+0x2e4>)
 8007f86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f92:	f7f8 fdb3 	bl	8000afc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d049      	beq.n	800802e <_dtoa_r+0x216>
 8007f9a:	3f01      	subs	r7, #1
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fa2:	1b9b      	subs	r3, r3, r6
 8007fa4:	1e5a      	subs	r2, r3, #1
 8007fa6:	bf45      	ittet	mi
 8007fa8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fac:	9300      	strmi	r3, [sp, #0]
 8007fae:	2300      	movpl	r3, #0
 8007fb0:	2300      	movmi	r3, #0
 8007fb2:	9206      	str	r2, [sp, #24]
 8007fb4:	bf54      	ite	pl
 8007fb6:	9300      	strpl	r3, [sp, #0]
 8007fb8:	9306      	strmi	r3, [sp, #24]
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	db39      	blt.n	8008032 <_dtoa_r+0x21a>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007fc2:	443b      	add	r3, r7
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	2b09      	cmp	r3, #9
 8007fce:	d863      	bhi.n	8008098 <_dtoa_r+0x280>
 8007fd0:	2b05      	cmp	r3, #5
 8007fd2:	bfc4      	itt	gt
 8007fd4:	3b04      	subgt	r3, #4
 8007fd6:	9307      	strgt	r3, [sp, #28]
 8007fd8:	9b07      	ldr	r3, [sp, #28]
 8007fda:	f1a3 0302 	sub.w	r3, r3, #2
 8007fde:	bfcc      	ite	gt
 8007fe0:	2400      	movgt	r4, #0
 8007fe2:	2401      	movle	r4, #1
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d863      	bhi.n	80080b0 <_dtoa_r+0x298>
 8007fe8:	e8df f003 	tbb	[pc, r3]
 8007fec:	2b375452 	.word	0x2b375452
 8007ff0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ff4:	441e      	add	r6, r3
 8007ff6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	bfc1      	itttt	gt
 8007ffe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008002:	409f      	lslgt	r7, r3
 8008004:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008008:	fa24 f303 	lsrgt.w	r3, r4, r3
 800800c:	bfd6      	itet	le
 800800e:	f1c3 0320 	rsble	r3, r3, #32
 8008012:	ea47 0003 	orrgt.w	r0, r7, r3
 8008016:	fa04 f003 	lslle.w	r0, r4, r3
 800801a:	f7f8 fa83 	bl	8000524 <__aeabi_ui2d>
 800801e:	2201      	movs	r2, #1
 8008020:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008024:	3e01      	subs	r6, #1
 8008026:	9212      	str	r2, [sp, #72]	@ 0x48
 8008028:	e776      	b.n	8007f18 <_dtoa_r+0x100>
 800802a:	2301      	movs	r3, #1
 800802c:	e7b7      	b.n	8007f9e <_dtoa_r+0x186>
 800802e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008030:	e7b6      	b.n	8007fa0 <_dtoa_r+0x188>
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	1bdb      	subs	r3, r3, r7
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	427b      	negs	r3, r7
 800803a:	9308      	str	r3, [sp, #32]
 800803c:	2300      	movs	r3, #0
 800803e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008040:	e7c3      	b.n	8007fca <_dtoa_r+0x1b2>
 8008042:	2301      	movs	r3, #1
 8008044:	9309      	str	r3, [sp, #36]	@ 0x24
 8008046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008048:	eb07 0b03 	add.w	fp, r7, r3
 800804c:	f10b 0301 	add.w	r3, fp, #1
 8008050:	2b01      	cmp	r3, #1
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	bfb8      	it	lt
 8008056:	2301      	movlt	r3, #1
 8008058:	e006      	b.n	8008068 <_dtoa_r+0x250>
 800805a:	2301      	movs	r3, #1
 800805c:	9309      	str	r3, [sp, #36]	@ 0x24
 800805e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	dd28      	ble.n	80080b6 <_dtoa_r+0x29e>
 8008064:	469b      	mov	fp, r3
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800806c:	2100      	movs	r1, #0
 800806e:	2204      	movs	r2, #4
 8008070:	f102 0514 	add.w	r5, r2, #20
 8008074:	429d      	cmp	r5, r3
 8008076:	d926      	bls.n	80080c6 <_dtoa_r+0x2ae>
 8008078:	6041      	str	r1, [r0, #4]
 800807a:	4648      	mov	r0, r9
 800807c:	f000 fd9c 	bl	8008bb8 <_Balloc>
 8008080:	4682      	mov	sl, r0
 8008082:	2800      	cmp	r0, #0
 8008084:	d142      	bne.n	800810c <_dtoa_r+0x2f4>
 8008086:	4b1e      	ldr	r3, [pc, #120]	@ (8008100 <_dtoa_r+0x2e8>)
 8008088:	4602      	mov	r2, r0
 800808a:	f240 11af 	movw	r1, #431	@ 0x1af
 800808e:	e6da      	b.n	8007e46 <_dtoa_r+0x2e>
 8008090:	2300      	movs	r3, #0
 8008092:	e7e3      	b.n	800805c <_dtoa_r+0x244>
 8008094:	2300      	movs	r3, #0
 8008096:	e7d5      	b.n	8008044 <_dtoa_r+0x22c>
 8008098:	2401      	movs	r4, #1
 800809a:	2300      	movs	r3, #0
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	9409      	str	r4, [sp, #36]	@ 0x24
 80080a0:	f04f 3bff 	mov.w	fp, #4294967295
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80080aa:	2312      	movs	r3, #18
 80080ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80080ae:	e7db      	b.n	8008068 <_dtoa_r+0x250>
 80080b0:	2301      	movs	r3, #1
 80080b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b4:	e7f4      	b.n	80080a0 <_dtoa_r+0x288>
 80080b6:	f04f 0b01 	mov.w	fp, #1
 80080ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80080be:	465b      	mov	r3, fp
 80080c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80080c4:	e7d0      	b.n	8008068 <_dtoa_r+0x250>
 80080c6:	3101      	adds	r1, #1
 80080c8:	0052      	lsls	r2, r2, #1
 80080ca:	e7d1      	b.n	8008070 <_dtoa_r+0x258>
 80080cc:	f3af 8000 	nop.w
 80080d0:	636f4361 	.word	0x636f4361
 80080d4:	3fd287a7 	.word	0x3fd287a7
 80080d8:	8b60c8b3 	.word	0x8b60c8b3
 80080dc:	3fc68a28 	.word	0x3fc68a28
 80080e0:	509f79fb 	.word	0x509f79fb
 80080e4:	3fd34413 	.word	0x3fd34413
 80080e8:	0800bc40 	.word	0x0800bc40
 80080ec:	0800bc57 	.word	0x0800bc57
 80080f0:	7ff00000 	.word	0x7ff00000
 80080f4:	0800bd43 	.word	0x0800bd43
 80080f8:	3ff80000 	.word	0x3ff80000
 80080fc:	0800be20 	.word	0x0800be20
 8008100:	0800bcaf 	.word	0x0800bcaf
 8008104:	0800bc3c 	.word	0x0800bc3c
 8008108:	0800bd42 	.word	0x0800bd42
 800810c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008110:	6018      	str	r0, [r3, #0]
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	2b0e      	cmp	r3, #14
 8008116:	f200 80a1 	bhi.w	800825c <_dtoa_r+0x444>
 800811a:	2c00      	cmp	r4, #0
 800811c:	f000 809e 	beq.w	800825c <_dtoa_r+0x444>
 8008120:	2f00      	cmp	r7, #0
 8008122:	dd33      	ble.n	800818c <_dtoa_r+0x374>
 8008124:	4b9c      	ldr	r3, [pc, #624]	@ (8008398 <_dtoa_r+0x580>)
 8008126:	f007 020f 	and.w	r2, r7, #15
 800812a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812e:	ed93 7b00 	vldr	d7, [r3]
 8008132:	05f8      	lsls	r0, r7, #23
 8008134:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800813c:	d516      	bpl.n	800816c <_dtoa_r+0x354>
 800813e:	4b97      	ldr	r3, [pc, #604]	@ (800839c <_dtoa_r+0x584>)
 8008140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008148:	f7f8 fb90 	bl	800086c <__aeabi_ddiv>
 800814c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008150:	f004 040f 	and.w	r4, r4, #15
 8008154:	2603      	movs	r6, #3
 8008156:	4d91      	ldr	r5, [pc, #580]	@ (800839c <_dtoa_r+0x584>)
 8008158:	b954      	cbnz	r4, 8008170 <_dtoa_r+0x358>
 800815a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800815e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008162:	f7f8 fb83 	bl	800086c <__aeabi_ddiv>
 8008166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800816a:	e028      	b.n	80081be <_dtoa_r+0x3a6>
 800816c:	2602      	movs	r6, #2
 800816e:	e7f2      	b.n	8008156 <_dtoa_r+0x33e>
 8008170:	07e1      	lsls	r1, r4, #31
 8008172:	d508      	bpl.n	8008186 <_dtoa_r+0x36e>
 8008174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800817c:	f7f8 fa4c 	bl	8000618 <__aeabi_dmul>
 8008180:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008184:	3601      	adds	r6, #1
 8008186:	1064      	asrs	r4, r4, #1
 8008188:	3508      	adds	r5, #8
 800818a:	e7e5      	b.n	8008158 <_dtoa_r+0x340>
 800818c:	f000 80af 	beq.w	80082ee <_dtoa_r+0x4d6>
 8008190:	427c      	negs	r4, r7
 8008192:	4b81      	ldr	r3, [pc, #516]	@ (8008398 <_dtoa_r+0x580>)
 8008194:	4d81      	ldr	r5, [pc, #516]	@ (800839c <_dtoa_r+0x584>)
 8008196:	f004 020f 	and.w	r2, r4, #15
 800819a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081a6:	f7f8 fa37 	bl	8000618 <__aeabi_dmul>
 80081aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ae:	1124      	asrs	r4, r4, #4
 80081b0:	2300      	movs	r3, #0
 80081b2:	2602      	movs	r6, #2
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	f040 808f 	bne.w	80082d8 <_dtoa_r+0x4c0>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1d3      	bne.n	8008166 <_dtoa_r+0x34e>
 80081be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8094 	beq.w	80082f2 <_dtoa_r+0x4da>
 80081ca:	4b75      	ldr	r3, [pc, #468]	@ (80083a0 <_dtoa_r+0x588>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 fc93 	bl	8000afc <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f000 808b 	beq.w	80082f2 <_dtoa_r+0x4da>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8087 	beq.w	80082f2 <_dtoa_r+0x4da>
 80081e4:	f1bb 0f00 	cmp.w	fp, #0
 80081e8:	dd34      	ble.n	8008254 <_dtoa_r+0x43c>
 80081ea:	4620      	mov	r0, r4
 80081ec:	4b6d      	ldr	r3, [pc, #436]	@ (80083a4 <_dtoa_r+0x58c>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fa11 	bl	8000618 <__aeabi_dmul>
 80081f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081fa:	f107 38ff 	add.w	r8, r7, #4294967295
 80081fe:	3601      	adds	r6, #1
 8008200:	465c      	mov	r4, fp
 8008202:	4630      	mov	r0, r6
 8008204:	f7f8 f99e 	bl	8000544 <__aeabi_i2d>
 8008208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820c:	f7f8 fa04 	bl	8000618 <__aeabi_dmul>
 8008210:	4b65      	ldr	r3, [pc, #404]	@ (80083a8 <_dtoa_r+0x590>)
 8008212:	2200      	movs	r2, #0
 8008214:	f7f8 f84a 	bl	80002ac <__adddf3>
 8008218:	4605      	mov	r5, r0
 800821a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800821e:	2c00      	cmp	r4, #0
 8008220:	d16a      	bne.n	80082f8 <_dtoa_r+0x4e0>
 8008222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008226:	4b61      	ldr	r3, [pc, #388]	@ (80083ac <_dtoa_r+0x594>)
 8008228:	2200      	movs	r2, #0
 800822a:	f7f8 f83d 	bl	80002a8 <__aeabi_dsub>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008236:	462a      	mov	r2, r5
 8008238:	4633      	mov	r3, r6
 800823a:	f7f8 fc7d 	bl	8000b38 <__aeabi_dcmpgt>
 800823e:	2800      	cmp	r0, #0
 8008240:	f040 8298 	bne.w	8008774 <_dtoa_r+0x95c>
 8008244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008248:	462a      	mov	r2, r5
 800824a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800824e:	f7f8 fc55 	bl	8000afc <__aeabi_dcmplt>
 8008252:	bb38      	cbnz	r0, 80082a4 <_dtoa_r+0x48c>
 8008254:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008258:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800825c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800825e:	2b00      	cmp	r3, #0
 8008260:	f2c0 8157 	blt.w	8008512 <_dtoa_r+0x6fa>
 8008264:	2f0e      	cmp	r7, #14
 8008266:	f300 8154 	bgt.w	8008512 <_dtoa_r+0x6fa>
 800826a:	4b4b      	ldr	r3, [pc, #300]	@ (8008398 <_dtoa_r+0x580>)
 800826c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008270:	ed93 7b00 	vldr	d7, [r3]
 8008274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008276:	2b00      	cmp	r3, #0
 8008278:	ed8d 7b00 	vstr	d7, [sp]
 800827c:	f280 80e5 	bge.w	800844a <_dtoa_r+0x632>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f300 80e1 	bgt.w	800844a <_dtoa_r+0x632>
 8008288:	d10c      	bne.n	80082a4 <_dtoa_r+0x48c>
 800828a:	4b48      	ldr	r3, [pc, #288]	@ (80083ac <_dtoa_r+0x594>)
 800828c:	2200      	movs	r2, #0
 800828e:	ec51 0b17 	vmov	r0, r1, d7
 8008292:	f7f8 f9c1 	bl	8000618 <__aeabi_dmul>
 8008296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829a:	f7f8 fc43 	bl	8000b24 <__aeabi_dcmpge>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f000 8266 	beq.w	8008770 <_dtoa_r+0x958>
 80082a4:	2400      	movs	r4, #0
 80082a6:	4625      	mov	r5, r4
 80082a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082aa:	4656      	mov	r6, sl
 80082ac:	ea6f 0803 	mvn.w	r8, r3
 80082b0:	2700      	movs	r7, #0
 80082b2:	4621      	mov	r1, r4
 80082b4:	4648      	mov	r0, r9
 80082b6:	f000 fcbf 	bl	8008c38 <_Bfree>
 80082ba:	2d00      	cmp	r5, #0
 80082bc:	f000 80bd 	beq.w	800843a <_dtoa_r+0x622>
 80082c0:	b12f      	cbz	r7, 80082ce <_dtoa_r+0x4b6>
 80082c2:	42af      	cmp	r7, r5
 80082c4:	d003      	beq.n	80082ce <_dtoa_r+0x4b6>
 80082c6:	4639      	mov	r1, r7
 80082c8:	4648      	mov	r0, r9
 80082ca:	f000 fcb5 	bl	8008c38 <_Bfree>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4648      	mov	r0, r9
 80082d2:	f000 fcb1 	bl	8008c38 <_Bfree>
 80082d6:	e0b0      	b.n	800843a <_dtoa_r+0x622>
 80082d8:	07e2      	lsls	r2, r4, #31
 80082da:	d505      	bpl.n	80082e8 <_dtoa_r+0x4d0>
 80082dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082e0:	f7f8 f99a 	bl	8000618 <__aeabi_dmul>
 80082e4:	3601      	adds	r6, #1
 80082e6:	2301      	movs	r3, #1
 80082e8:	1064      	asrs	r4, r4, #1
 80082ea:	3508      	adds	r5, #8
 80082ec:	e762      	b.n	80081b4 <_dtoa_r+0x39c>
 80082ee:	2602      	movs	r6, #2
 80082f0:	e765      	b.n	80081be <_dtoa_r+0x3a6>
 80082f2:	9c03      	ldr	r4, [sp, #12]
 80082f4:	46b8      	mov	r8, r7
 80082f6:	e784      	b.n	8008202 <_dtoa_r+0x3ea>
 80082f8:	4b27      	ldr	r3, [pc, #156]	@ (8008398 <_dtoa_r+0x580>)
 80082fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008304:	4454      	add	r4, sl
 8008306:	2900      	cmp	r1, #0
 8008308:	d054      	beq.n	80083b4 <_dtoa_r+0x59c>
 800830a:	4929      	ldr	r1, [pc, #164]	@ (80083b0 <_dtoa_r+0x598>)
 800830c:	2000      	movs	r0, #0
 800830e:	f7f8 faad 	bl	800086c <__aeabi_ddiv>
 8008312:	4633      	mov	r3, r6
 8008314:	462a      	mov	r2, r5
 8008316:	f7f7 ffc7 	bl	80002a8 <__aeabi_dsub>
 800831a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800831e:	4656      	mov	r6, sl
 8008320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008324:	f7f8 fc28 	bl	8000b78 <__aeabi_d2iz>
 8008328:	4605      	mov	r5, r0
 800832a:	f7f8 f90b 	bl	8000544 <__aeabi_i2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008336:	f7f7 ffb7 	bl	80002a8 <__aeabi_dsub>
 800833a:	3530      	adds	r5, #48	@ 0x30
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008344:	f806 5b01 	strb.w	r5, [r6], #1
 8008348:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800834c:	f7f8 fbd6 	bl	8000afc <__aeabi_dcmplt>
 8008350:	2800      	cmp	r0, #0
 8008352:	d172      	bne.n	800843a <_dtoa_r+0x622>
 8008354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008358:	4911      	ldr	r1, [pc, #68]	@ (80083a0 <_dtoa_r+0x588>)
 800835a:	2000      	movs	r0, #0
 800835c:	f7f7 ffa4 	bl	80002a8 <__aeabi_dsub>
 8008360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008364:	f7f8 fbca 	bl	8000afc <__aeabi_dcmplt>
 8008368:	2800      	cmp	r0, #0
 800836a:	f040 80b4 	bne.w	80084d6 <_dtoa_r+0x6be>
 800836e:	42a6      	cmp	r6, r4
 8008370:	f43f af70 	beq.w	8008254 <_dtoa_r+0x43c>
 8008374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008378:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <_dtoa_r+0x58c>)
 800837a:	2200      	movs	r2, #0
 800837c:	f7f8 f94c 	bl	8000618 <__aeabi_dmul>
 8008380:	4b08      	ldr	r3, [pc, #32]	@ (80083a4 <_dtoa_r+0x58c>)
 8008382:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008386:	2200      	movs	r2, #0
 8008388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800838c:	f7f8 f944 	bl	8000618 <__aeabi_dmul>
 8008390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008394:	e7c4      	b.n	8008320 <_dtoa_r+0x508>
 8008396:	bf00      	nop
 8008398:	0800be20 	.word	0x0800be20
 800839c:	0800bdf8 	.word	0x0800bdf8
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	40240000 	.word	0x40240000
 80083a8:	401c0000 	.word	0x401c0000
 80083ac:	40140000 	.word	0x40140000
 80083b0:	3fe00000 	.word	0x3fe00000
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	f7f8 f92e 	bl	8000618 <__aeabi_dmul>
 80083bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083c2:	4656      	mov	r6, sl
 80083c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c8:	f7f8 fbd6 	bl	8000b78 <__aeabi_d2iz>
 80083cc:	4605      	mov	r5, r0
 80083ce:	f7f8 f8b9 	bl	8000544 <__aeabi_i2d>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083da:	f7f7 ff65 	bl	80002a8 <__aeabi_dsub>
 80083de:	3530      	adds	r5, #48	@ 0x30
 80083e0:	f806 5b01 	strb.w	r5, [r6], #1
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083ee:	f04f 0200 	mov.w	r2, #0
 80083f2:	d124      	bne.n	800843e <_dtoa_r+0x626>
 80083f4:	4baf      	ldr	r3, [pc, #700]	@ (80086b4 <_dtoa_r+0x89c>)
 80083f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083fa:	f7f7 ff57 	bl	80002ac <__adddf3>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008406:	f7f8 fb97 	bl	8000b38 <__aeabi_dcmpgt>
 800840a:	2800      	cmp	r0, #0
 800840c:	d163      	bne.n	80084d6 <_dtoa_r+0x6be>
 800840e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008412:	49a8      	ldr	r1, [pc, #672]	@ (80086b4 <_dtoa_r+0x89c>)
 8008414:	2000      	movs	r0, #0
 8008416:	f7f7 ff47 	bl	80002a8 <__aeabi_dsub>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008422:	f7f8 fb6b 	bl	8000afc <__aeabi_dcmplt>
 8008426:	2800      	cmp	r0, #0
 8008428:	f43f af14 	beq.w	8008254 <_dtoa_r+0x43c>
 800842c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800842e:	1e73      	subs	r3, r6, #1
 8008430:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008432:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008436:	2b30      	cmp	r3, #48	@ 0x30
 8008438:	d0f8      	beq.n	800842c <_dtoa_r+0x614>
 800843a:	4647      	mov	r7, r8
 800843c:	e03b      	b.n	80084b6 <_dtoa_r+0x69e>
 800843e:	4b9e      	ldr	r3, [pc, #632]	@ (80086b8 <_dtoa_r+0x8a0>)
 8008440:	f7f8 f8ea 	bl	8000618 <__aeabi_dmul>
 8008444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008448:	e7bc      	b.n	80083c4 <_dtoa_r+0x5ac>
 800844a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800844e:	4656      	mov	r6, sl
 8008450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008454:	4620      	mov	r0, r4
 8008456:	4629      	mov	r1, r5
 8008458:	f7f8 fa08 	bl	800086c <__aeabi_ddiv>
 800845c:	f7f8 fb8c 	bl	8000b78 <__aeabi_d2iz>
 8008460:	4680      	mov	r8, r0
 8008462:	f7f8 f86f 	bl	8000544 <__aeabi_i2d>
 8008466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800846a:	f7f8 f8d5 	bl	8000618 <__aeabi_dmul>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800847a:	f7f7 ff15 	bl	80002a8 <__aeabi_dsub>
 800847e:	f806 4b01 	strb.w	r4, [r6], #1
 8008482:	9d03      	ldr	r5, [sp, #12]
 8008484:	eba6 040a 	sub.w	r4, r6, sl
 8008488:	42a5      	cmp	r5, r4
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	d133      	bne.n	80084f8 <_dtoa_r+0x6e0>
 8008490:	f7f7 ff0c 	bl	80002ac <__adddf3>
 8008494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	f7f8 fb4c 	bl	8000b38 <__aeabi_dcmpgt>
 80084a0:	b9c0      	cbnz	r0, 80084d4 <_dtoa_r+0x6bc>
 80084a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a6:	4620      	mov	r0, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7f8 fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80084ae:	b110      	cbz	r0, 80084b6 <_dtoa_r+0x69e>
 80084b0:	f018 0f01 	tst.w	r8, #1
 80084b4:	d10e      	bne.n	80084d4 <_dtoa_r+0x6bc>
 80084b6:	9902      	ldr	r1, [sp, #8]
 80084b8:	4648      	mov	r0, r9
 80084ba:	f000 fbbd 	bl	8008c38 <_Bfree>
 80084be:	2300      	movs	r3, #0
 80084c0:	7033      	strb	r3, [r6, #0]
 80084c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084c4:	3701      	adds	r7, #1
 80084c6:	601f      	str	r7, [r3, #0]
 80084c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 824b 	beq.w	8008966 <_dtoa_r+0xb4e>
 80084d0:	601e      	str	r6, [r3, #0]
 80084d2:	e248      	b.n	8008966 <_dtoa_r+0xb4e>
 80084d4:	46b8      	mov	r8, r7
 80084d6:	4633      	mov	r3, r6
 80084d8:	461e      	mov	r6, r3
 80084da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084de:	2a39      	cmp	r2, #57	@ 0x39
 80084e0:	d106      	bne.n	80084f0 <_dtoa_r+0x6d8>
 80084e2:	459a      	cmp	sl, r3
 80084e4:	d1f8      	bne.n	80084d8 <_dtoa_r+0x6c0>
 80084e6:	2230      	movs	r2, #48	@ 0x30
 80084e8:	f108 0801 	add.w	r8, r8, #1
 80084ec:	f88a 2000 	strb.w	r2, [sl]
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	3201      	adds	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e7a0      	b.n	800843a <_dtoa_r+0x622>
 80084f8:	4b6f      	ldr	r3, [pc, #444]	@ (80086b8 <_dtoa_r+0x8a0>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	f7f8 f88c 	bl	8000618 <__aeabi_dmul>
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	f7f8 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800850c:	2800      	cmp	r0, #0
 800850e:	d09f      	beq.n	8008450 <_dtoa_r+0x638>
 8008510:	e7d1      	b.n	80084b6 <_dtoa_r+0x69e>
 8008512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008514:	2a00      	cmp	r2, #0
 8008516:	f000 80ea 	beq.w	80086ee <_dtoa_r+0x8d6>
 800851a:	9a07      	ldr	r2, [sp, #28]
 800851c:	2a01      	cmp	r2, #1
 800851e:	f300 80cd 	bgt.w	80086bc <_dtoa_r+0x8a4>
 8008522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008524:	2a00      	cmp	r2, #0
 8008526:	f000 80c1 	beq.w	80086ac <_dtoa_r+0x894>
 800852a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800852e:	9c08      	ldr	r4, [sp, #32]
 8008530:	9e00      	ldr	r6, [sp, #0]
 8008532:	9a00      	ldr	r2, [sp, #0]
 8008534:	441a      	add	r2, r3
 8008536:	9200      	str	r2, [sp, #0]
 8008538:	9a06      	ldr	r2, [sp, #24]
 800853a:	2101      	movs	r1, #1
 800853c:	441a      	add	r2, r3
 800853e:	4648      	mov	r0, r9
 8008540:	9206      	str	r2, [sp, #24]
 8008542:	f000 fc77 	bl	8008e34 <__i2b>
 8008546:	4605      	mov	r5, r0
 8008548:	b166      	cbz	r6, 8008564 <_dtoa_r+0x74c>
 800854a:	9b06      	ldr	r3, [sp, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd09      	ble.n	8008564 <_dtoa_r+0x74c>
 8008550:	42b3      	cmp	r3, r6
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	bfa8      	it	ge
 8008556:	4633      	movge	r3, r6
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	9200      	str	r2, [sp, #0]
 800855c:	9a06      	ldr	r2, [sp, #24]
 800855e:	1af6      	subs	r6, r6, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	9306      	str	r3, [sp, #24]
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	b30b      	cbz	r3, 80085ac <_dtoa_r+0x794>
 8008568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80c6 	beq.w	80086fc <_dtoa_r+0x8e4>
 8008570:	2c00      	cmp	r4, #0
 8008572:	f000 80c0 	beq.w	80086f6 <_dtoa_r+0x8de>
 8008576:	4629      	mov	r1, r5
 8008578:	4622      	mov	r2, r4
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fd12 	bl	8008fa4 <__pow5mult>
 8008580:	9a02      	ldr	r2, [sp, #8]
 8008582:	4601      	mov	r1, r0
 8008584:	4605      	mov	r5, r0
 8008586:	4648      	mov	r0, r9
 8008588:	f000 fc6a 	bl	8008e60 <__multiply>
 800858c:	9902      	ldr	r1, [sp, #8]
 800858e:	4680      	mov	r8, r0
 8008590:	4648      	mov	r0, r9
 8008592:	f000 fb51 	bl	8008c38 <_Bfree>
 8008596:	9b08      	ldr	r3, [sp, #32]
 8008598:	1b1b      	subs	r3, r3, r4
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	f000 80b1 	beq.w	8008702 <_dtoa_r+0x8ea>
 80085a0:	9a08      	ldr	r2, [sp, #32]
 80085a2:	4641      	mov	r1, r8
 80085a4:	4648      	mov	r0, r9
 80085a6:	f000 fcfd 	bl	8008fa4 <__pow5mult>
 80085aa:	9002      	str	r0, [sp, #8]
 80085ac:	2101      	movs	r1, #1
 80085ae:	4648      	mov	r0, r9
 80085b0:	f000 fc40 	bl	8008e34 <__i2b>
 80085b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b6:	4604      	mov	r4, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 81d8 	beq.w	800896e <_dtoa_r+0xb56>
 80085be:	461a      	mov	r2, r3
 80085c0:	4601      	mov	r1, r0
 80085c2:	4648      	mov	r0, r9
 80085c4:	f000 fcee 	bl	8008fa4 <__pow5mult>
 80085c8:	9b07      	ldr	r3, [sp, #28]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	4604      	mov	r4, r0
 80085ce:	f300 809f 	bgt.w	8008710 <_dtoa_r+0x8f8>
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 8097 	bne.w	8008708 <_dtoa_r+0x8f0>
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f040 8093 	bne.w	800870c <_dtoa_r+0x8f4>
 80085e6:	9b05      	ldr	r3, [sp, #20]
 80085e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085ec:	0d1b      	lsrs	r3, r3, #20
 80085ee:	051b      	lsls	r3, r3, #20
 80085f0:	b133      	cbz	r3, 8008600 <_dtoa_r+0x7e8>
 80085f2:	9b00      	ldr	r3, [sp, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	9b06      	ldr	r3, [sp, #24]
 80085fa:	3301      	adds	r3, #1
 80085fc:	9306      	str	r3, [sp, #24]
 80085fe:	2301      	movs	r3, #1
 8008600:	9308      	str	r3, [sp, #32]
 8008602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 81b8 	beq.w	800897a <_dtoa_r+0xb62>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008610:	6918      	ldr	r0, [r3, #16]
 8008612:	f000 fbc3 	bl	8008d9c <__hi0bits>
 8008616:	f1c0 0020 	rsb	r0, r0, #32
 800861a:	9b06      	ldr	r3, [sp, #24]
 800861c:	4418      	add	r0, r3
 800861e:	f010 001f 	ands.w	r0, r0, #31
 8008622:	f000 8082 	beq.w	800872a <_dtoa_r+0x912>
 8008626:	f1c0 0320 	rsb	r3, r0, #32
 800862a:	2b04      	cmp	r3, #4
 800862c:	dd73      	ble.n	8008716 <_dtoa_r+0x8fe>
 800862e:	9b00      	ldr	r3, [sp, #0]
 8008630:	f1c0 001c 	rsb	r0, r0, #28
 8008634:	4403      	add	r3, r0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	9b06      	ldr	r3, [sp, #24]
 800863a:	4403      	add	r3, r0
 800863c:	4406      	add	r6, r0
 800863e:	9306      	str	r3, [sp, #24]
 8008640:	9b00      	ldr	r3, [sp, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd05      	ble.n	8008652 <_dtoa_r+0x83a>
 8008646:	9902      	ldr	r1, [sp, #8]
 8008648:	461a      	mov	r2, r3
 800864a:	4648      	mov	r0, r9
 800864c:	f000 fd04 	bl	8009058 <__lshift>
 8008650:	9002      	str	r0, [sp, #8]
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd05      	ble.n	8008664 <_dtoa_r+0x84c>
 8008658:	4621      	mov	r1, r4
 800865a:	461a      	mov	r2, r3
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fcfb 	bl	8009058 <__lshift>
 8008662:	4604      	mov	r4, r0
 8008664:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d061      	beq.n	800872e <_dtoa_r+0x916>
 800866a:	9802      	ldr	r0, [sp, #8]
 800866c:	4621      	mov	r1, r4
 800866e:	f000 fd5f 	bl	8009130 <__mcmp>
 8008672:	2800      	cmp	r0, #0
 8008674:	da5b      	bge.n	800872e <_dtoa_r+0x916>
 8008676:	2300      	movs	r3, #0
 8008678:	9902      	ldr	r1, [sp, #8]
 800867a:	220a      	movs	r2, #10
 800867c:	4648      	mov	r0, r9
 800867e:	f000 fafd 	bl	8008c7c <__multadd>
 8008682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	f107 38ff 	add.w	r8, r7, #4294967295
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8177 	beq.w	800897e <_dtoa_r+0xb66>
 8008690:	4629      	mov	r1, r5
 8008692:	2300      	movs	r3, #0
 8008694:	220a      	movs	r2, #10
 8008696:	4648      	mov	r0, r9
 8008698:	f000 faf0 	bl	8008c7c <__multadd>
 800869c:	f1bb 0f00 	cmp.w	fp, #0
 80086a0:	4605      	mov	r5, r0
 80086a2:	dc6f      	bgt.n	8008784 <_dtoa_r+0x96c>
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dc49      	bgt.n	800873e <_dtoa_r+0x926>
 80086aa:	e06b      	b.n	8008784 <_dtoa_r+0x96c>
 80086ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086b2:	e73c      	b.n	800852e <_dtoa_r+0x716>
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	40240000 	.word	0x40240000
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	1e5c      	subs	r4, r3, #1
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	db09      	blt.n	80086da <_dtoa_r+0x8c2>
 80086c6:	1b1c      	subs	r4, r3, r4
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f6bf af30 	bge.w	8008530 <_dtoa_r+0x718>
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	9a03      	ldr	r2, [sp, #12]
 80086d4:	1a9e      	subs	r6, r3, r2
 80086d6:	2300      	movs	r3, #0
 80086d8:	e72b      	b.n	8008532 <_dtoa_r+0x71a>
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086de:	9408      	str	r4, [sp, #32]
 80086e0:	1ae3      	subs	r3, r4, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	9e00      	ldr	r6, [sp, #0]
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80086ea:	2400      	movs	r4, #0
 80086ec:	e721      	b.n	8008532 <_dtoa_r+0x71a>
 80086ee:	9c08      	ldr	r4, [sp, #32]
 80086f0:	9e00      	ldr	r6, [sp, #0]
 80086f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80086f4:	e728      	b.n	8008548 <_dtoa_r+0x730>
 80086f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80086fa:	e751      	b.n	80085a0 <_dtoa_r+0x788>
 80086fc:	9a08      	ldr	r2, [sp, #32]
 80086fe:	9902      	ldr	r1, [sp, #8]
 8008700:	e750      	b.n	80085a4 <_dtoa_r+0x78c>
 8008702:	f8cd 8008 	str.w	r8, [sp, #8]
 8008706:	e751      	b.n	80085ac <_dtoa_r+0x794>
 8008708:	2300      	movs	r3, #0
 800870a:	e779      	b.n	8008600 <_dtoa_r+0x7e8>
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	e777      	b.n	8008600 <_dtoa_r+0x7e8>
 8008710:	2300      	movs	r3, #0
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	e779      	b.n	800860a <_dtoa_r+0x7f2>
 8008716:	d093      	beq.n	8008640 <_dtoa_r+0x828>
 8008718:	9a00      	ldr	r2, [sp, #0]
 800871a:	331c      	adds	r3, #28
 800871c:	441a      	add	r2, r3
 800871e:	9200      	str	r2, [sp, #0]
 8008720:	9a06      	ldr	r2, [sp, #24]
 8008722:	441a      	add	r2, r3
 8008724:	441e      	add	r6, r3
 8008726:	9206      	str	r2, [sp, #24]
 8008728:	e78a      	b.n	8008640 <_dtoa_r+0x828>
 800872a:	4603      	mov	r3, r0
 800872c:	e7f4      	b.n	8008718 <_dtoa_r+0x900>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	46b8      	mov	r8, r7
 8008734:	dc20      	bgt.n	8008778 <_dtoa_r+0x960>
 8008736:	469b      	mov	fp, r3
 8008738:	9b07      	ldr	r3, [sp, #28]
 800873a:	2b02      	cmp	r3, #2
 800873c:	dd1e      	ble.n	800877c <_dtoa_r+0x964>
 800873e:	f1bb 0f00 	cmp.w	fp, #0
 8008742:	f47f adb1 	bne.w	80082a8 <_dtoa_r+0x490>
 8008746:	4621      	mov	r1, r4
 8008748:	465b      	mov	r3, fp
 800874a:	2205      	movs	r2, #5
 800874c:	4648      	mov	r0, r9
 800874e:	f000 fa95 	bl	8008c7c <__multadd>
 8008752:	4601      	mov	r1, r0
 8008754:	4604      	mov	r4, r0
 8008756:	9802      	ldr	r0, [sp, #8]
 8008758:	f000 fcea 	bl	8009130 <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	f77f ada3 	ble.w	80082a8 <_dtoa_r+0x490>
 8008762:	4656      	mov	r6, sl
 8008764:	2331      	movs	r3, #49	@ 0x31
 8008766:	f806 3b01 	strb.w	r3, [r6], #1
 800876a:	f108 0801 	add.w	r8, r8, #1
 800876e:	e59f      	b.n	80082b0 <_dtoa_r+0x498>
 8008770:	9c03      	ldr	r4, [sp, #12]
 8008772:	46b8      	mov	r8, r7
 8008774:	4625      	mov	r5, r4
 8008776:	e7f4      	b.n	8008762 <_dtoa_r+0x94a>
 8008778:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800877c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 8101 	beq.w	8008986 <_dtoa_r+0xb6e>
 8008784:	2e00      	cmp	r6, #0
 8008786:	dd05      	ble.n	8008794 <_dtoa_r+0x97c>
 8008788:	4629      	mov	r1, r5
 800878a:	4632      	mov	r2, r6
 800878c:	4648      	mov	r0, r9
 800878e:	f000 fc63 	bl	8009058 <__lshift>
 8008792:	4605      	mov	r5, r0
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d05c      	beq.n	8008854 <_dtoa_r+0xa3c>
 800879a:	6869      	ldr	r1, [r5, #4]
 800879c:	4648      	mov	r0, r9
 800879e:	f000 fa0b 	bl	8008bb8 <_Balloc>
 80087a2:	4606      	mov	r6, r0
 80087a4:	b928      	cbnz	r0, 80087b2 <_dtoa_r+0x99a>
 80087a6:	4b82      	ldr	r3, [pc, #520]	@ (80089b0 <_dtoa_r+0xb98>)
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087ae:	f7ff bb4a 	b.w	8007e46 <_dtoa_r+0x2e>
 80087b2:	692a      	ldr	r2, [r5, #16]
 80087b4:	3202      	adds	r2, #2
 80087b6:	0092      	lsls	r2, r2, #2
 80087b8:	f105 010c 	add.w	r1, r5, #12
 80087bc:	300c      	adds	r0, #12
 80087be:	f002 fcc1 	bl	800b144 <memcpy>
 80087c2:	2201      	movs	r2, #1
 80087c4:	4631      	mov	r1, r6
 80087c6:	4648      	mov	r0, r9
 80087c8:	f000 fc46 	bl	8009058 <__lshift>
 80087cc:	f10a 0301 	add.w	r3, sl, #1
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	eb0a 030b 	add.w	r3, sl, fp
 80087d6:	9308      	str	r3, [sp, #32]
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	462f      	mov	r7, r5
 80087e0:	9306      	str	r3, [sp, #24]
 80087e2:	4605      	mov	r5, r0
 80087e4:	9b00      	ldr	r3, [sp, #0]
 80087e6:	9802      	ldr	r0, [sp, #8]
 80087e8:	4621      	mov	r1, r4
 80087ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80087ee:	f7ff fa8b 	bl	8007d08 <quorem>
 80087f2:	4603      	mov	r3, r0
 80087f4:	3330      	adds	r3, #48	@ 0x30
 80087f6:	9003      	str	r0, [sp, #12]
 80087f8:	4639      	mov	r1, r7
 80087fa:	9802      	ldr	r0, [sp, #8]
 80087fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fe:	f000 fc97 	bl	8009130 <__mcmp>
 8008802:	462a      	mov	r2, r5
 8008804:	9004      	str	r0, [sp, #16]
 8008806:	4621      	mov	r1, r4
 8008808:	4648      	mov	r0, r9
 800880a:	f000 fcad 	bl	8009168 <__mdiff>
 800880e:	68c2      	ldr	r2, [r0, #12]
 8008810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008812:	4606      	mov	r6, r0
 8008814:	bb02      	cbnz	r2, 8008858 <_dtoa_r+0xa40>
 8008816:	4601      	mov	r1, r0
 8008818:	9802      	ldr	r0, [sp, #8]
 800881a:	f000 fc89 	bl	8009130 <__mcmp>
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	4602      	mov	r2, r0
 8008822:	4631      	mov	r1, r6
 8008824:	4648      	mov	r0, r9
 8008826:	920c      	str	r2, [sp, #48]	@ 0x30
 8008828:	9309      	str	r3, [sp, #36]	@ 0x24
 800882a:	f000 fa05 	bl	8008c38 <_Bfree>
 800882e:	9b07      	ldr	r3, [sp, #28]
 8008830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008832:	9e00      	ldr	r6, [sp, #0]
 8008834:	ea42 0103 	orr.w	r1, r2, r3
 8008838:	9b06      	ldr	r3, [sp, #24]
 800883a:	4319      	orrs	r1, r3
 800883c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883e:	d10d      	bne.n	800885c <_dtoa_r+0xa44>
 8008840:	2b39      	cmp	r3, #57	@ 0x39
 8008842:	d027      	beq.n	8008894 <_dtoa_r+0xa7c>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	2a00      	cmp	r2, #0
 8008848:	dd01      	ble.n	800884e <_dtoa_r+0xa36>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	3331      	adds	r3, #49	@ 0x31
 800884e:	f88b 3000 	strb.w	r3, [fp]
 8008852:	e52e      	b.n	80082b2 <_dtoa_r+0x49a>
 8008854:	4628      	mov	r0, r5
 8008856:	e7b9      	b.n	80087cc <_dtoa_r+0x9b4>
 8008858:	2201      	movs	r2, #1
 800885a:	e7e2      	b.n	8008822 <_dtoa_r+0xa0a>
 800885c:	9904      	ldr	r1, [sp, #16]
 800885e:	2900      	cmp	r1, #0
 8008860:	db04      	blt.n	800886c <_dtoa_r+0xa54>
 8008862:	9807      	ldr	r0, [sp, #28]
 8008864:	4301      	orrs	r1, r0
 8008866:	9806      	ldr	r0, [sp, #24]
 8008868:	4301      	orrs	r1, r0
 800886a:	d120      	bne.n	80088ae <_dtoa_r+0xa96>
 800886c:	2a00      	cmp	r2, #0
 800886e:	ddee      	ble.n	800884e <_dtoa_r+0xa36>
 8008870:	9902      	ldr	r1, [sp, #8]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2201      	movs	r2, #1
 8008876:	4648      	mov	r0, r9
 8008878:	f000 fbee 	bl	8009058 <__lshift>
 800887c:	4621      	mov	r1, r4
 800887e:	9002      	str	r0, [sp, #8]
 8008880:	f000 fc56 	bl	8009130 <__mcmp>
 8008884:	2800      	cmp	r0, #0
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	dc02      	bgt.n	8008890 <_dtoa_r+0xa78>
 800888a:	d1e0      	bne.n	800884e <_dtoa_r+0xa36>
 800888c:	07da      	lsls	r2, r3, #31
 800888e:	d5de      	bpl.n	800884e <_dtoa_r+0xa36>
 8008890:	2b39      	cmp	r3, #57	@ 0x39
 8008892:	d1da      	bne.n	800884a <_dtoa_r+0xa32>
 8008894:	2339      	movs	r3, #57	@ 0x39
 8008896:	f88b 3000 	strb.w	r3, [fp]
 800889a:	4633      	mov	r3, r6
 800889c:	461e      	mov	r6, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088a4:	2a39      	cmp	r2, #57	@ 0x39
 80088a6:	d04e      	beq.n	8008946 <_dtoa_r+0xb2e>
 80088a8:	3201      	adds	r2, #1
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e501      	b.n	80082b2 <_dtoa_r+0x49a>
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	dd03      	ble.n	80088ba <_dtoa_r+0xaa2>
 80088b2:	2b39      	cmp	r3, #57	@ 0x39
 80088b4:	d0ee      	beq.n	8008894 <_dtoa_r+0xa7c>
 80088b6:	3301      	adds	r3, #1
 80088b8:	e7c9      	b.n	800884e <_dtoa_r+0xa36>
 80088ba:	9a00      	ldr	r2, [sp, #0]
 80088bc:	9908      	ldr	r1, [sp, #32]
 80088be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088c2:	428a      	cmp	r2, r1
 80088c4:	d028      	beq.n	8008918 <_dtoa_r+0xb00>
 80088c6:	9902      	ldr	r1, [sp, #8]
 80088c8:	2300      	movs	r3, #0
 80088ca:	220a      	movs	r2, #10
 80088cc:	4648      	mov	r0, r9
 80088ce:	f000 f9d5 	bl	8008c7c <__multadd>
 80088d2:	42af      	cmp	r7, r5
 80088d4:	9002      	str	r0, [sp, #8]
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	f04f 020a 	mov.w	r2, #10
 80088de:	4639      	mov	r1, r7
 80088e0:	4648      	mov	r0, r9
 80088e2:	d107      	bne.n	80088f4 <_dtoa_r+0xadc>
 80088e4:	f000 f9ca 	bl	8008c7c <__multadd>
 80088e8:	4607      	mov	r7, r0
 80088ea:	4605      	mov	r5, r0
 80088ec:	9b00      	ldr	r3, [sp, #0]
 80088ee:	3301      	adds	r3, #1
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	e777      	b.n	80087e4 <_dtoa_r+0x9cc>
 80088f4:	f000 f9c2 	bl	8008c7c <__multadd>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4607      	mov	r7, r0
 80088fc:	2300      	movs	r3, #0
 80088fe:	220a      	movs	r2, #10
 8008900:	4648      	mov	r0, r9
 8008902:	f000 f9bb 	bl	8008c7c <__multadd>
 8008906:	4605      	mov	r5, r0
 8008908:	e7f0      	b.n	80088ec <_dtoa_r+0xad4>
 800890a:	f1bb 0f00 	cmp.w	fp, #0
 800890e:	bfcc      	ite	gt
 8008910:	465e      	movgt	r6, fp
 8008912:	2601      	movle	r6, #1
 8008914:	4456      	add	r6, sl
 8008916:	2700      	movs	r7, #0
 8008918:	9902      	ldr	r1, [sp, #8]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2201      	movs	r2, #1
 800891e:	4648      	mov	r0, r9
 8008920:	f000 fb9a 	bl	8009058 <__lshift>
 8008924:	4621      	mov	r1, r4
 8008926:	9002      	str	r0, [sp, #8]
 8008928:	f000 fc02 	bl	8009130 <__mcmp>
 800892c:	2800      	cmp	r0, #0
 800892e:	dcb4      	bgt.n	800889a <_dtoa_r+0xa82>
 8008930:	d102      	bne.n	8008938 <_dtoa_r+0xb20>
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	07db      	lsls	r3, r3, #31
 8008936:	d4b0      	bmi.n	800889a <_dtoa_r+0xa82>
 8008938:	4633      	mov	r3, r6
 800893a:	461e      	mov	r6, r3
 800893c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008940:	2a30      	cmp	r2, #48	@ 0x30
 8008942:	d0fa      	beq.n	800893a <_dtoa_r+0xb22>
 8008944:	e4b5      	b.n	80082b2 <_dtoa_r+0x49a>
 8008946:	459a      	cmp	sl, r3
 8008948:	d1a8      	bne.n	800889c <_dtoa_r+0xa84>
 800894a:	2331      	movs	r3, #49	@ 0x31
 800894c:	f108 0801 	add.w	r8, r8, #1
 8008950:	f88a 3000 	strb.w	r3, [sl]
 8008954:	e4ad      	b.n	80082b2 <_dtoa_r+0x49a>
 8008956:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008958:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80089b4 <_dtoa_r+0xb9c>
 800895c:	b11b      	cbz	r3, 8008966 <_dtoa_r+0xb4e>
 800895e:	f10a 0308 	add.w	r3, sl, #8
 8008962:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	4650      	mov	r0, sl
 8008968:	b017      	add	sp, #92	@ 0x5c
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	9b07      	ldr	r3, [sp, #28]
 8008970:	2b01      	cmp	r3, #1
 8008972:	f77f ae2e 	ble.w	80085d2 <_dtoa_r+0x7ba>
 8008976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	2001      	movs	r0, #1
 800897c:	e64d      	b.n	800861a <_dtoa_r+0x802>
 800897e:	f1bb 0f00 	cmp.w	fp, #0
 8008982:	f77f aed9 	ble.w	8008738 <_dtoa_r+0x920>
 8008986:	4656      	mov	r6, sl
 8008988:	9802      	ldr	r0, [sp, #8]
 800898a:	4621      	mov	r1, r4
 800898c:	f7ff f9bc 	bl	8007d08 <quorem>
 8008990:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008994:	f806 3b01 	strb.w	r3, [r6], #1
 8008998:	eba6 020a 	sub.w	r2, r6, sl
 800899c:	4593      	cmp	fp, r2
 800899e:	ddb4      	ble.n	800890a <_dtoa_r+0xaf2>
 80089a0:	9902      	ldr	r1, [sp, #8]
 80089a2:	2300      	movs	r3, #0
 80089a4:	220a      	movs	r2, #10
 80089a6:	4648      	mov	r0, r9
 80089a8:	f000 f968 	bl	8008c7c <__multadd>
 80089ac:	9002      	str	r0, [sp, #8]
 80089ae:	e7eb      	b.n	8008988 <_dtoa_r+0xb70>
 80089b0:	0800bcaf 	.word	0x0800bcaf
 80089b4:	0800bc33 	.word	0x0800bc33

080089b8 <_free_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4605      	mov	r5, r0
 80089bc:	2900      	cmp	r1, #0
 80089be:	d041      	beq.n	8008a44 <_free_r+0x8c>
 80089c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c4:	1f0c      	subs	r4, r1, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfb8      	it	lt
 80089ca:	18e4      	addlt	r4, r4, r3
 80089cc:	f000 f8e8 	bl	8008ba0 <__malloc_lock>
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <_free_r+0x90>)
 80089d2:	6813      	ldr	r3, [r2, #0]
 80089d4:	b933      	cbnz	r3, 80089e4 <_free_r+0x2c>
 80089d6:	6063      	str	r3, [r4, #4]
 80089d8:	6014      	str	r4, [r2, #0]
 80089da:	4628      	mov	r0, r5
 80089dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e0:	f000 b8e4 	b.w	8008bac <__malloc_unlock>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d908      	bls.n	80089fa <_free_r+0x42>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	1821      	adds	r1, r4, r0
 80089ec:	428b      	cmp	r3, r1
 80089ee:	bf01      	itttt	eq
 80089f0:	6819      	ldreq	r1, [r3, #0]
 80089f2:	685b      	ldreq	r3, [r3, #4]
 80089f4:	1809      	addeq	r1, r1, r0
 80089f6:	6021      	streq	r1, [r4, #0]
 80089f8:	e7ed      	b.n	80089d6 <_free_r+0x1e>
 80089fa:	461a      	mov	r2, r3
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b10b      	cbz	r3, 8008a04 <_free_r+0x4c>
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d9fa      	bls.n	80089fa <_free_r+0x42>
 8008a04:	6811      	ldr	r1, [r2, #0]
 8008a06:	1850      	adds	r0, r2, r1
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d10b      	bne.n	8008a24 <_free_r+0x6c>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	4401      	add	r1, r0
 8008a10:	1850      	adds	r0, r2, r1
 8008a12:	4283      	cmp	r3, r0
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	d1e0      	bne.n	80089da <_free_r+0x22>
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	6053      	str	r3, [r2, #4]
 8008a1e:	4408      	add	r0, r1
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	e7da      	b.n	80089da <_free_r+0x22>
 8008a24:	d902      	bls.n	8008a2c <_free_r+0x74>
 8008a26:	230c      	movs	r3, #12
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	e7d6      	b.n	80089da <_free_r+0x22>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	1821      	adds	r1, r4, r0
 8008a30:	428b      	cmp	r3, r1
 8008a32:	bf04      	itt	eq
 8008a34:	6819      	ldreq	r1, [r3, #0]
 8008a36:	685b      	ldreq	r3, [r3, #4]
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	bf04      	itt	eq
 8008a3c:	1809      	addeq	r1, r1, r0
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	6054      	str	r4, [r2, #4]
 8008a42:	e7ca      	b.n	80089da <_free_r+0x22>
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	200007fc 	.word	0x200007fc

08008a4c <malloc>:
 8008a4c:	4b02      	ldr	r3, [pc, #8]	@ (8008a58 <malloc+0xc>)
 8008a4e:	4601      	mov	r1, r0
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f000 b825 	b.w	8008aa0 <_malloc_r>
 8008a56:	bf00      	nop
 8008a58:	20000034 	.word	0x20000034

08008a5c <sbrk_aligned>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a9c <sbrk_aligned+0x40>)
 8008a60:	460c      	mov	r4, r1
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	4605      	mov	r5, r0
 8008a66:	b911      	cbnz	r1, 8008a6e <sbrk_aligned+0x12>
 8008a68:	f002 fb5c 	bl	800b124 <_sbrk_r>
 8008a6c:	6030      	str	r0, [r6, #0]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f002 fb57 	bl	800b124 <_sbrk_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d103      	bne.n	8008a82 <sbrk_aligned+0x26>
 8008a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a7e:	4620      	mov	r0, r4
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d0f8      	beq.n	8008a7e <sbrk_aligned+0x22>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f002 fb48 	bl	800b124 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1f2      	bne.n	8008a7e <sbrk_aligned+0x22>
 8008a98:	e7ef      	b.n	8008a7a <sbrk_aligned+0x1e>
 8008a9a:	bf00      	nop
 8008a9c:	200007f8 	.word	0x200007f8

08008aa0 <_malloc_r>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d904      	bls.n	8008ac6 <_malloc_r+0x26>
 8008abc:	230c      	movs	r3, #12
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b9c <_malloc_r+0xfc>
 8008aca:	f000 f869 	bl	8008ba0 <__malloc_lock>
 8008ace:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	bb44      	cbnz	r4, 8008b28 <_malloc_r+0x88>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff ffbf 	bl	8008a5c <sbrk_aligned>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	d158      	bne.n	8008b96 <_malloc_r+0xf6>
 8008ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ae8:	4627      	mov	r7, r4
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	d143      	bne.n	8008b76 <_malloc_r+0xd6>
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d04b      	beq.n	8008b8a <_malloc_r+0xea>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	4639      	mov	r1, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	eb04 0903 	add.w	r9, r4, r3
 8008afc:	f002 fb12 	bl	800b124 <_sbrk_r>
 8008b00:	4581      	cmp	r9, r0
 8008b02:	d142      	bne.n	8008b8a <_malloc_r+0xea>
 8008b04:	6821      	ldr	r1, [r4, #0]
 8008b06:	1a6d      	subs	r5, r5, r1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffa6 	bl	8008a5c <sbrk_aligned>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d03a      	beq.n	8008b8a <_malloc_r+0xea>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	442b      	add	r3, r5
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	bb62      	cbnz	r2, 8008b7c <_malloc_r+0xdc>
 8008b22:	f8c8 7000 	str.w	r7, [r8]
 8008b26:	e00f      	b.n	8008b48 <_malloc_r+0xa8>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	1b52      	subs	r2, r2, r5
 8008b2c:	d420      	bmi.n	8008b70 <_malloc_r+0xd0>
 8008b2e:	2a0b      	cmp	r2, #11
 8008b30:	d917      	bls.n	8008b62 <_malloc_r+0xc2>
 8008b32:	1961      	adds	r1, r4, r5
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	6025      	str	r5, [r4, #0]
 8008b38:	bf18      	it	ne
 8008b3a:	6059      	strne	r1, [r3, #4]
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	bf08      	it	eq
 8008b40:	f8c8 1000 	streq.w	r1, [r8]
 8008b44:	5162      	str	r2, [r4, r5]
 8008b46:	604b      	str	r3, [r1, #4]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 f82f 	bl	8008bac <__malloc_unlock>
 8008b4e:	f104 000b 	add.w	r0, r4, #11
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	f020 0007 	bic.w	r0, r0, #7
 8008b58:	1ac2      	subs	r2, r0, r3
 8008b5a:	bf1c      	itt	ne
 8008b5c:	1a1b      	subne	r3, r3, r0
 8008b5e:	50a3      	strne	r3, [r4, r2]
 8008b60:	e7af      	b.n	8008ac2 <_malloc_r+0x22>
 8008b62:	6862      	ldr	r2, [r4, #4]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	bf0c      	ite	eq
 8008b68:	f8c8 2000 	streq.w	r2, [r8]
 8008b6c:	605a      	strne	r2, [r3, #4]
 8008b6e:	e7eb      	b.n	8008b48 <_malloc_r+0xa8>
 8008b70:	4623      	mov	r3, r4
 8008b72:	6864      	ldr	r4, [r4, #4]
 8008b74:	e7ae      	b.n	8008ad4 <_malloc_r+0x34>
 8008b76:	463c      	mov	r4, r7
 8008b78:	687f      	ldr	r7, [r7, #4]
 8008b7a:	e7b6      	b.n	8008aea <_malloc_r+0x4a>
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d1fb      	bne.n	8008b7c <_malloc_r+0xdc>
 8008b84:	2300      	movs	r3, #0
 8008b86:	6053      	str	r3, [r2, #4]
 8008b88:	e7de      	b.n	8008b48 <_malloc_r+0xa8>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f000 f80c 	bl	8008bac <__malloc_unlock>
 8008b94:	e794      	b.n	8008ac0 <_malloc_r+0x20>
 8008b96:	6005      	str	r5, [r0, #0]
 8008b98:	e7d6      	b.n	8008b48 <_malloc_r+0xa8>
 8008b9a:	bf00      	nop
 8008b9c:	200007fc 	.word	0x200007fc

08008ba0 <__malloc_lock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_lock+0x8>)
 8008ba2:	f7ff b8a0 	b.w	8007ce6 <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200007f4 	.word	0x200007f4

08008bac <__malloc_unlock>:
 8008bac:	4801      	ldr	r0, [pc, #4]	@ (8008bb4 <__malloc_unlock+0x8>)
 8008bae:	f7ff b89b 	b.w	8007ce8 <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	200007f4 	.word	0x200007f4

08008bb8 <_Balloc>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	69c6      	ldr	r6, [r0, #28]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	b976      	cbnz	r6, 8008be0 <_Balloc+0x28>
 8008bc2:	2010      	movs	r0, #16
 8008bc4:	f7ff ff42 	bl	8008a4c <malloc>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	61e0      	str	r0, [r4, #28]
 8008bcc:	b920      	cbnz	r0, 8008bd8 <_Balloc+0x20>
 8008bce:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <_Balloc+0x78>)
 8008bd0:	4818      	ldr	r0, [pc, #96]	@ (8008c34 <_Balloc+0x7c>)
 8008bd2:	216b      	movs	r1, #107	@ 0x6b
 8008bd4:	f002 facc 	bl	800b170 <__assert_func>
 8008bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bdc:	6006      	str	r6, [r0, #0]
 8008bde:	60c6      	str	r6, [r0, #12]
 8008be0:	69e6      	ldr	r6, [r4, #28]
 8008be2:	68f3      	ldr	r3, [r6, #12]
 8008be4:	b183      	cbz	r3, 8008c08 <_Balloc+0x50>
 8008be6:	69e3      	ldr	r3, [r4, #28]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bee:	b9b8      	cbnz	r0, 8008c20 <_Balloc+0x68>
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bf6:	1d72      	adds	r2, r6, #5
 8008bf8:	0092      	lsls	r2, r2, #2
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f002 fad6 	bl	800b1ac <_calloc_r>
 8008c00:	b160      	cbz	r0, 8008c1c <_Balloc+0x64>
 8008c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c06:	e00e      	b.n	8008c26 <_Balloc+0x6e>
 8008c08:	2221      	movs	r2, #33	@ 0x21
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f002 facd 	bl	800b1ac <_calloc_r>
 8008c12:	69e3      	ldr	r3, [r4, #28]
 8008c14:	60f0      	str	r0, [r6, #12]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e4      	bne.n	8008be6 <_Balloc+0x2e>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c26:	2300      	movs	r3, #0
 8008c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c2c:	e7f7      	b.n	8008c1e <_Balloc+0x66>
 8008c2e:	bf00      	nop
 8008c30:	0800bc40 	.word	0x0800bc40
 8008c34:	0800bcc0 	.word	0x0800bcc0

08008c38 <_Bfree>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	69c6      	ldr	r6, [r0, #28]
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b976      	cbnz	r6, 8008c60 <_Bfree+0x28>
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff ff02 	bl	8008a4c <malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	61e8      	str	r0, [r5, #28]
 8008c4c:	b920      	cbnz	r0, 8008c58 <_Bfree+0x20>
 8008c4e:	4b09      	ldr	r3, [pc, #36]	@ (8008c74 <_Bfree+0x3c>)
 8008c50:	4809      	ldr	r0, [pc, #36]	@ (8008c78 <_Bfree+0x40>)
 8008c52:	218f      	movs	r1, #143	@ 0x8f
 8008c54:	f002 fa8c 	bl	800b170 <__assert_func>
 8008c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c5c:	6006      	str	r6, [r0, #0]
 8008c5e:	60c6      	str	r6, [r0, #12]
 8008c60:	b13c      	cbz	r4, 8008c72 <_Bfree+0x3a>
 8008c62:	69eb      	ldr	r3, [r5, #28]
 8008c64:	6862      	ldr	r2, [r4, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c6c:	6021      	str	r1, [r4, #0]
 8008c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	0800bc40 	.word	0x0800bc40
 8008c78:	0800bcc0 	.word	0x0800bcc0

08008c7c <__multadd>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	690d      	ldr	r5, [r1, #16]
 8008c82:	4607      	mov	r7, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	461e      	mov	r6, r3
 8008c88:	f101 0c14 	add.w	ip, r1, #20
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c92:	b299      	uxth	r1, r3
 8008c94:	fb02 6101 	mla	r1, r2, r1, r6
 8008c98:	0c1e      	lsrs	r6, r3, #16
 8008c9a:	0c0b      	lsrs	r3, r1, #16
 8008c9c:	fb02 3306 	mla	r3, r2, r6, r3
 8008ca0:	b289      	uxth	r1, r1
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ca8:	4285      	cmp	r5, r0
 8008caa:	f84c 1b04 	str.w	r1, [ip], #4
 8008cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cb2:	dcec      	bgt.n	8008c8e <__multadd+0x12>
 8008cb4:	b30e      	cbz	r6, 8008cfa <__multadd+0x7e>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dc19      	bgt.n	8008cf0 <__multadd+0x74>
 8008cbc:	6861      	ldr	r1, [r4, #4]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	f7ff ff79 	bl	8008bb8 <_Balloc>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <__multadd+0x5a>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <__multadd+0x84>)
 8008cce:	480d      	ldr	r0, [pc, #52]	@ (8008d04 <__multadd+0x88>)
 8008cd0:	21ba      	movs	r1, #186	@ 0xba
 8008cd2:	f002 fa4d 	bl	800b170 <__assert_func>
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	3202      	adds	r2, #2
 8008cda:	f104 010c 	add.w	r1, r4, #12
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f002 fa2f 	bl	800b144 <memcpy>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ffa5 	bl	8008c38 <_Bfree>
 8008cee:	4644      	mov	r4, r8
 8008cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	615e      	str	r6, [r3, #20]
 8008cf8:	6125      	str	r5, [r4, #16]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	0800bcaf 	.word	0x0800bcaf
 8008d04:	0800bcc0 	.word	0x0800bcc0

08008d08 <__s2b>:
 8008d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	4615      	mov	r5, r2
 8008d10:	461f      	mov	r7, r3
 8008d12:	2209      	movs	r2, #9
 8008d14:	3308      	adds	r3, #8
 8008d16:	4606      	mov	r6, r0
 8008d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	2201      	movs	r2, #1
 8008d20:	429a      	cmp	r2, r3
 8008d22:	db09      	blt.n	8008d38 <__s2b+0x30>
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ff47 	bl	8008bb8 <_Balloc>
 8008d2a:	b940      	cbnz	r0, 8008d3e <__s2b+0x36>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	4b19      	ldr	r3, [pc, #100]	@ (8008d94 <__s2b+0x8c>)
 8008d30:	4819      	ldr	r0, [pc, #100]	@ (8008d98 <__s2b+0x90>)
 8008d32:	21d3      	movs	r1, #211	@ 0xd3
 8008d34:	f002 fa1c 	bl	800b170 <__assert_func>
 8008d38:	0052      	lsls	r2, r2, #1
 8008d3a:	3101      	adds	r1, #1
 8008d3c:	e7f0      	b.n	8008d20 <__s2b+0x18>
 8008d3e:	9b08      	ldr	r3, [sp, #32]
 8008d40:	6143      	str	r3, [r0, #20]
 8008d42:	2d09      	cmp	r5, #9
 8008d44:	f04f 0301 	mov.w	r3, #1
 8008d48:	6103      	str	r3, [r0, #16]
 8008d4a:	dd16      	ble.n	8008d7a <__s2b+0x72>
 8008d4c:	f104 0909 	add.w	r9, r4, #9
 8008d50:	46c8      	mov	r8, r9
 8008d52:	442c      	add	r4, r5
 8008d54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d58:	4601      	mov	r1, r0
 8008d5a:	3b30      	subs	r3, #48	@ 0x30
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ff8c 	bl	8008c7c <__multadd>
 8008d64:	45a0      	cmp	r8, r4
 8008d66:	d1f5      	bne.n	8008d54 <__s2b+0x4c>
 8008d68:	f1a5 0408 	sub.w	r4, r5, #8
 8008d6c:	444c      	add	r4, r9
 8008d6e:	1b2d      	subs	r5, r5, r4
 8008d70:	1963      	adds	r3, r4, r5
 8008d72:	42bb      	cmp	r3, r7
 8008d74:	db04      	blt.n	8008d80 <__s2b+0x78>
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	340a      	adds	r4, #10
 8008d7c:	2509      	movs	r5, #9
 8008d7e:	e7f6      	b.n	8008d6e <__s2b+0x66>
 8008d80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d84:	4601      	mov	r1, r0
 8008d86:	3b30      	subs	r3, #48	@ 0x30
 8008d88:	220a      	movs	r2, #10
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7ff ff76 	bl	8008c7c <__multadd>
 8008d90:	e7ee      	b.n	8008d70 <__s2b+0x68>
 8008d92:	bf00      	nop
 8008d94:	0800bcaf 	.word	0x0800bcaf
 8008d98:	0800bcc0 	.word	0x0800bcc0

08008d9c <__hi0bits>:
 8008d9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008da0:	4603      	mov	r3, r0
 8008da2:	bf36      	itet	cc
 8008da4:	0403      	lslcc	r3, r0, #16
 8008da6:	2000      	movcs	r0, #0
 8008da8:	2010      	movcc	r0, #16
 8008daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dae:	bf3c      	itt	cc
 8008db0:	021b      	lslcc	r3, r3, #8
 8008db2:	3008      	addcc	r0, #8
 8008db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db8:	bf3c      	itt	cc
 8008dba:	011b      	lslcc	r3, r3, #4
 8008dbc:	3004      	addcc	r0, #4
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc2:	bf3c      	itt	cc
 8008dc4:	009b      	lslcc	r3, r3, #2
 8008dc6:	3002      	addcc	r0, #2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db05      	blt.n	8008dd8 <__hi0bits+0x3c>
 8008dcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dd0:	f100 0001 	add.w	r0, r0, #1
 8008dd4:	bf08      	it	eq
 8008dd6:	2020      	moveq	r0, #32
 8008dd8:	4770      	bx	lr

08008dda <__lo0bits>:
 8008dda:	6803      	ldr	r3, [r0, #0]
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f013 0007 	ands.w	r0, r3, #7
 8008de2:	d00b      	beq.n	8008dfc <__lo0bits+0x22>
 8008de4:	07d9      	lsls	r1, r3, #31
 8008de6:	d421      	bmi.n	8008e2c <__lo0bits+0x52>
 8008de8:	0798      	lsls	r0, r3, #30
 8008dea:	bf49      	itett	mi
 8008dec:	085b      	lsrmi	r3, r3, #1
 8008dee:	089b      	lsrpl	r3, r3, #2
 8008df0:	2001      	movmi	r0, #1
 8008df2:	6013      	strmi	r3, [r2, #0]
 8008df4:	bf5c      	itt	pl
 8008df6:	6013      	strpl	r3, [r2, #0]
 8008df8:	2002      	movpl	r0, #2
 8008dfa:	4770      	bx	lr
 8008dfc:	b299      	uxth	r1, r3
 8008dfe:	b909      	cbnz	r1, 8008e04 <__lo0bits+0x2a>
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	2010      	movs	r0, #16
 8008e04:	b2d9      	uxtb	r1, r3
 8008e06:	b909      	cbnz	r1, 8008e0c <__lo0bits+0x32>
 8008e08:	3008      	adds	r0, #8
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	0719      	lsls	r1, r3, #28
 8008e0e:	bf04      	itt	eq
 8008e10:	091b      	lsreq	r3, r3, #4
 8008e12:	3004      	addeq	r0, #4
 8008e14:	0799      	lsls	r1, r3, #30
 8008e16:	bf04      	itt	eq
 8008e18:	089b      	lsreq	r3, r3, #2
 8008e1a:	3002      	addeq	r0, #2
 8008e1c:	07d9      	lsls	r1, r3, #31
 8008e1e:	d403      	bmi.n	8008e28 <__lo0bits+0x4e>
 8008e20:	085b      	lsrs	r3, r3, #1
 8008e22:	f100 0001 	add.w	r0, r0, #1
 8008e26:	d003      	beq.n	8008e30 <__lo0bits+0x56>
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4770      	bx	lr
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4770      	bx	lr
 8008e30:	2020      	movs	r0, #32
 8008e32:	4770      	bx	lr

08008e34 <__i2b>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f7ff febd 	bl	8008bb8 <_Balloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__i2b+0x1a>
 8008e42:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <__i2b+0x24>)
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <__i2b+0x28>)
 8008e46:	f240 1145 	movw	r1, #325	@ 0x145
 8008e4a:	f002 f991 	bl	800b170 <__assert_func>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	6144      	str	r4, [r0, #20]
 8008e52:	6103      	str	r3, [r0, #16]
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	0800bcaf 	.word	0x0800bcaf
 8008e5c:	0800bcc0 	.word	0x0800bcc0

08008e60 <__multiply>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4617      	mov	r7, r2
 8008e66:	690a      	ldr	r2, [r1, #16]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	bfa8      	it	ge
 8008e6e:	463b      	movge	r3, r7
 8008e70:	4689      	mov	r9, r1
 8008e72:	bfa4      	itt	ge
 8008e74:	460f      	movge	r7, r1
 8008e76:	4699      	movge	r9, r3
 8008e78:	693d      	ldr	r5, [r7, #16]
 8008e7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	eb05 060a 	add.w	r6, r5, sl
 8008e86:	42b3      	cmp	r3, r6
 8008e88:	b085      	sub	sp, #20
 8008e8a:	bfb8      	it	lt
 8008e8c:	3101      	addlt	r1, #1
 8008e8e:	f7ff fe93 	bl	8008bb8 <_Balloc>
 8008e92:	b930      	cbnz	r0, 8008ea2 <__multiply+0x42>
 8008e94:	4602      	mov	r2, r0
 8008e96:	4b41      	ldr	r3, [pc, #260]	@ (8008f9c <__multiply+0x13c>)
 8008e98:	4841      	ldr	r0, [pc, #260]	@ (8008fa0 <__multiply+0x140>)
 8008e9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e9e:	f002 f967 	bl	800b170 <__assert_func>
 8008ea2:	f100 0414 	add.w	r4, r0, #20
 8008ea6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008eaa:	4623      	mov	r3, r4
 8008eac:	2200      	movs	r2, #0
 8008eae:	4573      	cmp	r3, lr
 8008eb0:	d320      	bcc.n	8008ef4 <__multiply+0x94>
 8008eb2:	f107 0814 	add.w	r8, r7, #20
 8008eb6:	f109 0114 	add.w	r1, r9, #20
 8008eba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ebe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	1beb      	subs	r3, r5, r7
 8008ec6:	3b15      	subs	r3, #21
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	3304      	adds	r3, #4
 8008ece:	3715      	adds	r7, #21
 8008ed0:	42bd      	cmp	r5, r7
 8008ed2:	bf38      	it	cc
 8008ed4:	2304      	movcc	r3, #4
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	9103      	str	r1, [sp, #12]
 8008edc:	428b      	cmp	r3, r1
 8008ede:	d80c      	bhi.n	8008efa <__multiply+0x9a>
 8008ee0:	2e00      	cmp	r6, #0
 8008ee2:	dd03      	ble.n	8008eec <__multiply+0x8c>
 8008ee4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d055      	beq.n	8008f98 <__multiply+0x138>
 8008eec:	6106      	str	r6, [r0, #16]
 8008eee:	b005      	add	sp, #20
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	f843 2b04 	str.w	r2, [r3], #4
 8008ef8:	e7d9      	b.n	8008eae <__multiply+0x4e>
 8008efa:	f8b1 a000 	ldrh.w	sl, [r1]
 8008efe:	f1ba 0f00 	cmp.w	sl, #0
 8008f02:	d01f      	beq.n	8008f44 <__multiply+0xe4>
 8008f04:	46c4      	mov	ip, r8
 8008f06:	46a1      	mov	r9, r4
 8008f08:	2700      	movs	r7, #0
 8008f0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f0e:	f8d9 3000 	ldr.w	r3, [r9]
 8008f12:	fa1f fb82 	uxth.w	fp, r2
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f1c:	443b      	add	r3, r7
 8008f1e:	f8d9 7000 	ldr.w	r7, [r9]
 8008f22:	0c12      	lsrs	r2, r2, #16
 8008f24:	0c3f      	lsrs	r7, r7, #16
 8008f26:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f34:	4565      	cmp	r5, ip
 8008f36:	f849 3b04 	str.w	r3, [r9], #4
 8008f3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f3e:	d8e4      	bhi.n	8008f0a <__multiply+0xaa>
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	50e7      	str	r7, [r4, r3]
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f4a:	3104      	adds	r1, #4
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	d020      	beq.n	8008f94 <__multiply+0x134>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	4647      	mov	r7, r8
 8008f56:	46a4      	mov	ip, r4
 8008f58:	f04f 0a00 	mov.w	sl, #0
 8008f5c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f64:	fb09 220b 	mla	r2, r9, fp, r2
 8008f68:	4452      	add	r2, sl
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f70:	f84c 3b04 	str.w	r3, [ip], #4
 8008f74:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f7c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f80:	fb09 330a 	mla	r3, r9, sl, r3
 8008f84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f88:	42bd      	cmp	r5, r7
 8008f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f8e:	d8e5      	bhi.n	8008f5c <__multiply+0xfc>
 8008f90:	9a01      	ldr	r2, [sp, #4]
 8008f92:	50a3      	str	r3, [r4, r2]
 8008f94:	3404      	adds	r4, #4
 8008f96:	e79f      	b.n	8008ed8 <__multiply+0x78>
 8008f98:	3e01      	subs	r6, #1
 8008f9a:	e7a1      	b.n	8008ee0 <__multiply+0x80>
 8008f9c:	0800bcaf 	.word	0x0800bcaf
 8008fa0:	0800bcc0 	.word	0x0800bcc0

08008fa4 <__pow5mult>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	4615      	mov	r5, r2
 8008faa:	f012 0203 	ands.w	r2, r2, #3
 8008fae:	4607      	mov	r7, r0
 8008fb0:	460e      	mov	r6, r1
 8008fb2:	d007      	beq.n	8008fc4 <__pow5mult+0x20>
 8008fb4:	4c25      	ldr	r4, [pc, #148]	@ (800904c <__pow5mult+0xa8>)
 8008fb6:	3a01      	subs	r2, #1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fbe:	f7ff fe5d 	bl	8008c7c <__multadd>
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	10ad      	asrs	r5, r5, #2
 8008fc6:	d03d      	beq.n	8009044 <__pow5mult+0xa0>
 8008fc8:	69fc      	ldr	r4, [r7, #28]
 8008fca:	b97c      	cbnz	r4, 8008fec <__pow5mult+0x48>
 8008fcc:	2010      	movs	r0, #16
 8008fce:	f7ff fd3d 	bl	8008a4c <malloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	61f8      	str	r0, [r7, #28]
 8008fd6:	b928      	cbnz	r0, 8008fe4 <__pow5mult+0x40>
 8008fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009050 <__pow5mult+0xac>)
 8008fda:	481e      	ldr	r0, [pc, #120]	@ (8009054 <__pow5mult+0xb0>)
 8008fdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fe0:	f002 f8c6 	bl	800b170 <__assert_func>
 8008fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fe8:	6004      	str	r4, [r0, #0]
 8008fea:	60c4      	str	r4, [r0, #12]
 8008fec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ff4:	b94c      	cbnz	r4, 800900a <__pow5mult+0x66>
 8008ff6:	f240 2171 	movw	r1, #625	@ 0x271
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	f7ff ff1a 	bl	8008e34 <__i2b>
 8009000:	2300      	movs	r3, #0
 8009002:	f8c8 0008 	str.w	r0, [r8, #8]
 8009006:	4604      	mov	r4, r0
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	07eb      	lsls	r3, r5, #31
 8009010:	d50a      	bpl.n	8009028 <__pow5mult+0x84>
 8009012:	4631      	mov	r1, r6
 8009014:	4622      	mov	r2, r4
 8009016:	4638      	mov	r0, r7
 8009018:	f7ff ff22 	bl	8008e60 <__multiply>
 800901c:	4631      	mov	r1, r6
 800901e:	4680      	mov	r8, r0
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fe09 	bl	8008c38 <_Bfree>
 8009026:	4646      	mov	r6, r8
 8009028:	106d      	asrs	r5, r5, #1
 800902a:	d00b      	beq.n	8009044 <__pow5mult+0xa0>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	b938      	cbnz	r0, 8009040 <__pow5mult+0x9c>
 8009030:	4622      	mov	r2, r4
 8009032:	4621      	mov	r1, r4
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ff13 	bl	8008e60 <__multiply>
 800903a:	6020      	str	r0, [r4, #0]
 800903c:	f8c0 9000 	str.w	r9, [r0]
 8009040:	4604      	mov	r4, r0
 8009042:	e7e4      	b.n	800900e <__pow5mult+0x6a>
 8009044:	4630      	mov	r0, r6
 8009046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904a:	bf00      	nop
 800904c:	0800bdec 	.word	0x0800bdec
 8009050:	0800bc40 	.word	0x0800bc40
 8009054:	0800bcc0 	.word	0x0800bcc0

08009058 <__lshift>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	460c      	mov	r4, r1
 800905e:	6849      	ldr	r1, [r1, #4]
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	4607      	mov	r7, r0
 800906a:	4691      	mov	r9, r2
 800906c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009070:	f108 0601 	add.w	r6, r8, #1
 8009074:	42b3      	cmp	r3, r6
 8009076:	db0b      	blt.n	8009090 <__lshift+0x38>
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff fd9d 	bl	8008bb8 <_Balloc>
 800907e:	4605      	mov	r5, r0
 8009080:	b948      	cbnz	r0, 8009096 <__lshift+0x3e>
 8009082:	4602      	mov	r2, r0
 8009084:	4b28      	ldr	r3, [pc, #160]	@ (8009128 <__lshift+0xd0>)
 8009086:	4829      	ldr	r0, [pc, #164]	@ (800912c <__lshift+0xd4>)
 8009088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800908c:	f002 f870 	bl	800b170 <__assert_func>
 8009090:	3101      	adds	r1, #1
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	e7ee      	b.n	8009074 <__lshift+0x1c>
 8009096:	2300      	movs	r3, #0
 8009098:	f100 0114 	add.w	r1, r0, #20
 800909c:	f100 0210 	add.w	r2, r0, #16
 80090a0:	4618      	mov	r0, r3
 80090a2:	4553      	cmp	r3, sl
 80090a4:	db33      	blt.n	800910e <__lshift+0xb6>
 80090a6:	6920      	ldr	r0, [r4, #16]
 80090a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090ac:	f104 0314 	add.w	r3, r4, #20
 80090b0:	f019 091f 	ands.w	r9, r9, #31
 80090b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090bc:	d02b      	beq.n	8009116 <__lshift+0xbe>
 80090be:	f1c9 0e20 	rsb	lr, r9, #32
 80090c2:	468a      	mov	sl, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	fa00 f009 	lsl.w	r0, r0, r9
 80090cc:	4310      	orrs	r0, r2
 80090ce:	f84a 0b04 	str.w	r0, [sl], #4
 80090d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d6:	459c      	cmp	ip, r3
 80090d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090dc:	d8f3      	bhi.n	80090c6 <__lshift+0x6e>
 80090de:	ebac 0304 	sub.w	r3, ip, r4
 80090e2:	3b15      	subs	r3, #21
 80090e4:	f023 0303 	bic.w	r3, r3, #3
 80090e8:	3304      	adds	r3, #4
 80090ea:	f104 0015 	add.w	r0, r4, #21
 80090ee:	4560      	cmp	r0, ip
 80090f0:	bf88      	it	hi
 80090f2:	2304      	movhi	r3, #4
 80090f4:	50ca      	str	r2, [r1, r3]
 80090f6:	b10a      	cbz	r2, 80090fc <__lshift+0xa4>
 80090f8:	f108 0602 	add.w	r6, r8, #2
 80090fc:	3e01      	subs	r6, #1
 80090fe:	4638      	mov	r0, r7
 8009100:	612e      	str	r6, [r5, #16]
 8009102:	4621      	mov	r1, r4
 8009104:	f7ff fd98 	bl	8008c38 <_Bfree>
 8009108:	4628      	mov	r0, r5
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009112:	3301      	adds	r3, #1
 8009114:	e7c5      	b.n	80090a2 <__lshift+0x4a>
 8009116:	3904      	subs	r1, #4
 8009118:	f853 2b04 	ldr.w	r2, [r3], #4
 800911c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009120:	459c      	cmp	ip, r3
 8009122:	d8f9      	bhi.n	8009118 <__lshift+0xc0>
 8009124:	e7ea      	b.n	80090fc <__lshift+0xa4>
 8009126:	bf00      	nop
 8009128:	0800bcaf 	.word	0x0800bcaf
 800912c:	0800bcc0 	.word	0x0800bcc0

08009130 <__mcmp>:
 8009130:	690a      	ldr	r2, [r1, #16]
 8009132:	4603      	mov	r3, r0
 8009134:	6900      	ldr	r0, [r0, #16]
 8009136:	1a80      	subs	r0, r0, r2
 8009138:	b530      	push	{r4, r5, lr}
 800913a:	d10e      	bne.n	800915a <__mcmp+0x2a>
 800913c:	3314      	adds	r3, #20
 800913e:	3114      	adds	r1, #20
 8009140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800914c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009150:	4295      	cmp	r5, r2
 8009152:	d003      	beq.n	800915c <__mcmp+0x2c>
 8009154:	d205      	bcs.n	8009162 <__mcmp+0x32>
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	42a3      	cmp	r3, r4
 800915e:	d3f3      	bcc.n	8009148 <__mcmp+0x18>
 8009160:	e7fb      	b.n	800915a <__mcmp+0x2a>
 8009162:	2001      	movs	r0, #1
 8009164:	e7f9      	b.n	800915a <__mcmp+0x2a>
	...

08009168 <__mdiff>:
 8009168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	4689      	mov	r9, r1
 800916e:	4606      	mov	r6, r0
 8009170:	4611      	mov	r1, r2
 8009172:	4648      	mov	r0, r9
 8009174:	4614      	mov	r4, r2
 8009176:	f7ff ffdb 	bl	8009130 <__mcmp>
 800917a:	1e05      	subs	r5, r0, #0
 800917c:	d112      	bne.n	80091a4 <__mdiff+0x3c>
 800917e:	4629      	mov	r1, r5
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff fd19 	bl	8008bb8 <_Balloc>
 8009186:	4602      	mov	r2, r0
 8009188:	b928      	cbnz	r0, 8009196 <__mdiff+0x2e>
 800918a:	4b3f      	ldr	r3, [pc, #252]	@ (8009288 <__mdiff+0x120>)
 800918c:	f240 2137 	movw	r1, #567	@ 0x237
 8009190:	483e      	ldr	r0, [pc, #248]	@ (800928c <__mdiff+0x124>)
 8009192:	f001 ffed 	bl	800b170 <__assert_func>
 8009196:	2301      	movs	r3, #1
 8009198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800919c:	4610      	mov	r0, r2
 800919e:	b003      	add	sp, #12
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	bfbc      	itt	lt
 80091a6:	464b      	movlt	r3, r9
 80091a8:	46a1      	movlt	r9, r4
 80091aa:	4630      	mov	r0, r6
 80091ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091b0:	bfba      	itte	lt
 80091b2:	461c      	movlt	r4, r3
 80091b4:	2501      	movlt	r5, #1
 80091b6:	2500      	movge	r5, #0
 80091b8:	f7ff fcfe 	bl	8008bb8 <_Balloc>
 80091bc:	4602      	mov	r2, r0
 80091be:	b918      	cbnz	r0, 80091c8 <__mdiff+0x60>
 80091c0:	4b31      	ldr	r3, [pc, #196]	@ (8009288 <__mdiff+0x120>)
 80091c2:	f240 2145 	movw	r1, #581	@ 0x245
 80091c6:	e7e3      	b.n	8009190 <__mdiff+0x28>
 80091c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091cc:	6926      	ldr	r6, [r4, #16]
 80091ce:	60c5      	str	r5, [r0, #12]
 80091d0:	f109 0310 	add.w	r3, r9, #16
 80091d4:	f109 0514 	add.w	r5, r9, #20
 80091d8:	f104 0e14 	add.w	lr, r4, #20
 80091dc:	f100 0b14 	add.w	fp, r0, #20
 80091e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	46d9      	mov	r9, fp
 80091ec:	f04f 0c00 	mov.w	ip, #0
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	fa1f f38a 	uxth.w	r3, sl
 8009200:	4619      	mov	r1, r3
 8009202:	b283      	uxth	r3, r0
 8009204:	1acb      	subs	r3, r1, r3
 8009206:	0c00      	lsrs	r0, r0, #16
 8009208:	4463      	add	r3, ip
 800920a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800920e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009212:	b29b      	uxth	r3, r3
 8009214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009218:	4576      	cmp	r6, lr
 800921a:	f849 3b04 	str.w	r3, [r9], #4
 800921e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009222:	d8e5      	bhi.n	80091f0 <__mdiff+0x88>
 8009224:	1b33      	subs	r3, r6, r4
 8009226:	3b15      	subs	r3, #21
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	3415      	adds	r4, #21
 800922e:	3304      	adds	r3, #4
 8009230:	42a6      	cmp	r6, r4
 8009232:	bf38      	it	cc
 8009234:	2304      	movcc	r3, #4
 8009236:	441d      	add	r5, r3
 8009238:	445b      	add	r3, fp
 800923a:	461e      	mov	r6, r3
 800923c:	462c      	mov	r4, r5
 800923e:	4544      	cmp	r4, r8
 8009240:	d30e      	bcc.n	8009260 <__mdiff+0xf8>
 8009242:	f108 0103 	add.w	r1, r8, #3
 8009246:	1b49      	subs	r1, r1, r5
 8009248:	f021 0103 	bic.w	r1, r1, #3
 800924c:	3d03      	subs	r5, #3
 800924e:	45a8      	cmp	r8, r5
 8009250:	bf38      	it	cc
 8009252:	2100      	movcc	r1, #0
 8009254:	440b      	add	r3, r1
 8009256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800925a:	b191      	cbz	r1, 8009282 <__mdiff+0x11a>
 800925c:	6117      	str	r7, [r2, #16]
 800925e:	e79d      	b.n	800919c <__mdiff+0x34>
 8009260:	f854 1b04 	ldr.w	r1, [r4], #4
 8009264:	46e6      	mov	lr, ip
 8009266:	0c08      	lsrs	r0, r1, #16
 8009268:	fa1c fc81 	uxtah	ip, ip, r1
 800926c:	4471      	add	r1, lr
 800926e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009272:	b289      	uxth	r1, r1
 8009274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009278:	f846 1b04 	str.w	r1, [r6], #4
 800927c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009280:	e7dd      	b.n	800923e <__mdiff+0xd6>
 8009282:	3f01      	subs	r7, #1
 8009284:	e7e7      	b.n	8009256 <__mdiff+0xee>
 8009286:	bf00      	nop
 8009288:	0800bcaf 	.word	0x0800bcaf
 800928c:	0800bcc0 	.word	0x0800bcc0

08009290 <__ulp>:
 8009290:	b082      	sub	sp, #8
 8009292:	ed8d 0b00 	vstr	d0, [sp]
 8009296:	9a01      	ldr	r2, [sp, #4]
 8009298:	4b0f      	ldr	r3, [pc, #60]	@ (80092d8 <__ulp+0x48>)
 800929a:	4013      	ands	r3, r2
 800929c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dc08      	bgt.n	80092b6 <__ulp+0x26>
 80092a4:	425b      	negs	r3, r3
 80092a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092ae:	da04      	bge.n	80092ba <__ulp+0x2a>
 80092b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092b4:	4113      	asrs	r3, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	e008      	b.n	80092cc <__ulp+0x3c>
 80092ba:	f1a2 0314 	sub.w	r3, r2, #20
 80092be:	2b1e      	cmp	r3, #30
 80092c0:	bfda      	itte	le
 80092c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092c6:	40da      	lsrle	r2, r3
 80092c8:	2201      	movgt	r2, #1
 80092ca:	2300      	movs	r3, #0
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	ec41 0b10 	vmov	d0, r0, r1
 80092d4:	b002      	add	sp, #8
 80092d6:	4770      	bx	lr
 80092d8:	7ff00000 	.word	0x7ff00000

080092dc <__b2d>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	6906      	ldr	r6, [r0, #16]
 80092e2:	f100 0814 	add.w	r8, r0, #20
 80092e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092ea:	1f37      	subs	r7, r6, #4
 80092ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7ff fd53 	bl	8008d9c <__hi0bits>
 80092f6:	f1c0 0320 	rsb	r3, r0, #32
 80092fa:	280a      	cmp	r0, #10
 80092fc:	600b      	str	r3, [r1, #0]
 80092fe:	491b      	ldr	r1, [pc, #108]	@ (800936c <__b2d+0x90>)
 8009300:	dc15      	bgt.n	800932e <__b2d+0x52>
 8009302:	f1c0 0c0b 	rsb	ip, r0, #11
 8009306:	fa22 f30c 	lsr.w	r3, r2, ip
 800930a:	45b8      	cmp	r8, r7
 800930c:	ea43 0501 	orr.w	r5, r3, r1
 8009310:	bf34      	ite	cc
 8009312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009316:	2300      	movcs	r3, #0
 8009318:	3015      	adds	r0, #21
 800931a:	fa02 f000 	lsl.w	r0, r2, r0
 800931e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009322:	4303      	orrs	r3, r0
 8009324:	461c      	mov	r4, r3
 8009326:	ec45 4b10 	vmov	d0, r4, r5
 800932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932e:	45b8      	cmp	r8, r7
 8009330:	bf3a      	itte	cc
 8009332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009336:	f1a6 0708 	subcc.w	r7, r6, #8
 800933a:	2300      	movcs	r3, #0
 800933c:	380b      	subs	r0, #11
 800933e:	d012      	beq.n	8009366 <__b2d+0x8a>
 8009340:	f1c0 0120 	rsb	r1, r0, #32
 8009344:	fa23 f401 	lsr.w	r4, r3, r1
 8009348:	4082      	lsls	r2, r0
 800934a:	4322      	orrs	r2, r4
 800934c:	4547      	cmp	r7, r8
 800934e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009352:	bf8c      	ite	hi
 8009354:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009358:	2200      	movls	r2, #0
 800935a:	4083      	lsls	r3, r0
 800935c:	40ca      	lsrs	r2, r1
 800935e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009362:	4313      	orrs	r3, r2
 8009364:	e7de      	b.n	8009324 <__b2d+0x48>
 8009366:	ea42 0501 	orr.w	r5, r2, r1
 800936a:	e7db      	b.n	8009324 <__b2d+0x48>
 800936c:	3ff00000 	.word	0x3ff00000

08009370 <__d2b>:
 8009370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009374:	460f      	mov	r7, r1
 8009376:	2101      	movs	r1, #1
 8009378:	ec59 8b10 	vmov	r8, r9, d0
 800937c:	4616      	mov	r6, r2
 800937e:	f7ff fc1b 	bl	8008bb8 <_Balloc>
 8009382:	4604      	mov	r4, r0
 8009384:	b930      	cbnz	r0, 8009394 <__d2b+0x24>
 8009386:	4602      	mov	r2, r0
 8009388:	4b23      	ldr	r3, [pc, #140]	@ (8009418 <__d2b+0xa8>)
 800938a:	4824      	ldr	r0, [pc, #144]	@ (800941c <__d2b+0xac>)
 800938c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009390:	f001 feee 	bl	800b170 <__assert_func>
 8009394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800939c:	b10d      	cbz	r5, 80093a2 <__d2b+0x32>
 800939e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	f1b8 0300 	subs.w	r3, r8, #0
 80093a8:	d023      	beq.n	80093f2 <__d2b+0x82>
 80093aa:	4668      	mov	r0, sp
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	f7ff fd14 	bl	8008dda <__lo0bits>
 80093b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093b6:	b1d0      	cbz	r0, 80093ee <__d2b+0x7e>
 80093b8:	f1c0 0320 	rsb	r3, r0, #32
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
 80093c0:	430b      	orrs	r3, r1
 80093c2:	40c2      	lsrs	r2, r0
 80093c4:	6163      	str	r3, [r4, #20]
 80093c6:	9201      	str	r2, [sp, #4]
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	61a3      	str	r3, [r4, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bf0c      	ite	eq
 80093d0:	2201      	moveq	r2, #1
 80093d2:	2202      	movne	r2, #2
 80093d4:	6122      	str	r2, [r4, #16]
 80093d6:	b1a5      	cbz	r5, 8009402 <__d2b+0x92>
 80093d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093dc:	4405      	add	r5, r0
 80093de:	603d      	str	r5, [r7, #0]
 80093e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093e4:	6030      	str	r0, [r6, #0]
 80093e6:	4620      	mov	r0, r4
 80093e8:	b003      	add	sp, #12
 80093ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ee:	6161      	str	r1, [r4, #20]
 80093f0:	e7ea      	b.n	80093c8 <__d2b+0x58>
 80093f2:	a801      	add	r0, sp, #4
 80093f4:	f7ff fcf1 	bl	8008dda <__lo0bits>
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	6163      	str	r3, [r4, #20]
 80093fc:	3020      	adds	r0, #32
 80093fe:	2201      	movs	r2, #1
 8009400:	e7e8      	b.n	80093d4 <__d2b+0x64>
 8009402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009406:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800940a:	6038      	str	r0, [r7, #0]
 800940c:	6918      	ldr	r0, [r3, #16]
 800940e:	f7ff fcc5 	bl	8008d9c <__hi0bits>
 8009412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009416:	e7e5      	b.n	80093e4 <__d2b+0x74>
 8009418:	0800bcaf 	.word	0x0800bcaf
 800941c:	0800bcc0 	.word	0x0800bcc0

08009420 <__ratio>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b085      	sub	sp, #20
 8009426:	e9cd 1000 	strd	r1, r0, [sp]
 800942a:	a902      	add	r1, sp, #8
 800942c:	f7ff ff56 	bl	80092dc <__b2d>
 8009430:	9800      	ldr	r0, [sp, #0]
 8009432:	a903      	add	r1, sp, #12
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	f7ff ff50 	bl	80092dc <__b2d>
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	6919      	ldr	r1, [r3, #16]
 8009440:	9b00      	ldr	r3, [sp, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	1ac9      	subs	r1, r1, r3
 8009446:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800944a:	1a9b      	subs	r3, r3, r2
 800944c:	ec5b ab10 	vmov	sl, fp, d0
 8009450:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfce      	itee	gt
 8009458:	462a      	movgt	r2, r5
 800945a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800945e:	465a      	movle	r2, fp
 8009460:	462f      	mov	r7, r5
 8009462:	46d9      	mov	r9, fp
 8009464:	bfcc      	ite	gt
 8009466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800946a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800946e:	464b      	mov	r3, r9
 8009470:	4652      	mov	r2, sl
 8009472:	4620      	mov	r0, r4
 8009474:	4639      	mov	r1, r7
 8009476:	f7f7 f9f9 	bl	800086c <__aeabi_ddiv>
 800947a:	ec41 0b10 	vmov	d0, r0, r1
 800947e:	b005      	add	sp, #20
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009484 <__copybits>:
 8009484:	3901      	subs	r1, #1
 8009486:	b570      	push	{r4, r5, r6, lr}
 8009488:	1149      	asrs	r1, r1, #5
 800948a:	6914      	ldr	r4, [r2, #16]
 800948c:	3101      	adds	r1, #1
 800948e:	f102 0314 	add.w	r3, r2, #20
 8009492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800949a:	1f05      	subs	r5, r0, #4
 800949c:	42a3      	cmp	r3, r4
 800949e:	d30c      	bcc.n	80094ba <__copybits+0x36>
 80094a0:	1aa3      	subs	r3, r4, r2
 80094a2:	3b11      	subs	r3, #17
 80094a4:	f023 0303 	bic.w	r3, r3, #3
 80094a8:	3211      	adds	r2, #17
 80094aa:	42a2      	cmp	r2, r4
 80094ac:	bf88      	it	hi
 80094ae:	2300      	movhi	r3, #0
 80094b0:	4418      	add	r0, r3
 80094b2:	2300      	movs	r3, #0
 80094b4:	4288      	cmp	r0, r1
 80094b6:	d305      	bcc.n	80094c4 <__copybits+0x40>
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80094be:	f845 6f04 	str.w	r6, [r5, #4]!
 80094c2:	e7eb      	b.n	800949c <__copybits+0x18>
 80094c4:	f840 3b04 	str.w	r3, [r0], #4
 80094c8:	e7f4      	b.n	80094b4 <__copybits+0x30>

080094ca <__any_on>:
 80094ca:	f100 0214 	add.w	r2, r0, #20
 80094ce:	6900      	ldr	r0, [r0, #16]
 80094d0:	114b      	asrs	r3, r1, #5
 80094d2:	4298      	cmp	r0, r3
 80094d4:	b510      	push	{r4, lr}
 80094d6:	db11      	blt.n	80094fc <__any_on+0x32>
 80094d8:	dd0a      	ble.n	80094f0 <__any_on+0x26>
 80094da:	f011 011f 	ands.w	r1, r1, #31
 80094de:	d007      	beq.n	80094f0 <__any_on+0x26>
 80094e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094e4:	fa24 f001 	lsr.w	r0, r4, r1
 80094e8:	fa00 f101 	lsl.w	r1, r0, r1
 80094ec:	428c      	cmp	r4, r1
 80094ee:	d10b      	bne.n	8009508 <__any_on+0x3e>
 80094f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d803      	bhi.n	8009500 <__any_on+0x36>
 80094f8:	2000      	movs	r0, #0
 80094fa:	bd10      	pop	{r4, pc}
 80094fc:	4603      	mov	r3, r0
 80094fe:	e7f7      	b.n	80094f0 <__any_on+0x26>
 8009500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009504:	2900      	cmp	r1, #0
 8009506:	d0f5      	beq.n	80094f4 <__any_on+0x2a>
 8009508:	2001      	movs	r0, #1
 800950a:	e7f6      	b.n	80094fa <__any_on+0x30>

0800950c <sulp>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	ec45 4b10 	vmov	d0, r4, r5
 8009516:	4616      	mov	r6, r2
 8009518:	f7ff feba 	bl	8009290 <__ulp>
 800951c:	ec51 0b10 	vmov	r0, r1, d0
 8009520:	b17e      	cbz	r6, 8009542 <sulp+0x36>
 8009522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800952a:	2b00      	cmp	r3, #0
 800952c:	dd09      	ble.n	8009542 <sulp+0x36>
 800952e:	051b      	lsls	r3, r3, #20
 8009530:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009534:	2400      	movs	r4, #0
 8009536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800953a:	4622      	mov	r2, r4
 800953c:	462b      	mov	r3, r5
 800953e:	f7f7 f86b 	bl	8000618 <__aeabi_dmul>
 8009542:	ec41 0b10 	vmov	d0, r0, r1
 8009546:	bd70      	pop	{r4, r5, r6, pc}

08009548 <_strtod_l>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	b09f      	sub	sp, #124	@ 0x7c
 800954e:	460c      	mov	r4, r1
 8009550:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009552:	2200      	movs	r2, #0
 8009554:	921a      	str	r2, [sp, #104]	@ 0x68
 8009556:	9005      	str	r0, [sp, #20]
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	f04f 0b00 	mov.w	fp, #0
 8009560:	460a      	mov	r2, r1
 8009562:	9219      	str	r2, [sp, #100]	@ 0x64
 8009564:	7811      	ldrb	r1, [r2, #0]
 8009566:	292b      	cmp	r1, #43	@ 0x2b
 8009568:	d04a      	beq.n	8009600 <_strtod_l+0xb8>
 800956a:	d838      	bhi.n	80095de <_strtod_l+0x96>
 800956c:	290d      	cmp	r1, #13
 800956e:	d832      	bhi.n	80095d6 <_strtod_l+0x8e>
 8009570:	2908      	cmp	r1, #8
 8009572:	d832      	bhi.n	80095da <_strtod_l+0x92>
 8009574:	2900      	cmp	r1, #0
 8009576:	d03b      	beq.n	80095f0 <_strtod_l+0xa8>
 8009578:	2200      	movs	r2, #0
 800957a:	920e      	str	r2, [sp, #56]	@ 0x38
 800957c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800957e:	782a      	ldrb	r2, [r5, #0]
 8009580:	2a30      	cmp	r2, #48	@ 0x30
 8009582:	f040 80b2 	bne.w	80096ea <_strtod_l+0x1a2>
 8009586:	786a      	ldrb	r2, [r5, #1]
 8009588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800958c:	2a58      	cmp	r2, #88	@ 0x58
 800958e:	d16e      	bne.n	800966e <_strtod_l+0x126>
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	ab1a      	add	r3, sp, #104	@ 0x68
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4a8f      	ldr	r2, [pc, #572]	@ (80097d8 <_strtod_l+0x290>)
 800959c:	9805      	ldr	r0, [sp, #20]
 800959e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095a0:	a919      	add	r1, sp, #100	@ 0x64
 80095a2:	f001 fe7f 	bl	800b2a4 <__gethex>
 80095a6:	f010 060f 	ands.w	r6, r0, #15
 80095aa:	4604      	mov	r4, r0
 80095ac:	d005      	beq.n	80095ba <_strtod_l+0x72>
 80095ae:	2e06      	cmp	r6, #6
 80095b0:	d128      	bne.n	8009604 <_strtod_l+0xbc>
 80095b2:	3501      	adds	r5, #1
 80095b4:	2300      	movs	r3, #0
 80095b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80095b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80095ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 858e 	bne.w	800a0de <_strtod_l+0xb96>
 80095c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095c4:	b1cb      	cbz	r3, 80095fa <_strtod_l+0xb2>
 80095c6:	4652      	mov	r2, sl
 80095c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095cc:	ec43 2b10 	vmov	d0, r2, r3
 80095d0:	b01f      	add	sp, #124	@ 0x7c
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d6:	2920      	cmp	r1, #32
 80095d8:	d1ce      	bne.n	8009578 <_strtod_l+0x30>
 80095da:	3201      	adds	r2, #1
 80095dc:	e7c1      	b.n	8009562 <_strtod_l+0x1a>
 80095de:	292d      	cmp	r1, #45	@ 0x2d
 80095e0:	d1ca      	bne.n	8009578 <_strtod_l+0x30>
 80095e2:	2101      	movs	r1, #1
 80095e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80095e6:	1c51      	adds	r1, r2, #1
 80095e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80095ea:	7852      	ldrb	r2, [r2, #1]
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	d1c5      	bne.n	800957c <_strtod_l+0x34>
 80095f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f040 8570 	bne.w	800a0da <_strtod_l+0xb92>
 80095fa:	4652      	mov	r2, sl
 80095fc:	465b      	mov	r3, fp
 80095fe:	e7e5      	b.n	80095cc <_strtod_l+0x84>
 8009600:	2100      	movs	r1, #0
 8009602:	e7ef      	b.n	80095e4 <_strtod_l+0x9c>
 8009604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009606:	b13a      	cbz	r2, 8009618 <_strtod_l+0xd0>
 8009608:	2135      	movs	r1, #53	@ 0x35
 800960a:	a81c      	add	r0, sp, #112	@ 0x70
 800960c:	f7ff ff3a 	bl	8009484 <__copybits>
 8009610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009612:	9805      	ldr	r0, [sp, #20]
 8009614:	f7ff fb10 	bl	8008c38 <_Bfree>
 8009618:	3e01      	subs	r6, #1
 800961a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800961c:	2e04      	cmp	r6, #4
 800961e:	d806      	bhi.n	800962e <_strtod_l+0xe6>
 8009620:	e8df f006 	tbb	[pc, r6]
 8009624:	201d0314 	.word	0x201d0314
 8009628:	14          	.byte	0x14
 8009629:	00          	.byte	0x00
 800962a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800962e:	05e1      	lsls	r1, r4, #23
 8009630:	bf48      	it	mi
 8009632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800963a:	0d1b      	lsrs	r3, r3, #20
 800963c:	051b      	lsls	r3, r3, #20
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1bb      	bne.n	80095ba <_strtod_l+0x72>
 8009642:	f7fe fb25 	bl	8007c90 <__errno>
 8009646:	2322      	movs	r3, #34	@ 0x22
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e7b6      	b.n	80095ba <_strtod_l+0x72>
 800964c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800965c:	e7e7      	b.n	800962e <_strtod_l+0xe6>
 800965e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80097e0 <_strtod_l+0x298>
 8009662:	e7e4      	b.n	800962e <_strtod_l+0xe6>
 8009664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009668:	f04f 3aff 	mov.w	sl, #4294967295
 800966c:	e7df      	b.n	800962e <_strtod_l+0xe6>
 800966e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	9219      	str	r2, [sp, #100]	@ 0x64
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b30      	cmp	r3, #48	@ 0x30
 8009678:	d0f9      	beq.n	800966e <_strtod_l+0x126>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d09d      	beq.n	80095ba <_strtod_l+0x72>
 800967e:	2301      	movs	r3, #1
 8009680:	2700      	movs	r7, #0
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009686:	930c      	str	r3, [sp, #48]	@ 0x30
 8009688:	970b      	str	r7, [sp, #44]	@ 0x2c
 800968a:	46b9      	mov	r9, r7
 800968c:	220a      	movs	r2, #10
 800968e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009690:	7805      	ldrb	r5, [r0, #0]
 8009692:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009696:	b2d9      	uxtb	r1, r3
 8009698:	2909      	cmp	r1, #9
 800969a:	d928      	bls.n	80096ee <_strtod_l+0x1a6>
 800969c:	494f      	ldr	r1, [pc, #316]	@ (80097dc <_strtod_l+0x294>)
 800969e:	2201      	movs	r2, #1
 80096a0:	f001 fd0b 	bl	800b0ba <strncmp>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d032      	beq.n	800970e <_strtod_l+0x1c6>
 80096a8:	2000      	movs	r0, #0
 80096aa:	462a      	mov	r2, r5
 80096ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80096ae:	464d      	mov	r5, r9
 80096b0:	4603      	mov	r3, r0
 80096b2:	2a65      	cmp	r2, #101	@ 0x65
 80096b4:	d001      	beq.n	80096ba <_strtod_l+0x172>
 80096b6:	2a45      	cmp	r2, #69	@ 0x45
 80096b8:	d114      	bne.n	80096e4 <_strtod_l+0x19c>
 80096ba:	b91d      	cbnz	r5, 80096c4 <_strtod_l+0x17c>
 80096bc:	9a08      	ldr	r2, [sp, #32]
 80096be:	4302      	orrs	r2, r0
 80096c0:	d096      	beq.n	80095f0 <_strtod_l+0xa8>
 80096c2:	2500      	movs	r5, #0
 80096c4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096c6:	1c62      	adds	r2, r4, #1
 80096c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096ca:	7862      	ldrb	r2, [r4, #1]
 80096cc:	2a2b      	cmp	r2, #43	@ 0x2b
 80096ce:	d07a      	beq.n	80097c6 <_strtod_l+0x27e>
 80096d0:	2a2d      	cmp	r2, #45	@ 0x2d
 80096d2:	d07e      	beq.n	80097d2 <_strtod_l+0x28a>
 80096d4:	f04f 0c00 	mov.w	ip, #0
 80096d8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096dc:	2909      	cmp	r1, #9
 80096de:	f240 8085 	bls.w	80097ec <_strtod_l+0x2a4>
 80096e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80096e4:	f04f 0800 	mov.w	r8, #0
 80096e8:	e0a5      	b.n	8009836 <_strtod_l+0x2ee>
 80096ea:	2300      	movs	r3, #0
 80096ec:	e7c8      	b.n	8009680 <_strtod_l+0x138>
 80096ee:	f1b9 0f08 	cmp.w	r9, #8
 80096f2:	bfd8      	it	le
 80096f4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80096f6:	f100 0001 	add.w	r0, r0, #1
 80096fa:	bfda      	itte	le
 80096fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009700:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009702:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009706:	f109 0901 	add.w	r9, r9, #1
 800970a:	9019      	str	r0, [sp, #100]	@ 0x64
 800970c:	e7bf      	b.n	800968e <_strtod_l+0x146>
 800970e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	9219      	str	r2, [sp, #100]	@ 0x64
 8009714:	785a      	ldrb	r2, [r3, #1]
 8009716:	f1b9 0f00 	cmp.w	r9, #0
 800971a:	d03b      	beq.n	8009794 <_strtod_l+0x24c>
 800971c:	900a      	str	r0, [sp, #40]	@ 0x28
 800971e:	464d      	mov	r5, r9
 8009720:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009724:	2b09      	cmp	r3, #9
 8009726:	d912      	bls.n	800974e <_strtod_l+0x206>
 8009728:	2301      	movs	r3, #1
 800972a:	e7c2      	b.n	80096b2 <_strtod_l+0x16a>
 800972c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	9219      	str	r2, [sp, #100]	@ 0x64
 8009732:	785a      	ldrb	r2, [r3, #1]
 8009734:	3001      	adds	r0, #1
 8009736:	2a30      	cmp	r2, #48	@ 0x30
 8009738:	d0f8      	beq.n	800972c <_strtod_l+0x1e4>
 800973a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800973e:	2b08      	cmp	r3, #8
 8009740:	f200 84d2 	bhi.w	800a0e8 <_strtod_l+0xba0>
 8009744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009746:	900a      	str	r0, [sp, #40]	@ 0x28
 8009748:	2000      	movs	r0, #0
 800974a:	930c      	str	r3, [sp, #48]	@ 0x30
 800974c:	4605      	mov	r5, r0
 800974e:	3a30      	subs	r2, #48	@ 0x30
 8009750:	f100 0301 	add.w	r3, r0, #1
 8009754:	d018      	beq.n	8009788 <_strtod_l+0x240>
 8009756:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009758:	4419      	add	r1, r3
 800975a:	910a      	str	r1, [sp, #40]	@ 0x28
 800975c:	462e      	mov	r6, r5
 800975e:	f04f 0e0a 	mov.w	lr, #10
 8009762:	1c71      	adds	r1, r6, #1
 8009764:	eba1 0c05 	sub.w	ip, r1, r5
 8009768:	4563      	cmp	r3, ip
 800976a:	dc15      	bgt.n	8009798 <_strtod_l+0x250>
 800976c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009770:	182b      	adds	r3, r5, r0
 8009772:	2b08      	cmp	r3, #8
 8009774:	f105 0501 	add.w	r5, r5, #1
 8009778:	4405      	add	r5, r0
 800977a:	dc1a      	bgt.n	80097b2 <_strtod_l+0x26a>
 800977c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800977e:	230a      	movs	r3, #10
 8009780:	fb03 2301 	mla	r3, r3, r1, r2
 8009784:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009786:	2300      	movs	r3, #0
 8009788:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800978a:	1c51      	adds	r1, r2, #1
 800978c:	9119      	str	r1, [sp, #100]	@ 0x64
 800978e:	7852      	ldrb	r2, [r2, #1]
 8009790:	4618      	mov	r0, r3
 8009792:	e7c5      	b.n	8009720 <_strtod_l+0x1d8>
 8009794:	4648      	mov	r0, r9
 8009796:	e7ce      	b.n	8009736 <_strtod_l+0x1ee>
 8009798:	2e08      	cmp	r6, #8
 800979a:	dc05      	bgt.n	80097a8 <_strtod_l+0x260>
 800979c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800979e:	fb0e f606 	mul.w	r6, lr, r6
 80097a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80097a4:	460e      	mov	r6, r1
 80097a6:	e7dc      	b.n	8009762 <_strtod_l+0x21a>
 80097a8:	2910      	cmp	r1, #16
 80097aa:	bfd8      	it	le
 80097ac:	fb0e f707 	mulle.w	r7, lr, r7
 80097b0:	e7f8      	b.n	80097a4 <_strtod_l+0x25c>
 80097b2:	2b0f      	cmp	r3, #15
 80097b4:	bfdc      	itt	le
 80097b6:	230a      	movle	r3, #10
 80097b8:	fb03 2707 	mlale	r7, r3, r7, r2
 80097bc:	e7e3      	b.n	8009786 <_strtod_l+0x23e>
 80097be:	2300      	movs	r3, #0
 80097c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c2:	2301      	movs	r3, #1
 80097c4:	e77a      	b.n	80096bc <_strtod_l+0x174>
 80097c6:	f04f 0c00 	mov.w	ip, #0
 80097ca:	1ca2      	adds	r2, r4, #2
 80097cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ce:	78a2      	ldrb	r2, [r4, #2]
 80097d0:	e782      	b.n	80096d8 <_strtod_l+0x190>
 80097d2:	f04f 0c01 	mov.w	ip, #1
 80097d6:	e7f8      	b.n	80097ca <_strtod_l+0x282>
 80097d8:	0800befc 	.word	0x0800befc
 80097dc:	0800bd19 	.word	0x0800bd19
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097e6:	1c51      	adds	r1, r2, #1
 80097e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ea:	7852      	ldrb	r2, [r2, #1]
 80097ec:	2a30      	cmp	r2, #48	@ 0x30
 80097ee:	d0f9      	beq.n	80097e4 <_strtod_l+0x29c>
 80097f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80097f4:	2908      	cmp	r1, #8
 80097f6:	f63f af75 	bhi.w	80096e4 <_strtod_l+0x19c>
 80097fa:	3a30      	subs	r2, #48	@ 0x30
 80097fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80097fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009800:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009802:	f04f 080a 	mov.w	r8, #10
 8009806:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009808:	1c56      	adds	r6, r2, #1
 800980a:	9619      	str	r6, [sp, #100]	@ 0x64
 800980c:	7852      	ldrb	r2, [r2, #1]
 800980e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009812:	f1be 0f09 	cmp.w	lr, #9
 8009816:	d939      	bls.n	800988c <_strtod_l+0x344>
 8009818:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800981a:	1a76      	subs	r6, r6, r1
 800981c:	2e08      	cmp	r6, #8
 800981e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009822:	dc03      	bgt.n	800982c <_strtod_l+0x2e4>
 8009824:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009826:	4588      	cmp	r8, r1
 8009828:	bfa8      	it	ge
 800982a:	4688      	movge	r8, r1
 800982c:	f1bc 0f00 	cmp.w	ip, #0
 8009830:	d001      	beq.n	8009836 <_strtod_l+0x2ee>
 8009832:	f1c8 0800 	rsb	r8, r8, #0
 8009836:	2d00      	cmp	r5, #0
 8009838:	d14e      	bne.n	80098d8 <_strtod_l+0x390>
 800983a:	9908      	ldr	r1, [sp, #32]
 800983c:	4308      	orrs	r0, r1
 800983e:	f47f aebc 	bne.w	80095ba <_strtod_l+0x72>
 8009842:	2b00      	cmp	r3, #0
 8009844:	f47f aed4 	bne.w	80095f0 <_strtod_l+0xa8>
 8009848:	2a69      	cmp	r2, #105	@ 0x69
 800984a:	d028      	beq.n	800989e <_strtod_l+0x356>
 800984c:	dc25      	bgt.n	800989a <_strtod_l+0x352>
 800984e:	2a49      	cmp	r2, #73	@ 0x49
 8009850:	d025      	beq.n	800989e <_strtod_l+0x356>
 8009852:	2a4e      	cmp	r2, #78	@ 0x4e
 8009854:	f47f aecc 	bne.w	80095f0 <_strtod_l+0xa8>
 8009858:	499a      	ldr	r1, [pc, #616]	@ (8009ac4 <_strtod_l+0x57c>)
 800985a:	a819      	add	r0, sp, #100	@ 0x64
 800985c:	f001 ff44 	bl	800b6e8 <__match>
 8009860:	2800      	cmp	r0, #0
 8009862:	f43f aec5 	beq.w	80095f0 <_strtod_l+0xa8>
 8009866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b28      	cmp	r3, #40	@ 0x28
 800986c:	d12e      	bne.n	80098cc <_strtod_l+0x384>
 800986e:	4996      	ldr	r1, [pc, #600]	@ (8009ac8 <_strtod_l+0x580>)
 8009870:	aa1c      	add	r2, sp, #112	@ 0x70
 8009872:	a819      	add	r0, sp, #100	@ 0x64
 8009874:	f001 ff4c 	bl	800b710 <__hexnan>
 8009878:	2805      	cmp	r0, #5
 800987a:	d127      	bne.n	80098cc <_strtod_l+0x384>
 800987c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800987e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009882:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009886:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800988a:	e696      	b.n	80095ba <_strtod_l+0x72>
 800988c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800988e:	fb08 2101 	mla	r1, r8, r1, r2
 8009892:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009896:	9209      	str	r2, [sp, #36]	@ 0x24
 8009898:	e7b5      	b.n	8009806 <_strtod_l+0x2be>
 800989a:	2a6e      	cmp	r2, #110	@ 0x6e
 800989c:	e7da      	b.n	8009854 <_strtod_l+0x30c>
 800989e:	498b      	ldr	r1, [pc, #556]	@ (8009acc <_strtod_l+0x584>)
 80098a0:	a819      	add	r0, sp, #100	@ 0x64
 80098a2:	f001 ff21 	bl	800b6e8 <__match>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f aea2 	beq.w	80095f0 <_strtod_l+0xa8>
 80098ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ae:	4988      	ldr	r1, [pc, #544]	@ (8009ad0 <_strtod_l+0x588>)
 80098b0:	3b01      	subs	r3, #1
 80098b2:	a819      	add	r0, sp, #100	@ 0x64
 80098b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80098b6:	f001 ff17 	bl	800b6e8 <__match>
 80098ba:	b910      	cbnz	r0, 80098c2 <_strtod_l+0x37a>
 80098bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098be:	3301      	adds	r3, #1
 80098c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80098c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009ae0 <_strtod_l+0x598>
 80098c6:	f04f 0a00 	mov.w	sl, #0
 80098ca:	e676      	b.n	80095ba <_strtod_l+0x72>
 80098cc:	4881      	ldr	r0, [pc, #516]	@ (8009ad4 <_strtod_l+0x58c>)
 80098ce:	f001 fc47 	bl	800b160 <nan>
 80098d2:	ec5b ab10 	vmov	sl, fp, d0
 80098d6:	e670      	b.n	80095ba <_strtod_l+0x72>
 80098d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80098dc:	eba8 0303 	sub.w	r3, r8, r3
 80098e0:	f1b9 0f00 	cmp.w	r9, #0
 80098e4:	bf08      	it	eq
 80098e6:	46a9      	moveq	r9, r5
 80098e8:	2d10      	cmp	r5, #16
 80098ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ec:	462c      	mov	r4, r5
 80098ee:	bfa8      	it	ge
 80098f0:	2410      	movge	r4, #16
 80098f2:	f7f6 fe17 	bl	8000524 <__aeabi_ui2d>
 80098f6:	2d09      	cmp	r5, #9
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	dc13      	bgt.n	8009926 <_strtod_l+0x3de>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	f43f ae5a 	beq.w	80095ba <_strtod_l+0x72>
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	dd78      	ble.n	80099fc <_strtod_l+0x4b4>
 800990a:	2b16      	cmp	r3, #22
 800990c:	dc5f      	bgt.n	80099ce <_strtod_l+0x486>
 800990e:	4972      	ldr	r1, [pc, #456]	@ (8009ad8 <_strtod_l+0x590>)
 8009910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009918:	4652      	mov	r2, sl
 800991a:	465b      	mov	r3, fp
 800991c:	f7f6 fe7c 	bl	8000618 <__aeabi_dmul>
 8009920:	4682      	mov	sl, r0
 8009922:	468b      	mov	fp, r1
 8009924:	e649      	b.n	80095ba <_strtod_l+0x72>
 8009926:	4b6c      	ldr	r3, [pc, #432]	@ (8009ad8 <_strtod_l+0x590>)
 8009928:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800992c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009930:	f7f6 fe72 	bl	8000618 <__aeabi_dmul>
 8009934:	4682      	mov	sl, r0
 8009936:	4638      	mov	r0, r7
 8009938:	468b      	mov	fp, r1
 800993a:	f7f6 fdf3 	bl	8000524 <__aeabi_ui2d>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4650      	mov	r0, sl
 8009944:	4659      	mov	r1, fp
 8009946:	f7f6 fcb1 	bl	80002ac <__adddf3>
 800994a:	2d0f      	cmp	r5, #15
 800994c:	4682      	mov	sl, r0
 800994e:	468b      	mov	fp, r1
 8009950:	ddd5      	ble.n	80098fe <_strtod_l+0x3b6>
 8009952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009954:	1b2c      	subs	r4, r5, r4
 8009956:	441c      	add	r4, r3
 8009958:	2c00      	cmp	r4, #0
 800995a:	f340 8093 	ble.w	8009a84 <_strtod_l+0x53c>
 800995e:	f014 030f 	ands.w	r3, r4, #15
 8009962:	d00a      	beq.n	800997a <_strtod_l+0x432>
 8009964:	495c      	ldr	r1, [pc, #368]	@ (8009ad8 <_strtod_l+0x590>)
 8009966:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800996a:	4652      	mov	r2, sl
 800996c:	465b      	mov	r3, fp
 800996e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009972:	f7f6 fe51 	bl	8000618 <__aeabi_dmul>
 8009976:	4682      	mov	sl, r0
 8009978:	468b      	mov	fp, r1
 800997a:	f034 040f 	bics.w	r4, r4, #15
 800997e:	d073      	beq.n	8009a68 <_strtod_l+0x520>
 8009980:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009984:	dd49      	ble.n	8009a1a <_strtod_l+0x4d2>
 8009986:	2400      	movs	r4, #0
 8009988:	46a0      	mov	r8, r4
 800998a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800998c:	46a1      	mov	r9, r4
 800998e:	9a05      	ldr	r2, [sp, #20]
 8009990:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009ae0 <_strtod_l+0x598>
 8009994:	2322      	movs	r3, #34	@ 0x22
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	f04f 0a00 	mov.w	sl, #0
 800999c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f43f ae0b 	beq.w	80095ba <_strtod_l+0x72>
 80099a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099a6:	9805      	ldr	r0, [sp, #20]
 80099a8:	f7ff f946 	bl	8008c38 <_Bfree>
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7ff f942 	bl	8008c38 <_Bfree>
 80099b4:	9805      	ldr	r0, [sp, #20]
 80099b6:	4641      	mov	r1, r8
 80099b8:	f7ff f93e 	bl	8008c38 <_Bfree>
 80099bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099be:	9805      	ldr	r0, [sp, #20]
 80099c0:	f7ff f93a 	bl	8008c38 <_Bfree>
 80099c4:	9805      	ldr	r0, [sp, #20]
 80099c6:	4621      	mov	r1, r4
 80099c8:	f7ff f936 	bl	8008c38 <_Bfree>
 80099cc:	e5f5      	b.n	80095ba <_strtod_l+0x72>
 80099ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099d4:	4293      	cmp	r3, r2
 80099d6:	dbbc      	blt.n	8009952 <_strtod_l+0x40a>
 80099d8:	4c3f      	ldr	r4, [pc, #252]	@ (8009ad8 <_strtod_l+0x590>)
 80099da:	f1c5 050f 	rsb	r5, r5, #15
 80099de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ea:	f7f6 fe15 	bl	8000618 <__aeabi_dmul>
 80099ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f0:	1b5d      	subs	r5, r3, r5
 80099f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099fa:	e78f      	b.n	800991c <_strtod_l+0x3d4>
 80099fc:	3316      	adds	r3, #22
 80099fe:	dba8      	blt.n	8009952 <_strtod_l+0x40a>
 8009a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a02:	eba3 0808 	sub.w	r8, r3, r8
 8009a06:	4b34      	ldr	r3, [pc, #208]	@ (8009ad8 <_strtod_l+0x590>)
 8009a08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a0c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	f7f6 ff2a 	bl	800086c <__aeabi_ddiv>
 8009a18:	e782      	b.n	8009920 <_strtod_l+0x3d8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4f2f      	ldr	r7, [pc, #188]	@ (8009adc <_strtod_l+0x594>)
 8009a1e:	1124      	asrs	r4, r4, #4
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	461e      	mov	r6, r3
 8009a26:	2c01      	cmp	r4, #1
 8009a28:	dc21      	bgt.n	8009a6e <_strtod_l+0x526>
 8009a2a:	b10b      	cbz	r3, 8009a30 <_strtod_l+0x4e8>
 8009a2c:	4682      	mov	sl, r0
 8009a2e:	468b      	mov	fp, r1
 8009a30:	492a      	ldr	r1, [pc, #168]	@ (8009adc <_strtod_l+0x594>)
 8009a32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	465b      	mov	r3, fp
 8009a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a42:	f7f6 fde9 	bl	8000618 <__aeabi_dmul>
 8009a46:	4b26      	ldr	r3, [pc, #152]	@ (8009ae0 <_strtod_l+0x598>)
 8009a48:	460a      	mov	r2, r1
 8009a4a:	400b      	ands	r3, r1
 8009a4c:	4925      	ldr	r1, [pc, #148]	@ (8009ae4 <_strtod_l+0x59c>)
 8009a4e:	428b      	cmp	r3, r1
 8009a50:	4682      	mov	sl, r0
 8009a52:	d898      	bhi.n	8009986 <_strtod_l+0x43e>
 8009a54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a58:	428b      	cmp	r3, r1
 8009a5a:	bf86      	itte	hi
 8009a5c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009ae8 <_strtod_l+0x5a0>
 8009a60:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9308      	str	r3, [sp, #32]
 8009a6c:	e076      	b.n	8009b5c <_strtod_l+0x614>
 8009a6e:	07e2      	lsls	r2, r4, #31
 8009a70:	d504      	bpl.n	8009a7c <_strtod_l+0x534>
 8009a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a76:	f7f6 fdcf 	bl	8000618 <__aeabi_dmul>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	3601      	adds	r6, #1
 8009a7e:	1064      	asrs	r4, r4, #1
 8009a80:	3708      	adds	r7, #8
 8009a82:	e7d0      	b.n	8009a26 <_strtod_l+0x4de>
 8009a84:	d0f0      	beq.n	8009a68 <_strtod_l+0x520>
 8009a86:	4264      	negs	r4, r4
 8009a88:	f014 020f 	ands.w	r2, r4, #15
 8009a8c:	d00a      	beq.n	8009aa4 <_strtod_l+0x55c>
 8009a8e:	4b12      	ldr	r3, [pc, #72]	@ (8009ad8 <_strtod_l+0x590>)
 8009a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a94:	4650      	mov	r0, sl
 8009a96:	4659      	mov	r1, fp
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fee6 	bl	800086c <__aeabi_ddiv>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	468b      	mov	fp, r1
 8009aa4:	1124      	asrs	r4, r4, #4
 8009aa6:	d0df      	beq.n	8009a68 <_strtod_l+0x520>
 8009aa8:	2c1f      	cmp	r4, #31
 8009aaa:	dd1f      	ble.n	8009aec <_strtod_l+0x5a4>
 8009aac:	2400      	movs	r4, #0
 8009aae:	46a0      	mov	r8, r4
 8009ab0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ab2:	46a1      	mov	r9, r4
 8009ab4:	9a05      	ldr	r2, [sp, #20]
 8009ab6:	2322      	movs	r3, #34	@ 0x22
 8009ab8:	f04f 0a00 	mov.w	sl, #0
 8009abc:	f04f 0b00 	mov.w	fp, #0
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	e76b      	b.n	800999c <_strtod_l+0x454>
 8009ac4:	0800bc09 	.word	0x0800bc09
 8009ac8:	0800bee8 	.word	0x0800bee8
 8009acc:	0800bc01 	.word	0x0800bc01
 8009ad0:	0800bc36 	.word	0x0800bc36
 8009ad4:	0800bd8a 	.word	0x0800bd8a
 8009ad8:	0800be20 	.word	0x0800be20
 8009adc:	0800bdf8 	.word	0x0800bdf8
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	7ca00000 	.word	0x7ca00000
 8009ae8:	7fefffff 	.word	0x7fefffff
 8009aec:	f014 0310 	ands.w	r3, r4, #16
 8009af0:	bf18      	it	ne
 8009af2:	236a      	movne	r3, #106	@ 0x6a
 8009af4:	4ea9      	ldr	r6, [pc, #676]	@ (8009d9c <_strtod_l+0x854>)
 8009af6:	9308      	str	r3, [sp, #32]
 8009af8:	4650      	mov	r0, sl
 8009afa:	4659      	mov	r1, fp
 8009afc:	2300      	movs	r3, #0
 8009afe:	07e7      	lsls	r7, r4, #31
 8009b00:	d504      	bpl.n	8009b0c <_strtod_l+0x5c4>
 8009b02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b06:	f7f6 fd87 	bl	8000618 <__aeabi_dmul>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	1064      	asrs	r4, r4, #1
 8009b0e:	f106 0608 	add.w	r6, r6, #8
 8009b12:	d1f4      	bne.n	8009afe <_strtod_l+0x5b6>
 8009b14:	b10b      	cbz	r3, 8009b1a <_strtod_l+0x5d2>
 8009b16:	4682      	mov	sl, r0
 8009b18:	468b      	mov	fp, r1
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	b1b3      	cbz	r3, 8009b4c <_strtod_l+0x604>
 8009b1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	4659      	mov	r1, fp
 8009b2a:	dd0f      	ble.n	8009b4c <_strtod_l+0x604>
 8009b2c:	2b1f      	cmp	r3, #31
 8009b2e:	dd56      	ble.n	8009bde <_strtod_l+0x696>
 8009b30:	2b34      	cmp	r3, #52	@ 0x34
 8009b32:	bfde      	ittt	le
 8009b34:	f04f 33ff 	movle.w	r3, #4294967295
 8009b38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b3c:	4093      	lslle	r3, r2
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	bfcc      	ite	gt
 8009b44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b48:	ea03 0b01 	andle.w	fp, r3, r1
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4650      	mov	r0, sl
 8009b52:	4659      	mov	r1, fp
 8009b54:	f7f6 ffc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d1a7      	bne.n	8009aac <_strtod_l+0x564>
 8009b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b62:	9805      	ldr	r0, [sp, #20]
 8009b64:	462b      	mov	r3, r5
 8009b66:	464a      	mov	r2, r9
 8009b68:	f7ff f8ce 	bl	8008d08 <__s2b>
 8009b6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f43f af09 	beq.w	8009986 <_strtod_l+0x43e>
 8009b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	eba3 0308 	sub.w	r3, r3, r8
 8009b7e:	bfa8      	it	ge
 8009b80:	2300      	movge	r3, #0
 8009b82:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b84:	2400      	movs	r4, #0
 8009b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b8c:	46a0      	mov	r8, r4
 8009b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b90:	9805      	ldr	r0, [sp, #20]
 8009b92:	6859      	ldr	r1, [r3, #4]
 8009b94:	f7ff f810 	bl	8008bb8 <_Balloc>
 8009b98:	4681      	mov	r9, r0
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f43f aef7 	beq.w	800998e <_strtod_l+0x446>
 8009ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	3202      	adds	r2, #2
 8009ba6:	f103 010c 	add.w	r1, r3, #12
 8009baa:	0092      	lsls	r2, r2, #2
 8009bac:	300c      	adds	r0, #12
 8009bae:	f001 fac9 	bl	800b144 <memcpy>
 8009bb2:	ec4b ab10 	vmov	d0, sl, fp
 8009bb6:	9805      	ldr	r0, [sp, #20]
 8009bb8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009bba:	a91b      	add	r1, sp, #108	@ 0x6c
 8009bbc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009bc0:	f7ff fbd6 	bl	8009370 <__d2b>
 8009bc4:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f43f aee1 	beq.w	800998e <_strtod_l+0x446>
 8009bcc:	9805      	ldr	r0, [sp, #20]
 8009bce:	2101      	movs	r1, #1
 8009bd0:	f7ff f930 	bl	8008e34 <__i2b>
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	b948      	cbnz	r0, 8009bec <_strtod_l+0x6a4>
 8009bd8:	f04f 0800 	mov.w	r8, #0
 8009bdc:	e6d7      	b.n	800998e <_strtod_l+0x446>
 8009bde:	f04f 32ff 	mov.w	r2, #4294967295
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	ea03 0a0a 	and.w	sl, r3, sl
 8009bea:	e7af      	b.n	8009b4c <_strtod_l+0x604>
 8009bec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009bee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	bfab      	itete	ge
 8009bf4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009bf6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009bf8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009bfa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bfc:	bfac      	ite	ge
 8009bfe:	18ef      	addge	r7, r5, r3
 8009c00:	1b5e      	sublt	r6, r3, r5
 8009c02:	9b08      	ldr	r3, [sp, #32]
 8009c04:	1aed      	subs	r5, r5, r3
 8009c06:	4415      	add	r5, r2
 8009c08:	4b65      	ldr	r3, [pc, #404]	@ (8009da0 <_strtod_l+0x858>)
 8009c0a:	3d01      	subs	r5, #1
 8009c0c:	429d      	cmp	r5, r3
 8009c0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c12:	da50      	bge.n	8009cb6 <_strtod_l+0x76e>
 8009c14:	1b5b      	subs	r3, r3, r5
 8009c16:	2b1f      	cmp	r3, #31
 8009c18:	eba2 0203 	sub.w	r2, r2, r3
 8009c1c:	f04f 0101 	mov.w	r1, #1
 8009c20:	dc3d      	bgt.n	8009c9e <_strtod_l+0x756>
 8009c22:	fa01 f303 	lsl.w	r3, r1, r3
 8009c26:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c2c:	18bd      	adds	r5, r7, r2
 8009c2e:	9b08      	ldr	r3, [sp, #32]
 8009c30:	42af      	cmp	r7, r5
 8009c32:	4416      	add	r6, r2
 8009c34:	441e      	add	r6, r3
 8009c36:	463b      	mov	r3, r7
 8009c38:	bfa8      	it	ge
 8009c3a:	462b      	movge	r3, r5
 8009c3c:	42b3      	cmp	r3, r6
 8009c3e:	bfa8      	it	ge
 8009c40:	4633      	movge	r3, r6
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bfc2      	ittt	gt
 8009c46:	1aed      	subgt	r5, r5, r3
 8009c48:	1af6      	subgt	r6, r6, r3
 8009c4a:	1aff      	subgt	r7, r7, r3
 8009c4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd16      	ble.n	8009c80 <_strtod_l+0x738>
 8009c52:	4641      	mov	r1, r8
 8009c54:	9805      	ldr	r0, [sp, #20]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7ff f9a4 	bl	8008fa4 <__pow5mult>
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0ba      	beq.n	8009bd8 <_strtod_l+0x690>
 8009c62:	4601      	mov	r1, r0
 8009c64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c66:	9805      	ldr	r0, [sp, #20]
 8009c68:	f7ff f8fa 	bl	8008e60 <__multiply>
 8009c6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f43f ae8d 	beq.w	800998e <_strtod_l+0x446>
 8009c74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c76:	9805      	ldr	r0, [sp, #20]
 8009c78:	f7fe ffde 	bl	8008c38 <_Bfree>
 8009c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	dc1d      	bgt.n	8009cc0 <_strtod_l+0x778>
 8009c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	dd23      	ble.n	8009cd2 <_strtod_l+0x78a>
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c8e:	9805      	ldr	r0, [sp, #20]
 8009c90:	f7ff f988 	bl	8008fa4 <__pow5mult>
 8009c94:	4681      	mov	r9, r0
 8009c96:	b9e0      	cbnz	r0, 8009cd2 <_strtod_l+0x78a>
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	e677      	b.n	800998e <_strtod_l+0x446>
 8009c9e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009ca2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ca6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009caa:	35e2      	adds	r5, #226	@ 0xe2
 8009cac:	fa01 f305 	lsl.w	r3, r1, r5
 8009cb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cb2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cb4:	e7ba      	b.n	8009c2c <_strtod_l+0x6e4>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cba:	2301      	movs	r3, #1
 8009cbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cbe:	e7b5      	b.n	8009c2c <_strtod_l+0x6e4>
 8009cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	462a      	mov	r2, r5
 8009cc6:	f7ff f9c7 	bl	8009058 <__lshift>
 8009cca:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d1d9      	bne.n	8009c84 <_strtod_l+0x73c>
 8009cd0:	e65d      	b.n	800998e <_strtod_l+0x446>
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	dd07      	ble.n	8009ce6 <_strtod_l+0x79e>
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	9805      	ldr	r0, [sp, #20]
 8009cda:	4632      	mov	r2, r6
 8009cdc:	f7ff f9bc 	bl	8009058 <__lshift>
 8009ce0:	4681      	mov	r9, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0d8      	beq.n	8009c98 <_strtod_l+0x750>
 8009ce6:	2f00      	cmp	r7, #0
 8009ce8:	dd08      	ble.n	8009cfc <_strtod_l+0x7b4>
 8009cea:	4641      	mov	r1, r8
 8009cec:	9805      	ldr	r0, [sp, #20]
 8009cee:	463a      	mov	r2, r7
 8009cf0:	f7ff f9b2 	bl	8009058 <__lshift>
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f43f ae49 	beq.w	800998e <_strtod_l+0x446>
 8009cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cfe:	9805      	ldr	r0, [sp, #20]
 8009d00:	464a      	mov	r2, r9
 8009d02:	f7ff fa31 	bl	8009168 <__mdiff>
 8009d06:	4604      	mov	r4, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f ae40 	beq.w	800998e <_strtod_l+0x446>
 8009d0e:	68c3      	ldr	r3, [r0, #12]
 8009d10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d12:	2300      	movs	r3, #0
 8009d14:	60c3      	str	r3, [r0, #12]
 8009d16:	4641      	mov	r1, r8
 8009d18:	f7ff fa0a 	bl	8009130 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da45      	bge.n	8009dac <_strtod_l+0x864>
 8009d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d22:	ea53 030a 	orrs.w	r3, r3, sl
 8009d26:	d16b      	bne.n	8009e00 <_strtod_l+0x8b8>
 8009d28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d167      	bne.n	8009e00 <_strtod_l+0x8b8>
 8009d30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d34:	0d1b      	lsrs	r3, r3, #20
 8009d36:	051b      	lsls	r3, r3, #20
 8009d38:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d3c:	d960      	bls.n	8009e00 <_strtod_l+0x8b8>
 8009d3e:	6963      	ldr	r3, [r4, #20]
 8009d40:	b913      	cbnz	r3, 8009d48 <_strtod_l+0x800>
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	dd5b      	ble.n	8009e00 <_strtod_l+0x8b8>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	9805      	ldr	r0, [sp, #20]
 8009d4e:	f7ff f983 	bl	8009058 <__lshift>
 8009d52:	4641      	mov	r1, r8
 8009d54:	4604      	mov	r4, r0
 8009d56:	f7ff f9eb 	bl	8009130 <__mcmp>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	dd50      	ble.n	8009e00 <_strtod_l+0x8b8>
 8009d5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d62:	9a08      	ldr	r2, [sp, #32]
 8009d64:	0d1b      	lsrs	r3, r3, #20
 8009d66:	051b      	lsls	r3, r3, #20
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	d06a      	beq.n	8009e42 <_strtod_l+0x8fa>
 8009d6c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d70:	d867      	bhi.n	8009e42 <_strtod_l+0x8fa>
 8009d72:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d76:	f67f ae9d 	bls.w	8009ab4 <_strtod_l+0x56c>
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009da4 <_strtod_l+0x85c>)
 8009d7c:	4650      	mov	r0, sl
 8009d7e:	4659      	mov	r1, fp
 8009d80:	2200      	movs	r2, #0
 8009d82:	f7f6 fc49 	bl	8000618 <__aeabi_dmul>
 8009d86:	4b08      	ldr	r3, [pc, #32]	@ (8009da8 <_strtod_l+0x860>)
 8009d88:	400b      	ands	r3, r1
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f47f ae08 	bne.w	80099a4 <_strtod_l+0x45c>
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	2322      	movs	r3, #34	@ 0x22
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	e603      	b.n	80099a4 <_strtod_l+0x45c>
 8009d9c:	0800bf10 	.word	0x0800bf10
 8009da0:	fffffc02 	.word	0xfffffc02
 8009da4:	39500000 	.word	0x39500000
 8009da8:	7ff00000 	.word	0x7ff00000
 8009dac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009db0:	d165      	bne.n	8009e7e <_strtod_l+0x936>
 8009db2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009db8:	b35a      	cbz	r2, 8009e12 <_strtod_l+0x8ca>
 8009dba:	4a9f      	ldr	r2, [pc, #636]	@ (800a038 <_strtod_l+0xaf0>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d12b      	bne.n	8009e18 <_strtod_l+0x8d0>
 8009dc0:	9b08      	ldr	r3, [sp, #32]
 8009dc2:	4651      	mov	r1, sl
 8009dc4:	b303      	cbz	r3, 8009e08 <_strtod_l+0x8c0>
 8009dc6:	4b9d      	ldr	r3, [pc, #628]	@ (800a03c <_strtod_l+0xaf4>)
 8009dc8:	465a      	mov	r2, fp
 8009dca:	4013      	ands	r3, r2
 8009dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	d81b      	bhi.n	8009e0e <_strtod_l+0x8c6>
 8009dd6:	0d1b      	lsrs	r3, r3, #20
 8009dd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8009de0:	4299      	cmp	r1, r3
 8009de2:	d119      	bne.n	8009e18 <_strtod_l+0x8d0>
 8009de4:	4b96      	ldr	r3, [pc, #600]	@ (800a040 <_strtod_l+0xaf8>)
 8009de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d102      	bne.n	8009df2 <_strtod_l+0x8aa>
 8009dec:	3101      	adds	r1, #1
 8009dee:	f43f adce 	beq.w	800998e <_strtod_l+0x446>
 8009df2:	4b92      	ldr	r3, [pc, #584]	@ (800a03c <_strtod_l+0xaf4>)
 8009df4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009df6:	401a      	ands	r2, r3
 8009df8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009dfc:	f04f 0a00 	mov.w	sl, #0
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1b9      	bne.n	8009d7a <_strtod_l+0x832>
 8009e06:	e5cd      	b.n	80099a4 <_strtod_l+0x45c>
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	e7e8      	b.n	8009de0 <_strtod_l+0x898>
 8009e0e:	4613      	mov	r3, r2
 8009e10:	e7e6      	b.n	8009de0 <_strtod_l+0x898>
 8009e12:	ea53 030a 	orrs.w	r3, r3, sl
 8009e16:	d0a2      	beq.n	8009d5e <_strtod_l+0x816>
 8009e18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e1a:	b1db      	cbz	r3, 8009e54 <_strtod_l+0x90c>
 8009e1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e1e:	4213      	tst	r3, r2
 8009e20:	d0ee      	beq.n	8009e00 <_strtod_l+0x8b8>
 8009e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e24:	9a08      	ldr	r2, [sp, #32]
 8009e26:	4650      	mov	r0, sl
 8009e28:	4659      	mov	r1, fp
 8009e2a:	b1bb      	cbz	r3, 8009e5c <_strtod_l+0x914>
 8009e2c:	f7ff fb6e 	bl	800950c <sulp>
 8009e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e34:	ec53 2b10 	vmov	r2, r3, d0
 8009e38:	f7f6 fa38 	bl	80002ac <__adddf3>
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	468b      	mov	fp, r1
 8009e40:	e7de      	b.n	8009e00 <_strtod_l+0x8b8>
 8009e42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e4e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e52:	e7d5      	b.n	8009e00 <_strtod_l+0x8b8>
 8009e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e56:	ea13 0f0a 	tst.w	r3, sl
 8009e5a:	e7e1      	b.n	8009e20 <_strtod_l+0x8d8>
 8009e5c:	f7ff fb56 	bl	800950c <sulp>
 8009e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e64:	ec53 2b10 	vmov	r2, r3, d0
 8009e68:	f7f6 fa1e 	bl	80002a8 <__aeabi_dsub>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	f7f6 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0c1      	beq.n	8009e00 <_strtod_l+0x8b8>
 8009e7c:	e61a      	b.n	8009ab4 <_strtod_l+0x56c>
 8009e7e:	4641      	mov	r1, r8
 8009e80:	4620      	mov	r0, r4
 8009e82:	f7ff facd 	bl	8009420 <__ratio>
 8009e86:	ec57 6b10 	vmov	r6, r7, d0
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 fe3c 	bl	8000b10 <__aeabi_dcmple>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d06f      	beq.n	8009f7c <_strtod_l+0xa34>
 8009e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d17a      	bne.n	8009f98 <_strtod_l+0xa50>
 8009ea2:	f1ba 0f00 	cmp.w	sl, #0
 8009ea6:	d158      	bne.n	8009f5a <_strtod_l+0xa12>
 8009ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d15a      	bne.n	8009f68 <_strtod_l+0xa20>
 8009eb2:	4b64      	ldr	r3, [pc, #400]	@ (800a044 <_strtod_l+0xafc>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d159      	bne.n	8009f76 <_strtod_l+0xa2e>
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4b60      	ldr	r3, [pc, #384]	@ (800a048 <_strtod_l+0xb00>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7f6 fba5 	bl	8000618 <__aeabi_dmul>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ed6:	9606      	str	r6, [sp, #24]
 8009ed8:	9307      	str	r3, [sp, #28]
 8009eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ede:	4d57      	ldr	r5, [pc, #348]	@ (800a03c <_strtod_l+0xaf4>)
 8009ee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ee6:	401d      	ands	r5, r3
 8009ee8:	4b58      	ldr	r3, [pc, #352]	@ (800a04c <_strtod_l+0xb04>)
 8009eea:	429d      	cmp	r5, r3
 8009eec:	f040 80b2 	bne.w	800a054 <_strtod_l+0xb0c>
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ef2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ef6:	ec4b ab10 	vmov	d0, sl, fp
 8009efa:	f7ff f9c9 	bl	8009290 <__ulp>
 8009efe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f02:	ec51 0b10 	vmov	r0, r1, d0
 8009f06:	f7f6 fb87 	bl	8000618 <__aeabi_dmul>
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	f7f6 f9cd 	bl	80002ac <__adddf3>
 8009f12:	460b      	mov	r3, r1
 8009f14:	4949      	ldr	r1, [pc, #292]	@ (800a03c <_strtod_l+0xaf4>)
 8009f16:	4a4e      	ldr	r2, [pc, #312]	@ (800a050 <_strtod_l+0xb08>)
 8009f18:	4019      	ands	r1, r3
 8009f1a:	4291      	cmp	r1, r2
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	d942      	bls.n	8009fa6 <_strtod_l+0xa5e>
 8009f20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f22:	4b47      	ldr	r3, [pc, #284]	@ (800a040 <_strtod_l+0xaf8>)
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d103      	bne.n	8009f30 <_strtod_l+0x9e8>
 8009f28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f43f ad2f 	beq.w	800998e <_strtod_l+0x446>
 8009f30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a040 <_strtod_l+0xaf8>
 8009f34:	f04f 3aff 	mov.w	sl, #4294967295
 8009f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f3a:	9805      	ldr	r0, [sp, #20]
 8009f3c:	f7fe fe7c 	bl	8008c38 <_Bfree>
 8009f40:	9805      	ldr	r0, [sp, #20]
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7fe fe78 	bl	8008c38 <_Bfree>
 8009f48:	9805      	ldr	r0, [sp, #20]
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	f7fe fe74 	bl	8008c38 <_Bfree>
 8009f50:	9805      	ldr	r0, [sp, #20]
 8009f52:	4621      	mov	r1, r4
 8009f54:	f7fe fe70 	bl	8008c38 <_Bfree>
 8009f58:	e619      	b.n	8009b8e <_strtod_l+0x646>
 8009f5a:	f1ba 0f01 	cmp.w	sl, #1
 8009f5e:	d103      	bne.n	8009f68 <_strtod_l+0xa20>
 8009f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f43f ada6 	beq.w	8009ab4 <_strtod_l+0x56c>
 8009f68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a018 <_strtod_l+0xad0>
 8009f6c:	4f35      	ldr	r7, [pc, #212]	@ (800a044 <_strtod_l+0xafc>)
 8009f6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f72:	2600      	movs	r6, #0
 8009f74:	e7b1      	b.n	8009eda <_strtod_l+0x992>
 8009f76:	4f34      	ldr	r7, [pc, #208]	@ (800a048 <_strtod_l+0xb00>)
 8009f78:	2600      	movs	r6, #0
 8009f7a:	e7aa      	b.n	8009ed2 <_strtod_l+0x98a>
 8009f7c:	4b32      	ldr	r3, [pc, #200]	@ (800a048 <_strtod_l+0xb00>)
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	2200      	movs	r2, #0
 8009f84:	f7f6 fb48 	bl	8000618 <__aeabi_dmul>
 8009f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d09f      	beq.n	8009ed2 <_strtod_l+0x98a>
 8009f92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f96:	e7a0      	b.n	8009eda <_strtod_l+0x992>
 8009f98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a020 <_strtod_l+0xad8>
 8009f9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fa0:	ec57 6b17 	vmov	r6, r7, d7
 8009fa4:	e799      	b.n	8009eda <_strtod_l+0x992>
 8009fa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009faa:	9b08      	ldr	r3, [sp, #32]
 8009fac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1c1      	bne.n	8009f38 <_strtod_l+0x9f0>
 8009fb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fb8:	0d1b      	lsrs	r3, r3, #20
 8009fba:	051b      	lsls	r3, r3, #20
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	d1bb      	bne.n	8009f38 <_strtod_l+0x9f0>
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 fe88 	bl	8000cd8 <__aeabi_d2lz>
 8009fc8:	f7f6 faf8 	bl	80005bc <__aeabi_l2d>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 f968 	bl	80002a8 <__aeabi_dsub>
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4602      	mov	r2, r0
 8009fdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009fe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fe6:	ea46 060a 	orr.w	r6, r6, sl
 8009fea:	431e      	orrs	r6, r3
 8009fec:	d06f      	beq.n	800a0ce <_strtod_l+0xb86>
 8009fee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a028 <_strtod_l+0xae0>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f7f6 fd82 	bl	8000afc <__aeabi_dcmplt>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	f47f acd3 	bne.w	80099a4 <_strtod_l+0x45c>
 8009ffe:	a30c      	add	r3, pc, #48	@ (adr r3, 800a030 <_strtod_l+0xae8>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a008:	f7f6 fd96 	bl	8000b38 <__aeabi_dcmpgt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d093      	beq.n	8009f38 <_strtod_l+0x9f0>
 800a010:	e4c8      	b.n	80099a4 <_strtod_l+0x45c>
 800a012:	bf00      	nop
 800a014:	f3af 8000 	nop.w
 800a018:	00000000 	.word	0x00000000
 800a01c:	bff00000 	.word	0xbff00000
 800a020:	00000000 	.word	0x00000000
 800a024:	3ff00000 	.word	0x3ff00000
 800a028:	94a03595 	.word	0x94a03595
 800a02c:	3fdfffff 	.word	0x3fdfffff
 800a030:	35afe535 	.word	0x35afe535
 800a034:	3fe00000 	.word	0x3fe00000
 800a038:	000fffff 	.word	0x000fffff
 800a03c:	7ff00000 	.word	0x7ff00000
 800a040:	7fefffff 	.word	0x7fefffff
 800a044:	3ff00000 	.word	0x3ff00000
 800a048:	3fe00000 	.word	0x3fe00000
 800a04c:	7fe00000 	.word	0x7fe00000
 800a050:	7c9fffff 	.word	0x7c9fffff
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	b323      	cbz	r3, 800a0a2 <_strtod_l+0xb5a>
 800a058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a05c:	d821      	bhi.n	800a0a2 <_strtod_l+0xb5a>
 800a05e:	a328      	add	r3, pc, #160	@ (adr r3, 800a100 <_strtod_l+0xbb8>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 fd52 	bl	8000b10 <__aeabi_dcmple>
 800a06c:	b1a0      	cbz	r0, 800a098 <_strtod_l+0xb50>
 800a06e:	4639      	mov	r1, r7
 800a070:	4630      	mov	r0, r6
 800a072:	f7f6 fda9 	bl	8000bc8 <__aeabi_d2uiz>
 800a076:	2801      	cmp	r0, #1
 800a078:	bf38      	it	cc
 800a07a:	2001      	movcc	r0, #1
 800a07c:	f7f6 fa52 	bl	8000524 <__aeabi_ui2d>
 800a080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	b9fb      	cbnz	r3, 800a0c8 <_strtod_l+0xb80>
 800a088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a08c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a08e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a09a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a09e:	1b5b      	subs	r3, r3, r5
 800a0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0aa:	f7ff f8f1 	bl	8009290 <__ulp>
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	ec53 2b10 	vmov	r2, r3, d0
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	f7f6 faaf 	bl	8000618 <__aeabi_dmul>
 800a0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0be:	f7f6 f8f5 	bl	80002ac <__adddf3>
 800a0c2:	4682      	mov	sl, r0
 800a0c4:	468b      	mov	fp, r1
 800a0c6:	e770      	b.n	8009faa <_strtod_l+0xa62>
 800a0c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0cc:	e7e0      	b.n	800a090 <_strtod_l+0xb48>
 800a0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a108 <_strtod_l+0xbc0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fd12 	bl	8000afc <__aeabi_dcmplt>
 800a0d8:	e798      	b.n	800a00c <_strtod_l+0xac4>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	f7ff ba6d 	b.w	80095c2 <_strtod_l+0x7a>
 800a0e8:	2a65      	cmp	r2, #101	@ 0x65
 800a0ea:	f43f ab68 	beq.w	80097be <_strtod_l+0x276>
 800a0ee:	2a45      	cmp	r2, #69	@ 0x45
 800a0f0:	f43f ab65 	beq.w	80097be <_strtod_l+0x276>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f7ff bba0 	b.w	800983a <_strtod_l+0x2f2>
 800a0fa:	bf00      	nop
 800a0fc:	f3af 8000 	nop.w
 800a100:	ffc00000 	.word	0xffc00000
 800a104:	41dfffff 	.word	0x41dfffff
 800a108:	94a03595 	.word	0x94a03595
 800a10c:	3fcfffff 	.word	0x3fcfffff

0800a110 <_strtod_r>:
 800a110:	4b01      	ldr	r3, [pc, #4]	@ (800a118 <_strtod_r+0x8>)
 800a112:	f7ff ba19 	b.w	8009548 <_strtod_l>
 800a116:	bf00      	nop
 800a118:	20000084 	.word	0x20000084

0800a11c <_strtol_l.isra.0>:
 800a11c:	2b24      	cmp	r3, #36	@ 0x24
 800a11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a122:	4686      	mov	lr, r0
 800a124:	4690      	mov	r8, r2
 800a126:	d801      	bhi.n	800a12c <_strtol_l.isra.0+0x10>
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d106      	bne.n	800a13a <_strtol_l.isra.0+0x1e>
 800a12c:	f7fd fdb0 	bl	8007c90 <__errno>
 800a130:	2316      	movs	r3, #22
 800a132:	6003      	str	r3, [r0, #0]
 800a134:	2000      	movs	r0, #0
 800a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13a:	4834      	ldr	r0, [pc, #208]	@ (800a20c <_strtol_l.isra.0+0xf0>)
 800a13c:	460d      	mov	r5, r1
 800a13e:	462a      	mov	r2, r5
 800a140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a144:	5d06      	ldrb	r6, [r0, r4]
 800a146:	f016 0608 	ands.w	r6, r6, #8
 800a14a:	d1f8      	bne.n	800a13e <_strtol_l.isra.0+0x22>
 800a14c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a14e:	d110      	bne.n	800a172 <_strtol_l.isra.0+0x56>
 800a150:	782c      	ldrb	r4, [r5, #0]
 800a152:	2601      	movs	r6, #1
 800a154:	1c95      	adds	r5, r2, #2
 800a156:	f033 0210 	bics.w	r2, r3, #16
 800a15a:	d115      	bne.n	800a188 <_strtol_l.isra.0+0x6c>
 800a15c:	2c30      	cmp	r4, #48	@ 0x30
 800a15e:	d10d      	bne.n	800a17c <_strtol_l.isra.0+0x60>
 800a160:	782a      	ldrb	r2, [r5, #0]
 800a162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a166:	2a58      	cmp	r2, #88	@ 0x58
 800a168:	d108      	bne.n	800a17c <_strtol_l.isra.0+0x60>
 800a16a:	786c      	ldrb	r4, [r5, #1]
 800a16c:	3502      	adds	r5, #2
 800a16e:	2310      	movs	r3, #16
 800a170:	e00a      	b.n	800a188 <_strtol_l.isra.0+0x6c>
 800a172:	2c2b      	cmp	r4, #43	@ 0x2b
 800a174:	bf04      	itt	eq
 800a176:	782c      	ldrbeq	r4, [r5, #0]
 800a178:	1c95      	addeq	r5, r2, #2
 800a17a:	e7ec      	b.n	800a156 <_strtol_l.isra.0+0x3a>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f6      	bne.n	800a16e <_strtol_l.isra.0+0x52>
 800a180:	2c30      	cmp	r4, #48	@ 0x30
 800a182:	bf14      	ite	ne
 800a184:	230a      	movne	r3, #10
 800a186:	2308      	moveq	r3, #8
 800a188:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a18c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a190:	2200      	movs	r2, #0
 800a192:	fbbc f9f3 	udiv	r9, ip, r3
 800a196:	4610      	mov	r0, r2
 800a198:	fb03 ca19 	mls	sl, r3, r9, ip
 800a19c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a1a0:	2f09      	cmp	r7, #9
 800a1a2:	d80f      	bhi.n	800a1c4 <_strtol_l.isra.0+0xa8>
 800a1a4:	463c      	mov	r4, r7
 800a1a6:	42a3      	cmp	r3, r4
 800a1a8:	dd1b      	ble.n	800a1e2 <_strtol_l.isra.0+0xc6>
 800a1aa:	1c57      	adds	r7, r2, #1
 800a1ac:	d007      	beq.n	800a1be <_strtol_l.isra.0+0xa2>
 800a1ae:	4581      	cmp	r9, r0
 800a1b0:	d314      	bcc.n	800a1dc <_strtol_l.isra.0+0xc0>
 800a1b2:	d101      	bne.n	800a1b8 <_strtol_l.isra.0+0x9c>
 800a1b4:	45a2      	cmp	sl, r4
 800a1b6:	db11      	blt.n	800a1dc <_strtol_l.isra.0+0xc0>
 800a1b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1c2:	e7eb      	b.n	800a19c <_strtol_l.isra.0+0x80>
 800a1c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1c8:	2f19      	cmp	r7, #25
 800a1ca:	d801      	bhi.n	800a1d0 <_strtol_l.isra.0+0xb4>
 800a1cc:	3c37      	subs	r4, #55	@ 0x37
 800a1ce:	e7ea      	b.n	800a1a6 <_strtol_l.isra.0+0x8a>
 800a1d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1d4:	2f19      	cmp	r7, #25
 800a1d6:	d804      	bhi.n	800a1e2 <_strtol_l.isra.0+0xc6>
 800a1d8:	3c57      	subs	r4, #87	@ 0x57
 800a1da:	e7e4      	b.n	800a1a6 <_strtol_l.isra.0+0x8a>
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e0:	e7ed      	b.n	800a1be <_strtol_l.isra.0+0xa2>
 800a1e2:	1c53      	adds	r3, r2, #1
 800a1e4:	d108      	bne.n	800a1f8 <_strtol_l.isra.0+0xdc>
 800a1e6:	2322      	movs	r3, #34	@ 0x22
 800a1e8:	f8ce 3000 	str.w	r3, [lr]
 800a1ec:	4660      	mov	r0, ip
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	d0a0      	beq.n	800a136 <_strtol_l.isra.0+0x1a>
 800a1f4:	1e69      	subs	r1, r5, #1
 800a1f6:	e006      	b.n	800a206 <_strtol_l.isra.0+0xea>
 800a1f8:	b106      	cbz	r6, 800a1fc <_strtol_l.isra.0+0xe0>
 800a1fa:	4240      	negs	r0, r0
 800a1fc:	f1b8 0f00 	cmp.w	r8, #0
 800a200:	d099      	beq.n	800a136 <_strtol_l.isra.0+0x1a>
 800a202:	2a00      	cmp	r2, #0
 800a204:	d1f6      	bne.n	800a1f4 <_strtol_l.isra.0+0xd8>
 800a206:	f8c8 1000 	str.w	r1, [r8]
 800a20a:	e794      	b.n	800a136 <_strtol_l.isra.0+0x1a>
 800a20c:	0800bf39 	.word	0x0800bf39

0800a210 <_strtol_r>:
 800a210:	f7ff bf84 	b.w	800a11c <_strtol_l.isra.0>

0800a214 <__ssputs_r>:
 800a214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	688e      	ldr	r6, [r1, #8]
 800a21a:	461f      	mov	r7, r3
 800a21c:	42be      	cmp	r6, r7
 800a21e:	680b      	ldr	r3, [r1, #0]
 800a220:	4682      	mov	sl, r0
 800a222:	460c      	mov	r4, r1
 800a224:	4690      	mov	r8, r2
 800a226:	d82d      	bhi.n	800a284 <__ssputs_r+0x70>
 800a228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a230:	d026      	beq.n	800a280 <__ssputs_r+0x6c>
 800a232:	6965      	ldr	r5, [r4, #20]
 800a234:	6909      	ldr	r1, [r1, #16]
 800a236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a23a:	eba3 0901 	sub.w	r9, r3, r1
 800a23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a242:	1c7b      	adds	r3, r7, #1
 800a244:	444b      	add	r3, r9
 800a246:	106d      	asrs	r5, r5, #1
 800a248:	429d      	cmp	r5, r3
 800a24a:	bf38      	it	cc
 800a24c:	461d      	movcc	r5, r3
 800a24e:	0553      	lsls	r3, r2, #21
 800a250:	d527      	bpl.n	800a2a2 <__ssputs_r+0x8e>
 800a252:	4629      	mov	r1, r5
 800a254:	f7fe fc24 	bl	8008aa0 <_malloc_r>
 800a258:	4606      	mov	r6, r0
 800a25a:	b360      	cbz	r0, 800a2b6 <__ssputs_r+0xa2>
 800a25c:	6921      	ldr	r1, [r4, #16]
 800a25e:	464a      	mov	r2, r9
 800a260:	f000 ff70 	bl	800b144 <memcpy>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	6126      	str	r6, [r4, #16]
 800a272:	6165      	str	r5, [r4, #20]
 800a274:	444e      	add	r6, r9
 800a276:	eba5 0509 	sub.w	r5, r5, r9
 800a27a:	6026      	str	r6, [r4, #0]
 800a27c:	60a5      	str	r5, [r4, #8]
 800a27e:	463e      	mov	r6, r7
 800a280:	42be      	cmp	r6, r7
 800a282:	d900      	bls.n	800a286 <__ssputs_r+0x72>
 800a284:	463e      	mov	r6, r7
 800a286:	6820      	ldr	r0, [r4, #0]
 800a288:	4632      	mov	r2, r6
 800a28a:	4641      	mov	r1, r8
 800a28c:	f000 fefb 	bl	800b086 <memmove>
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	1b9b      	subs	r3, r3, r6
 800a294:	60a3      	str	r3, [r4, #8]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	4433      	add	r3, r6
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	2000      	movs	r0, #0
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	f001 fae1 	bl	800b86a <_realloc_r>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d1e0      	bne.n	800a270 <__ssputs_r+0x5c>
 800a2ae:	6921      	ldr	r1, [r4, #16]
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	f7fe fb81 	bl	80089b8 <_free_r>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	f8ca 3000 	str.w	r3, [sl]
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	e7e9      	b.n	800a29e <__ssputs_r+0x8a>
	...

0800a2cc <_svfiprintf_r>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	898b      	ldrh	r3, [r1, #12]
 800a2d4:	061b      	lsls	r3, r3, #24
 800a2d6:	b09d      	sub	sp, #116	@ 0x74
 800a2d8:	4607      	mov	r7, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	d510      	bpl.n	800a302 <_svfiprintf_r+0x36>
 800a2e0:	690b      	ldr	r3, [r1, #16]
 800a2e2:	b973      	cbnz	r3, 800a302 <_svfiprintf_r+0x36>
 800a2e4:	2140      	movs	r1, #64	@ 0x40
 800a2e6:	f7fe fbdb 	bl	8008aa0 <_malloc_r>
 800a2ea:	6028      	str	r0, [r5, #0]
 800a2ec:	6128      	str	r0, [r5, #16]
 800a2ee:	b930      	cbnz	r0, 800a2fe <_svfiprintf_r+0x32>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	b01d      	add	sp, #116	@ 0x74
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	2340      	movs	r3, #64	@ 0x40
 800a300:	616b      	str	r3, [r5, #20]
 800a302:	2300      	movs	r3, #0
 800a304:	9309      	str	r3, [sp, #36]	@ 0x24
 800a306:	2320      	movs	r3, #32
 800a308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a310:	2330      	movs	r3, #48	@ 0x30
 800a312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4b0 <_svfiprintf_r+0x1e4>
 800a316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a31a:	f04f 0901 	mov.w	r9, #1
 800a31e:	4623      	mov	r3, r4
 800a320:	469a      	mov	sl, r3
 800a322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a326:	b10a      	cbz	r2, 800a32c <_svfiprintf_r+0x60>
 800a328:	2a25      	cmp	r2, #37	@ 0x25
 800a32a:	d1f9      	bne.n	800a320 <_svfiprintf_r+0x54>
 800a32c:	ebba 0b04 	subs.w	fp, sl, r4
 800a330:	d00b      	beq.n	800a34a <_svfiprintf_r+0x7e>
 800a332:	465b      	mov	r3, fp
 800a334:	4622      	mov	r2, r4
 800a336:	4629      	mov	r1, r5
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ff6b 	bl	800a214 <__ssputs_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	f000 80a7 	beq.w	800a492 <_svfiprintf_r+0x1c6>
 800a344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a346:	445a      	add	r2, fp
 800a348:	9209      	str	r2, [sp, #36]	@ 0x24
 800a34a:	f89a 3000 	ldrb.w	r3, [sl]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 809f 	beq.w	800a492 <_svfiprintf_r+0x1c6>
 800a354:	2300      	movs	r3, #0
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35e:	f10a 0a01 	add.w	sl, sl, #1
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	9307      	str	r3, [sp, #28]
 800a366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a36c:	4654      	mov	r4, sl
 800a36e:	2205      	movs	r2, #5
 800a370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a374:	484e      	ldr	r0, [pc, #312]	@ (800a4b0 <_svfiprintf_r+0x1e4>)
 800a376:	f7f5 ff3b 	bl	80001f0 <memchr>
 800a37a:	9a04      	ldr	r2, [sp, #16]
 800a37c:	b9d8      	cbnz	r0, 800a3b6 <_svfiprintf_r+0xea>
 800a37e:	06d0      	lsls	r0, r2, #27
 800a380:	bf44      	itt	mi
 800a382:	2320      	movmi	r3, #32
 800a384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a388:	0711      	lsls	r1, r2, #28
 800a38a:	bf44      	itt	mi
 800a38c:	232b      	movmi	r3, #43	@ 0x2b
 800a38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a392:	f89a 3000 	ldrb.w	r3, [sl]
 800a396:	2b2a      	cmp	r3, #42	@ 0x2a
 800a398:	d015      	beq.n	800a3c6 <_svfiprintf_r+0xfa>
 800a39a:	9a07      	ldr	r2, [sp, #28]
 800a39c:	4654      	mov	r4, sl
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f04f 0c0a 	mov.w	ip, #10
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3aa:	3b30      	subs	r3, #48	@ 0x30
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d94b      	bls.n	800a448 <_svfiprintf_r+0x17c>
 800a3b0:	b1b0      	cbz	r0, 800a3e0 <_svfiprintf_r+0x114>
 800a3b2:	9207      	str	r2, [sp, #28]
 800a3b4:	e014      	b.n	800a3e0 <_svfiprintf_r+0x114>
 800a3b6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	46a2      	mov	sl, r4
 800a3c4:	e7d2      	b.n	800a36c <_svfiprintf_r+0xa0>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	1d19      	adds	r1, r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	9103      	str	r1, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfbb      	ittet	lt
 800a3d2:	425b      	neglt	r3, r3
 800a3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d8:	9307      	strge	r3, [sp, #28]
 800a3da:	9307      	strlt	r3, [sp, #28]
 800a3dc:	bfb8      	it	lt
 800a3de:	9204      	strlt	r2, [sp, #16]
 800a3e0:	7823      	ldrb	r3, [r4, #0]
 800a3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3e4:	d10a      	bne.n	800a3fc <_svfiprintf_r+0x130>
 800a3e6:	7863      	ldrb	r3, [r4, #1]
 800a3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ea:	d132      	bne.n	800a452 <_svfiprintf_r+0x186>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	9203      	str	r2, [sp, #12]
 800a3f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3f8:	3402      	adds	r4, #2
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4c0 <_svfiprintf_r+0x1f4>
 800a400:	7821      	ldrb	r1, [r4, #0]
 800a402:	2203      	movs	r2, #3
 800a404:	4650      	mov	r0, sl
 800a406:	f7f5 fef3 	bl	80001f0 <memchr>
 800a40a:	b138      	cbz	r0, 800a41c <_svfiprintf_r+0x150>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	eba0 000a 	sub.w	r0, r0, sl
 800a412:	2240      	movs	r2, #64	@ 0x40
 800a414:	4082      	lsls	r2, r0
 800a416:	4313      	orrs	r3, r2
 800a418:	3401      	adds	r4, #1
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a420:	4824      	ldr	r0, [pc, #144]	@ (800a4b4 <_svfiprintf_r+0x1e8>)
 800a422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a426:	2206      	movs	r2, #6
 800a428:	f7f5 fee2 	bl	80001f0 <memchr>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d036      	beq.n	800a49e <_svfiprintf_r+0x1d2>
 800a430:	4b21      	ldr	r3, [pc, #132]	@ (800a4b8 <_svfiprintf_r+0x1ec>)
 800a432:	bb1b      	cbnz	r3, 800a47c <_svfiprintf_r+0x1b0>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	3307      	adds	r3, #7
 800a438:	f023 0307 	bic.w	r3, r3, #7
 800a43c:	3308      	adds	r3, #8
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a442:	4433      	add	r3, r6
 800a444:	9309      	str	r3, [sp, #36]	@ 0x24
 800a446:	e76a      	b.n	800a31e <_svfiprintf_r+0x52>
 800a448:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44c:	460c      	mov	r4, r1
 800a44e:	2001      	movs	r0, #1
 800a450:	e7a8      	b.n	800a3a4 <_svfiprintf_r+0xd8>
 800a452:	2300      	movs	r3, #0
 800a454:	3401      	adds	r4, #1
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	4619      	mov	r1, r3
 800a45a:	f04f 0c0a 	mov.w	ip, #10
 800a45e:	4620      	mov	r0, r4
 800a460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a464:	3a30      	subs	r2, #48	@ 0x30
 800a466:	2a09      	cmp	r2, #9
 800a468:	d903      	bls.n	800a472 <_svfiprintf_r+0x1a6>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0c6      	beq.n	800a3fc <_svfiprintf_r+0x130>
 800a46e:	9105      	str	r1, [sp, #20]
 800a470:	e7c4      	b.n	800a3fc <_svfiprintf_r+0x130>
 800a472:	fb0c 2101 	mla	r1, ip, r1, r2
 800a476:	4604      	mov	r4, r0
 800a478:	2301      	movs	r3, #1
 800a47a:	e7f0      	b.n	800a45e <_svfiprintf_r+0x192>
 800a47c:	ab03      	add	r3, sp, #12
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	462a      	mov	r2, r5
 800a482:	4b0e      	ldr	r3, [pc, #56]	@ (800a4bc <_svfiprintf_r+0x1f0>)
 800a484:	a904      	add	r1, sp, #16
 800a486:	4638      	mov	r0, r7
 800a488:	f7fc fb70 	bl	8006b6c <_printf_float>
 800a48c:	1c42      	adds	r2, r0, #1
 800a48e:	4606      	mov	r6, r0
 800a490:	d1d6      	bne.n	800a440 <_svfiprintf_r+0x174>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	065b      	lsls	r3, r3, #25
 800a496:	f53f af2d 	bmi.w	800a2f4 <_svfiprintf_r+0x28>
 800a49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a49c:	e72c      	b.n	800a2f8 <_svfiprintf_r+0x2c>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <_svfiprintf_r+0x1f0>)
 800a4a6:	a904      	add	r1, sp, #16
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7fc fdf7 	bl	800709c <_printf_i>
 800a4ae:	e7ed      	b.n	800a48c <_svfiprintf_r+0x1c0>
 800a4b0:	0800bd1b 	.word	0x0800bd1b
 800a4b4:	0800bd25 	.word	0x0800bd25
 800a4b8:	08006b6d 	.word	0x08006b6d
 800a4bc:	0800a215 	.word	0x0800a215
 800a4c0:	0800bd21 	.word	0x0800bd21

0800a4c4 <_sungetc_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	1c4b      	adds	r3, r1, #1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	d103      	bne.n	800a4d4 <_sungetc_r+0x10>
 800a4cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	8993      	ldrh	r3, [r2, #12]
 800a4d6:	f023 0320 	bic.w	r3, r3, #32
 800a4da:	8193      	strh	r3, [r2, #12]
 800a4dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4de:	6852      	ldr	r2, [r2, #4]
 800a4e0:	b2cd      	uxtb	r5, r1
 800a4e2:	b18b      	cbz	r3, 800a508 <_sungetc_r+0x44>
 800a4e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	dd08      	ble.n	800a4fc <_sungetc_r+0x38>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	6022      	str	r2, [r4, #0]
 800a4f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	6063      	str	r3, [r4, #4]
 800a4fa:	e7e9      	b.n	800a4d0 <_sungetc_r+0xc>
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f000 fd88 	bl	800b012 <__submore>
 800a502:	2800      	cmp	r0, #0
 800a504:	d0f1      	beq.n	800a4ea <_sungetc_r+0x26>
 800a506:	e7e1      	b.n	800a4cc <_sungetc_r+0x8>
 800a508:	6921      	ldr	r1, [r4, #16]
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	b151      	cbz	r1, 800a524 <_sungetc_r+0x60>
 800a50e:	4299      	cmp	r1, r3
 800a510:	d208      	bcs.n	800a524 <_sungetc_r+0x60>
 800a512:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a516:	42a9      	cmp	r1, r5
 800a518:	d104      	bne.n	800a524 <_sungetc_r+0x60>
 800a51a:	3b01      	subs	r3, #1
 800a51c:	3201      	adds	r2, #1
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	6062      	str	r2, [r4, #4]
 800a522:	e7d5      	b.n	800a4d0 <_sungetc_r+0xc>
 800a524:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a52c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a52e:	2303      	movs	r3, #3
 800a530:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a532:	4623      	mov	r3, r4
 800a534:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	2301      	movs	r3, #1
 800a53c:	e7dc      	b.n	800a4f8 <_sungetc_r+0x34>

0800a53e <__ssrefill_r>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a544:	b169      	cbz	r1, 800a562 <__ssrefill_r+0x24>
 800a546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d001      	beq.n	800a552 <__ssrefill_r+0x14>
 800a54e:	f7fe fa33 	bl	80089b8 <_free_r>
 800a552:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a554:	6063      	str	r3, [r4, #4]
 800a556:	2000      	movs	r0, #0
 800a558:	6360      	str	r0, [r4, #52]	@ 0x34
 800a55a:	b113      	cbz	r3, 800a562 <__ssrefill_r+0x24>
 800a55c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	bd10      	pop	{r4, pc}
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	2300      	movs	r3, #0
 800a568:	6063      	str	r3, [r4, #4]
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f043 0320 	orr.w	r3, r3, #32
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	f04f 30ff 	mov.w	r0, #4294967295
 800a576:	e7f3      	b.n	800a560 <__ssrefill_r+0x22>

0800a578 <__ssvfiscanf_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a582:	2100      	movs	r1, #0
 800a584:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a588:	49a6      	ldr	r1, [pc, #664]	@ (800a824 <__ssvfiscanf_r+0x2ac>)
 800a58a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a58c:	f10d 0804 	add.w	r8, sp, #4
 800a590:	49a5      	ldr	r1, [pc, #660]	@ (800a828 <__ssvfiscanf_r+0x2b0>)
 800a592:	4fa6      	ldr	r7, [pc, #664]	@ (800a82c <__ssvfiscanf_r+0x2b4>)
 800a594:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a598:	4606      	mov	r6, r0
 800a59a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	f892 9000 	ldrb.w	r9, [r2]
 800a5a2:	f1b9 0f00 	cmp.w	r9, #0
 800a5a6:	f000 8158 	beq.w	800a85a <__ssvfiscanf_r+0x2e2>
 800a5aa:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a5ae:	f013 0308 	ands.w	r3, r3, #8
 800a5b2:	f102 0501 	add.w	r5, r2, #1
 800a5b6:	d019      	beq.n	800a5ec <__ssvfiscanf_r+0x74>
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dd0f      	ble.n	800a5de <__ssvfiscanf_r+0x66>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	5cba      	ldrb	r2, [r7, r2]
 800a5c4:	0712      	lsls	r2, r2, #28
 800a5c6:	d401      	bmi.n	800a5cc <__ssvfiscanf_r+0x54>
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	e7e8      	b.n	800a59e <__ssvfiscanf_r+0x26>
 800a5cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	9245      	str	r2, [sp, #276]	@ 0x114
 800a5d2:	6862      	ldr	r2, [r4, #4]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	3a01      	subs	r2, #1
 800a5d8:	6062      	str	r2, [r4, #4]
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	e7ec      	b.n	800a5b8 <__ssvfiscanf_r+0x40>
 800a5de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	4798      	blx	r3
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d0e9      	beq.n	800a5be <__ssvfiscanf_r+0x46>
 800a5ea:	e7ed      	b.n	800a5c8 <__ssvfiscanf_r+0x50>
 800a5ec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a5f0:	f040 8085 	bne.w	800a6fe <__ssvfiscanf_r+0x186>
 800a5f4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a5f6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a5f8:	7853      	ldrb	r3, [r2, #1]
 800a5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fc:	bf02      	ittt	eq
 800a5fe:	2310      	moveq	r3, #16
 800a600:	1c95      	addeq	r5, r2, #2
 800a602:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a604:	220a      	movs	r2, #10
 800a606:	46aa      	mov	sl, r5
 800a608:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a60c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a610:	2b09      	cmp	r3, #9
 800a612:	d91e      	bls.n	800a652 <__ssvfiscanf_r+0xda>
 800a614:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a830 <__ssvfiscanf_r+0x2b8>
 800a618:	2203      	movs	r2, #3
 800a61a:	4658      	mov	r0, fp
 800a61c:	f7f5 fde8 	bl	80001f0 <memchr>
 800a620:	b138      	cbz	r0, 800a632 <__ssvfiscanf_r+0xba>
 800a622:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a624:	eba0 000b 	sub.w	r0, r0, fp
 800a628:	2301      	movs	r3, #1
 800a62a:	4083      	lsls	r3, r0
 800a62c:	4313      	orrs	r3, r2
 800a62e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a630:	4655      	mov	r5, sl
 800a632:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a636:	2b78      	cmp	r3, #120	@ 0x78
 800a638:	d806      	bhi.n	800a648 <__ssvfiscanf_r+0xd0>
 800a63a:	2b57      	cmp	r3, #87	@ 0x57
 800a63c:	d810      	bhi.n	800a660 <__ssvfiscanf_r+0xe8>
 800a63e:	2b25      	cmp	r3, #37	@ 0x25
 800a640:	d05d      	beq.n	800a6fe <__ssvfiscanf_r+0x186>
 800a642:	d857      	bhi.n	800a6f4 <__ssvfiscanf_r+0x17c>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d075      	beq.n	800a734 <__ssvfiscanf_r+0x1bc>
 800a648:	2303      	movs	r3, #3
 800a64a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a64c:	230a      	movs	r3, #10
 800a64e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a650:	e088      	b.n	800a764 <__ssvfiscanf_r+0x1ec>
 800a652:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a654:	fb02 1103 	mla	r1, r2, r3, r1
 800a658:	3930      	subs	r1, #48	@ 0x30
 800a65a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a65c:	4655      	mov	r5, sl
 800a65e:	e7d2      	b.n	800a606 <__ssvfiscanf_r+0x8e>
 800a660:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a664:	2a20      	cmp	r2, #32
 800a666:	d8ef      	bhi.n	800a648 <__ssvfiscanf_r+0xd0>
 800a668:	a101      	add	r1, pc, #4	@ (adr r1, 800a670 <__ssvfiscanf_r+0xf8>)
 800a66a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a743 	.word	0x0800a743
 800a674:	0800a649 	.word	0x0800a649
 800a678:	0800a649 	.word	0x0800a649
 800a67c:	0800a79d 	.word	0x0800a79d
 800a680:	0800a649 	.word	0x0800a649
 800a684:	0800a649 	.word	0x0800a649
 800a688:	0800a649 	.word	0x0800a649
 800a68c:	0800a649 	.word	0x0800a649
 800a690:	0800a649 	.word	0x0800a649
 800a694:	0800a649 	.word	0x0800a649
 800a698:	0800a649 	.word	0x0800a649
 800a69c:	0800a7b3 	.word	0x0800a7b3
 800a6a0:	0800a799 	.word	0x0800a799
 800a6a4:	0800a6fb 	.word	0x0800a6fb
 800a6a8:	0800a6fb 	.word	0x0800a6fb
 800a6ac:	0800a6fb 	.word	0x0800a6fb
 800a6b0:	0800a649 	.word	0x0800a649
 800a6b4:	0800a755 	.word	0x0800a755
 800a6b8:	0800a649 	.word	0x0800a649
 800a6bc:	0800a649 	.word	0x0800a649
 800a6c0:	0800a649 	.word	0x0800a649
 800a6c4:	0800a649 	.word	0x0800a649
 800a6c8:	0800a7c3 	.word	0x0800a7c3
 800a6cc:	0800a75d 	.word	0x0800a75d
 800a6d0:	0800a73b 	.word	0x0800a73b
 800a6d4:	0800a649 	.word	0x0800a649
 800a6d8:	0800a649 	.word	0x0800a649
 800a6dc:	0800a7bf 	.word	0x0800a7bf
 800a6e0:	0800a649 	.word	0x0800a649
 800a6e4:	0800a799 	.word	0x0800a799
 800a6e8:	0800a649 	.word	0x0800a649
 800a6ec:	0800a649 	.word	0x0800a649
 800a6f0:	0800a743 	.word	0x0800a743
 800a6f4:	3b45      	subs	r3, #69	@ 0x45
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d8a6      	bhi.n	800a648 <__ssvfiscanf_r+0xd0>
 800a6fa:	2305      	movs	r3, #5
 800a6fc:	e031      	b.n	800a762 <__ssvfiscanf_r+0x1ea>
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	dd0d      	ble.n	800a720 <__ssvfiscanf_r+0x1a8>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	781a      	ldrb	r2, [r3, #0]
 800a708:	454a      	cmp	r2, r9
 800a70a:	f040 80a6 	bne.w	800a85a <__ssvfiscanf_r+0x2e2>
 800a70e:	3301      	adds	r3, #1
 800a710:	6862      	ldr	r2, [r4, #4]
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a716:	3a01      	subs	r2, #1
 800a718:	3301      	adds	r3, #1
 800a71a:	6062      	str	r2, [r4, #4]
 800a71c:	9345      	str	r3, [sp, #276]	@ 0x114
 800a71e:	e753      	b.n	800a5c8 <__ssvfiscanf_r+0x50>
 800a720:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a722:	4621      	mov	r1, r4
 800a724:	4630      	mov	r0, r6
 800a726:	4798      	blx	r3
 800a728:	2800      	cmp	r0, #0
 800a72a:	d0eb      	beq.n	800a704 <__ssvfiscanf_r+0x18c>
 800a72c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a72e:	2800      	cmp	r0, #0
 800a730:	f040 808b 	bne.w	800a84a <__ssvfiscanf_r+0x2d2>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e08b      	b.n	800a852 <__ssvfiscanf_r+0x2da>
 800a73a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a73c:	f042 0220 	orr.w	r2, r2, #32
 800a740:	9241      	str	r2, [sp, #260]	@ 0x104
 800a742:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a748:	9241      	str	r2, [sp, #260]	@ 0x104
 800a74a:	2210      	movs	r2, #16
 800a74c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a74e:	9242      	str	r2, [sp, #264]	@ 0x108
 800a750:	d902      	bls.n	800a758 <__ssvfiscanf_r+0x1e0>
 800a752:	e005      	b.n	800a760 <__ssvfiscanf_r+0x1e8>
 800a754:	2300      	movs	r3, #0
 800a756:	9342      	str	r3, [sp, #264]	@ 0x108
 800a758:	2303      	movs	r3, #3
 800a75a:	e002      	b.n	800a762 <__ssvfiscanf_r+0x1ea>
 800a75c:	2308      	movs	r3, #8
 800a75e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a760:	2304      	movs	r3, #4
 800a762:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd39      	ble.n	800a7de <__ssvfiscanf_r+0x266>
 800a76a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a76c:	0659      	lsls	r1, r3, #25
 800a76e:	d404      	bmi.n	800a77a <__ssvfiscanf_r+0x202>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	5cba      	ldrb	r2, [r7, r2]
 800a776:	0712      	lsls	r2, r2, #28
 800a778:	d438      	bmi.n	800a7ec <__ssvfiscanf_r+0x274>
 800a77a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	dc47      	bgt.n	800a810 <__ssvfiscanf_r+0x298>
 800a780:	466b      	mov	r3, sp
 800a782:	4622      	mov	r2, r4
 800a784:	a941      	add	r1, sp, #260	@ 0x104
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f9ae 	bl	800aae8 <_scanf_chars>
 800a78c:	2801      	cmp	r0, #1
 800a78e:	d064      	beq.n	800a85a <__ssvfiscanf_r+0x2e2>
 800a790:	2802      	cmp	r0, #2
 800a792:	f47f af19 	bne.w	800a5c8 <__ssvfiscanf_r+0x50>
 800a796:	e7c9      	b.n	800a72c <__ssvfiscanf_r+0x1b4>
 800a798:	220a      	movs	r2, #10
 800a79a:	e7d7      	b.n	800a74c <__ssvfiscanf_r+0x1d4>
 800a79c:	4629      	mov	r1, r5
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f000 fbfe 	bl	800afa0 <__sccl>
 800a7a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7aa:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e7d7      	b.n	800a762 <__ssvfiscanf_r+0x1ea>
 800a7b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b8:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e7d1      	b.n	800a762 <__ssvfiscanf_r+0x1ea>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e7cf      	b.n	800a762 <__ssvfiscanf_r+0x1ea>
 800a7c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a7c4:	06c3      	lsls	r3, r0, #27
 800a7c6:	f53f aeff 	bmi.w	800a5c8 <__ssvfiscanf_r+0x50>
 800a7ca:	9b00      	ldr	r3, [sp, #0]
 800a7cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7ce:	1d19      	adds	r1, r3, #4
 800a7d0:	9100      	str	r1, [sp, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	07c0      	lsls	r0, r0, #31
 800a7d6:	bf4c      	ite	mi
 800a7d8:	801a      	strhmi	r2, [r3, #0]
 800a7da:	601a      	strpl	r2, [r3, #0]
 800a7dc:	e6f4      	b.n	800a5c8 <__ssvfiscanf_r+0x50>
 800a7de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	4798      	blx	r3
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d0bf      	beq.n	800a76a <__ssvfiscanf_r+0x1f2>
 800a7ea:	e79f      	b.n	800a72c <__ssvfiscanf_r+0x1b4>
 800a7ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7ee:	3201      	adds	r2, #1
 800a7f0:	9245      	str	r2, [sp, #276]	@ 0x114
 800a7f2:	6862      	ldr	r2, [r4, #4]
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	2a00      	cmp	r2, #0
 800a7f8:	6062      	str	r2, [r4, #4]
 800a7fa:	dd02      	ble.n	800a802 <__ssvfiscanf_r+0x28a>
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	e7b6      	b.n	800a770 <__ssvfiscanf_r+0x1f8>
 800a802:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a804:	4621      	mov	r1, r4
 800a806:	4630      	mov	r0, r6
 800a808:	4798      	blx	r3
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d0b0      	beq.n	800a770 <__ssvfiscanf_r+0x1f8>
 800a80e:	e78d      	b.n	800a72c <__ssvfiscanf_r+0x1b4>
 800a810:	2b04      	cmp	r3, #4
 800a812:	dc0f      	bgt.n	800a834 <__ssvfiscanf_r+0x2bc>
 800a814:	466b      	mov	r3, sp
 800a816:	4622      	mov	r2, r4
 800a818:	a941      	add	r1, sp, #260	@ 0x104
 800a81a:	4630      	mov	r0, r6
 800a81c:	f000 f9be 	bl	800ab9c <_scanf_i>
 800a820:	e7b4      	b.n	800a78c <__ssvfiscanf_r+0x214>
 800a822:	bf00      	nop
 800a824:	0800a4c5 	.word	0x0800a4c5
 800a828:	0800a53f 	.word	0x0800a53f
 800a82c:	0800bf39 	.word	0x0800bf39
 800a830:	0800bd21 	.word	0x0800bd21
 800a834:	4b0a      	ldr	r3, [pc, #40]	@ (800a860 <__ssvfiscanf_r+0x2e8>)
 800a836:	2b00      	cmp	r3, #0
 800a838:	f43f aec6 	beq.w	800a5c8 <__ssvfiscanf_r+0x50>
 800a83c:	466b      	mov	r3, sp
 800a83e:	4622      	mov	r2, r4
 800a840:	a941      	add	r1, sp, #260	@ 0x104
 800a842:	4630      	mov	r0, r6
 800a844:	f7fc fd48 	bl	80072d8 <_scanf_float>
 800a848:	e7a0      	b.n	800a78c <__ssvfiscanf_r+0x214>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	065b      	lsls	r3, r3, #25
 800a84e:	f53f af71 	bmi.w	800a734 <__ssvfiscanf_r+0x1bc>
 800a852:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a85c:	e7f9      	b.n	800a852 <__ssvfiscanf_r+0x2da>
 800a85e:	bf00      	nop
 800a860:	080072d9 	.word	0x080072d9

0800a864 <__sfputc_r>:
 800a864:	6893      	ldr	r3, [r2, #8]
 800a866:	3b01      	subs	r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	b410      	push	{r4}
 800a86c:	6093      	str	r3, [r2, #8]
 800a86e:	da08      	bge.n	800a882 <__sfputc_r+0x1e>
 800a870:	6994      	ldr	r4, [r2, #24]
 800a872:	42a3      	cmp	r3, r4
 800a874:	db01      	blt.n	800a87a <__sfputc_r+0x16>
 800a876:	290a      	cmp	r1, #10
 800a878:	d103      	bne.n	800a882 <__sfputc_r+0x1e>
 800a87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a87e:	f7fd b910 	b.w	8007aa2 <__swbuf_r>
 800a882:	6813      	ldr	r3, [r2, #0]
 800a884:	1c58      	adds	r0, r3, #1
 800a886:	6010      	str	r0, [r2, #0]
 800a888:	7019      	strb	r1, [r3, #0]
 800a88a:	4608      	mov	r0, r1
 800a88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <__sfputs_r>:
 800a892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a894:	4606      	mov	r6, r0
 800a896:	460f      	mov	r7, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	18d5      	adds	r5, r2, r3
 800a89c:	42ac      	cmp	r4, r5
 800a89e:	d101      	bne.n	800a8a4 <__sfputs_r+0x12>
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	e007      	b.n	800a8b4 <__sfputs_r+0x22>
 800a8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a8:	463a      	mov	r2, r7
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7ff ffda 	bl	800a864 <__sfputc_r>
 800a8b0:	1c43      	adds	r3, r0, #1
 800a8b2:	d1f3      	bne.n	800a89c <__sfputs_r+0xa>
 800a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8b8 <_vfiprintf_r>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	460d      	mov	r5, r1
 800a8be:	b09d      	sub	sp, #116	@ 0x74
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	4698      	mov	r8, r3
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	b118      	cbz	r0, 800a8d0 <_vfiprintf_r+0x18>
 800a8c8:	6a03      	ldr	r3, [r0, #32]
 800a8ca:	b90b      	cbnz	r3, 800a8d0 <_vfiprintf_r+0x18>
 800a8cc:	f7fc ff9e 	bl	800780c <__sinit>
 800a8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8d2:	07d9      	lsls	r1, r3, #31
 800a8d4:	d405      	bmi.n	800a8e2 <_vfiprintf_r+0x2a>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	059a      	lsls	r2, r3, #22
 800a8da:	d402      	bmi.n	800a8e2 <_vfiprintf_r+0x2a>
 800a8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8de:	f7fd fa02 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 800a8e2:	89ab      	ldrh	r3, [r5, #12]
 800a8e4:	071b      	lsls	r3, r3, #28
 800a8e6:	d501      	bpl.n	800a8ec <_vfiprintf_r+0x34>
 800a8e8:	692b      	ldr	r3, [r5, #16]
 800a8ea:	b99b      	cbnz	r3, 800a914 <_vfiprintf_r+0x5c>
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7fd f916 	bl	8007b20 <__swsetup_r>
 800a8f4:	b170      	cbz	r0, 800a914 <_vfiprintf_r+0x5c>
 800a8f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8f8:	07dc      	lsls	r4, r3, #31
 800a8fa:	d504      	bpl.n	800a906 <_vfiprintf_r+0x4e>
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	b01d      	add	sp, #116	@ 0x74
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a906:	89ab      	ldrh	r3, [r5, #12]
 800a908:	0598      	lsls	r0, r3, #22
 800a90a:	d4f7      	bmi.n	800a8fc <_vfiprintf_r+0x44>
 800a90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a90e:	f7fd f9eb 	bl	8007ce8 <__retarget_lock_release_recursive>
 800a912:	e7f3      	b.n	800a8fc <_vfiprintf_r+0x44>
 800a914:	2300      	movs	r3, #0
 800a916:	9309      	str	r3, [sp, #36]	@ 0x24
 800a918:	2320      	movs	r3, #32
 800a91a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a922:	2330      	movs	r3, #48	@ 0x30
 800a924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aad4 <_vfiprintf_r+0x21c>
 800a928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a92c:	f04f 0901 	mov.w	r9, #1
 800a930:	4623      	mov	r3, r4
 800a932:	469a      	mov	sl, r3
 800a934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a938:	b10a      	cbz	r2, 800a93e <_vfiprintf_r+0x86>
 800a93a:	2a25      	cmp	r2, #37	@ 0x25
 800a93c:	d1f9      	bne.n	800a932 <_vfiprintf_r+0x7a>
 800a93e:	ebba 0b04 	subs.w	fp, sl, r4
 800a942:	d00b      	beq.n	800a95c <_vfiprintf_r+0xa4>
 800a944:	465b      	mov	r3, fp
 800a946:	4622      	mov	r2, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff ffa1 	bl	800a892 <__sfputs_r>
 800a950:	3001      	adds	r0, #1
 800a952:	f000 80a7 	beq.w	800aaa4 <_vfiprintf_r+0x1ec>
 800a956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a958:	445a      	add	r2, fp
 800a95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a95c:	f89a 3000 	ldrb.w	r3, [sl]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 809f 	beq.w	800aaa4 <_vfiprintf_r+0x1ec>
 800a966:	2300      	movs	r3, #0
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a970:	f10a 0a01 	add.w	sl, sl, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	9307      	str	r3, [sp, #28]
 800a978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a97e:	4654      	mov	r4, sl
 800a980:	2205      	movs	r2, #5
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	4853      	ldr	r0, [pc, #332]	@ (800aad4 <_vfiprintf_r+0x21c>)
 800a988:	f7f5 fc32 	bl	80001f0 <memchr>
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	b9d8      	cbnz	r0, 800a9c8 <_vfiprintf_r+0x110>
 800a990:	06d1      	lsls	r1, r2, #27
 800a992:	bf44      	itt	mi
 800a994:	2320      	movmi	r3, #32
 800a996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a99a:	0713      	lsls	r3, r2, #28
 800a99c:	bf44      	itt	mi
 800a99e:	232b      	movmi	r3, #43	@ 0x2b
 800a9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9aa:	d015      	beq.n	800a9d8 <_vfiprintf_r+0x120>
 800a9ac:	9a07      	ldr	r2, [sp, #28]
 800a9ae:	4654      	mov	r4, sl
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9bc:	3b30      	subs	r3, #48	@ 0x30
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d94b      	bls.n	800aa5a <_vfiprintf_r+0x1a2>
 800a9c2:	b1b0      	cbz	r0, 800a9f2 <_vfiprintf_r+0x13a>
 800a9c4:	9207      	str	r2, [sp, #28]
 800a9c6:	e014      	b.n	800a9f2 <_vfiprintf_r+0x13a>
 800a9c8:	eba0 0308 	sub.w	r3, r0, r8
 800a9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	46a2      	mov	sl, r4
 800a9d6:	e7d2      	b.n	800a97e <_vfiprintf_r+0xc6>
 800a9d8:	9b03      	ldr	r3, [sp, #12]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	9103      	str	r1, [sp, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfbb      	ittet	lt
 800a9e4:	425b      	neglt	r3, r3
 800a9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ea:	9307      	strge	r3, [sp, #28]
 800a9ec:	9307      	strlt	r3, [sp, #28]
 800a9ee:	bfb8      	it	lt
 800a9f0:	9204      	strlt	r2, [sp, #16]
 800a9f2:	7823      	ldrb	r3, [r4, #0]
 800a9f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9f6:	d10a      	bne.n	800aa0e <_vfiprintf_r+0x156>
 800a9f8:	7863      	ldrb	r3, [r4, #1]
 800a9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9fc:	d132      	bne.n	800aa64 <_vfiprintf_r+0x1ac>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9203      	str	r2, [sp, #12]
 800aa06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa0a:	3402      	adds	r4, #2
 800aa0c:	9305      	str	r3, [sp, #20]
 800aa0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aae4 <_vfiprintf_r+0x22c>
 800aa12:	7821      	ldrb	r1, [r4, #0]
 800aa14:	2203      	movs	r2, #3
 800aa16:	4650      	mov	r0, sl
 800aa18:	f7f5 fbea 	bl	80001f0 <memchr>
 800aa1c:	b138      	cbz	r0, 800aa2e <_vfiprintf_r+0x176>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	eba0 000a 	sub.w	r0, r0, sl
 800aa24:	2240      	movs	r2, #64	@ 0x40
 800aa26:	4082      	lsls	r2, r0
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	3401      	adds	r4, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa32:	4829      	ldr	r0, [pc, #164]	@ (800aad8 <_vfiprintf_r+0x220>)
 800aa34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa38:	2206      	movs	r2, #6
 800aa3a:	f7f5 fbd9 	bl	80001f0 <memchr>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d03f      	beq.n	800aac2 <_vfiprintf_r+0x20a>
 800aa42:	4b26      	ldr	r3, [pc, #152]	@ (800aadc <_vfiprintf_r+0x224>)
 800aa44:	bb1b      	cbnz	r3, 800aa8e <_vfiprintf_r+0x1d6>
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	3307      	adds	r3, #7
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	3308      	adds	r3, #8
 800aa50:	9303      	str	r3, [sp, #12]
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	443b      	add	r3, r7
 800aa56:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa58:	e76a      	b.n	800a930 <_vfiprintf_r+0x78>
 800aa5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5e:	460c      	mov	r4, r1
 800aa60:	2001      	movs	r0, #1
 800aa62:	e7a8      	b.n	800a9b6 <_vfiprintf_r+0xfe>
 800aa64:	2300      	movs	r3, #0
 800aa66:	3401      	adds	r4, #1
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f04f 0c0a 	mov.w	ip, #10
 800aa70:	4620      	mov	r0, r4
 800aa72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa76:	3a30      	subs	r2, #48	@ 0x30
 800aa78:	2a09      	cmp	r2, #9
 800aa7a:	d903      	bls.n	800aa84 <_vfiprintf_r+0x1cc>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0c6      	beq.n	800aa0e <_vfiprintf_r+0x156>
 800aa80:	9105      	str	r1, [sp, #20]
 800aa82:	e7c4      	b.n	800aa0e <_vfiprintf_r+0x156>
 800aa84:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa88:	4604      	mov	r4, r0
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e7f0      	b.n	800aa70 <_vfiprintf_r+0x1b8>
 800aa8e:	ab03      	add	r3, sp, #12
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	462a      	mov	r2, r5
 800aa94:	4b12      	ldr	r3, [pc, #72]	@ (800aae0 <_vfiprintf_r+0x228>)
 800aa96:	a904      	add	r1, sp, #16
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7fc f867 	bl	8006b6c <_printf_float>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	1c78      	adds	r0, r7, #1
 800aaa2:	d1d6      	bne.n	800aa52 <_vfiprintf_r+0x19a>
 800aaa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaa6:	07d9      	lsls	r1, r3, #31
 800aaa8:	d405      	bmi.n	800aab6 <_vfiprintf_r+0x1fe>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	059a      	lsls	r2, r3, #22
 800aaae:	d402      	bmi.n	800aab6 <_vfiprintf_r+0x1fe>
 800aab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aab2:	f7fd f919 	bl	8007ce8 <__retarget_lock_release_recursive>
 800aab6:	89ab      	ldrh	r3, [r5, #12]
 800aab8:	065b      	lsls	r3, r3, #25
 800aaba:	f53f af1f 	bmi.w	800a8fc <_vfiprintf_r+0x44>
 800aabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac0:	e71e      	b.n	800a900 <_vfiprintf_r+0x48>
 800aac2:	ab03      	add	r3, sp, #12
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	462a      	mov	r2, r5
 800aac8:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <_vfiprintf_r+0x228>)
 800aaca:	a904      	add	r1, sp, #16
 800aacc:	4630      	mov	r0, r6
 800aace:	f7fc fae5 	bl	800709c <_printf_i>
 800aad2:	e7e4      	b.n	800aa9e <_vfiprintf_r+0x1e6>
 800aad4:	0800bd1b 	.word	0x0800bd1b
 800aad8:	0800bd25 	.word	0x0800bd25
 800aadc:	08006b6d 	.word	0x08006b6d
 800aae0:	0800a893 	.word	0x0800a893
 800aae4:	0800bd21 	.word	0x0800bd21

0800aae8 <_scanf_chars>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	4615      	mov	r5, r2
 800aaee:	688a      	ldr	r2, [r1, #8]
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b932      	cbnz	r2, 800ab04 <_scanf_chars+0x1c>
 800aaf6:	698a      	ldr	r2, [r1, #24]
 800aaf8:	2a00      	cmp	r2, #0
 800aafa:	bf14      	ite	ne
 800aafc:	f04f 32ff 	movne.w	r2, #4294967295
 800ab00:	2201      	moveq	r2, #1
 800ab02:	608a      	str	r2, [r1, #8]
 800ab04:	6822      	ldr	r2, [r4, #0]
 800ab06:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ab98 <_scanf_chars+0xb0>
 800ab0a:	06d1      	lsls	r1, r2, #27
 800ab0c:	bf5f      	itttt	pl
 800ab0e:	681a      	ldrpl	r2, [r3, #0]
 800ab10:	1d11      	addpl	r1, r2, #4
 800ab12:	6019      	strpl	r1, [r3, #0]
 800ab14:	6816      	ldrpl	r6, [r2, #0]
 800ab16:	2700      	movs	r7, #0
 800ab18:	69a0      	ldr	r0, [r4, #24]
 800ab1a:	b188      	cbz	r0, 800ab40 <_scanf_chars+0x58>
 800ab1c:	2801      	cmp	r0, #1
 800ab1e:	d107      	bne.n	800ab30 <_scanf_chars+0x48>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	781a      	ldrb	r2, [r3, #0]
 800ab24:	6963      	ldr	r3, [r4, #20]
 800ab26:	5c9b      	ldrb	r3, [r3, r2]
 800ab28:	b953      	cbnz	r3, 800ab40 <_scanf_chars+0x58>
 800ab2a:	2f00      	cmp	r7, #0
 800ab2c:	d031      	beq.n	800ab92 <_scanf_chars+0xaa>
 800ab2e:	e022      	b.n	800ab76 <_scanf_chars+0x8e>
 800ab30:	2802      	cmp	r0, #2
 800ab32:	d120      	bne.n	800ab76 <_scanf_chars+0x8e>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ab3c:	071b      	lsls	r3, r3, #28
 800ab3e:	d41a      	bmi.n	800ab76 <_scanf_chars+0x8e>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	06da      	lsls	r2, r3, #27
 800ab44:	bf5e      	ittt	pl
 800ab46:	682b      	ldrpl	r3, [r5, #0]
 800ab48:	781b      	ldrbpl	r3, [r3, #0]
 800ab4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ab4e:	682a      	ldr	r2, [r5, #0]
 800ab50:	686b      	ldr	r3, [r5, #4]
 800ab52:	3201      	adds	r2, #1
 800ab54:	602a      	str	r2, [r5, #0]
 800ab56:	68a2      	ldr	r2, [r4, #8]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	606b      	str	r3, [r5, #4]
 800ab5e:	3701      	adds	r7, #1
 800ab60:	60a2      	str	r2, [r4, #8]
 800ab62:	b142      	cbz	r2, 800ab76 <_scanf_chars+0x8e>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dcd7      	bgt.n	800ab18 <_scanf_chars+0x30>
 800ab68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4640      	mov	r0, r8
 800ab70:	4798      	blx	r3
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0d0      	beq.n	800ab18 <_scanf_chars+0x30>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	f013 0310 	ands.w	r3, r3, #16
 800ab7c:	d105      	bne.n	800ab8a <_scanf_chars+0xa2>
 800ab7e:	68e2      	ldr	r2, [r4, #12]
 800ab80:	3201      	adds	r2, #1
 800ab82:	60e2      	str	r2, [r4, #12]
 800ab84:	69a2      	ldr	r2, [r4, #24]
 800ab86:	b102      	cbz	r2, 800ab8a <_scanf_chars+0xa2>
 800ab88:	7033      	strb	r3, [r6, #0]
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	443b      	add	r3, r7
 800ab8e:	6123      	str	r3, [r4, #16]
 800ab90:	2000      	movs	r0, #0
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	bf00      	nop
 800ab98:	0800bf39 	.word	0x0800bf39

0800ab9c <_scanf_i>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4698      	mov	r8, r3
 800aba2:	4b74      	ldr	r3, [pc, #464]	@ (800ad74 <_scanf_i+0x1d8>)
 800aba4:	460c      	mov	r4, r1
 800aba6:	4682      	mov	sl, r0
 800aba8:	4616      	mov	r6, r2
 800abaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abae:	b087      	sub	sp, #28
 800abb0:	ab03      	add	r3, sp, #12
 800abb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800abb6:	4b70      	ldr	r3, [pc, #448]	@ (800ad78 <_scanf_i+0x1dc>)
 800abb8:	69a1      	ldr	r1, [r4, #24]
 800abba:	4a70      	ldr	r2, [pc, #448]	@ (800ad7c <_scanf_i+0x1e0>)
 800abbc:	2903      	cmp	r1, #3
 800abbe:	bf08      	it	eq
 800abc0:	461a      	moveq	r2, r3
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	9201      	str	r2, [sp, #4]
 800abc6:	1e5a      	subs	r2, r3, #1
 800abc8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800abcc:	bf88      	it	hi
 800abce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800abd2:	4627      	mov	r7, r4
 800abd4:	bf82      	ittt	hi
 800abd6:	eb03 0905 	addhi.w	r9, r3, r5
 800abda:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800abde:	60a3      	strhi	r3, [r4, #8]
 800abe0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800abe4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800abe8:	bf98      	it	ls
 800abea:	f04f 0900 	movls.w	r9, #0
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	463d      	mov	r5, r7
 800abf2:	f04f 0b00 	mov.w	fp, #0
 800abf6:	6831      	ldr	r1, [r6, #0]
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	7809      	ldrb	r1, [r1, #0]
 800abfc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f7f5 faf5 	bl	80001f0 <memchr>
 800ac06:	b328      	cbz	r0, 800ac54 <_scanf_i+0xb8>
 800ac08:	f1bb 0f01 	cmp.w	fp, #1
 800ac0c:	d159      	bne.n	800acc2 <_scanf_i+0x126>
 800ac0e:	6862      	ldr	r2, [r4, #4]
 800ac10:	b92a      	cbnz	r2, 800ac1e <_scanf_i+0x82>
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	2108      	movs	r1, #8
 800ac16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac1a:	6061      	str	r1, [r4, #4]
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ac24:	6022      	str	r2, [r4, #0]
 800ac26:	68a2      	ldr	r2, [r4, #8]
 800ac28:	1e51      	subs	r1, r2, #1
 800ac2a:	60a1      	str	r1, [r4, #8]
 800ac2c:	b192      	cbz	r2, 800ac54 <_scanf_i+0xb8>
 800ac2e:	6832      	ldr	r2, [r6, #0]
 800ac30:	1c51      	adds	r1, r2, #1
 800ac32:	6031      	str	r1, [r6, #0]
 800ac34:	7812      	ldrb	r2, [r2, #0]
 800ac36:	f805 2b01 	strb.w	r2, [r5], #1
 800ac3a:	6872      	ldr	r2, [r6, #4]
 800ac3c:	3a01      	subs	r2, #1
 800ac3e:	2a00      	cmp	r2, #0
 800ac40:	6072      	str	r2, [r6, #4]
 800ac42:	dc07      	bgt.n	800ac54 <_scanf_i+0xb8>
 800ac44:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4650      	mov	r0, sl
 800ac4c:	4790      	blx	r2
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f040 8085 	bne.w	800ad5e <_scanf_i+0x1c2>
 800ac54:	f10b 0b01 	add.w	fp, fp, #1
 800ac58:	f1bb 0f03 	cmp.w	fp, #3
 800ac5c:	d1cb      	bne.n	800abf6 <_scanf_i+0x5a>
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	b90b      	cbnz	r3, 800ac66 <_scanf_i+0xca>
 800ac62:	230a      	movs	r3, #10
 800ac64:	6063      	str	r3, [r4, #4]
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	4945      	ldr	r1, [pc, #276]	@ (800ad80 <_scanf_i+0x1e4>)
 800ac6a:	6960      	ldr	r0, [r4, #20]
 800ac6c:	1ac9      	subs	r1, r1, r3
 800ac6e:	f000 f997 	bl	800afa0 <__sccl>
 800ac72:	f04f 0b00 	mov.w	fp, #0
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	6822      	ldr	r2, [r4, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d03d      	beq.n	800acfa <_scanf_i+0x15e>
 800ac7e:	6831      	ldr	r1, [r6, #0]
 800ac80:	6960      	ldr	r0, [r4, #20]
 800ac82:	f891 c000 	ldrb.w	ip, [r1]
 800ac86:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d035      	beq.n	800acfa <_scanf_i+0x15e>
 800ac8e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac92:	d124      	bne.n	800acde <_scanf_i+0x142>
 800ac94:	0510      	lsls	r0, r2, #20
 800ac96:	d522      	bpl.n	800acde <_scanf_i+0x142>
 800ac98:	f10b 0b01 	add.w	fp, fp, #1
 800ac9c:	f1b9 0f00 	cmp.w	r9, #0
 800aca0:	d003      	beq.n	800acaa <_scanf_i+0x10e>
 800aca2:	3301      	adds	r3, #1
 800aca4:	f109 39ff 	add.w	r9, r9, #4294967295
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6873      	ldr	r3, [r6, #4]
 800acac:	3b01      	subs	r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	6073      	str	r3, [r6, #4]
 800acb2:	dd1b      	ble.n	800acec <_scanf_i+0x150>
 800acb4:	6833      	ldr	r3, [r6, #0]
 800acb6:	3301      	adds	r3, #1
 800acb8:	6033      	str	r3, [r6, #0]
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	60a3      	str	r3, [r4, #8]
 800acc0:	e7d9      	b.n	800ac76 <_scanf_i+0xda>
 800acc2:	f1bb 0f02 	cmp.w	fp, #2
 800acc6:	d1ae      	bne.n	800ac26 <_scanf_i+0x8a>
 800acc8:	6822      	ldr	r2, [r4, #0]
 800acca:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800acce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800acd2:	d1c4      	bne.n	800ac5e <_scanf_i+0xc2>
 800acd4:	2110      	movs	r1, #16
 800acd6:	6061      	str	r1, [r4, #4]
 800acd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acdc:	e7a2      	b.n	800ac24 <_scanf_i+0x88>
 800acde:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ace2:	6022      	str	r2, [r4, #0]
 800ace4:	780b      	ldrb	r3, [r1, #0]
 800ace6:	f805 3b01 	strb.w	r3, [r5], #1
 800acea:	e7de      	b.n	800acaa <_scanf_i+0x10e>
 800acec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acf0:	4631      	mov	r1, r6
 800acf2:	4650      	mov	r0, sl
 800acf4:	4798      	blx	r3
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d0df      	beq.n	800acba <_scanf_i+0x11e>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	05d9      	lsls	r1, r3, #23
 800acfe:	d50d      	bpl.n	800ad1c <_scanf_i+0x180>
 800ad00:	42bd      	cmp	r5, r7
 800ad02:	d909      	bls.n	800ad18 <_scanf_i+0x17c>
 800ad04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4650      	mov	r0, sl
 800ad10:	4798      	blx	r3
 800ad12:	f105 39ff 	add.w	r9, r5, #4294967295
 800ad16:	464d      	mov	r5, r9
 800ad18:	42bd      	cmp	r5, r7
 800ad1a:	d028      	beq.n	800ad6e <_scanf_i+0x1d2>
 800ad1c:	6822      	ldr	r2, [r4, #0]
 800ad1e:	f012 0210 	ands.w	r2, r2, #16
 800ad22:	d113      	bne.n	800ad4c <_scanf_i+0x1b0>
 800ad24:	702a      	strb	r2, [r5, #0]
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	9e01      	ldr	r6, [sp, #4]
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	47b0      	blx	r6
 800ad30:	f8d8 3000 	ldr.w	r3, [r8]
 800ad34:	6821      	ldr	r1, [r4, #0]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	f8c8 2000 	str.w	r2, [r8]
 800ad3c:	f011 0f20 	tst.w	r1, #32
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	d00f      	beq.n	800ad64 <_scanf_i+0x1c8>
 800ad44:	6018      	str	r0, [r3, #0]
 800ad46:	68e3      	ldr	r3, [r4, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	60e3      	str	r3, [r4, #12]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	1bed      	subs	r5, r5, r7
 800ad50:	445d      	add	r5, fp
 800ad52:	442b      	add	r3, r5
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	2000      	movs	r0, #0
 800ad58:	b007      	add	sp, #28
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	f04f 0b00 	mov.w	fp, #0
 800ad62:	e7ca      	b.n	800acfa <_scanf_i+0x15e>
 800ad64:	07ca      	lsls	r2, r1, #31
 800ad66:	bf4c      	ite	mi
 800ad68:	8018      	strhmi	r0, [r3, #0]
 800ad6a:	6018      	strpl	r0, [r3, #0]
 800ad6c:	e7eb      	b.n	800ad46 <_scanf_i+0x1aa>
 800ad6e:	2001      	movs	r0, #1
 800ad70:	e7f2      	b.n	800ad58 <_scanf_i+0x1bc>
 800ad72:	bf00      	nop
 800ad74:	0800bbd8 	.word	0x0800bbd8
 800ad78:	0800a211 	.word	0x0800a211
 800ad7c:	0800b9a5 	.word	0x0800b9a5
 800ad80:	0800bd3c 	.word	0x0800bd3c

0800ad84 <__sflush_r>:
 800ad84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	0716      	lsls	r6, r2, #28
 800ad8e:	4605      	mov	r5, r0
 800ad90:	460c      	mov	r4, r1
 800ad92:	d454      	bmi.n	800ae3e <__sflush_r+0xba>
 800ad94:	684b      	ldr	r3, [r1, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dc02      	bgt.n	800ada0 <__sflush_r+0x1c>
 800ad9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dd48      	ble.n	800ae32 <__sflush_r+0xae>
 800ada0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	d045      	beq.n	800ae32 <__sflush_r+0xae>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adac:	682f      	ldr	r7, [r5, #0]
 800adae:	6a21      	ldr	r1, [r4, #32]
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	d030      	beq.n	800ae16 <__sflush_r+0x92>
 800adb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	0759      	lsls	r1, r3, #29
 800adba:	d505      	bpl.n	800adc8 <__sflush_r+0x44>
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adc2:	b10b      	cbz	r3, 800adc8 <__sflush_r+0x44>
 800adc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	2300      	movs	r3, #0
 800adca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	4628      	mov	r0, r5
 800add0:	47b0      	blx	r6
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	d106      	bne.n	800ade6 <__sflush_r+0x62>
 800add8:	6829      	ldr	r1, [r5, #0]
 800adda:	291d      	cmp	r1, #29
 800addc:	d82b      	bhi.n	800ae36 <__sflush_r+0xb2>
 800adde:	4a2a      	ldr	r2, [pc, #168]	@ (800ae88 <__sflush_r+0x104>)
 800ade0:	40ca      	lsrs	r2, r1
 800ade2:	07d6      	lsls	r6, r2, #31
 800ade4:	d527      	bpl.n	800ae36 <__sflush_r+0xb2>
 800ade6:	2200      	movs	r2, #0
 800ade8:	6062      	str	r2, [r4, #4]
 800adea:	04d9      	lsls	r1, r3, #19
 800adec:	6922      	ldr	r2, [r4, #16]
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	d504      	bpl.n	800adfc <__sflush_r+0x78>
 800adf2:	1c42      	adds	r2, r0, #1
 800adf4:	d101      	bne.n	800adfa <__sflush_r+0x76>
 800adf6:	682b      	ldr	r3, [r5, #0]
 800adf8:	b903      	cbnz	r3, 800adfc <__sflush_r+0x78>
 800adfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800adfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adfe:	602f      	str	r7, [r5, #0]
 800ae00:	b1b9      	cbz	r1, 800ae32 <__sflush_r+0xae>
 800ae02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae06:	4299      	cmp	r1, r3
 800ae08:	d002      	beq.n	800ae10 <__sflush_r+0x8c>
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f7fd fdd4 	bl	80089b8 <_free_r>
 800ae10:	2300      	movs	r3, #0
 800ae12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae14:	e00d      	b.n	800ae32 <__sflush_r+0xae>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b0      	blx	r6
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	1c50      	adds	r0, r2, #1
 800ae20:	d1c9      	bne.n	800adb6 <__sflush_r+0x32>
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0c6      	beq.n	800adb6 <__sflush_r+0x32>
 800ae28:	2b1d      	cmp	r3, #29
 800ae2a:	d001      	beq.n	800ae30 <__sflush_r+0xac>
 800ae2c:	2b16      	cmp	r3, #22
 800ae2e:	d11e      	bne.n	800ae6e <__sflush_r+0xea>
 800ae30:	602f      	str	r7, [r5, #0]
 800ae32:	2000      	movs	r0, #0
 800ae34:	e022      	b.n	800ae7c <__sflush_r+0xf8>
 800ae36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	e01b      	b.n	800ae76 <__sflush_r+0xf2>
 800ae3e:	690f      	ldr	r7, [r1, #16]
 800ae40:	2f00      	cmp	r7, #0
 800ae42:	d0f6      	beq.n	800ae32 <__sflush_r+0xae>
 800ae44:	0793      	lsls	r3, r2, #30
 800ae46:	680e      	ldr	r6, [r1, #0]
 800ae48:	bf08      	it	eq
 800ae4a:	694b      	ldreq	r3, [r1, #20]
 800ae4c:	600f      	str	r7, [r1, #0]
 800ae4e:	bf18      	it	ne
 800ae50:	2300      	movne	r3, #0
 800ae52:	eba6 0807 	sub.w	r8, r6, r7
 800ae56:	608b      	str	r3, [r1, #8]
 800ae58:	f1b8 0f00 	cmp.w	r8, #0
 800ae5c:	dde9      	ble.n	800ae32 <__sflush_r+0xae>
 800ae5e:	6a21      	ldr	r1, [r4, #32]
 800ae60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae62:	4643      	mov	r3, r8
 800ae64:	463a      	mov	r2, r7
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b0      	blx	r6
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	dc08      	bgt.n	800ae80 <__sflush_r+0xfc>
 800ae6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae80:	4407      	add	r7, r0
 800ae82:	eba8 0800 	sub.w	r8, r8, r0
 800ae86:	e7e7      	b.n	800ae58 <__sflush_r+0xd4>
 800ae88:	20400001 	.word	0x20400001

0800ae8c <_fflush_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	690b      	ldr	r3, [r1, #16]
 800ae90:	4605      	mov	r5, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b913      	cbnz	r3, 800ae9c <_fflush_r+0x10>
 800ae96:	2500      	movs	r5, #0
 800ae98:	4628      	mov	r0, r5
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	b118      	cbz	r0, 800aea6 <_fflush_r+0x1a>
 800ae9e:	6a03      	ldr	r3, [r0, #32]
 800aea0:	b90b      	cbnz	r3, 800aea6 <_fflush_r+0x1a>
 800aea2:	f7fc fcb3 	bl	800780c <__sinit>
 800aea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0f3      	beq.n	800ae96 <_fflush_r+0xa>
 800aeae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aeb0:	07d0      	lsls	r0, r2, #31
 800aeb2:	d404      	bmi.n	800aebe <_fflush_r+0x32>
 800aeb4:	0599      	lsls	r1, r3, #22
 800aeb6:	d402      	bmi.n	800aebe <_fflush_r+0x32>
 800aeb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeba:	f7fc ff14 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 800aebe:	4628      	mov	r0, r5
 800aec0:	4621      	mov	r1, r4
 800aec2:	f7ff ff5f 	bl	800ad84 <__sflush_r>
 800aec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aec8:	07da      	lsls	r2, r3, #31
 800aeca:	4605      	mov	r5, r0
 800aecc:	d4e4      	bmi.n	800ae98 <_fflush_r+0xc>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	059b      	lsls	r3, r3, #22
 800aed2:	d4e1      	bmi.n	800ae98 <_fflush_r+0xc>
 800aed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aed6:	f7fc ff07 	bl	8007ce8 <__retarget_lock_release_recursive>
 800aeda:	e7dd      	b.n	800ae98 <_fflush_r+0xc>

0800aedc <__swhatbuf_r>:
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	460c      	mov	r4, r1
 800aee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee4:	2900      	cmp	r1, #0
 800aee6:	b096      	sub	sp, #88	@ 0x58
 800aee8:	4615      	mov	r5, r2
 800aeea:	461e      	mov	r6, r3
 800aeec:	da0d      	bge.n	800af0a <__swhatbuf_r+0x2e>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aef4:	f04f 0100 	mov.w	r1, #0
 800aef8:	bf14      	ite	ne
 800aefa:	2340      	movne	r3, #64	@ 0x40
 800aefc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af00:	2000      	movs	r0, #0
 800af02:	6031      	str	r1, [r6, #0]
 800af04:	602b      	str	r3, [r5, #0]
 800af06:	b016      	add	sp, #88	@ 0x58
 800af08:	bd70      	pop	{r4, r5, r6, pc}
 800af0a:	466a      	mov	r2, sp
 800af0c:	f000 f8e8 	bl	800b0e0 <_fstat_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	dbec      	blt.n	800aeee <__swhatbuf_r+0x12>
 800af14:	9901      	ldr	r1, [sp, #4]
 800af16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af1e:	4259      	negs	r1, r3
 800af20:	4159      	adcs	r1, r3
 800af22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af26:	e7eb      	b.n	800af00 <__swhatbuf_r+0x24>

0800af28 <__smakebuf_r>:
 800af28:	898b      	ldrh	r3, [r1, #12]
 800af2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af2c:	079d      	lsls	r5, r3, #30
 800af2e:	4606      	mov	r6, r0
 800af30:	460c      	mov	r4, r1
 800af32:	d507      	bpl.n	800af44 <__smakebuf_r+0x1c>
 800af34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	2301      	movs	r3, #1
 800af3e:	6163      	str	r3, [r4, #20]
 800af40:	b003      	add	sp, #12
 800af42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af44:	ab01      	add	r3, sp, #4
 800af46:	466a      	mov	r2, sp
 800af48:	f7ff ffc8 	bl	800aedc <__swhatbuf_r>
 800af4c:	9f00      	ldr	r7, [sp, #0]
 800af4e:	4605      	mov	r5, r0
 800af50:	4639      	mov	r1, r7
 800af52:	4630      	mov	r0, r6
 800af54:	f7fd fda4 	bl	8008aa0 <_malloc_r>
 800af58:	b948      	cbnz	r0, 800af6e <__smakebuf_r+0x46>
 800af5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5e:	059a      	lsls	r2, r3, #22
 800af60:	d4ee      	bmi.n	800af40 <__smakebuf_r+0x18>
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	f043 0302 	orr.w	r3, r3, #2
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	e7e2      	b.n	800af34 <__smakebuf_r+0xc>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	6020      	str	r0, [r4, #0]
 800af72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	9b01      	ldr	r3, [sp, #4]
 800af7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af7e:	b15b      	cbz	r3, 800af98 <__smakebuf_r+0x70>
 800af80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af84:	4630      	mov	r0, r6
 800af86:	f000 f8bd 	bl	800b104 <_isatty_r>
 800af8a:	b128      	cbz	r0, 800af98 <__smakebuf_r+0x70>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	f043 0301 	orr.w	r3, r3, #1
 800af96:	81a3      	strh	r3, [r4, #12]
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	431d      	orrs	r5, r3
 800af9c:	81a5      	strh	r5, [r4, #12]
 800af9e:	e7cf      	b.n	800af40 <__smakebuf_r+0x18>

0800afa0 <__sccl>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	780b      	ldrb	r3, [r1, #0]
 800afa4:	4604      	mov	r4, r0
 800afa6:	2b5e      	cmp	r3, #94	@ 0x5e
 800afa8:	bf0b      	itete	eq
 800afaa:	784b      	ldrbeq	r3, [r1, #1]
 800afac:	1c4a      	addne	r2, r1, #1
 800afae:	1c8a      	addeq	r2, r1, #2
 800afb0:	2100      	movne	r1, #0
 800afb2:	bf08      	it	eq
 800afb4:	2101      	moveq	r1, #1
 800afb6:	3801      	subs	r0, #1
 800afb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800afbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800afc0:	42a8      	cmp	r0, r5
 800afc2:	d1fb      	bne.n	800afbc <__sccl+0x1c>
 800afc4:	b90b      	cbnz	r3, 800afca <__sccl+0x2a>
 800afc6:	1e50      	subs	r0, r2, #1
 800afc8:	bd70      	pop	{r4, r5, r6, pc}
 800afca:	f081 0101 	eor.w	r1, r1, #1
 800afce:	54e1      	strb	r1, [r4, r3]
 800afd0:	4610      	mov	r0, r2
 800afd2:	4602      	mov	r2, r0
 800afd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afd8:	2d2d      	cmp	r5, #45	@ 0x2d
 800afda:	d005      	beq.n	800afe8 <__sccl+0x48>
 800afdc:	2d5d      	cmp	r5, #93	@ 0x5d
 800afde:	d016      	beq.n	800b00e <__sccl+0x6e>
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	d0f1      	beq.n	800afc8 <__sccl+0x28>
 800afe4:	462b      	mov	r3, r5
 800afe6:	e7f2      	b.n	800afce <__sccl+0x2e>
 800afe8:	7846      	ldrb	r6, [r0, #1]
 800afea:	2e5d      	cmp	r6, #93	@ 0x5d
 800afec:	d0fa      	beq.n	800afe4 <__sccl+0x44>
 800afee:	42b3      	cmp	r3, r6
 800aff0:	dcf8      	bgt.n	800afe4 <__sccl+0x44>
 800aff2:	3002      	adds	r0, #2
 800aff4:	461a      	mov	r2, r3
 800aff6:	3201      	adds	r2, #1
 800aff8:	4296      	cmp	r6, r2
 800affa:	54a1      	strb	r1, [r4, r2]
 800affc:	dcfb      	bgt.n	800aff6 <__sccl+0x56>
 800affe:	1af2      	subs	r2, r6, r3
 800b000:	3a01      	subs	r2, #1
 800b002:	1c5d      	adds	r5, r3, #1
 800b004:	42b3      	cmp	r3, r6
 800b006:	bfa8      	it	ge
 800b008:	2200      	movge	r2, #0
 800b00a:	18ab      	adds	r3, r5, r2
 800b00c:	e7e1      	b.n	800afd2 <__sccl+0x32>
 800b00e:	4610      	mov	r0, r2
 800b010:	e7da      	b.n	800afc8 <__sccl+0x28>

0800b012 <__submore>:
 800b012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b016:	460c      	mov	r4, r1
 800b018:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b01a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b01e:	4299      	cmp	r1, r3
 800b020:	d11d      	bne.n	800b05e <__submore+0x4c>
 800b022:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b026:	f7fd fd3b 	bl	8008aa0 <_malloc_r>
 800b02a:	b918      	cbnz	r0, 800b034 <__submore+0x22>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b038:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b03a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b03e:	6360      	str	r0, [r4, #52]	@ 0x34
 800b040:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b044:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b048:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b04c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b050:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b054:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b058:	6020      	str	r0, [r4, #0]
 800b05a:	2000      	movs	r0, #0
 800b05c:	e7e8      	b.n	800b030 <__submore+0x1e>
 800b05e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b060:	0077      	lsls	r7, r6, #1
 800b062:	463a      	mov	r2, r7
 800b064:	f000 fc01 	bl	800b86a <_realloc_r>
 800b068:	4605      	mov	r5, r0
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d0de      	beq.n	800b02c <__submore+0x1a>
 800b06e:	eb00 0806 	add.w	r8, r0, r6
 800b072:	4601      	mov	r1, r0
 800b074:	4632      	mov	r2, r6
 800b076:	4640      	mov	r0, r8
 800b078:	f000 f864 	bl	800b144 <memcpy>
 800b07c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b080:	f8c4 8000 	str.w	r8, [r4]
 800b084:	e7e9      	b.n	800b05a <__submore+0x48>

0800b086 <memmove>:
 800b086:	4288      	cmp	r0, r1
 800b088:	b510      	push	{r4, lr}
 800b08a:	eb01 0402 	add.w	r4, r1, r2
 800b08e:	d902      	bls.n	800b096 <memmove+0x10>
 800b090:	4284      	cmp	r4, r0
 800b092:	4623      	mov	r3, r4
 800b094:	d807      	bhi.n	800b0a6 <memmove+0x20>
 800b096:	1e43      	subs	r3, r0, #1
 800b098:	42a1      	cmp	r1, r4
 800b09a:	d008      	beq.n	800b0ae <memmove+0x28>
 800b09c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0a4:	e7f8      	b.n	800b098 <memmove+0x12>
 800b0a6:	4402      	add	r2, r0
 800b0a8:	4601      	mov	r1, r0
 800b0aa:	428a      	cmp	r2, r1
 800b0ac:	d100      	bne.n	800b0b0 <memmove+0x2a>
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0b8:	e7f7      	b.n	800b0aa <memmove+0x24>

0800b0ba <strncmp>:
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	b16a      	cbz	r2, 800b0da <strncmp+0x20>
 800b0be:	3901      	subs	r1, #1
 800b0c0:	1884      	adds	r4, r0, r2
 800b0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d103      	bne.n	800b0d6 <strncmp+0x1c>
 800b0ce:	42a0      	cmp	r0, r4
 800b0d0:	d001      	beq.n	800b0d6 <strncmp+0x1c>
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	d1f5      	bne.n	800b0c2 <strncmp+0x8>
 800b0d6:	1ad0      	subs	r0, r2, r3
 800b0d8:	bd10      	pop	{r4, pc}
 800b0da:	4610      	mov	r0, r2
 800b0dc:	e7fc      	b.n	800b0d8 <strncmp+0x1e>
	...

0800b0e0 <_fstat_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	@ (800b100 <_fstat_r+0x20>)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	f7fb fb83 	bl	80067f8 <_fstat>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d102      	bne.n	800b0fc <_fstat_r+0x1c>
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	b103      	cbz	r3, 800b0fc <_fstat_r+0x1c>
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	200007f0 	.word	0x200007f0

0800b104 <_isatty_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d06      	ldr	r5, [pc, #24]	@ (800b120 <_isatty_r+0x1c>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	f7fb fb82 	bl	8006818 <_isatty>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_isatty_r+0x1a>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_isatty_r+0x1a>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	200007f0 	.word	0x200007f0

0800b124 <_sbrk_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d06      	ldr	r5, [pc, #24]	@ (800b140 <_sbrk_r+0x1c>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	f7fb fb8a 	bl	8006848 <_sbrk>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_sbrk_r+0x1a>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_sbrk_r+0x1a>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	200007f0 	.word	0x200007f0

0800b144 <memcpy>:
 800b144:	440a      	add	r2, r1
 800b146:	4291      	cmp	r1, r2
 800b148:	f100 33ff 	add.w	r3, r0, #4294967295
 800b14c:	d100      	bne.n	800b150 <memcpy+0xc>
 800b14e:	4770      	bx	lr
 800b150:	b510      	push	{r4, lr}
 800b152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b15a:	4291      	cmp	r1, r2
 800b15c:	d1f9      	bne.n	800b152 <memcpy+0xe>
 800b15e:	bd10      	pop	{r4, pc}

0800b160 <nan>:
 800b160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b168 <nan+0x8>
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	00000000 	.word	0x00000000
 800b16c:	7ff80000 	.word	0x7ff80000

0800b170 <__assert_func>:
 800b170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b172:	4614      	mov	r4, r2
 800b174:	461a      	mov	r2, r3
 800b176:	4b09      	ldr	r3, [pc, #36]	@ (800b19c <__assert_func+0x2c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4605      	mov	r5, r0
 800b17c:	68d8      	ldr	r0, [r3, #12]
 800b17e:	b14c      	cbz	r4, 800b194 <__assert_func+0x24>
 800b180:	4b07      	ldr	r3, [pc, #28]	@ (800b1a0 <__assert_func+0x30>)
 800b182:	9100      	str	r1, [sp, #0]
 800b184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b188:	4906      	ldr	r1, [pc, #24]	@ (800b1a4 <__assert_func+0x34>)
 800b18a:	462b      	mov	r3, r5
 800b18c:	f7fc fb56 	bl	800783c <fiprintf>
 800b190:	f000 fc17 	bl	800b9c2 <abort>
 800b194:	4b04      	ldr	r3, [pc, #16]	@ (800b1a8 <__assert_func+0x38>)
 800b196:	461c      	mov	r4, r3
 800b198:	e7f3      	b.n	800b182 <__assert_func+0x12>
 800b19a:	bf00      	nop
 800b19c:	20000034 	.word	0x20000034
 800b1a0:	0800bd4f 	.word	0x0800bd4f
 800b1a4:	0800bd5c 	.word	0x0800bd5c
 800b1a8:	0800bd8a 	.word	0x0800bd8a

0800b1ac <_calloc_r>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	fba1 5402 	umull	r5, r4, r1, r2
 800b1b2:	b934      	cbnz	r4, 800b1c2 <_calloc_r+0x16>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7fd fc73 	bl	8008aa0 <_malloc_r>
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	b928      	cbnz	r0, 800b1ca <_calloc_r+0x1e>
 800b1be:	4630      	mov	r0, r6
 800b1c0:	bd70      	pop	{r4, r5, r6, pc}
 800b1c2:	220c      	movs	r2, #12
 800b1c4:	6002      	str	r2, [r0, #0]
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	e7f9      	b.n	800b1be <_calloc_r+0x12>
 800b1ca:	462a      	mov	r2, r5
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f7fc fcfd 	bl	8007bcc <memset>
 800b1d2:	e7f4      	b.n	800b1be <_calloc_r+0x12>

0800b1d4 <rshift>:
 800b1d4:	6903      	ldr	r3, [r0, #16]
 800b1d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1e2:	f100 0414 	add.w	r4, r0, #20
 800b1e6:	dd45      	ble.n	800b274 <rshift+0xa0>
 800b1e8:	f011 011f 	ands.w	r1, r1, #31
 800b1ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1f4:	d10c      	bne.n	800b210 <rshift+0x3c>
 800b1f6:	f100 0710 	add.w	r7, r0, #16
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	42b1      	cmp	r1, r6
 800b1fe:	d334      	bcc.n	800b26a <rshift+0x96>
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	1eea      	subs	r2, r5, #3
 800b206:	4296      	cmp	r6, r2
 800b208:	bf38      	it	cc
 800b20a:	2300      	movcc	r3, #0
 800b20c:	4423      	add	r3, r4
 800b20e:	e015      	b.n	800b23c <rshift+0x68>
 800b210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b214:	f1c1 0820 	rsb	r8, r1, #32
 800b218:	40cf      	lsrs	r7, r1
 800b21a:	f105 0e04 	add.w	lr, r5, #4
 800b21e:	46a1      	mov	r9, r4
 800b220:	4576      	cmp	r6, lr
 800b222:	46f4      	mov	ip, lr
 800b224:	d815      	bhi.n	800b252 <rshift+0x7e>
 800b226:	1a9a      	subs	r2, r3, r2
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	3a04      	subs	r2, #4
 800b22c:	3501      	adds	r5, #1
 800b22e:	42ae      	cmp	r6, r5
 800b230:	bf38      	it	cc
 800b232:	2200      	movcc	r2, #0
 800b234:	18a3      	adds	r3, r4, r2
 800b236:	50a7      	str	r7, [r4, r2]
 800b238:	b107      	cbz	r7, 800b23c <rshift+0x68>
 800b23a:	3304      	adds	r3, #4
 800b23c:	1b1a      	subs	r2, r3, r4
 800b23e:	42a3      	cmp	r3, r4
 800b240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b244:	bf08      	it	eq
 800b246:	2300      	moveq	r3, #0
 800b248:	6102      	str	r2, [r0, #16]
 800b24a:	bf08      	it	eq
 800b24c:	6143      	streq	r3, [r0, #20]
 800b24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b252:	f8dc c000 	ldr.w	ip, [ip]
 800b256:	fa0c fc08 	lsl.w	ip, ip, r8
 800b25a:	ea4c 0707 	orr.w	r7, ip, r7
 800b25e:	f849 7b04 	str.w	r7, [r9], #4
 800b262:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b266:	40cf      	lsrs	r7, r1
 800b268:	e7da      	b.n	800b220 <rshift+0x4c>
 800b26a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b26e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b272:	e7c3      	b.n	800b1fc <rshift+0x28>
 800b274:	4623      	mov	r3, r4
 800b276:	e7e1      	b.n	800b23c <rshift+0x68>

0800b278 <__hexdig_fun>:
 800b278:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d802      	bhi.n	800b286 <__hexdig_fun+0xe>
 800b280:	3820      	subs	r0, #32
 800b282:	b2c0      	uxtb	r0, r0
 800b284:	4770      	bx	lr
 800b286:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	d801      	bhi.n	800b292 <__hexdig_fun+0x1a>
 800b28e:	3847      	subs	r0, #71	@ 0x47
 800b290:	e7f7      	b.n	800b282 <__hexdig_fun+0xa>
 800b292:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b296:	2b05      	cmp	r3, #5
 800b298:	d801      	bhi.n	800b29e <__hexdig_fun+0x26>
 800b29a:	3827      	subs	r0, #39	@ 0x27
 800b29c:	e7f1      	b.n	800b282 <__hexdig_fun+0xa>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <__gethex>:
 800b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	468a      	mov	sl, r1
 800b2ac:	9302      	str	r3, [sp, #8]
 800b2ae:	680b      	ldr	r3, [r1, #0]
 800b2b0:	9001      	str	r0, [sp, #4]
 800b2b2:	4690      	mov	r8, r2
 800b2b4:	1c9c      	adds	r4, r3, #2
 800b2b6:	46a1      	mov	r9, r4
 800b2b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2bc:	2830      	cmp	r0, #48	@ 0x30
 800b2be:	d0fa      	beq.n	800b2b6 <__gethex+0x12>
 800b2c0:	eba9 0303 	sub.w	r3, r9, r3
 800b2c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b2c8:	f7ff ffd6 	bl	800b278 <__hexdig_fun>
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d168      	bne.n	800b3a4 <__gethex+0x100>
 800b2d2:	49a0      	ldr	r1, [pc, #640]	@ (800b554 <__gethex+0x2b0>)
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	4648      	mov	r0, r9
 800b2d8:	f7ff feef 	bl	800b0ba <strncmp>
 800b2dc:	4607      	mov	r7, r0
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d167      	bne.n	800b3b2 <__gethex+0x10e>
 800b2e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b2e6:	4626      	mov	r6, r4
 800b2e8:	f7ff ffc6 	bl	800b278 <__hexdig_fun>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d062      	beq.n	800b3b6 <__gethex+0x112>
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	7818      	ldrb	r0, [r3, #0]
 800b2f4:	2830      	cmp	r0, #48	@ 0x30
 800b2f6:	4699      	mov	r9, r3
 800b2f8:	f103 0301 	add.w	r3, r3, #1
 800b2fc:	d0f9      	beq.n	800b2f2 <__gethex+0x4e>
 800b2fe:	f7ff ffbb 	bl	800b278 <__hexdig_fun>
 800b302:	fab0 f580 	clz	r5, r0
 800b306:	096d      	lsrs	r5, r5, #5
 800b308:	f04f 0b01 	mov.w	fp, #1
 800b30c:	464a      	mov	r2, r9
 800b30e:	4616      	mov	r6, r2
 800b310:	3201      	adds	r2, #1
 800b312:	7830      	ldrb	r0, [r6, #0]
 800b314:	f7ff ffb0 	bl	800b278 <__hexdig_fun>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d1f8      	bne.n	800b30e <__gethex+0x6a>
 800b31c:	498d      	ldr	r1, [pc, #564]	@ (800b554 <__gethex+0x2b0>)
 800b31e:	2201      	movs	r2, #1
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff feca 	bl	800b0ba <strncmp>
 800b326:	2800      	cmp	r0, #0
 800b328:	d13f      	bne.n	800b3aa <__gethex+0x106>
 800b32a:	b944      	cbnz	r4, 800b33e <__gethex+0x9a>
 800b32c:	1c74      	adds	r4, r6, #1
 800b32e:	4622      	mov	r2, r4
 800b330:	4616      	mov	r6, r2
 800b332:	3201      	adds	r2, #1
 800b334:	7830      	ldrb	r0, [r6, #0]
 800b336:	f7ff ff9f 	bl	800b278 <__hexdig_fun>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d1f8      	bne.n	800b330 <__gethex+0x8c>
 800b33e:	1ba4      	subs	r4, r4, r6
 800b340:	00a7      	lsls	r7, r4, #2
 800b342:	7833      	ldrb	r3, [r6, #0]
 800b344:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b348:	2b50      	cmp	r3, #80	@ 0x50
 800b34a:	d13e      	bne.n	800b3ca <__gethex+0x126>
 800b34c:	7873      	ldrb	r3, [r6, #1]
 800b34e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b350:	d033      	beq.n	800b3ba <__gethex+0x116>
 800b352:	2b2d      	cmp	r3, #45	@ 0x2d
 800b354:	d034      	beq.n	800b3c0 <__gethex+0x11c>
 800b356:	1c71      	adds	r1, r6, #1
 800b358:	2400      	movs	r4, #0
 800b35a:	7808      	ldrb	r0, [r1, #0]
 800b35c:	f7ff ff8c 	bl	800b278 <__hexdig_fun>
 800b360:	1e43      	subs	r3, r0, #1
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b18      	cmp	r3, #24
 800b366:	d830      	bhi.n	800b3ca <__gethex+0x126>
 800b368:	f1a0 0210 	sub.w	r2, r0, #16
 800b36c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b370:	f7ff ff82 	bl	800b278 <__hexdig_fun>
 800b374:	f100 3cff 	add.w	ip, r0, #4294967295
 800b378:	fa5f fc8c 	uxtb.w	ip, ip
 800b37c:	f1bc 0f18 	cmp.w	ip, #24
 800b380:	f04f 030a 	mov.w	r3, #10
 800b384:	d91e      	bls.n	800b3c4 <__gethex+0x120>
 800b386:	b104      	cbz	r4, 800b38a <__gethex+0xe6>
 800b388:	4252      	negs	r2, r2
 800b38a:	4417      	add	r7, r2
 800b38c:	f8ca 1000 	str.w	r1, [sl]
 800b390:	b1ed      	cbz	r5, 800b3ce <__gethex+0x12a>
 800b392:	f1bb 0f00 	cmp.w	fp, #0
 800b396:	bf0c      	ite	eq
 800b398:	2506      	moveq	r5, #6
 800b39a:	2500      	movne	r5, #0
 800b39c:	4628      	mov	r0, r5
 800b39e:	b005      	add	sp, #20
 800b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a4:	2500      	movs	r5, #0
 800b3a6:	462c      	mov	r4, r5
 800b3a8:	e7b0      	b.n	800b30c <__gethex+0x68>
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	d1c7      	bne.n	800b33e <__gethex+0x9a>
 800b3ae:	4627      	mov	r7, r4
 800b3b0:	e7c7      	b.n	800b342 <__gethex+0x9e>
 800b3b2:	464e      	mov	r6, r9
 800b3b4:	462f      	mov	r7, r5
 800b3b6:	2501      	movs	r5, #1
 800b3b8:	e7c3      	b.n	800b342 <__gethex+0x9e>
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	1cb1      	adds	r1, r6, #2
 800b3be:	e7cc      	b.n	800b35a <__gethex+0xb6>
 800b3c0:	2401      	movs	r4, #1
 800b3c2:	e7fb      	b.n	800b3bc <__gethex+0x118>
 800b3c4:	fb03 0002 	mla	r0, r3, r2, r0
 800b3c8:	e7ce      	b.n	800b368 <__gethex+0xc4>
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	e7de      	b.n	800b38c <__gethex+0xe8>
 800b3ce:	eba6 0309 	sub.w	r3, r6, r9
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	dc0a      	bgt.n	800b3f0 <__gethex+0x14c>
 800b3da:	9801      	ldr	r0, [sp, #4]
 800b3dc:	f7fd fbec 	bl	8008bb8 <_Balloc>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	b940      	cbnz	r0, 800b3f6 <__gethex+0x152>
 800b3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800b558 <__gethex+0x2b4>)
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	21e4      	movs	r1, #228	@ 0xe4
 800b3ea:	485c      	ldr	r0, [pc, #368]	@ (800b55c <__gethex+0x2b8>)
 800b3ec:	f7ff fec0 	bl	800b170 <__assert_func>
 800b3f0:	3101      	adds	r1, #1
 800b3f2:	105b      	asrs	r3, r3, #1
 800b3f4:	e7ef      	b.n	800b3d6 <__gethex+0x132>
 800b3f6:	f100 0a14 	add.w	sl, r0, #20
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4655      	mov	r5, sl
 800b3fe:	469b      	mov	fp, r3
 800b400:	45b1      	cmp	r9, r6
 800b402:	d337      	bcc.n	800b474 <__gethex+0x1d0>
 800b404:	f845 bb04 	str.w	fp, [r5], #4
 800b408:	eba5 050a 	sub.w	r5, r5, sl
 800b40c:	10ad      	asrs	r5, r5, #2
 800b40e:	6125      	str	r5, [r4, #16]
 800b410:	4658      	mov	r0, fp
 800b412:	f7fd fcc3 	bl	8008d9c <__hi0bits>
 800b416:	016d      	lsls	r5, r5, #5
 800b418:	f8d8 6000 	ldr.w	r6, [r8]
 800b41c:	1a2d      	subs	r5, r5, r0
 800b41e:	42b5      	cmp	r5, r6
 800b420:	dd54      	ble.n	800b4cc <__gethex+0x228>
 800b422:	1bad      	subs	r5, r5, r6
 800b424:	4629      	mov	r1, r5
 800b426:	4620      	mov	r0, r4
 800b428:	f7fe f84f 	bl	80094ca <__any_on>
 800b42c:	4681      	mov	r9, r0
 800b42e:	b178      	cbz	r0, 800b450 <__gethex+0x1ac>
 800b430:	1e6b      	subs	r3, r5, #1
 800b432:	1159      	asrs	r1, r3, #5
 800b434:	f003 021f 	and.w	r2, r3, #31
 800b438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b43c:	f04f 0901 	mov.w	r9, #1
 800b440:	fa09 f202 	lsl.w	r2, r9, r2
 800b444:	420a      	tst	r2, r1
 800b446:	d003      	beq.n	800b450 <__gethex+0x1ac>
 800b448:	454b      	cmp	r3, r9
 800b44a:	dc36      	bgt.n	800b4ba <__gethex+0x216>
 800b44c:	f04f 0902 	mov.w	r9, #2
 800b450:	4629      	mov	r1, r5
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff febe 	bl	800b1d4 <rshift>
 800b458:	442f      	add	r7, r5
 800b45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45e:	42bb      	cmp	r3, r7
 800b460:	da42      	bge.n	800b4e8 <__gethex+0x244>
 800b462:	9801      	ldr	r0, [sp, #4]
 800b464:	4621      	mov	r1, r4
 800b466:	f7fd fbe7 	bl	8008c38 <_Bfree>
 800b46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b46c:	2300      	movs	r3, #0
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	25a3      	movs	r5, #163	@ 0xa3
 800b472:	e793      	b.n	800b39c <__gethex+0xf8>
 800b474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b478:	2a2e      	cmp	r2, #46	@ 0x2e
 800b47a:	d012      	beq.n	800b4a2 <__gethex+0x1fe>
 800b47c:	2b20      	cmp	r3, #32
 800b47e:	d104      	bne.n	800b48a <__gethex+0x1e6>
 800b480:	f845 bb04 	str.w	fp, [r5], #4
 800b484:	f04f 0b00 	mov.w	fp, #0
 800b488:	465b      	mov	r3, fp
 800b48a:	7830      	ldrb	r0, [r6, #0]
 800b48c:	9303      	str	r3, [sp, #12]
 800b48e:	f7ff fef3 	bl	800b278 <__hexdig_fun>
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	f000 000f 	and.w	r0, r0, #15
 800b498:	4098      	lsls	r0, r3
 800b49a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b49e:	3304      	adds	r3, #4
 800b4a0:	e7ae      	b.n	800b400 <__gethex+0x15c>
 800b4a2:	45b1      	cmp	r9, r6
 800b4a4:	d8ea      	bhi.n	800b47c <__gethex+0x1d8>
 800b4a6:	492b      	ldr	r1, [pc, #172]	@ (800b554 <__gethex+0x2b0>)
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fe04 	bl	800b0ba <strncmp>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1e1      	bne.n	800b47c <__gethex+0x1d8>
 800b4b8:	e7a2      	b.n	800b400 <__gethex+0x15c>
 800b4ba:	1ea9      	subs	r1, r5, #2
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7fe f804 	bl	80094ca <__any_on>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0c2      	beq.n	800b44c <__gethex+0x1a8>
 800b4c6:	f04f 0903 	mov.w	r9, #3
 800b4ca:	e7c1      	b.n	800b450 <__gethex+0x1ac>
 800b4cc:	da09      	bge.n	800b4e2 <__gethex+0x23e>
 800b4ce:	1b75      	subs	r5, r6, r5
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	9801      	ldr	r0, [sp, #4]
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	f7fd fdbf 	bl	8009058 <__lshift>
 800b4da:	1b7f      	subs	r7, r7, r5
 800b4dc:	4604      	mov	r4, r0
 800b4de:	f100 0a14 	add.w	sl, r0, #20
 800b4e2:	f04f 0900 	mov.w	r9, #0
 800b4e6:	e7b8      	b.n	800b45a <__gethex+0x1b6>
 800b4e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4ec:	42bd      	cmp	r5, r7
 800b4ee:	dd6f      	ble.n	800b5d0 <__gethex+0x32c>
 800b4f0:	1bed      	subs	r5, r5, r7
 800b4f2:	42ae      	cmp	r6, r5
 800b4f4:	dc34      	bgt.n	800b560 <__gethex+0x2bc>
 800b4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d022      	beq.n	800b544 <__gethex+0x2a0>
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d024      	beq.n	800b54c <__gethex+0x2a8>
 800b502:	2b01      	cmp	r3, #1
 800b504:	d115      	bne.n	800b532 <__gethex+0x28e>
 800b506:	42ae      	cmp	r6, r5
 800b508:	d113      	bne.n	800b532 <__gethex+0x28e>
 800b50a:	2e01      	cmp	r6, #1
 800b50c:	d10b      	bne.n	800b526 <__gethex+0x282>
 800b50e:	9a02      	ldr	r2, [sp, #8]
 800b510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	2301      	movs	r3, #1
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	f8ca 3000 	str.w	r3, [sl]
 800b51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b520:	2562      	movs	r5, #98	@ 0x62
 800b522:	601c      	str	r4, [r3, #0]
 800b524:	e73a      	b.n	800b39c <__gethex+0xf8>
 800b526:	1e71      	subs	r1, r6, #1
 800b528:	4620      	mov	r0, r4
 800b52a:	f7fd ffce 	bl	80094ca <__any_on>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d1ed      	bne.n	800b50e <__gethex+0x26a>
 800b532:	9801      	ldr	r0, [sp, #4]
 800b534:	4621      	mov	r1, r4
 800b536:	f7fd fb7f 	bl	8008c38 <_Bfree>
 800b53a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b53c:	2300      	movs	r3, #0
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	2550      	movs	r5, #80	@ 0x50
 800b542:	e72b      	b.n	800b39c <__gethex+0xf8>
 800b544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1f3      	bne.n	800b532 <__gethex+0x28e>
 800b54a:	e7e0      	b.n	800b50e <__gethex+0x26a>
 800b54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1dd      	bne.n	800b50e <__gethex+0x26a>
 800b552:	e7ee      	b.n	800b532 <__gethex+0x28e>
 800b554:	0800bd19 	.word	0x0800bd19
 800b558:	0800bcaf 	.word	0x0800bcaf
 800b55c:	0800bd8b 	.word	0x0800bd8b
 800b560:	1e6f      	subs	r7, r5, #1
 800b562:	f1b9 0f00 	cmp.w	r9, #0
 800b566:	d130      	bne.n	800b5ca <__gethex+0x326>
 800b568:	b127      	cbz	r7, 800b574 <__gethex+0x2d0>
 800b56a:	4639      	mov	r1, r7
 800b56c:	4620      	mov	r0, r4
 800b56e:	f7fd ffac 	bl	80094ca <__any_on>
 800b572:	4681      	mov	r9, r0
 800b574:	117a      	asrs	r2, r7, #5
 800b576:	2301      	movs	r3, #1
 800b578:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b57c:	f007 071f 	and.w	r7, r7, #31
 800b580:	40bb      	lsls	r3, r7
 800b582:	4213      	tst	r3, r2
 800b584:	4629      	mov	r1, r5
 800b586:	4620      	mov	r0, r4
 800b588:	bf18      	it	ne
 800b58a:	f049 0902 	orrne.w	r9, r9, #2
 800b58e:	f7ff fe21 	bl	800b1d4 <rshift>
 800b592:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b596:	1b76      	subs	r6, r6, r5
 800b598:	2502      	movs	r5, #2
 800b59a:	f1b9 0f00 	cmp.w	r9, #0
 800b59e:	d047      	beq.n	800b630 <__gethex+0x38c>
 800b5a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d015      	beq.n	800b5d4 <__gethex+0x330>
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d017      	beq.n	800b5dc <__gethex+0x338>
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d109      	bne.n	800b5c4 <__gethex+0x320>
 800b5b0:	f019 0f02 	tst.w	r9, #2
 800b5b4:	d006      	beq.n	800b5c4 <__gethex+0x320>
 800b5b6:	f8da 3000 	ldr.w	r3, [sl]
 800b5ba:	ea49 0903 	orr.w	r9, r9, r3
 800b5be:	f019 0f01 	tst.w	r9, #1
 800b5c2:	d10e      	bne.n	800b5e2 <__gethex+0x33e>
 800b5c4:	f045 0510 	orr.w	r5, r5, #16
 800b5c8:	e032      	b.n	800b630 <__gethex+0x38c>
 800b5ca:	f04f 0901 	mov.w	r9, #1
 800b5ce:	e7d1      	b.n	800b574 <__gethex+0x2d0>
 800b5d0:	2501      	movs	r5, #1
 800b5d2:	e7e2      	b.n	800b59a <__gethex+0x2f6>
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d6:	f1c3 0301 	rsb	r3, r3, #1
 800b5da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0f0      	beq.n	800b5c4 <__gethex+0x320>
 800b5e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5e6:	f104 0314 	add.w	r3, r4, #20
 800b5ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5f2:	f04f 0c00 	mov.w	ip, #0
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b600:	d01b      	beq.n	800b63a <__gethex+0x396>
 800b602:	3201      	adds	r2, #1
 800b604:	6002      	str	r2, [r0, #0]
 800b606:	2d02      	cmp	r5, #2
 800b608:	f104 0314 	add.w	r3, r4, #20
 800b60c:	d13c      	bne.n	800b688 <__gethex+0x3e4>
 800b60e:	f8d8 2000 	ldr.w	r2, [r8]
 800b612:	3a01      	subs	r2, #1
 800b614:	42b2      	cmp	r2, r6
 800b616:	d109      	bne.n	800b62c <__gethex+0x388>
 800b618:	1171      	asrs	r1, r6, #5
 800b61a:	2201      	movs	r2, #1
 800b61c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b620:	f006 061f 	and.w	r6, r6, #31
 800b624:	fa02 f606 	lsl.w	r6, r2, r6
 800b628:	421e      	tst	r6, r3
 800b62a:	d13a      	bne.n	800b6a2 <__gethex+0x3fe>
 800b62c:	f045 0520 	orr.w	r5, r5, #32
 800b630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b632:	601c      	str	r4, [r3, #0]
 800b634:	9b02      	ldr	r3, [sp, #8]
 800b636:	601f      	str	r7, [r3, #0]
 800b638:	e6b0      	b.n	800b39c <__gethex+0xf8>
 800b63a:	4299      	cmp	r1, r3
 800b63c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b640:	d8d9      	bhi.n	800b5f6 <__gethex+0x352>
 800b642:	68a3      	ldr	r3, [r4, #8]
 800b644:	459b      	cmp	fp, r3
 800b646:	db17      	blt.n	800b678 <__gethex+0x3d4>
 800b648:	6861      	ldr	r1, [r4, #4]
 800b64a:	9801      	ldr	r0, [sp, #4]
 800b64c:	3101      	adds	r1, #1
 800b64e:	f7fd fab3 	bl	8008bb8 <_Balloc>
 800b652:	4681      	mov	r9, r0
 800b654:	b918      	cbnz	r0, 800b65e <__gethex+0x3ba>
 800b656:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c0 <__gethex+0x41c>)
 800b658:	4602      	mov	r2, r0
 800b65a:	2184      	movs	r1, #132	@ 0x84
 800b65c:	e6c5      	b.n	800b3ea <__gethex+0x146>
 800b65e:	6922      	ldr	r2, [r4, #16]
 800b660:	3202      	adds	r2, #2
 800b662:	f104 010c 	add.w	r1, r4, #12
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	300c      	adds	r0, #12
 800b66a:	f7ff fd6b 	bl	800b144 <memcpy>
 800b66e:	4621      	mov	r1, r4
 800b670:	9801      	ldr	r0, [sp, #4]
 800b672:	f7fd fae1 	bl	8008c38 <_Bfree>
 800b676:	464c      	mov	r4, r9
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b680:	6122      	str	r2, [r4, #16]
 800b682:	2201      	movs	r2, #1
 800b684:	615a      	str	r2, [r3, #20]
 800b686:	e7be      	b.n	800b606 <__gethex+0x362>
 800b688:	6922      	ldr	r2, [r4, #16]
 800b68a:	455a      	cmp	r2, fp
 800b68c:	dd0b      	ble.n	800b6a6 <__gethex+0x402>
 800b68e:	2101      	movs	r1, #1
 800b690:	4620      	mov	r0, r4
 800b692:	f7ff fd9f 	bl	800b1d4 <rshift>
 800b696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b69a:	3701      	adds	r7, #1
 800b69c:	42bb      	cmp	r3, r7
 800b69e:	f6ff aee0 	blt.w	800b462 <__gethex+0x1be>
 800b6a2:	2501      	movs	r5, #1
 800b6a4:	e7c2      	b.n	800b62c <__gethex+0x388>
 800b6a6:	f016 061f 	ands.w	r6, r6, #31
 800b6aa:	d0fa      	beq.n	800b6a2 <__gethex+0x3fe>
 800b6ac:	4453      	add	r3, sl
 800b6ae:	f1c6 0620 	rsb	r6, r6, #32
 800b6b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6b6:	f7fd fb71 	bl	8008d9c <__hi0bits>
 800b6ba:	42b0      	cmp	r0, r6
 800b6bc:	dbe7      	blt.n	800b68e <__gethex+0x3ea>
 800b6be:	e7f0      	b.n	800b6a2 <__gethex+0x3fe>
 800b6c0:	0800bcaf 	.word	0x0800bcaf

0800b6c4 <L_shift>:
 800b6c4:	f1c2 0208 	rsb	r2, r2, #8
 800b6c8:	0092      	lsls	r2, r2, #2
 800b6ca:	b570      	push	{r4, r5, r6, lr}
 800b6cc:	f1c2 0620 	rsb	r6, r2, #32
 800b6d0:	6843      	ldr	r3, [r0, #4]
 800b6d2:	6804      	ldr	r4, [r0, #0]
 800b6d4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6d8:	432c      	orrs	r4, r5
 800b6da:	40d3      	lsrs	r3, r2
 800b6dc:	6004      	str	r4, [r0, #0]
 800b6de:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6e2:	4288      	cmp	r0, r1
 800b6e4:	d3f4      	bcc.n	800b6d0 <L_shift+0xc>
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}

0800b6e8 <__match>:
 800b6e8:	b530      	push	{r4, r5, lr}
 800b6ea:	6803      	ldr	r3, [r0, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f2:	b914      	cbnz	r4, 800b6fa <__match+0x12>
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	bd30      	pop	{r4, r5, pc}
 800b6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b702:	2d19      	cmp	r5, #25
 800b704:	bf98      	it	ls
 800b706:	3220      	addls	r2, #32
 800b708:	42a2      	cmp	r2, r4
 800b70a:	d0f0      	beq.n	800b6ee <__match+0x6>
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7f3      	b.n	800b6f8 <__match+0x10>

0800b710 <__hexnan>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	680b      	ldr	r3, [r1, #0]
 800b716:	6801      	ldr	r1, [r0, #0]
 800b718:	115e      	asrs	r6, r3, #5
 800b71a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b71e:	f013 031f 	ands.w	r3, r3, #31
 800b722:	b087      	sub	sp, #28
 800b724:	bf18      	it	ne
 800b726:	3604      	addne	r6, #4
 800b728:	2500      	movs	r5, #0
 800b72a:	1f37      	subs	r7, r6, #4
 800b72c:	4682      	mov	sl, r0
 800b72e:	4690      	mov	r8, r2
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	f846 5c04 	str.w	r5, [r6, #-4]
 800b736:	46b9      	mov	r9, r7
 800b738:	463c      	mov	r4, r7
 800b73a:	9502      	str	r5, [sp, #8]
 800b73c:	46ab      	mov	fp, r5
 800b73e:	784a      	ldrb	r2, [r1, #1]
 800b740:	1c4b      	adds	r3, r1, #1
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	b342      	cbz	r2, 800b798 <__hexnan+0x88>
 800b746:	4610      	mov	r0, r2
 800b748:	9105      	str	r1, [sp, #20]
 800b74a:	9204      	str	r2, [sp, #16]
 800b74c:	f7ff fd94 	bl	800b278 <__hexdig_fun>
 800b750:	2800      	cmp	r0, #0
 800b752:	d151      	bne.n	800b7f8 <__hexnan+0xe8>
 800b754:	9a04      	ldr	r2, [sp, #16]
 800b756:	9905      	ldr	r1, [sp, #20]
 800b758:	2a20      	cmp	r2, #32
 800b75a:	d818      	bhi.n	800b78e <__hexnan+0x7e>
 800b75c:	9b02      	ldr	r3, [sp, #8]
 800b75e:	459b      	cmp	fp, r3
 800b760:	dd13      	ble.n	800b78a <__hexnan+0x7a>
 800b762:	454c      	cmp	r4, r9
 800b764:	d206      	bcs.n	800b774 <__hexnan+0x64>
 800b766:	2d07      	cmp	r5, #7
 800b768:	dc04      	bgt.n	800b774 <__hexnan+0x64>
 800b76a:	462a      	mov	r2, r5
 800b76c:	4649      	mov	r1, r9
 800b76e:	4620      	mov	r0, r4
 800b770:	f7ff ffa8 	bl	800b6c4 <L_shift>
 800b774:	4544      	cmp	r4, r8
 800b776:	d952      	bls.n	800b81e <__hexnan+0x10e>
 800b778:	2300      	movs	r3, #0
 800b77a:	f1a4 0904 	sub.w	r9, r4, #4
 800b77e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b782:	f8cd b008 	str.w	fp, [sp, #8]
 800b786:	464c      	mov	r4, r9
 800b788:	461d      	mov	r5, r3
 800b78a:	9903      	ldr	r1, [sp, #12]
 800b78c:	e7d7      	b.n	800b73e <__hexnan+0x2e>
 800b78e:	2a29      	cmp	r2, #41	@ 0x29
 800b790:	d157      	bne.n	800b842 <__hexnan+0x132>
 800b792:	3102      	adds	r1, #2
 800b794:	f8ca 1000 	str.w	r1, [sl]
 800b798:	f1bb 0f00 	cmp.w	fp, #0
 800b79c:	d051      	beq.n	800b842 <__hexnan+0x132>
 800b79e:	454c      	cmp	r4, r9
 800b7a0:	d206      	bcs.n	800b7b0 <__hexnan+0xa0>
 800b7a2:	2d07      	cmp	r5, #7
 800b7a4:	dc04      	bgt.n	800b7b0 <__hexnan+0xa0>
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f7ff ff8a 	bl	800b6c4 <L_shift>
 800b7b0:	4544      	cmp	r4, r8
 800b7b2:	d936      	bls.n	800b822 <__hexnan+0x112>
 800b7b4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7be:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7c2:	429f      	cmp	r7, r3
 800b7c4:	d2f9      	bcs.n	800b7ba <__hexnan+0xaa>
 800b7c6:	1b3b      	subs	r3, r7, r4
 800b7c8:	f023 0303 	bic.w	r3, r3, #3
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	3401      	adds	r4, #1
 800b7d0:	3e03      	subs	r6, #3
 800b7d2:	42b4      	cmp	r4, r6
 800b7d4:	bf88      	it	hi
 800b7d6:	2304      	movhi	r3, #4
 800b7d8:	4443      	add	r3, r8
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f843 2b04 	str.w	r2, [r3], #4
 800b7e0:	429f      	cmp	r7, r3
 800b7e2:	d2fb      	bcs.n	800b7dc <__hexnan+0xcc>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	b91b      	cbnz	r3, 800b7f0 <__hexnan+0xe0>
 800b7e8:	4547      	cmp	r7, r8
 800b7ea:	d128      	bne.n	800b83e <__hexnan+0x12e>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	2005      	movs	r0, #5
 800b7f2:	b007      	add	sp, #28
 800b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	2d08      	cmp	r5, #8
 800b7fc:	f10b 0b01 	add.w	fp, fp, #1
 800b800:	dd06      	ble.n	800b810 <__hexnan+0x100>
 800b802:	4544      	cmp	r4, r8
 800b804:	d9c1      	bls.n	800b78a <__hexnan+0x7a>
 800b806:	2300      	movs	r3, #0
 800b808:	f844 3c04 	str.w	r3, [r4, #-4]
 800b80c:	2501      	movs	r5, #1
 800b80e:	3c04      	subs	r4, #4
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	f000 000f 	and.w	r0, r0, #15
 800b816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b81a:	6020      	str	r0, [r4, #0]
 800b81c:	e7b5      	b.n	800b78a <__hexnan+0x7a>
 800b81e:	2508      	movs	r5, #8
 800b820:	e7b3      	b.n	800b78a <__hexnan+0x7a>
 800b822:	9b01      	ldr	r3, [sp, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0dd      	beq.n	800b7e4 <__hexnan+0xd4>
 800b828:	f1c3 0320 	rsb	r3, r3, #32
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	40da      	lsrs	r2, r3
 800b832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b836:	4013      	ands	r3, r2
 800b838:	f846 3c04 	str.w	r3, [r6, #-4]
 800b83c:	e7d2      	b.n	800b7e4 <__hexnan+0xd4>
 800b83e:	3f04      	subs	r7, #4
 800b840:	e7d0      	b.n	800b7e4 <__hexnan+0xd4>
 800b842:	2004      	movs	r0, #4
 800b844:	e7d5      	b.n	800b7f2 <__hexnan+0xe2>

0800b846 <__ascii_mbtowc>:
 800b846:	b082      	sub	sp, #8
 800b848:	b901      	cbnz	r1, 800b84c <__ascii_mbtowc+0x6>
 800b84a:	a901      	add	r1, sp, #4
 800b84c:	b142      	cbz	r2, 800b860 <__ascii_mbtowc+0x1a>
 800b84e:	b14b      	cbz	r3, 800b864 <__ascii_mbtowc+0x1e>
 800b850:	7813      	ldrb	r3, [r2, #0]
 800b852:	600b      	str	r3, [r1, #0]
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	1e10      	subs	r0, r2, #0
 800b858:	bf18      	it	ne
 800b85a:	2001      	movne	r0, #1
 800b85c:	b002      	add	sp, #8
 800b85e:	4770      	bx	lr
 800b860:	4610      	mov	r0, r2
 800b862:	e7fb      	b.n	800b85c <__ascii_mbtowc+0x16>
 800b864:	f06f 0001 	mvn.w	r0, #1
 800b868:	e7f8      	b.n	800b85c <__ascii_mbtowc+0x16>

0800b86a <_realloc_r>:
 800b86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86e:	4607      	mov	r7, r0
 800b870:	4614      	mov	r4, r2
 800b872:	460d      	mov	r5, r1
 800b874:	b921      	cbnz	r1, 800b880 <_realloc_r+0x16>
 800b876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	4611      	mov	r1, r2
 800b87c:	f7fd b910 	b.w	8008aa0 <_malloc_r>
 800b880:	b92a      	cbnz	r2, 800b88e <_realloc_r+0x24>
 800b882:	f7fd f899 	bl	80089b8 <_free_r>
 800b886:	4625      	mov	r5, r4
 800b888:	4628      	mov	r0, r5
 800b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88e:	f000 f89f 	bl	800b9d0 <_malloc_usable_size_r>
 800b892:	4284      	cmp	r4, r0
 800b894:	4606      	mov	r6, r0
 800b896:	d802      	bhi.n	800b89e <_realloc_r+0x34>
 800b898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b89c:	d8f4      	bhi.n	800b888 <_realloc_r+0x1e>
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	f7fd f8fd 	bl	8008aa0 <_malloc_r>
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	b908      	cbnz	r0, 800b8ae <_realloc_r+0x44>
 800b8aa:	4645      	mov	r5, r8
 800b8ac:	e7ec      	b.n	800b888 <_realloc_r+0x1e>
 800b8ae:	42b4      	cmp	r4, r6
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	bf28      	it	cs
 800b8b6:	4632      	movcs	r2, r6
 800b8b8:	f7ff fc44 	bl	800b144 <memcpy>
 800b8bc:	4629      	mov	r1, r5
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f7fd f87a 	bl	80089b8 <_free_r>
 800b8c4:	e7f1      	b.n	800b8aa <_realloc_r+0x40>
	...

0800b8c8 <_strtoul_l.isra.0>:
 800b8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8cc:	4e34      	ldr	r6, [pc, #208]	@ (800b9a0 <_strtoul_l.isra.0+0xd8>)
 800b8ce:	4686      	mov	lr, r0
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8d8:	5d37      	ldrb	r7, [r6, r4]
 800b8da:	f017 0708 	ands.w	r7, r7, #8
 800b8de:	d1f8      	bne.n	800b8d2 <_strtoul_l.isra.0+0xa>
 800b8e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b8e2:	d110      	bne.n	800b906 <_strtoul_l.isra.0+0x3e>
 800b8e4:	782c      	ldrb	r4, [r5, #0]
 800b8e6:	2701      	movs	r7, #1
 800b8e8:	1c85      	adds	r5, r0, #2
 800b8ea:	f033 0010 	bics.w	r0, r3, #16
 800b8ee:	d115      	bne.n	800b91c <_strtoul_l.isra.0+0x54>
 800b8f0:	2c30      	cmp	r4, #48	@ 0x30
 800b8f2:	d10d      	bne.n	800b910 <_strtoul_l.isra.0+0x48>
 800b8f4:	7828      	ldrb	r0, [r5, #0]
 800b8f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b8fa:	2858      	cmp	r0, #88	@ 0x58
 800b8fc:	d108      	bne.n	800b910 <_strtoul_l.isra.0+0x48>
 800b8fe:	786c      	ldrb	r4, [r5, #1]
 800b900:	3502      	adds	r5, #2
 800b902:	2310      	movs	r3, #16
 800b904:	e00a      	b.n	800b91c <_strtoul_l.isra.0+0x54>
 800b906:	2c2b      	cmp	r4, #43	@ 0x2b
 800b908:	bf04      	itt	eq
 800b90a:	782c      	ldrbeq	r4, [r5, #0]
 800b90c:	1c85      	addeq	r5, r0, #2
 800b90e:	e7ec      	b.n	800b8ea <_strtoul_l.isra.0+0x22>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1f6      	bne.n	800b902 <_strtoul_l.isra.0+0x3a>
 800b914:	2c30      	cmp	r4, #48	@ 0x30
 800b916:	bf14      	ite	ne
 800b918:	230a      	movne	r3, #10
 800b91a:	2308      	moveq	r3, #8
 800b91c:	f04f 38ff 	mov.w	r8, #4294967295
 800b920:	2600      	movs	r6, #0
 800b922:	fbb8 f8f3 	udiv	r8, r8, r3
 800b926:	fb03 f908 	mul.w	r9, r3, r8
 800b92a:	ea6f 0909 	mvn.w	r9, r9
 800b92e:	4630      	mov	r0, r6
 800b930:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b934:	f1bc 0f09 	cmp.w	ip, #9
 800b938:	d810      	bhi.n	800b95c <_strtoul_l.isra.0+0x94>
 800b93a:	4664      	mov	r4, ip
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	dd1e      	ble.n	800b97e <_strtoul_l.isra.0+0xb6>
 800b940:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b944:	d007      	beq.n	800b956 <_strtoul_l.isra.0+0x8e>
 800b946:	4580      	cmp	r8, r0
 800b948:	d316      	bcc.n	800b978 <_strtoul_l.isra.0+0xb0>
 800b94a:	d101      	bne.n	800b950 <_strtoul_l.isra.0+0x88>
 800b94c:	45a1      	cmp	r9, r4
 800b94e:	db13      	blt.n	800b978 <_strtoul_l.isra.0+0xb0>
 800b950:	fb00 4003 	mla	r0, r0, r3, r4
 800b954:	2601      	movs	r6, #1
 800b956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b95a:	e7e9      	b.n	800b930 <_strtoul_l.isra.0+0x68>
 800b95c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b960:	f1bc 0f19 	cmp.w	ip, #25
 800b964:	d801      	bhi.n	800b96a <_strtoul_l.isra.0+0xa2>
 800b966:	3c37      	subs	r4, #55	@ 0x37
 800b968:	e7e8      	b.n	800b93c <_strtoul_l.isra.0+0x74>
 800b96a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b96e:	f1bc 0f19 	cmp.w	ip, #25
 800b972:	d804      	bhi.n	800b97e <_strtoul_l.isra.0+0xb6>
 800b974:	3c57      	subs	r4, #87	@ 0x57
 800b976:	e7e1      	b.n	800b93c <_strtoul_l.isra.0+0x74>
 800b978:	f04f 36ff 	mov.w	r6, #4294967295
 800b97c:	e7eb      	b.n	800b956 <_strtoul_l.isra.0+0x8e>
 800b97e:	1c73      	adds	r3, r6, #1
 800b980:	d106      	bne.n	800b990 <_strtoul_l.isra.0+0xc8>
 800b982:	2322      	movs	r3, #34	@ 0x22
 800b984:	f8ce 3000 	str.w	r3, [lr]
 800b988:	4630      	mov	r0, r6
 800b98a:	b932      	cbnz	r2, 800b99a <_strtoul_l.isra.0+0xd2>
 800b98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b990:	b107      	cbz	r7, 800b994 <_strtoul_l.isra.0+0xcc>
 800b992:	4240      	negs	r0, r0
 800b994:	2a00      	cmp	r2, #0
 800b996:	d0f9      	beq.n	800b98c <_strtoul_l.isra.0+0xc4>
 800b998:	b106      	cbz	r6, 800b99c <_strtoul_l.isra.0+0xd4>
 800b99a:	1e69      	subs	r1, r5, #1
 800b99c:	6011      	str	r1, [r2, #0]
 800b99e:	e7f5      	b.n	800b98c <_strtoul_l.isra.0+0xc4>
 800b9a0:	0800bf39 	.word	0x0800bf39

0800b9a4 <_strtoul_r>:
 800b9a4:	f7ff bf90 	b.w	800b8c8 <_strtoul_l.isra.0>

0800b9a8 <__ascii_wctomb>:
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	b141      	cbz	r1, 800b9c0 <__ascii_wctomb+0x18>
 800b9ae:	2aff      	cmp	r2, #255	@ 0xff
 800b9b0:	d904      	bls.n	800b9bc <__ascii_wctomb+0x14>
 800b9b2:	228a      	movs	r2, #138	@ 0x8a
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ba:	4770      	bx	lr
 800b9bc:	700a      	strb	r2, [r1, #0]
 800b9be:	2001      	movs	r0, #1
 800b9c0:	4770      	bx	lr

0800b9c2 <abort>:
 800b9c2:	b508      	push	{r3, lr}
 800b9c4:	2006      	movs	r0, #6
 800b9c6:	f000 f833 	bl	800ba30 <raise>
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	f7fa feb6 	bl	800673c <_exit>

0800b9d0 <_malloc_usable_size_r>:
 800b9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d4:	1f18      	subs	r0, r3, #4
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfbc      	itt	lt
 800b9da:	580b      	ldrlt	r3, [r1, r0]
 800b9dc:	18c0      	addlt	r0, r0, r3
 800b9de:	4770      	bx	lr

0800b9e0 <_raise_r>:
 800b9e0:	291f      	cmp	r1, #31
 800b9e2:	b538      	push	{r3, r4, r5, lr}
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	d904      	bls.n	800b9f4 <_raise_r+0x14>
 800b9ea:	2316      	movs	r3, #22
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9f6:	b112      	cbz	r2, 800b9fe <_raise_r+0x1e>
 800b9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9fc:	b94b      	cbnz	r3, 800ba12 <_raise_r+0x32>
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 f830 	bl	800ba64 <_getpid_r>
 800ba04:	4622      	mov	r2, r4
 800ba06:	4601      	mov	r1, r0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba0e:	f000 b817 	b.w	800ba40 <_kill_r>
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d00a      	beq.n	800ba2c <_raise_r+0x4c>
 800ba16:	1c59      	adds	r1, r3, #1
 800ba18:	d103      	bne.n	800ba22 <_raise_r+0x42>
 800ba1a:	2316      	movs	r3, #22
 800ba1c:	6003      	str	r3, [r0, #0]
 800ba1e:	2001      	movs	r0, #1
 800ba20:	e7e7      	b.n	800b9f2 <_raise_r+0x12>
 800ba22:	2100      	movs	r1, #0
 800ba24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4798      	blx	r3
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e7e0      	b.n	800b9f2 <_raise_r+0x12>

0800ba30 <raise>:
 800ba30:	4b02      	ldr	r3, [pc, #8]	@ (800ba3c <raise+0xc>)
 800ba32:	4601      	mov	r1, r0
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	f7ff bfd3 	b.w	800b9e0 <_raise_r>
 800ba3a:	bf00      	nop
 800ba3c:	20000034 	.word	0x20000034

0800ba40 <_kill_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	@ (800ba60 <_kill_r+0x20>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	f7fa fe65 	bl	800671c <_kill>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	d102      	bne.n	800ba5c <_kill_r+0x1c>
 800ba56:	682b      	ldr	r3, [r5, #0]
 800ba58:	b103      	cbz	r3, 800ba5c <_kill_r+0x1c>
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	bd38      	pop	{r3, r4, r5, pc}
 800ba5e:	bf00      	nop
 800ba60:	200007f0 	.word	0x200007f0

0800ba64 <_getpid_r>:
 800ba64:	f7fa be52 	b.w	800670c <_getpid>

0800ba68 <_init>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	bf00      	nop
 800ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6e:	bc08      	pop	{r3}
 800ba70:	469e      	mov	lr, r3
 800ba72:	4770      	bx	lr

0800ba74 <_fini>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	bf00      	nop
 800ba78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7a:	bc08      	pop	{r3}
 800ba7c:	469e      	mov	lr, r3
 800ba7e:	4770      	bx	lr
