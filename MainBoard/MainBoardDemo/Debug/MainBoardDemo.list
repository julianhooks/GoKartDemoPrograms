
MainBoardDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004290  08004290  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004298  08004298  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080042a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          000007f8  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000814  20000814  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010526  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c3  00000000  00000000  00016572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00018638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d1  00000000  00000000  000192f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248c8  00000000  00000000  00019cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcf0  00000000  00000000  0003e589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de14d  00000000  00000000  0004c279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a3c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003650  00000000  00000000  0012a40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0012da5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004260 	.word	0x08004260

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08004260 	.word	0x08004260

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <split_uint16>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

//used to encode and decode sensor data from one 16bit --> two 8-bit
static inline void split_uint16(uint16_t v, uint8_t *hi, uint8_t *lo) {
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	81fb      	strh	r3, [r7, #14]
    *hi = (uint8_t)(v >> 8);
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	b2da      	uxtb	r2, r3
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	701a      	strb	r2, [r3, #0]
    *lo = (uint8_t)(v & 0xFF);
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	701a      	strb	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <combine_uint8>:

static inline uint16_t combine_uint8(uint8_t hi, uint8_t lo) {
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	460a      	mov	r2, r1
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	4613      	mov	r3, r2
 8000554:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t)hi << 8) | (uint16_t)lo;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	b21b      	sxth	r3, r3
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b21a      	sxth	r2, r3
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21b      	sxth	r3, r3
 8000566:	b29b      	uxth	r3, r3
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t sensorVal = 10306;
uint16_t recovered = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	@ (80005f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000580:	2100      	movs	r1, #0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 f8ea 	bl	800175c <HAL_CAN_GetRxMessage>

	uint8_t TxID = RxData[7];
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800058a:	79db      	ldrb	r3, [r3, #7]
 800058c:	73fb      	strb	r3, [r7, #15]

	if (TxID == TEST)
 800058e:	7bfa      	ldrb	r2, [r7, #15]
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d110      	bne.n	80005ba <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000598:	2101      	movs	r1, #1
 800059a:	4817      	ldr	r0, [pc, #92]	@ (80005f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800059c:	f002 fa95 	bl	8002aca <HAL_GPIO_TogglePin>
		recovered = combine_uint8(RxData[0], RxData[1]);
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005a6:	7852      	ldrb	r2, [r2, #1]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffcb 	bl	8000546 <combine_uint8>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80005b6:	801a      	strh	r2, [r3, #0]
	else if (TxID == UI)
	{
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, RxData[0]);
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, RxData[2]);
	}
}
 80005b8:	e013      	b.n	80005e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	else if (TxID == UI)
 80005ba:	7bfa      	ldrb	r2, [r7, #15]
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d10e      	bne.n	80005e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, RxData[0]);
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80005ce:	f002 fa63 	bl	8002a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, RxData[2]);
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	461a      	mov	r2, r3
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80005de:	f002 fa5b 	bl	8002a98 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200007f0 	.word	0x200007f0
 80005f0:	200007cc 	.word	0x200007cc
 80005f4:	20000004 	.word	0x20000004
 80005f8:	40020400 	.word	0x40020400
 80005fc:	20000804 	.word	0x20000804
 8000600:	20000008 	.word	0x20000008

08000604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
	int but = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000614:	f002 fa28 	bl	8002a68 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	60fb      	str	r3, [r7, #12]
	if (but == 1)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d121      	bne.n	8000666 <HAL_GPIO_EXTI_Callback+0x62>
	{
	    TxData[7] = MAIN; //set identifier byte
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x74>)
 800062a:	71da      	strb	r2, [r3, #7]
	    split_uint16(sensorVal, &TxData[0], &TxData[1]);
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <HAL_GPIO_EXTI_Callback+0x78>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000632:	4911      	ldr	r1, [pc, #68]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x74>)
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff6f 	bl	8000518 <split_uint16>

		TxHeader.StdId = TEST;  // ID for Test board
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_GPIO_EXTI_Callback+0x80>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x84>)
 8000640:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[0]);
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_GPIO_EXTI_Callback+0x88>)
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x74>)
 8000646:	4910      	ldr	r1, [pc, #64]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x84>)
 8000648:	4811      	ldr	r0, [pc, #68]	@ (8000690 <HAL_GPIO_EXTI_Callback+0x8c>)
 800064a:	f000 ffb7 	bl	80015bc <HAL_CAN_AddTxMessage>

		TxHeader.StdId = UI;  // ID for UI board
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x90>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x84>)
 8000654:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[1]);
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x94>)
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x74>)
 800065a:	490b      	ldr	r1, [pc, #44]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x84>)
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <HAL_GPIO_EXTI_Callback+0x8c>)
 800065e:	f000 ffad 	bl	80015bc <HAL_CAN_AddTxMessage>
		but = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	}
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020800 	.word	0x40020800
 8000674:	20000000 	.word	0x20000000
 8000678:	200007e8 	.word	0x200007e8
 800067c:	2000000c 	.word	0x2000000c
 8000680:	200007e9 	.word	0x200007e9
 8000684:	20000004 	.word	0x20000004
 8000688:	200007b4 	.word	0x200007b4
 800068c:	200007f8 	.word	0x200007f8
 8000690:	200001b0 	.word	0x200001b0
 8000694:	20000008 	.word	0x20000008
 8000698:	200007fc 	.word	0x200007fc

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fcd6 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f82e 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 f994 	bl	80009d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006ac:	f000 f894 	bl	80007d8 <MX_CAN1_Init>
  MX_ETH_Init();
 80006b0:	f000 f8ea 	bl	8000888 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006b4:	f000 f936 	bl	8000924 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b8:	f000 f95e 	bl	8000978 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <main+0x5c>)
 80006c4:	f002 f9e8 	bl	8002a98 <HAL_GPIO_WritePin>

  HAL_CAN_Start(&hcan1);
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <main+0x60>)
 80006ca:	f000 ff33 	bl	8001534 <HAL_CAN_Start>

      // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006ce:	2102      	movs	r1, #2
 80006d0:	480a      	ldr	r0, [pc, #40]	@ (80006fc <main+0x60>)
 80006d2:	f001 f965 	bl	80019a0 <HAL_CAN_ActivateNotification>

  //set header values (all these are the same except for ID)
  TxHeader.DLC = 8;  // data length
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <main+0x64>)
 80006d8:	2208      	movs	r2, #8
 80006da:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <main+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <main+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <main+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 80006ee:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <main+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <main+0x58>
 80006f8:	40020400 	.word	0x40020400
 80006fc:	200001b0 	.word	0x200001b0
 8000700:	200007b4 	.word	0x200007b4

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fd77 	bl	8004206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000764:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000778:	23a8      	movs	r3, #168	@ 0xa8
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000780:	2307      	movs	r3, #7
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fae1 	bl	8002d50 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f9e6 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2105      	movs	r1, #5
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fd42 	bl	8003240 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f9cf 	bl	8000b64 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007e0:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <MX_CAN1_Init+0xa8>)
 80007e2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007e6:	2215      	movs	r2, #21
 80007e8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_CAN1_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_CAN1_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000828:	4814      	ldr	r0, [pc, #80]	@ (800087c <MX_CAN1_Init+0xa4>)
 800082a:	f000 fca7 	bl	800117c <HAL_CAN_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 f996 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

       canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
       canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800083c:	230a      	movs	r3, #10
 800083e:	617b      	str	r3, [r7, #20]
       canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
       canfilterconfig.FilterIdHigh = MAIN<<5;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_CAN1_Init+0xac>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	015b      	lsls	r3, r3, #5
 800084a:	603b      	str	r3, [r7, #0]
       canfilterconfig.FilterIdLow = 0x0000;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
       canfilterconfig.FilterMaskIdHigh = MAIN<<5;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_CAN1_Init+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	015b      	lsls	r3, r3, #5
 8000856:	60bb      	str	r3, [r7, #8]
       canfilterconfig.FilterMaskIdLow = 0x0000;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
       canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
       canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000860:	2301      	movs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
       canfilterconfig.SlaveStartFilterBank = 13;  // 13 - 27 are Slave (CAN2) or 0 - 12 are Master (CAN1)
 8000864:	230d      	movs	r3, #13
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
       	 	 	 	 	 	 	 	 	 	 	// useless if only 1 CAN1 (which this board has)

       HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <MX_CAN1_Init+0xa4>)
 800086e:	f000 fd81 	bl	8001374 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200001b0 	.word	0x200001b0
 8000880:	40006400 	.word	0x40006400
 8000884:	20000000 	.word	0x20000000

08000888 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_ETH_Init+0x84>)
 800088e:	4a20      	ldr	r2, [pc, #128]	@ (8000910 <MX_ETH_Init+0x88>)
 8000890:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_ETH_Init+0x8c>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_ETH_Init+0x8c>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008a0:	22e1      	movs	r2, #225	@ 0xe1
 80008a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_ETH_Init+0x84>)
 80008b8:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_ETH_Init+0x84>)
 80008be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_ETH_Init+0x84>)
 80008c6:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <MX_ETH_Init+0x90>)
 80008c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_ETH_Init+0x84>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	@ (800091c <MX_ETH_Init+0x94>)
 80008ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_ETH_Init+0x84>)
 80008d2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_ETH_Init+0x84>)
 80008da:	f001 fbc9 	bl	8002070 <HAL_ETH_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008e4:	f000 f93e 	bl	8000b64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e8:	2238      	movs	r2, #56	@ 0x38
 80008ea:	2100      	movs	r1, #0
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_ETH_Init+0x98>)
 80008ee:	f003 fc8a 	bl	8004206 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_ETH_Init+0x98>)
 80008f4:	2221      	movs	r2, #33	@ 0x21
 80008f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_ETH_Init+0x98>)
 80008fa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_ETH_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001d8 	.word	0x200001d8
 8000910:	40028000 	.word	0x40028000
 8000914:	20000808 	.word	0x20000808
 8000918:	20000110 	.word	0x20000110
 800091c:	20000070 	.word	0x20000070
 8000920:	20000038 	.word	0x20000038

08000924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <MX_USART3_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART3_UART_Init+0x4c>)
 800095c:	f002 fe90 	bl	8003680 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8fd 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000288 	.word	0x20000288
 8000974:	40004800 	.word	0x40004800

08000978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2204      	movs	r2, #4
 8000988:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2202      	movs	r2, #2
 800098e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2201      	movs	r2, #1
 80009a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	f002 f8b8 	bl	8002b30 <HAL_PCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f8cd 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200002d0 	.word	0x200002d0

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	@ 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b58      	ldr	r3, [pc, #352]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a57      	ldr	r2, [pc, #348]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b55      	ldr	r3, [pc, #340]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a50      	ldr	r2, [pc, #320]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b4e      	ldr	r3, [pc, #312]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b4a      	ldr	r3, [pc, #296]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a49      	ldr	r2, [pc, #292]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a42      	ldr	r2, [pc, #264]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b40      	ldr	r3, [pc, #256]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a3b      	ldr	r2, [pc, #236]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b39      	ldr	r3, [pc, #228]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a34      	ldr	r2, [pc, #208]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <MX_GPIO_Init+0x17c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a98:	482e      	ldr	r0, [pc, #184]	@ (8000b54 <MX_GPIO_Init+0x180>)
 8000a9a:	f001 fffd 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	482d      	ldr	r0, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0x184>)
 8000aa4:	f001 fff8 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4827      	ldr	r0, [pc, #156]	@ (8000b5c <MX_GPIO_Init+0x188>)
 8000ac0:	f001 fe26 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	481d      	ldr	r0, [pc, #116]	@ (8000b54 <MX_GPIO_Init+0x180>)
 8000ade:	f001 fe17 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae2:	2340      	movs	r3, #64	@ 0x40
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x184>)
 8000afa:	f001 fe09 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_GPIO_Init+0x184>)
 8000b12:	f001 fdfd 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b16:	2340      	movs	r3, #64	@ 0x40
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <MX_GPIO_Init+0x18c>)
 8000b32:	f001 fded 	bl	8002710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2028      	movs	r0, #40	@ 0x28
 8000b3c:	f001 fa61 	bl	8002002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b40:	2028      	movs	r0, #40	@ 0x28
 8000b42:	f001 fa7a 	bl	800203a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	@ 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <HAL_CAN_MspInit+0xa4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13b      	bne.n	8000c5a <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a1f      	ldr	r2, [pc, #124]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a18      	ldr	r2, [pc, #96]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <HAL_CAN_MspInit+0xac>)
 8000c36:	f001 fd6b 	bl	8002710 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f001 f9df 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c44:	2014      	movs	r0, #20
 8000c46:	f001 f9f8 	bl	800203a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2015      	movs	r0, #21
 8000c50:	f001 f9d7 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c54:	2015      	movs	r0, #21
 8000c56:	f001 f9f0 	bl	800203a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40006400 	.word	0x40006400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a55      	ldr	r2, [pc, #340]	@ (8000de4 <HAL_ETH_MspInit+0x174>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f040 80a4 	bne.w	8000ddc <HAL_ETH_MspInit+0x16c>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	4b53      	ldr	r3, [pc, #332]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a52      	ldr	r2, [pc, #328]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b50      	ldr	r3, [pc, #320]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cac:	623b      	str	r3, [r7, #32]
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b49      	ldr	r3, [pc, #292]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	4b45      	ldr	r3, [pc, #276]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a44      	ldr	r2, [pc, #272]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b42      	ldr	r3, [pc, #264]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	4a36      	ldr	r2, [pc, #216]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	4a28      	ldr	r2, [pc, #160]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <HAL_ETH_MspInit+0x178>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d58:	2332      	movs	r3, #50	@ 0x32
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	481e      	ldr	r0, [pc, #120]	@ (8000dec <HAL_ETH_MspInit+0x17c>)
 8000d74:	f001 fccc 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d78:	2386      	movs	r3, #134	@ 0x86
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4817      	ldr	r0, [pc, #92]	@ (8000df0 <HAL_ETH_MspInit+0x180>)
 8000d94:	f001 fcbc 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <HAL_ETH_MspInit+0x184>)
 8000db6:	f001 fcab 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f001 fc9a 	bl	8002710 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3738      	adds	r7, #56	@ 0x38
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40028000 	.word	0x40028000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40021800 	.word	0x40021800

08000dfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_UART_MspInit+0x8c>)
 8000e74:	f001 fc4c 	bl	8002710 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	@ 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eac:	d13f      	bne.n	8000f2e <HAL_PCD_MspInit+0xa2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eca:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000ee8:	f001 fc12 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f02:	f001 fc05 	bl	8002710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_PCD_MspInit+0xac>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	@ 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <NMI_Handler+0x4>

08000f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 f8ad 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <CAN1_RX0_IRQHandler+0x10>)
 8000fa6:	f000 fd21 	bl	80019ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001b0 	.word	0x200001b0

08000fb4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <CAN1_RX1_IRQHandler+0x10>)
 8000fba:	f000 fd17 	bl	80019ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001b0 	.word	0x200001b0

08000fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fcc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fd0:	f001 fd96 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 f8f5 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fb35 	bl	800069c <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001040:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8001044:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001048:	20000814 	.word	0x20000814

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 ffb7 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fd74 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 ffcf 	bl	8002056 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 ff97 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000010 	.word	0x20000010
 80010ec:	20000018 	.word	0x20000018
 80010f0:	20000014 	.word	0x20000014

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000018 	.word	0x20000018
 8001118:	20000810 	.word	0x20000810

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000810 	.word	0x20000810

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000018 	.word	0x20000018

0800117c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0ed      	b.n	800136a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fd10 	bl	8000bc0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b0:	f7ff ffb4 	bl	800111c <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011b6:	e012      	b.n	80011de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b8:	f7ff ffb0 	bl	800111c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d90b      	bls.n	80011de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0c5      	b.n	800136a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0e5      	beq.n	80011b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0202 	bic.w	r2, r2, #2
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011fc:	f7ff ff8e 	bl	800111c <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001202:	e012      	b.n	800122a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001204:	f7ff ff8a 	bl	800111c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d90b      	bls.n	800122a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001216:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2205      	movs	r2, #5
 8001222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e09f      	b.n	800136a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e5      	bne.n	8001204 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e1b      	ldrb	r3, [r3, #24]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e007      	b.n	8001262 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e5b      	ldrb	r3, [r3, #25]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e007      	b.n	800128c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800128a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e9b      	ldrb	r3, [r3, #26]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0220 	bic.w	r2, r2, #32
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7edb      	ldrb	r3, [r3, #27]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0210 	bic.w	r2, r2, #16
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7f1b      	ldrb	r3, [r3, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0208 	orr.w	r2, r2, #8
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7f5b      	ldrb	r3, [r3, #29]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0204 	orr.w	r2, r2, #4
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0204 	bic.w	r2, r2, #4
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	ea42 0103 	orr.w	r1, r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	1e5a      	subs	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <HAL_CAN_ConfigFilter+0x26>
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	2b02      	cmp	r3, #2
 8001396:	f040 80be 	bne.w	8001516 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800139a:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <HAL_CAN_ConfigFilter+0x1bc>)
 800139c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013b4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	2201      	movs	r2, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	401a      	ands	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d123      	bne.n	8001444 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3248      	adds	r2, #72	@ 0x48
 8001424:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143a:	6979      	ldr	r1, [r7, #20]
 800143c:	3348      	adds	r3, #72	@ 0x48
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d122      	bne.n	8001492 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	431a      	orrs	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800146c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3248      	adds	r2, #72	@ 0x48
 8001472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001488:	6979      	ldr	r1, [r7, #20]
 800148a:	3348      	adds	r3, #72	@ 0x48
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	401a      	ands	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014ac:	e007      	b.n	80014be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014d8:	e007      	b.n	80014ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001508:	f023 0201 	bic.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e006      	b.n	8001524 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
  }
}
 8001524:	4618      	mov	r0, r3
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40006400 	.word	0x40006400

08001534 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d12e      	bne.n	80015a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff fddc 	bl	800111c <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001566:	e012      	b.n	800158e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001568:	f7ff fdd8 	bl	800111c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d90b      	bls.n	800158e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2205      	movs	r2, #5
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e012      	b.n	80015b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e5      	bne.n	8001568 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e006      	b.n	80015b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015aa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
  }
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d003      	beq.n	80015e8 <HAL_CAN_AddTxMessage+0x2c>
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	f040 80ad 	bne.w	8001742 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8095 	beq.w	8001732 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	0e1b      	lsrs	r3, r3, #24
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10d      	bne.n	8001640 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	6809      	ldr	r1, [r1, #0]
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3318      	adds	r3, #24
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	440b      	add	r3, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00f      	b.n	8001660 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800164a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001654:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3318      	adds	r3, #24
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	440b      	add	r3, r1
 8001670:	3304      	adds	r3, #4
 8001672:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	7d1b      	ldrb	r3, [r3, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d111      	bne.n	80016a0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3318      	adds	r3, #24
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	3304      	adds	r3, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	6811      	ldr	r1, [r2, #0]
 8001690:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3318      	adds	r3, #24
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	440b      	add	r3, r1
 800169c:	3304      	adds	r3, #4
 800169e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3307      	adds	r3, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	061a      	lsls	r2, r3, #24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3306      	adds	r3, #6
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3305      	adds	r3, #5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4313      	orrs	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	3204      	adds	r2, #4
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4610      	mov	r0, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	6811      	ldr	r1, [r2, #0]
 80016c8:	ea43 0200 	orr.w	r2, r3, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3303      	adds	r3, #3
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	061a      	lsls	r2, r3, #24
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3302      	adds	r3, #2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3301      	adds	r3, #1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4313      	orrs	r3, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	4610      	mov	r0, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	ea43 0200 	orr.w	r2, r3, r0
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	440b      	add	r3, r1
 8001708:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800170c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3318      	adds	r3, #24
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3318      	adds	r3, #24
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	440b      	add	r3, r1
 800172c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e00e      	b.n	8001750 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e006      	b.n	8001750 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	3724      	adds	r7, #36	@ 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d003      	beq.n	8001780 <HAL_CAN_GetRxMessage+0x24>
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b02      	cmp	r3, #2
 800177c:	f040 8103 	bne.w	8001986 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d116      	bne.n	80017c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0f7      	b.n	8001994 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0e8      	b.n	8001994 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	331b      	adds	r3, #27
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0204 	and.w	r2, r3, #4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	331b      	adds	r3, #27
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0d5b      	lsrs	r3, r3, #21
 80017f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e00b      	b.n	8001812 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	331b      	adds	r3, #27
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	331b      	adds	r3, #27
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0202 	and.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	3304      	adds	r3, #4
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2208      	movs	r2, #8
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	e00b      	b.n	8001860 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	331b      	adds	r3, #27
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	3304      	adds	r3, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 020f 	and.w	r2, r3, #15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	331b      	adds	r3, #27
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b2da      	uxtb	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	331b      	adds	r3, #27
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	3304      	adds	r3, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0a1a      	lsrs	r2, r3, #8
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0c1a      	lsrs	r2, r3, #16
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3302      	adds	r3, #2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0e1a      	lsrs	r2, r3, #24
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3303      	adds	r3, #3
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3304      	adds	r3, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0a1a      	lsrs	r2, r3, #8
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3305      	adds	r3, #5
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0c1a      	lsrs	r2, r3, #16
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3306      	adds	r3, #6
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e1a      	lsrs	r2, r3, #24
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3307      	adds	r3, #7
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d108      	bne.n	8001972 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e007      	b.n	8001982 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0220 	orr.w	r2, r2, #32
 8001980:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e006      	b.n	8001994 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <HAL_CAN_ActivateNotification+0x1e>
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d109      	bne.n	80019d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e006      	b.n	80019e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d07c      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d023      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f983 	bl	8001d5a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a54:	e016      	b.n	8001a84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	e00c      	b.n	8001a84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	e002      	b.n	8001a84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f989 	bl	8001d96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d024      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f963 	bl	8001d6e <HAL_CAN_TxMailbox1CompleteCallback>
 8001aa8:	e016      	b.n	8001ad8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	e00c      	b.n	8001ad8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad0:	e002      	b.n	8001ad8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f969 	bl	8001daa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f943 	bl	8001d82 <HAL_CAN_TxMailbox2CompleteCallback>
 8001afc:	e016      	b.n	8001b2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b10:	e00c      	b.n	8001b2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	e002      	b.n	8001b2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f949 	bl	8001dbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f930 	bl	8001dd2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fcf2 	bl	8000574 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00c      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f912 	bl	8001dfa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8f9 	bl	8001de6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8fc 	bl	8001e0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2208      	movs	r2, #8
 8001c30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8f5 	bl	8001e22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07b      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d072      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d043      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03e      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cba:	2b60      	cmp	r3, #96	@ 0x60
 8001cbc:	d02b      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x32a>
 8001cbe:	2b60      	cmp	r3, #96	@ 0x60
 8001cc0:	d82e      	bhi.n	8001d20 <HAL_CAN_IRQHandler+0x334>
 8001cc2:	2b50      	cmp	r3, #80	@ 0x50
 8001cc4:	d022      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x320>
 8001cc6:	2b50      	cmp	r3, #80	@ 0x50
 8001cc8:	d82a      	bhi.n	8001d20 <HAL_CAN_IRQHandler+0x334>
 8001cca:	2b40      	cmp	r3, #64	@ 0x40
 8001ccc:	d019      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x316>
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	d826      	bhi.n	8001d20 <HAL_CAN_IRQHandler+0x334>
 8001cd2:	2b30      	cmp	r3, #48	@ 0x30
 8001cd4:	d010      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x30c>
 8001cd6:	2b30      	cmp	r3, #48	@ 0x30
 8001cd8:	d822      	bhi.n	8001d20 <HAL_CAN_IRQHandler+0x334>
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d002      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x2f8>
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d005      	beq.n	8001cee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ce2:	e01d      	b.n	8001d20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cec:	e019      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf6:	e014      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	f043 0320 	orr.w	r3, r3, #32
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d00:	e00f      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d0a:	e00a      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d14:	e005      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d1e:	e000      	b.n	8001d22 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f872 	bl	8001e36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff3e 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff31 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e08a      	b.n	8002198 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2223      	movs	r2, #35	@ 0x23
 8002090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe fdeb 	bl	8000c70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_ETH_Init+0x130>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a3f      	ldr	r2, [pc, #252]	@ (80021a0 <HAL_ETH_Init+0x130>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b3d      	ldr	r3, [pc, #244]	@ (80021a0 <HAL_ETH_Init+0x130>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020b6:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <HAL_ETH_Init+0x134>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	@ (80021a4 <HAL_ETH_Init+0x134>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020c2:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <HAL_ETH_Init+0x134>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4936      	ldr	r1, [pc, #216]	@ (80021a4 <HAL_ETH_Init+0x134>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020d0:	4b34      	ldr	r3, [pc, #208]	@ (80021a4 <HAL_ETH_Init+0x134>)
 80020d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff f816 	bl	800111c <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020f2:	e011      	b.n	8002118 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020f4:	f7ff f812 	bl	800111c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002102:	d909      	bls.n	8002118 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2204      	movs	r2, #4
 8002108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	22e0      	movs	r2, #224	@ 0xe0
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e03f      	b.n	8002198 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e4      	bne.n	80020f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f97a 	bl	8002424 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fa25 	bl	8002580 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa7b 	bl	8002632 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	461a      	mov	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f9e3 	bl	8002510 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800216e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002182:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2210      	movs	r2, #16
 8002192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800

080021a8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4b53      	ldr	r3, [pc, #332]	@ (800230c <ETH_SetMACConfig+0x164>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7b9b      	ldrb	r3, [r3, #14]
 80021c6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	7c12      	ldrb	r2, [r2, #16]
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d102      	bne.n	80021d6 <ETH_SetMACConfig+0x2e>
 80021d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021d4:	e000      	b.n	80021d8 <ETH_SetMACConfig+0x30>
 80021d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	7c52      	ldrb	r2, [r2, #17]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d102      	bne.n	80021e8 <ETH_SetMACConfig+0x40>
 80021e2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021e6:	e000      	b.n	80021ea <ETH_SetMACConfig+0x42>
 80021e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7fdb      	ldrb	r3, [r3, #31]
 80021f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	7f92      	ldrb	r2, [r2, #30]
 8002204:	2a00      	cmp	r2, #0
 8002206:	d102      	bne.n	800220e <ETH_SetMACConfig+0x66>
 8002208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800220c:	e000      	b.n	8002210 <ETH_SetMACConfig+0x68>
 800220e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002210:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	7f1b      	ldrb	r3, [r3, #28]
 8002216:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002218:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800221e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002226:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800222e:	2a00      	cmp	r2, #0
 8002230:	d102      	bne.n	8002238 <ETH_SetMACConfig+0x90>
 8002232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002236:	e000      	b.n	800223a <ETH_SetMACConfig+0x92>
 8002238:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800223a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7bdb      	ldrb	r3, [r3, #15]
 8002240:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002242:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002250:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002252:	4313      	orrs	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe ff62 	bl	8001134 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002296:	2a00      	cmp	r2, #0
 8002298:	d101      	bne.n	800229e <ETH_SetMACConfig+0xf6>
 800229a:	2280      	movs	r2, #128	@ 0x80
 800229c:	e000      	b.n	80022a0 <ETH_SetMACConfig+0xf8>
 800229e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d101      	bne.n	80022b6 <ETH_SetMACConfig+0x10e>
 80022b2:	2208      	movs	r2, #8
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0x110>
 80022b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80022c0:	2a01      	cmp	r2, #1
 80022c2:	d101      	bne.n	80022c8 <ETH_SetMACConfig+0x120>
 80022c4:	2204      	movs	r2, #4
 80022c6:	e000      	b.n	80022ca <ETH_SetMACConfig+0x122>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d101      	bne.n	80022da <ETH_SetMACConfig+0x132>
 80022d6:	2202      	movs	r2, #2
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0x134>
 80022da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022dc:	4313      	orrs	r3, r2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe ff1d 	bl	8001134 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	fd20810f 	.word	0xfd20810f

08002310 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <ETH_SetDMAConfig+0x110>)
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7b1b      	ldrb	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <ETH_SetDMAConfig+0x2c>
 8002336:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800233a:	e000      	b.n	800233e <ETH_SetDMAConfig+0x2e>
 800233c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	7b5b      	ldrb	r3, [r3, #13]
 8002342:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002344:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	7f52      	ldrb	r2, [r2, #29]
 800234a:	2a00      	cmp	r2, #0
 800234c:	d102      	bne.n	8002354 <ETH_SetDMAConfig+0x44>
 800234e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002352:	e000      	b.n	8002356 <ETH_SetDMAConfig+0x46>
 8002354:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002356:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	7b9b      	ldrb	r3, [r3, #14]
 800235c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800235e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002364:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800236c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7f9b      	ldrb	r3, [r3, #30]
 8002372:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002374:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800237a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002382:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002384:	4313      	orrs	r3, r2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe fec4 	bl	8001134 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fe95 	bl	8001134 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f8de3f23 	.word	0xf8de3f23

08002424 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0a6      	sub	sp, #152	@ 0x98
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002466:	2300      	movs	r3, #0
 8002468:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002470:	2300      	movs	r3, #0
 8002472:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800248c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002490:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800249e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fe7f 	bl	80021a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024e4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ea:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff05 	bl	8002310 <ETH_SetDMAConfig>
}
 8002506:	bf00      	nop
 8002508:	3798      	adds	r7, #152	@ 0x98
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3305      	adds	r3, #5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	3204      	adds	r2, #4
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <ETH_MACAddressConfig+0x68>)
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3303      	adds	r3, #3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	061a      	lsls	r2, r3, #24
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3302      	adds	r3, #2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3301      	adds	r3, #1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4313      	orrs	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <ETH_MACAddressConfig+0x6c>)
 8002562:	4413      	add	r3, r2
 8002564:	461a      	mov	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40028040 	.word	0x40028040
 800257c:	40028044 	.word	0x40028044

08002580 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e03e      	b.n	800260c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	3206      	adds	r2, #6
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d80c      	bhi.n	80025f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68d9      	ldr	r1, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	e004      	b.n	80025fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d9bd      	bls.n	800258e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002624:	611a      	str	r2, [r3, #16]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e048      	b.n	80026d2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800267c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	3212      	adds	r2, #18
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d80c      	bhi.n	80026c2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6919      	ldr	r1, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	e004      	b.n	80026cc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d9b3      	bls.n	8002640 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	@ 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e177      	b.n	8002a1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 8166 	bne.w	8002a16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d005      	beq.n	8002762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	2b02      	cmp	r3, #2
 8002760:	d130      	bne.n	80027c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d017      	beq.n	8002800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d123      	bne.n	8002854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80c0 	beq.w	8002a16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b66      	ldr	r3, [pc, #408]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	4a65      	ldr	r2, [pc, #404]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a6:	4b63      	ldr	r3, [pc, #396]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b2:	4a61      	ldr	r2, [pc, #388]	@ (8002a38 <HAL_GPIO_Init+0x328>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a58      	ldr	r2, [pc, #352]	@ (8002a3c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d037      	beq.n	800294e <HAL_GPIO_Init+0x23e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a57      	ldr	r2, [pc, #348]	@ (8002a40 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_GPIO_Init+0x23a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a56      	ldr	r2, [pc, #344]	@ (8002a44 <HAL_GPIO_Init+0x334>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x236>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a55      	ldr	r2, [pc, #340]	@ (8002a48 <HAL_GPIO_Init+0x338>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x232>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_GPIO_Init+0x33c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x22e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a53      	ldr	r2, [pc, #332]	@ (8002a50 <HAL_GPIO_Init+0x340>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x22a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	@ (8002a54 <HAL_GPIO_Init+0x344>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x226>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	@ (8002a58 <HAL_GPIO_Init+0x348>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x222>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	@ (8002a5c <HAL_GPIO_Init+0x34c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x21e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <HAL_GPIO_Init+0x350>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x21a>
 8002926:	2309      	movs	r3, #9
 8002928:	e012      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292a:	230a      	movs	r3, #10
 800292c:	e010      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292e:	2308      	movs	r3, #8
 8002930:	e00e      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002932:	2307      	movs	r3, #7
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002936:	2306      	movs	r3, #6
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	@ (8002a38 <HAL_GPIO_Init+0x328>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002992:	4a34      	ldr	r2, [pc, #208]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002998:	4b32      	ldr	r3, [pc, #200]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029bc:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c2:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <HAL_GPIO_Init+0x354>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae84 	bls.w	800272c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40021c00 	.word	0x40021c00
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40022400 	.word	0x40022400
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	041a      	lsls	r2, r3, #16
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	400b      	ands	r3, r1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd70 	bl	8000604 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e101      	b.n	8002d46 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fe f995 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b70:	d102      	bne.n	8002b78 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f8a7 	bl	8003cd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7c1a      	ldrb	r2, [r3, #16]
 8002b8a:	f88d 2000 	strb.w	r2, [sp]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b92:	f001 f839 	bl	8003c08 <USB_CoreInit>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0ce      	b.n	8002d46 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f89f 	bl	8003cf2 <USB_SetCurrentMode>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0bf      	b.n	8002d46 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e04a      	b.n	8002c62 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3315      	adds	r3, #21
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3314      	adds	r3, #20
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	b298      	uxth	r0, r3
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	332e      	adds	r3, #46	@ 0x2e
 8002c08:	4602      	mov	r2, r0
 8002c0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	331c      	adds	r3, #28
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3320      	adds	r3, #32
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3324      	adds	r3, #36	@ 0x24
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d3af      	bcc.n	8002bcc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e044      	b.n	8002cfc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	791b      	ldrb	r3, [r3, #4]
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3b5      	bcc.n	8002c72 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7c1a      	ldrb	r2, [r3, #16]
 8002d0e:	f88d 2000 	strb.w	r2, [sp]
 8002d12:	3304      	adds	r3, #4
 8002d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d16:	f001 f839 	bl	8003d8c <USB_DevInit>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e00c      	b.n	8002d46 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fa01 	bl	8004146 <USB_DevDisconnect>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e267      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d075      	beq.n	8002e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d6e:	4b88      	ldr	r3, [pc, #544]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b7e      	ldr	r3, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d157      	bne.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e242      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x74>
 8002db6:	4b76      	ldr	r3, [pc, #472]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a75      	ldr	r2, [pc, #468]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b70      	ldr	r3, [pc, #448]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6c      	ldr	r2, [pc, #432]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002de8:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a68      	ldr	r2, [pc, #416]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f988 	bl	800111c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe f984 	bl	800111c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	@ 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e207      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b5b      	ldr	r3, [pc, #364]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe f974 	bl	800111c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe f970 	bl	800111c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1f3      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e66:	4b4a      	ldr	r3, [pc, #296]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b44      	ldr	r3, [pc, #272]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	4b41      	ldr	r3, [pc, #260]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1c7      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4937      	ldr	r1, [pc, #220]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e03a      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe f929 	bl	800111c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fe f925 	bl	800111c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1a8      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b28      	ldr	r3, [pc, #160]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4925      	ldr	r1, [pc, #148]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f02:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f908 	bl	800111c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe f904 	bl	800111c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e187      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d036      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe f8e8 	bl	800111c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe f8e4 	bl	800111c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e167      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x200>
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe f8d1 	bl	800111c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	e00e      	b.n	8002f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe f8cd 	bl	800111c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d907      	bls.n	8002f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e150      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470000 	.word	0x42470000
 8002f98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	4b88      	ldr	r3, [pc, #544]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ea      	bne.n	8002f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8097 	beq.w	80030e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b81      	ldr	r3, [pc, #516]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	4a7c      	ldr	r2, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b77      	ldr	r3, [pc, #476]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b74      	ldr	r3, [pc, #464]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a73      	ldr	r2, [pc, #460]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f88d 	bl	800111c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe f889 	bl	800111c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e10c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x2ea>
 800302c:	4b64      	ldr	r3, [pc, #400]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	4a63      	ldr	r2, [pc, #396]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	@ 0x70
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x30c>
 8003042:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a5e      	ldr	r2, [pc, #376]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6713      	str	r3, [r2, #112]	@ 0x70
 800304e:	4b5c      	ldr	r3, [pc, #368]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	@ 0x70
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800305c:	4b58      	ldr	r3, [pc, #352]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	4a57      	ldr	r2, [pc, #348]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	@ 0x70
 8003068:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a54      	ldr	r2, [pc, #336]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d015      	beq.n	80030a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe f84e 	bl	800111c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe f84a 	bl	800111c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0cb      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	4b49      	ldr	r3, [pc, #292]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0ee      	beq.n	8003084 <HAL_RCC_OscConfig+0x334>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe f838 	bl	800111c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe f834 	bl	800111c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0b5      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ee      	bne.n	80030b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d8:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	4a38      	ldr	r2, [pc, #224]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a1 	beq.w	8003230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ee:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d05c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d141      	bne.n	8003186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f808 	bl	800111c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe f804 	bl	800111c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e087      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	491b      	ldr	r1, [pc, #108]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fd ffdd 	bl	800111c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fd ffd9 	bl	800111c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e05c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x416>
 8003184:	e054      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd ffc6 	bl	800111c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd ffc2 	bl	800111c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e045      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e038      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d028      	beq.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d121      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11a      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	3b01      	subs	r3, #1
 8003216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cc      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d90c      	bls.n	800327c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b65      	ldr	r3, [pc, #404]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a58      	ldr	r2, [pc, #352]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800329e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a52      	ldr	r2, [pc, #328]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b3f      	ldr	r3, [pc, #252]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4934      	ldr	r1, [pc, #208]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fd fef4 	bl	800111c <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fd fef0 	bl	800111c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2b      	ldr	r3, [pc, #172]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20c      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b22      	ldr	r3, [pc, #136]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b2:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fe54 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	08004278 	.word	0x08004278
 8003404:	20000010 	.word	0x20000010
 8003408:	20000014 	.word	0x20000014

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b094      	sub	sp, #80	@ 0x50
 8003412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003424:	4b79      	ldr	r3, [pc, #484]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d00d      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003430:	2b08      	cmp	r3, #8
 8003432:	f200 80e1 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x3a>
 800343e:	e0db      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b73      	ldr	r3, [pc, #460]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003444:	e0db      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x208>)
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344a:	e0d8      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344c:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4b6d      	ldr	r3, [pc, #436]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4b6a      	ldr	r3, [pc, #424]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	2200      	movs	r2, #0
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800346c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
 800347a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800347e:	4622      	mov	r2, r4
 8003480:	462b      	mov	r3, r5
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4621      	mov	r1, r4
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	6139      	str	r1, [r7, #16]
 800349c:	4629      	mov	r1, r5
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b0:	4659      	mov	r1, fp
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4651      	mov	r1, sl
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4651      	mov	r1, sl
 80034c0:	ebb2 0801 	subs.w	r8, r2, r1
 80034c4:	4659      	mov	r1, fp
 80034c6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	462b      	mov	r3, r5
 80034ec:	eb49 0303 	adc.w	r3, r9, r3
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034fe:	4629      	mov	r1, r5
 8003500:	024b      	lsls	r3, r1, #9
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003508:	4621      	mov	r1, r4
 800350a:	024a      	lsls	r2, r1, #9
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800351c:	f7fc fe66 	bl	80001ec <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003528:	e058      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	2200      	movs	r2, #0
 8003532:	4618      	mov	r0, r3
 8003534:	4611      	mov	r1, r2
 8003536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003556:	0150      	lsls	r0, r2, #5
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4641      	mov	r1, r8
 800355e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb63 0b01 	sbc.w	fp, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800357c:	ebb2 040a 	subs.w	r4, r2, sl
 8003580:	eb63 050b 	sbc.w	r5, r3, fp
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	00eb      	lsls	r3, r5, #3
 800358e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003592:	00e2      	lsls	r2, r4, #3
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4643      	mov	r3, r8
 800359a:	18e3      	adds	r3, r4, r3
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	464b      	mov	r3, r9
 80035a0:	eb45 0303 	adc.w	r3, r5, r3
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	61fa      	str	r2, [r7, #28]
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	f7fc fe0c 	bl	80001ec <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003600:	4618      	mov	r0, r3
 8003602:	3750      	adds	r7, #80	@ 0x50
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000010 	.word	0x20000010

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08004288 	.word	0x08004288

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08004288 	.word	0x08004288

08003680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e042      	b.n	8003718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fba8 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	@ 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f82b 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0c0      	sub	sp, #256	@ 0x100
 8003726:	af00      	add	r7, sp, #0
 8003728:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	68d9      	ldr	r1, [r3, #12]
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	ea40 0301 	orr.w	r3, r0, r1
 8003748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	431a      	orrs	r2, r3
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003778:	f021 010c 	bic.w	r1, r1, #12
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003786:	430b      	orrs	r3, r1
 8003788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379a:	6999      	ldr	r1, [r3, #24]
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	ea40 0301 	orr.w	r3, r0, r1
 80037a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b8f      	ldr	r3, [pc, #572]	@ (80039ec <UART_SetConfig+0x2cc>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d005      	beq.n	80037c0 <UART_SetConfig+0xa0>
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b8d      	ldr	r3, [pc, #564]	@ (80039f0 <UART_SetConfig+0x2d0>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d104      	bne.n	80037ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff ff4a 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80037c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037c8:	e003      	b.n	80037d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7ff ff31 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80037ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037dc:	f040 810c 	bne.w	80039f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	1891      	adds	r1, r2, r2
 80037f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037fa:	415b      	adcs	r3, r3
 80037fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003802:	4621      	mov	r1, r4
 8003804:	eb12 0801 	adds.w	r8, r2, r1
 8003808:	4629      	mov	r1, r5
 800380a:	eb43 0901 	adc.w	r9, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003822:	4690      	mov	r8, r2
 8003824:	4699      	mov	r9, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb18 0303 	adds.w	r3, r8, r3
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003830:	462b      	mov	r3, r5
 8003832:	eb49 0303 	adc.w	r3, r9, r3
 8003836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003846:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800384a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800384e:	460b      	mov	r3, r1
 8003850:	18db      	adds	r3, r3, r3
 8003852:	653b      	str	r3, [r7, #80]	@ 0x50
 8003854:	4613      	mov	r3, r2
 8003856:	eb42 0303 	adc.w	r3, r2, r3
 800385a:	657b      	str	r3, [r7, #84]	@ 0x54
 800385c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003864:	f7fc fcc2 	bl	80001ec <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <UART_SetConfig+0x2d4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003880:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003890:	415b      	adcs	r3, r3
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003898:	4641      	mov	r1, r8
 800389a:	eb12 0a01 	adds.w	sl, r2, r1
 800389e:	4649      	mov	r1, r9
 80038a0:	eb43 0b01 	adc.w	fp, r3, r1
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	4692      	mov	sl, r2
 80038ba:	469b      	mov	fp, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	eb1a 0303 	adds.w	r3, sl, r3
 80038c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb4b 0303 	adc.w	r3, fp, r3
 80038cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038fa:	f7fc fc77 	bl	80001ec <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4611      	mov	r1, r2
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <UART_SetConfig+0x2d4>)
 8003906:	fba3 2301 	umull	r2, r3, r3, r1
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2264      	movs	r2, #100	@ 0x64
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <UART_SetConfig+0x2d4>)
 800391c:	fba3 2302 	umull	r2, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003928:	441c      	add	r4, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003934:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003944:	415b      	adcs	r3, r3
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6339      	str	r1, [r7, #48]	@ 0x30
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003998:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800399c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a0:	460b      	mov	r3, r1
 80039a2:	18db      	adds	r3, r3, r3
 80039a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039b6:	f7fc fc19 	bl	80001ec <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	@ 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3332      	adds	r3, #50	@ 0x32
 80039d2:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <UART_SetConfig+0x2d4>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 0207 	and.w	r2, r3, #7
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4422      	add	r2, r4
 80039e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e8:	e106      	b.n	8003bf8 <UART_SetConfig+0x4d8>
 80039ea:	bf00      	nop
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40011400 	.word	0x40011400
 80039f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	6239      	str	r1, [r7, #32]
 8003a12:	415b      	adcs	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	1854      	adds	r4, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb43 0501 	adc.w	r5, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	00eb      	lsls	r3, r5, #3
 8003a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a32:	00e2      	lsls	r2, r4, #3
 8003a34:	4614      	mov	r4, r2
 8003a36:	461d      	mov	r5, r3
 8003a38:	4643      	mov	r3, r8
 8003a3a:	18e3      	adds	r3, r4, r3
 8003a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a40:	464b      	mov	r3, r9
 8003a42:	eb45 0303 	adc.w	r3, r5, r3
 8003a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a66:	4629      	mov	r1, r5
 8003a68:	008b      	lsls	r3, r1, #2
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a70:	4621      	mov	r1, r4
 8003a72:	008a      	lsls	r2, r1, #2
 8003a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a78:	f7fc fbb8 	bl	80001ec <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b60      	ldr	r3, [pc, #384]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	61b9      	str	r1, [r7, #24]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6139      	str	r1, [r7, #16]
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003af6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b04:	4649      	mov	r1, r9
 8003b06:	008b      	lsls	r3, r1, #2
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0e:	4641      	mov	r1, r8
 8003b10:	008a      	lsls	r2, r1, #2
 8003b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b16:	f7fc fb69 	bl	80001ec <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003b22:	fba3 2301 	umull	r2, r3, r3, r1
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2264      	movs	r2, #100	@ 0x64
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	1acb      	subs	r3, r1, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	@ 0x32
 8003b34:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b40:	441c      	add	r4, r3
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b92:	464b      	mov	r3, r9
 8003b94:	460a      	mov	r2, r1
 8003b96:	eb42 0303 	adc.w	r3, r2, r3
 8003b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	008b      	lsls	r3, r1, #2
 8003bb8:	4641      	mov	r1, r8
 8003bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	008a      	lsls	r2, r1, #2
 8003bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bc6:	f7fc fb11 	bl	80001ec <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	@ 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	3332      	adds	r3, #50	@ 0x32
 8003be2:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4422      	add	r2, r4
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c08:	b084      	sub	sp, #16
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	f107 001c 	add.w	r0, r7, #28
 8003c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d123      	bne.n	8003c6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 faa0 	bl	80041a4 <USB_CoreReset>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	e01b      	b.n	8003ca2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa94 	bl	80041a4 <USB_CoreReset>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c94:	e005      	b.n	8003ca2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ca2:	7fbb      	ldrb	r3, [r7, #30]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d10b      	bne.n	8003cc0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f043 0206 	orr.w	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ccc:	b004      	add	sp, #16
 8003cce:	4770      	bx	lr

08003cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 0201 	bic.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d115      	bne.n	8003d40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d20:	200a      	movs	r0, #10
 8003d22:	f7fd fa07 	bl	8001134 <HAL_Delay>
      ms += 10U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	330a      	adds	r3, #10
 8003d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa2b 	bl	8004188 <USB_GetMode>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d01e      	beq.n	8003d76 <USB_SetCurrentMode+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d3c:	d9f0      	bls.n	8003d20 <USB_SetCurrentMode+0x2e>
 8003d3e:	e01a      	b.n	8003d76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d115      	bne.n	8003d72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d52:	200a      	movs	r0, #10
 8003d54:	f7fd f9ee 	bl	8001134 <HAL_Delay>
      ms += 10U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	330a      	adds	r3, #10
 8003d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa12 	bl	8004188 <USB_GetMode>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <USB_SetCurrentMode+0x84>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d6e:	d9f0      	bls.n	8003d52 <USB_SetCurrentMode+0x60>
 8003d70:	e001      	b.n	8003d76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e005      	b.n	8003d82 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d7a:	d101      	bne.n	8003d80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e009      	b.n	8003dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3340      	adds	r3, #64	@ 0x40
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b0e      	cmp	r3, #14
 8003dc4:	d9f2      	bls.n	8003dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11c      	bne.n	8003e08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e06:	e00b      	b.n	8003e20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f968 	bl	8004114 <USB_SetDevSpeed>
 8003e44:	e008      	b.n	8003e58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e46:	2101      	movs	r1, #1
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f963 	bl	8004114 <USB_SetDevSpeed>
 8003e4e:	e003      	b.n	8003e58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e50:	2103      	movs	r1, #3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f95e 	bl	8004114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e58:	2110      	movs	r1, #16
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8fa 	bl	8004054 <USB_FlushTxFifo>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f924 	bl	80040b8 <USB_FlushRxFifo>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e043      	b.n	8003f2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eba:	d118      	bne.n	8003eee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e013      	b.n	8003f00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e008      	b.n	8003f00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efa:	461a      	mov	r2, r3
 8003efc:	2300      	movs	r3, #0
 8003efe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f30:	461a      	mov	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d3b5      	bcc.n	8003ea4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e043      	b.n	8003fc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f54:	d118      	bne.n	8003f88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e013      	b.n	8003f9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e008      	b.n	8003f9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fca:	461a      	mov	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d3b5      	bcc.n	8003f3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <USB_DevInit+0x2c4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004014:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f043 0208 	orr.w	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004028:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800404c:	b004      	add	sp, #16
 800404e:	4770      	bx	lr
 8004050:	803c3800 	.word	0x803c3800

08004054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800406e:	d901      	bls.n	8004074 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e01b      	b.n	80040ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	daf2      	bge.n	8004062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	019b      	lsls	r3, r3, #6
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004098:	d901      	bls.n	800409e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e006      	b.n	80040ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d0f0      	beq.n	800408c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040d0:	d901      	bls.n	80040d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e018      	b.n	8004108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	daf2      	bge.n	80040c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2210      	movs	r2, #16
 80040e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040f4:	d901      	bls.n	80040fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e006      	b.n	8004108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b10      	cmp	r3, #16
 8004104:	d0f0      	beq.n	80040e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004160:	f023 0303 	bic.w	r3, r3, #3
 8004164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0301 	and.w	r3, r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041bc:	d901      	bls.n	80041c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e01b      	b.n	80041fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	daf2      	bge.n	80041b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041e6:	d901      	bls.n	80041ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e006      	b.n	80041fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d0f0      	beq.n	80041da <USB_CoreReset+0x36>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <memset>:
 8004206:	4402      	add	r2, r0
 8004208:	4603      	mov	r3, r0
 800420a:	4293      	cmp	r3, r2
 800420c:	d100      	bne.n	8004210 <memset+0xa>
 800420e:	4770      	bx	lr
 8004210:	f803 1b01 	strb.w	r1, [r3], #1
 8004214:	e7f9      	b.n	800420a <memset+0x4>
	...

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	@ (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	@ (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	@ (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	@ (800425c <__libc_init_array+0x44>)
 800422c:	f000 f818 	bl	8004260 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	08004298 	.word	0x08004298
 8004254:	08004298 	.word	0x08004298
 8004258:	08004298 	.word	0x08004298
 800425c:	0800429c 	.word	0x0800429c

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
