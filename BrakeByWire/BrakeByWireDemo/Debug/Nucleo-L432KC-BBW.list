
Nucleo-L432KC-BBW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c0b0  0800c0b0  0000d0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c56c  0800c56c  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c56c  0800c56c  0000d56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c574  0800c574  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c574  0800c574  0000d574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c578  0800c578  0000d578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c57c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001d8  0800c754  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800c754  0000e5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016355  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5e  00000000  00000000  0002455d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000270c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100f  00000000  00000000  00028570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b56  00000000  00000000  0002957f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fa5  00000000  00000000  0004d0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb93  00000000  00000000  0006307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e48  00000000  00000000  00141c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00148a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c094 	.word	0x0800c094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c094 	.word	0x0800c094

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_write>:
float pressureAvg = 0.0f;
float pressureValue = 0.0f;


// uart print to serial terminal for debugging purpose
int _write(int file, char *ptr, int len){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <_write+0x28>)
 8001038:	f005 ffe0 	bl	8006ffc <HAL_UART_Transmit>
	return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200003b0 	.word	0x200003b0

0800104c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fe15 	bl	8003c8a <HAL_CAN_GetRxMessage>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8001066:	f000 fccd 	bl	8001a04 <Error_Handler>
  }

  // 0x100 is the can device id of the main controller
  if ((RxHeader.StdId == 0x100))
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001072:	d109      	bne.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
  {
	  // first compute the brake percentage then the pressure needed
	  pressure_desired = CAN_RxData[1];
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa43 	bl	8000504 <__aeabi_ui2d>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4905      	ldr	r1, [pc, #20]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000474 	.word	0x20000474
 8001094:	20000450 	.word	0x20000450
 8001098:	20000478 	.word	0x20000478

0800109c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  // 5Hz = 200ms send out measured breaking pressure to can bus
  if (htim == &htim16){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d11c      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  CAN_TxData[0] = (int)(pressure_measured_avg);
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fd4f 	bl	8000b58 <__aeabi_d2iz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010c0:	701a      	strb	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData, &TxMailbox);
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010c6:	490e      	ldr	r1, [pc, #56]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80010c8:	480e      	ldr	r0, [pc, #56]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010ca:	f002 fd0e 	bl	8003aea <HAL_CAN_AddTxMessage>

	  printf("brake pressure measured: %.2f PSI \r\n", pressure_measured_avg);
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010d6:	f007 fb87 	bl	80087e8 <iprintf>
	  printf("brake pressure desired: %.2f PSI \r\n", pressure_desired);
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010e2:	f007 fb81 	bl	80087e8 <iprintf>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000364 	.word	0x20000364
 80010f4:	20000480 	.word	0x20000480
 80010f8:	20000470 	.word	0x20000470
 80010fc:	2000046c 	.word	0x2000046c
 8001100:	20000438 	.word	0x20000438
 8001104:	20000258 	.word	0x20000258
 8001108:	0800c0b0 	.word	0x0800c0b0
 800110c:	20000478 	.word	0x20000478
 8001110:	0800c0d8 	.word	0x0800c0d8
 8001114:	00000000 	.word	0x00000000

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 ffa8 	bl	8002072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f903 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 fbb7 	bl	8001898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112a:	f000 fb85 	bl	8001838 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800112e:	f000 f9c7 	bl	80014c0 <MX_CAN1_Init>
  MX_TIM6_Init();
 8001132:	f000 fae3 	bl	80016fc <MX_TIM6_Init>
  MX_TIM1_Init();
 8001136:	f000 fa31 	bl	800159c <MX_TIM1_Init>
  MX_ADC1_Init();
 800113a:	f000 f94d 	bl	80013d8 <MX_ADC1_Init>
  MX_TIM7_Init();
 800113e:	f000 fb17 	bl	8001770 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001142:	f000 fb4f 	bl	80017e4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	486d      	ldr	r0, [pc, #436]	@ (8001300 <main+0x1e8>)
 800114a:	f004 fe73 	bl	8005e34 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800114e:	217f      	movs	r1, #127	@ 0x7f
 8001150:	486c      	ldr	r0, [pc, #432]	@ (8001304 <main+0x1ec>)
 8001152:	f002 fa61 	bl	8003618 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8001156:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800115a:	f000 ffff 	bl	800215c <HAL_Delay>
  // IMPORTANT: DO NOT MOVE THIS COUNTER TO GLOBAL VARIABLE
  // OR IT WILL BE RESET EVERY FEW LOOPS FOR NO REASON
  int count_max = 50;
 800115e:	2332      	movs	r3, #50	@ 0x32
 8001160:	613b      	str	r3, [r7, #16]
  int loopCount = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]

  float pressureSum = 0.0f;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  float pressureMax;
  float pressureMin;
  float pressureAbsMax = 500.0f;
 800116c:	4b66      	ldr	r3, [pc, #408]	@ (8001308 <main+0x1f0>)
 800116e:	60fb      	str	r3, [r7, #12]

  float linearSum = 0.0f;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  float linearMax = 2.61f;
 8001176:	4b65      	ldr	r3, [pc, #404]	@ (800130c <main+0x1f4>)
 8001178:	60bb      	str	r3, [r7, #8]
  float linearMin = .68f;
 800117a:	4b65      	ldr	r3, [pc, #404]	@ (8001310 <main+0x1f8>)
 800117c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800117e:	4861      	ldr	r0, [pc, #388]	@ (8001304 <main+0x1ec>)
 8001180:	f001 fb68 	bl	8002854 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	485e      	ldr	r0, [pc, #376]	@ (8001304 <main+0x1ec>)
 800118a:	f001 fbf9 	bl	8002980 <HAL_ADC_PollForConversion>
	  // reference adc reading [0-4095], reference voltage [0-3.3v]
	  linearVoltage = HAL_ADC_GetValue(&hadc1) / 4095.0 * 3.3;
 800118e:	485d      	ldr	r0, [pc, #372]	@ (8001304 <main+0x1ec>)
 8001190:	f001 fc85 	bl	8002a9e <HAL_ADC_GetValue>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9b4 	bl	8000504 <__aeabi_ui2d>
 800119c:	a354      	add	r3, pc, #336	@ (adr r3, 80012f0 <main+0x1d8>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fb53 	bl	800084c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	a352      	add	r3, pc, #328	@ (adr r3, 80012f8 <main+0x1e0>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa20 	bl	80005f8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fd12 	bl	8000be8 <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a53      	ldr	r2, [pc, #332]	@ (8001314 <main+0x1fc>)
 80011c8:	6013      	str	r3, [r2, #0]
	  pressureVoltage = HAL_ADC_GetValue(&hadc1) / 4095.0 * 3.3;
 80011ca:	484e      	ldr	r0, [pc, #312]	@ (8001304 <main+0x1ec>)
 80011cc:	f001 fc67 	bl	8002a9e <HAL_ADC_GetValue>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f996 	bl	8000504 <__aeabi_ui2d>
 80011d8:	a345      	add	r3, pc, #276	@ (adr r3, 80012f0 <main+0x1d8>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a343      	add	r3, pc, #268	@ (adr r3, 80012f8 <main+0x1e0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa02 	bl	80005f8 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fcf4 	bl	8000be8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	4a45      	ldr	r2, [pc, #276]	@ (8001318 <main+0x200>)
 8001204:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8001206:	483f      	ldr	r0, [pc, #252]	@ (8001304 <main+0x1ec>)
 8001208:	f001 fb87 	bl	800291a <HAL_ADC_Stop>

	  //rolling average type stuff
	  linearSum += linearVoltage;
 800120c:	4b41      	ldr	r3, [pc, #260]	@ (8001314 <main+0x1fc>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ed97 7a05 	vldr	s14, [r7, #20]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	edc7 7a05 	vstr	s15, [r7, #20]
	  pressureSum += pressureVoltage;
 800121e:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <main+0x200>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ed97 7a06 	vldr	s14, [r7, #24]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	edc7 7a06 	vstr	s15, [r7, #24]
	  loopCount ++;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	3301      	adds	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]

	  if (loopCount >= count_max)
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	429a      	cmp	r2, r3
 800123c:	db1f      	blt.n	800127e <main+0x166>
	  {
		  linearAvg = linearSum / count_max;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	edd7 6a05 	vldr	s13, [r7, #20]
 800124c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001250:	4b32      	ldr	r3, [pc, #200]	@ (800131c <main+0x204>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
		  pressureAvg = pressureSum / count_max;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001260:	edd7 6a06 	vldr	s13, [r7, #24]
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <main+0x208>)
 800126a:	edc3 7a00 	vstr	s15, [r3]

		  linearSum = 0.0f;
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
		  pressureSum = 0.0f;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]

		  loopCount = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
	  }

	  //read test pin for brake
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) { // Assuming HIGH is active
 800127e:	2101      	movs	r1, #1
 8001280:	4828      	ldr	r0, [pc, #160]	@ (8001324 <main+0x20c>)
 8001282:	f003 faf5 	bl	8004870 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d103      	bne.n	8001294 <main+0x17c>
	          // Button is pressed
		  testPin = 1;
 800128c:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <main+0x210>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e002      	b.n	800129a <main+0x182>
	          // Do something
	      } else {
	          // Button is not pressed
	    	  testPin = 0;
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <main+0x210>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	          // Do something else
	      }

	  //run motors if test pin is high
	  //duty cycle (max is 1000) @ 2kHz
	  int dutyCycle = 1000;
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	603b      	str	r3, [r7, #0]

		  if (testPin == 1 && linearAvg > linearMin)
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <main+0x210>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10d      	bne.n	80012c4 <main+0x1ac>
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <main+0x204>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d503      	bpl.n	80012c4 <main+0x1ac>
		  {
		  	  //Tighten brake
		  	  TightenBrake(dutyCycle);
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f000 fb57 	bl	8001970 <TightenBrake>
 80012c2:	e013      	b.n	80012ec <main+0x1d4>
		  }
		  else if (testPin == 0 && linearAvg < linearMax)
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <main+0x210>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <main+0x1d0>
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <main+0x204>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd03      	ble.n	80012e8 <main+0x1d0>
		  {
			  LoosenBrake(dutyCycle);
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f000 fb5f 	bl	80019a4 <LoosenBrake>
 80012e6:	e001      	b.n	80012ec <main+0x1d4>
		  }
		  else
		  {
			  StopBrake();
 80012e8:	f000 fb76 	bl	80019d8 <StopBrake>
  {
 80012ec:	e747      	b.n	800117e <main+0x66>
 80012ee:	bf00      	nop
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40affe00 	.word	0x40affe00
 80012f8:	66666666 	.word	0x66666666
 80012fc:	400a6666 	.word	0x400a6666
 8001300:	20000280 	.word	0x20000280
 8001304:	200001f4 	.word	0x200001f4
 8001308:	43fa0000 	.word	0x43fa0000
 800130c:	40270a3d 	.word	0x40270a3d
 8001310:	3f2e147b 	.word	0x3f2e147b
 8001314:	20000488 	.word	0x20000488
 8001318:	20000490 	.word	0x20000490
 800131c:	2000048c 	.word	0x2000048c
 8001320:	20000494 	.word	0x20000494
 8001324:	48000400 	.word	0x48000400
 8001328:	20000000 	.word	0x20000000

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b096      	sub	sp, #88	@ 0x58
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2244      	movs	r2, #68	@ 0x44
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f007 facb 	bl	80088d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800134e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001352:	f003 fadb 	bl	800490c <HAL_PWREx_ControlVoltageScaling>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800135c:	f000 fb52 	bl	8001a04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001360:	f003 fab6 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <SystemClock_Config+0xa8>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136a:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <SystemClock_Config+0xa8>)
 800136c:	f023 0318 	bic.w	r3, r3, #24
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001374:	2314      	movs	r3, #20
 8001376:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fb11 	bl	80049b8 <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800139c:	f000 fb32 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 ff11 	bl	80051e0 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013c4:	f000 fb1e 	bl	8001a04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013c8:	f004 fb24 	bl	8005a14 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013cc:	bf00      	nop
 80013ce:	3758      	adds	r7, #88	@ 0x58
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000

080013d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ee:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 80013f0:	4a30      	ldr	r2, [pc, #192]	@ (80014b4 <MX_ADC1_Init+0xdc>)
 80013f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 80013f6:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 80013fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800140a:	2201      	movs	r2, #1
 800140c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140e:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001410:	2204      	movs	r2, #4
 8001412:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800141c:	2200      	movs	r2, #0
 800141e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001422:	2202      	movs	r2, #2
 8001424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001434:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001450:	4817      	ldr	r0, [pc, #92]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 8001452:	f001 f8bd 	bl	80025d0 <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800145c:	f000 fad2 	bl	8001a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_ADC1_Init+0xe0>)
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001464:	2306      	movs	r3, #6
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146c:	237f      	movs	r3, #127	@ 0x7f
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001470:	2304      	movs	r3, #4
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800147e:	f001 fb1b 	bl	8002ab8 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001488:	f000 fabc 	bl	8001a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_ADC1_Init+0xe4>)
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001490:	230c      	movs	r3, #12
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_ADC1_Init+0xd8>)
 800149a:	f001 fb0d 	bl	8002ab8 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80014a4:	f000 faae 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//  HAL_ADC_Start(&hadc1);
  /* USER CODE END ADC1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200001f4 	.word	0x200001f4
 80014b4:	50040000 	.word	0x50040000
 80014b8:	25b00200 	.word	0x25b00200
 80014bc:	2a000400 	.word	0x2a000400

080014c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.DLC = 4;
 80014c6:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80014cc:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x102;
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014e0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80014e4:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <MX_CAN1_Init+0xd0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014ec:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <MX_CAN1_Init+0xd4>)
 80014ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <MX_CAN1_Init+0xd8>)
 80014f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <MX_CAN1_Init+0xd4>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <MX_CAN1_Init+0xd4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001506:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800150a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <MX_CAN1_Init+0xd4>)
 800150e:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8001512:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001516:	2200      	movs	r2, #0
 8001518:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <MX_CAN1_Init+0xd4>)
 800151c:	2201      	movs	r2, #1
 800151e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001522:	2200      	movs	r2, #0
 8001524:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001528:	2200      	movs	r2, #0
 800152a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_CAN1_Init+0xd4>)
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001534:	2200      	movs	r2, #0
 8001536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001538:	4816      	ldr	r0, [pc, #88]	@ (8001594 <MX_CAN1_Init+0xd4>)
 800153a:	f002 f8cd 	bl	80036d8 <HAL_CAN_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_CAN1_Init+0x88>
  {
    Error_Handler();
 8001544:	f000 fa5e 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800154c:	230a      	movs	r3, #10
 800154e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800156c:	2314      	movs	r3, #20
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001576:	f002 f9aa 	bl	80038ce <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800157a:	4806      	ldr	r0, [pc, #24]	@ (8001594 <MX_CAN1_Init+0xd4>)
 800157c:	f002 fa71 	bl	8003a62 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001580:	2102      	movs	r1, #2
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_CAN1_Init+0xd4>)
 8001584:	f002 fca3 	bl	8003ece <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000438 	.word	0x20000438
 8001594:	20000258 	.word	0x20000258
 8001598:	40006400 	.word	0x40006400

0800159c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09a      	sub	sp, #104	@ 0x68
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	222c      	movs	r2, #44	@ 0x2c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 f97d 	bl	80088d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015dc:	4b45      	ldr	r3, [pc, #276]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015de:	4a46      	ldr	r2, [pc, #280]	@ (80016f8 <MX_TIM1_Init+0x15c>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80015e2:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015e4:	220f      	movs	r2, #15
 80015e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80015ee:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b3f      	ldr	r3, [pc, #252]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fc:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <MX_TIM1_Init+0x158>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001608:	483a      	ldr	r0, [pc, #232]	@ (80016f4 <MX_TIM1_Init+0x158>)
 800160a:	f004 fb05 	bl	8005c18 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001614:	f000 f9f6 	bl	8001a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001622:	4619      	mov	r1, r3
 8001624:	4833      	ldr	r0, [pc, #204]	@ (80016f4 <MX_TIM1_Init+0x158>)
 8001626:	f004 feff 	bl	8006428 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001630:	f000 f9e8 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001634:	482f      	ldr	r0, [pc, #188]	@ (80016f4 <MX_TIM1_Init+0x158>)
 8001636:	f004 fb9b 	bl	8005d70 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001640:	f000 f9e0 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001654:	4619      	mov	r1, r3
 8001656:	4827      	ldr	r0, [pc, #156]	@ (80016f4 <MX_TIM1_Init+0x158>)
 8001658:	f005 fb86 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001662:	f000 f9cf 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001666:	2360      	movs	r3, #96	@ 0x60
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <MX_TIM1_Init+0x158>)
 800168c:	f004 fdb8 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001696:	f000 f9b5 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80016d0:	f005 fbb0 	bl	8006e34 <HAL_TIMEx_ConfigBreakDeadTime>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80016da:	f000 f993 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016de:	2100      	movs	r1, #0
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80016e2:	f004 fba7 	bl	8005e34 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e6:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <MX_TIM1_Init+0x158>)
 80016e8:	f000 fae8 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3768      	adds	r7, #104	@ 0x68
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000280 	.word	0x20000280
 80016f8:	40012c00 	.word	0x40012c00

080016fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_TIM6_Init+0x6c>)
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <MX_TIM6_Init+0x70>)
 8001710:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM6_Init+0x6c>)
 8001714:	220f      	movs	r2, #15
 8001716:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_TIM6_Init+0x6c>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_TIM6_Init+0x6c>)
 8001720:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001724:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <MX_TIM6_Init+0x6c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800172c:	480e      	ldr	r0, [pc, #56]	@ (8001768 <MX_TIM6_Init+0x6c>)
 800172e:	f004 fa73 	bl	8005c18 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001738:	f000 f964 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	@ (8001768 <MX_TIM6_Init+0x6c>)
 800174a:	f005 fb0d 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 f956 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4803      	ldr	r0, [pc, #12]	@ (8001768 <MX_TIM6_Init+0x6c>)
 800175a:	f004 fab5 	bl	8005cc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002cc 	.word	0x200002cc
 800176c:	40001000 	.word	0x40001000

08001770 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_TIM7_Init+0x6c>)
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <MX_TIM7_Init+0x70>)
 8001784:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_TIM7_Init+0x6c>)
 8001788:	223f      	movs	r2, #63	@ 0x3f
 800178a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_TIM7_Init+0x6c>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 25000;
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <MX_TIM7_Init+0x6c>)
 8001794:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001798:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <MX_TIM7_Init+0x6c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017a0:	480e      	ldr	r0, [pc, #56]	@ (80017dc <MX_TIM7_Init+0x6c>)
 80017a2:	f004 fa39 	bl	8005c18 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017ac:	f000 f92a 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <MX_TIM7_Init+0x6c>)
 80017be:	f005 fad3 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017c8:	f000 f91c 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <MX_TIM7_Init+0x6c>)
 80017ce:	f004 fa7b 	bl	8005cc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000318 	.word	0x20000318
 80017e0:	40001400 	.word	0x40001400

080017e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_TIM16_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <MX_TIM16_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160-1;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_TIM16_Init+0x4c>)
 80017f0:	229f      	movs	r2, #159	@ 0x9f
 80017f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_TIM16_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <MX_TIM16_Init+0x4c>)
 80017fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001800:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <MX_TIM16_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_TIM16_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <MX_TIM16_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <MX_TIM16_Init+0x4c>)
 8001816:	f004 f9ff 	bl	8005c18 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001820:	f000 f8f0 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <MX_TIM16_Init+0x4c>)
 8001826:	f004 fa4f 	bl	8005cc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000364 	.word	0x20000364
 8001834:	40014400 	.word	0x40014400

08001838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <MX_USART2_UART_Init+0x5c>)
 8001840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_USART2_UART_Init+0x58>)
 800187c:	f005 fb70 	bl	8006f60 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 f8bd 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200003b0 	.word	0x200003b0
 8001894:	40004400 	.word	0x40004400

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <MX_GPIO_Init+0xd0>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_Pin|Motor2_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	21c0      	movs	r1, #192	@ 0xc0
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fe:	f002 ffcf 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2108      	movs	r1, #8
 8001906:	4819      	ldr	r0, [pc, #100]	@ (800196c <MX_GPIO_Init+0xd4>)
 8001908:	f002 ffca 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin;
 800190c:	23c0      	movs	r3, #192	@ 0xc0
 800190e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001926:	f002 fe39 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800192a:	2301      	movs	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4619      	mov	r1, r3
 800193c:	480b      	ldr	r0, [pc, #44]	@ (800196c <MX_GPIO_Init+0xd4>)
 800193e:	f002 fe2d 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001942:	2308      	movs	r3, #8
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4619      	mov	r1, r3
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <MX_GPIO_Init+0xd4>)
 800195a:	f002 fe1f 	bl	800459c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	48000400 	.word	0x48000400

08001970 <TightenBrake>:

/* USER CODE BEGIN 4 */
void TightenBrake(int dutyCycle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <TightenBrake+0x30>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2140      	movs	r1, #64	@ 0x40
 8001984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001988:	f002 ff8a 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f002 ff84 	bl	80048a0 <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000280 	.word	0x20000280

080019a4 <LoosenBrake>:
void LoosenBrake(int dutyCycle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <LoosenBrake+0x30>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2140      	movs	r1, #64	@ 0x40
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f002 ff70 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2180      	movs	r1, #128	@ 0x80
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c8:	f002 ff6a 	bl	80048a0 <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000280 	.word	0x20000280

080019d8 <StopBrake>:
void StopBrake()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <StopBrake+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2140      	movs	r1, #64	@ 0x40
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ec:	f002 ff58 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f002 ff52 	bl	80048a0 <HAL_GPIO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000280 	.word	0x20000280

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <Error_Handler+0x8>

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09e      	sub	sp, #120	@ 0x78
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	2254      	movs	r2, #84	@ 0x54
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f006 ff2c 	bl	80088d6 <memset>
  if(hadc->Instance==ADC1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <HAL_ADC_MspInit+0xc0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d143      	bne.n	8001b10 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a92:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a94:	2301      	movs	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fdb6 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001ac2:	f7ff ff9f 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001af6:	2330      	movs	r3, #48	@ 0x30
 8001af8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0c:	f002 fd46 	bl	800459c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b10:	bf00      	nop
 8001b12:	3778      	adds	r7, #120	@ 0x78
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	50040000 	.word	0x50040000
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a20      	ldr	r2, [pc, #128]	@ (8001bc0 <HAL_CAN_MspInit+0xa0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d139      	bne.n	8001bb6 <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b42:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <HAL_CAN_MspInit+0xa4>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b84:	2309      	movs	r3, #9
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f002 fd03 	bl	800459c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2014      	movs	r0, #20
 8001b9c:	f002 fcc7 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ba0:	2014      	movs	r0, #20
 8001ba2:	f002 fce0 	bl	8004566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2015      	movs	r0, #21
 8001bac:	f002 fcbf 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001bb0:	2015      	movs	r0, #21
 8001bb2:	f002 fcd8 	bl	8004566 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	@ 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40006400 	.word	0x40006400
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a34      	ldr	r2, [pc, #208]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xe0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d114      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bda:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	4a33      	ldr	r2, [pc, #204]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be6:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2019      	movs	r0, #25
 8001bf8:	f002 fc99 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bfc:	2019      	movs	r0, #25
 8001bfe:	f002 fcb2 	bl	8004566 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c02:	e04c      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xe8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d114      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2036      	movs	r0, #54	@ 0x36
 8001c2c:	f002 fc7f 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c30:	2036      	movs	r0, #54	@ 0x36
 8001c32:	f002 fc98 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 8001c36:	e032      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	4a19      	ldr	r2, [pc, #100]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2037      	movs	r0, #55	@ 0x37
 8001c60:	f002 fc65 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c64:	2037      	movs	r0, #55	@ 0x37
 8001c66:	f002 fc7e 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 8001c6a:	e018      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a11      	ldr	r2, [pc, #68]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xf0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d113      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_TIM_Base_MspInit+0xe4>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2019      	movs	r0, #25
 8001c94:	f002 fc4b 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c98:	2019      	movs	r0, #25
 8001c9a:	f002 fc64 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40001000 	.word	0x40001000
 8001cb4:	40001400 	.word	0x40001400
 8001cb8:	40014400 	.word	0x40014400

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <HAL_TIM_MspPostInit+0x68>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11d      	bne.n	8001d1a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d16:	f002 fc41 	bl	800459c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b09e      	sub	sp, #120	@ 0x78
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2254      	movs	r2, #84	@ 0x54
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f006 fdc2 	bl	80088d6 <memset>
  if(huart->Instance==USART2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_UART_MspInit+0xa8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d136      	bne.n	8001dca <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fc5d 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d74:	f7ff fe46 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_UART_MspInit+0xac>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001da8:	230c      	movs	r3, #12
 8001daa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db8:	2307      	movs	r3, #7
 8001dba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc6:	f002 fbe9 	bl	800459c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3778      	adds	r7, #120	@ 0x78
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40004400 	.word	0x40004400
 8001dd8:	40021000 	.word	0x40021000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <NMI_Handler+0x4>

08001de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <MemManage_Handler+0x4>

08001df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e32:	f000 f973 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <CAN1_RX0_IRQHandler+0x10>)
 8001e42:	f002 f86a 	bl	8003f1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000258 	.word	0x20000258

08001e50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <CAN1_RX1_IRQHandler+0x10>)
 8001e56:	f002 f860 	bl	8003f1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000258 	.word	0x20000258

08001e64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e68:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e6a:	f004 f8c1 	bl	8005ff0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001e6e:	4803      	ldr	r0, [pc, #12]	@ (8001e7c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001e70:	f004 f8be 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000280 	.word	0x20000280
 8001e7c:	20000364 	.word	0x20000364

08001e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <TIM6_DAC_IRQHandler+0x10>)
 8001e86:	f004 f8b3 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200002cc 	.word	0x200002cc

08001e94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <TIM7_IRQHandler+0x10>)
 8001e9a:	f004 f8a9 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000318 	.word	0x20000318

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec2:	f006 fd5b 	bl	800897c <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
	return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <_exit+0x12>

08001eee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e00a      	b.n	8001f16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f00:	f3af 8000 	nop.w
 8001f04:	4601      	mov	r1, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf0      	blt.n	8001f00 <_read+0x12>
	}

return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f50:	605a      	str	r2, [r3, #4]
	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_isatty>:

int _isatty(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
	return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f006 fcdc 	bl	800897c <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20010000 	.word	0x20010000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	20000498 	.word	0x20000498
 8001ff8:	200005f0 	.word	0x200005f0

08001ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002024:	f7ff ffea 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <LoopForever+0x6>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	@ (8002060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <LoopForever+0xe>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	@ (800206c <LoopForever+0x16>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f006 fc9b 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002052:	f7ff f861 	bl	8001118 <main>

08002056 <LoopForever>:

LoopForever:
    b LoopForever
 8002056:	e7fe      	b.n	8002056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002058:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002064:	0800c57c 	.word	0x0800c57c
  ldr r2, =_sbss
 8002068:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800206c:	200005ec 	.word	0x200005ec

08002070 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC1_IRQHandler>

08002072 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f002 fa4b 	bl	8004518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002082:	2000      	movs	r0, #0
 8002084:	f000 f80e 	bl	80020a4 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e001      	b.n	8002098 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002094:	f7ff fcbc 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002098:	79fb      	ldrb	r3, [r7, #7]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <HAL_InitTick+0x6c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_InitTick+0x70>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_InitTick+0x6c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fa57 	bl	8004582 <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d809      	bhi.n	80020f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f002 fa21 	bl	800452e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_InitTick+0x74>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e007      	b.n	8002104 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e004      	b.n	8002104 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e001      	b.n	8002104 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c
 8002114:	20000004 	.word	0x20000004
 8002118:	20000008 	.word	0x20000008

0800211c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_IncTick+0x20>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_IncTick+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <HAL_IncTick+0x24>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000000c 	.word	0x2000000c
 8002140:	2000049c 	.word	0x2000049c

08002144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <HAL_GetTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000049c 	.word	0x2000049c

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff ffee 	bl	8002144 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffde 	bl	8002144 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3360      	adds	r3, #96	@ 0x60
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <LL_ADC_SetOffset+0x44>)
 800222e:	4013      	ands	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	4313      	orrs	r3, r2
 800223c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	03fff000 	.word	0x03fff000

08002254 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3360      	adds	r3, #96	@ 0x60
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3360      	adds	r3, #96	@ 0x60
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3330      	adds	r3, #48	@ 0x30
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	211f      	movs	r1, #31
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	f003 011f 	and.w	r1, r3, #31
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	431a      	orrs	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3314      	adds	r3, #20
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	0e5b      	lsrs	r3, r3, #25
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0d1b      	lsrs	r3, r3, #20
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2107      	movs	r1, #7
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	401a      	ands	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0d1b      	lsrs	r3, r3, #20
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0318 	and.w	r3, r3, #24
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b0:	40d9      	lsrs	r1, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	400b      	ands	r3, r1
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0007ffff 	.word	0x0007ffff

080023d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6093      	str	r3, [r2, #8]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800240c:	d101      	bne.n	8002412 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002434:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800245c:	d101      	bne.n	8002462 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsEnabled+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsEnabled+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d101      	bne.n	80024fe <LL_ADC_IsDisableOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_IsDisableOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d101      	bne.n	8002574 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002592:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d101      	bne.n	80025c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e126      	b.n	8002838 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff fa2d 	bl	8001a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fef1 	bl	80023f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fed7 	bl	80023d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff0c 	bl	8002448 <LL_ADC_IsInternalRegulatorEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fef0 	bl	8002420 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002640:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <HAL_ADC_Init+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	4a7f      	ldr	r2, [pc, #508]	@ (8002844 <HAL_ADC_Init+0x274>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002654:	e002      	b.n	800265c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff feee 	bl	8002448 <LL_ADC_IsInternalRegulatorEnabled>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff62 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8002698:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80bf 	bne.w	8002826 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80bb 	bne.w	8002826 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026b8:	f043 0202 	orr.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fefb 	bl	80024c0 <LL_ADC_IsEnabled>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d0:	485d      	ldr	r0, [pc, #372]	@ (8002848 <HAL_ADC_Init+0x278>)
 80026d2:	f7ff fef5 	bl	80024c0 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4619      	mov	r1, r3
 80026e2:	485a      	ldr	r0, [pc, #360]	@ (800284c <HAL_ADC_Init+0x27c>)
 80026e4:	f7ff fd5e 	bl	80021a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e5b      	ldrb	r3, [r3, #25]
 80026ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002706:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	045b      	lsls	r3, r3, #17
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4b42      	ldr	r3, [pc, #264]	@ (8002850 <HAL_ADC_Init+0x280>)
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	430b      	orrs	r3, r1
 8002752:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff26 	bl	80025aa <LL_ADC_INJ_IsConversionOngoing>
 800275e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d13d      	bne.n	80027e2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d13a      	bne.n	80027e2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002770:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002778:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002788:	f023 0302 	bic.w	r3, r3, #2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	430b      	orrs	r3, r1
 8002794:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800279c:	2b01      	cmp	r3, #1
 800279e:	d118      	bne.n	80027d2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027aa:	f023 0304 	bic.w	r3, r3, #4
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027c2:	430a      	orrs	r2, r1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	e007      	b.n	80027e2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10c      	bne.n	8002804 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	f023 010f 	bic.w	r1, r3, #15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
 8002802:	e007      	b.n	8002814 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020f 	bic.w	r2, r2, #15
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	f023 0303 	bic.w	r3, r3, #3
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54
 8002824:	e007      	b.n	8002836 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002836:	7ffb      	ldrb	r3, [r7, #31]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000004 	.word	0x20000004
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	50040000 	.word	0x50040000
 800284c:	50040300 	.word	0x50040300
 8002850:	fff0c007 	.word	0xfff0c007

08002854 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fe7b 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d14f      	bne.n	800290c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_Start+0x26>
 8002876:	2302      	movs	r3, #2
 8002878:	e04b      	b.n	8002912 <HAL_ADC_Start+0xbe>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fdb6 	bl	80033f4 <ADC_Enable>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d137      	bne.n	8002902 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f023 0206 	bic.w	r2, r3, #6
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	@ 0x58
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	221c      	movs	r2, #28
 80028ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe06 	bl	800250c <LL_ADC_REG_StartConversion>
 8002900:	e006      	b.n	8002910 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800290a:	e001      	b.n	8002910 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_Stop+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e023      	b.n	8002978 <HAL_ADC_Stop+0x5e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002938:	2103      	movs	r1, #3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fc9e 	bl	800327c <ADC_ConversionStop>
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d111      	bne.n	800296e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fdd8 	bl	8003500 <ADC_Disable>
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d102      	bne.n	8002998 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002992:	2308      	movs	r3, #8
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e010      	b.n	80029ba <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80029b6:	2304      	movs	r3, #4
 80029b8:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029ba:	f7ff fbc3 	bl	8002144 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029c0:	e021      	b.n	8002a06 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d01d      	beq.n	8002a06 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029ca:	f7ff fbbb 	bl	8002144 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <HAL_ADC_PollForConversion+0x60>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d112      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10b      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e047      	b.n	8002a96 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0d6      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc46 	bl	80022b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01c      	beq.n	8002a6a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e5b      	ldrb	r3, [r3, #25]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d118      	bne.n	8002a6a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d111      	bne.n	8002a6a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e008      	b.n	8002a94 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	220c      	movs	r2, #12
 8002a92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0b6      	sub	sp, #216	@ 0xd8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x22>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e3bb      	b.n	8003252 <HAL_ADC_ConfigChannel+0x79a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fd38 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 83a0 	bne.w	8003234 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d824      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	3b02      	subs	r3, #2
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d81b      	bhi.n	8002b46 <HAL_ADC_ConfigChannel+0x8e>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <HAL_ADC_ConfigChannel+0x5c>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b25 	.word	0x08002b25
 8002b18:	08002b2d 	.word	0x08002b2d
 8002b1c:	08002b35 	.word	0x08002b35
 8002b20:	08002b3d 	.word	0x08002b3d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b24:	230c      	movs	r3, #12
 8002b26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b2a:	e010      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b2c:	2312      	movs	r3, #18
 8002b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b32:	e00c      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b34:	2318      	movs	r3, #24
 8002b36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b3a:	e008      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b44:	e003      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b46:	2306      	movs	r3, #6
 8002b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b4c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b5c:	f7ff fbbe 	bl	80022dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fcf9 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8002b6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fd19 	bl	80025aa <LL_ADC_INJ_IsConversionOngoing>
 8002b78:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 81a4 	bne.w	8002ece <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 819f 	bne.w	8002ece <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f7ff fbc9 	bl	8002334 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00a      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bd4:	f7ff fb1a 	bl	800220c <LL_ADC_SetOffset>
 8002bd8:	e179      	b.n	8002ece <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb37 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x14e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fb2c 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	e01e      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x18c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb21 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e004      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1a4>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	e018      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1d6>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e004      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d106      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff faf0 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fad4 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x214>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fac9 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	e01e      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x252>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fabe 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x26a>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e018      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x29c>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fa8d 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fa71 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x2da>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fa66 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	e01e      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x318>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fa5b 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x330>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	e014      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x35a>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e004      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d106      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa2e 	bl	8002280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fa12 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x398>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fa07 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	f003 021f 	and.w	r2, r3, #31
 8002e4e:	e017      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x3c8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2103      	movs	r1, #3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f9fc 	bl	8002254 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e6a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x3e0>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	e011      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x404>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f9d9 	bl	8002280 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff faf4 	bl	80024c0 <LL_ADC_IsEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8140 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f7ff fa4d 	bl	800238c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a8f      	ldr	r2, [pc, #572]	@ (8003134 <HAL_ADC_ConfigChannel+0x67c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	f040 8131 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x46e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	bf94      	ite	ls
 8002f1e:	2301      	movls	r3, #1
 8002f20:	2300      	movhi	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e019      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x4a2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d079      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x4c2>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f78:	e015      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x4ee>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	069b      	lsls	r3, r3, #26
 8002fa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x50e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	e017      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x53e>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x564>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	e018      	b.n	800304e <HAL_ADC_ConfigChannel+0x596>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f003 021f 	and.w	r2, r3, #31
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304e:	430b      	orrs	r3, r1
 8003050:	e081      	b.n	8003156 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_ADC_ConfigChannel+0x5b6>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	3301      	adds	r3, #1
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306c:	e015      	b.n	800309a <HAL_ADC_ConfigChannel+0x5e2>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x602>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	e017      	b.n	80030ea <HAL_ADC_ConfigChannel+0x632>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	61bb      	str	r3, [r7, #24]
  return result;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	ea42 0103 	orr.w	r1, r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x65e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	3301      	adds	r3, #1
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	3b1e      	subs	r3, #30
 800310e:	051b      	lsls	r3, r3, #20
 8003110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003114:	e01e      	b.n	8003154 <HAL_ADC_ConfigChannel+0x69c>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	60fb      	str	r3, [r7, #12]
  return result;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e006      	b.n	8003140 <HAL_ADC_ConfigChannel+0x688>
 8003132:	bf00      	nop
 8003134:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	3b1e      	subs	r3, #30
 800314e:	051b      	lsls	r3, r3, #20
 8003150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315a:	4619      	mov	r1, r3
 800315c:	f7ff f8ea 	bl	8002334 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b3d      	ldr	r3, [pc, #244]	@ (800325c <HAL_ADC_ConfigChannel+0x7a4>)
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d06c      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800316c:	483c      	ldr	r0, [pc, #240]	@ (8003260 <HAL_ADC_ConfigChannel+0x7a8>)
 800316e:	f7ff f83f 	bl	80021f0 <LL_ADC_GetCommonPathInternalCh>
 8003172:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3a      	ldr	r2, [pc, #232]	@ (8003264 <HAL_ADC_ConfigChannel+0x7ac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d127      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d121      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a35      	ldr	r2, [pc, #212]	@ (8003268 <HAL_ADC_ConfigChannel+0x7b0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d157      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800319a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800319e:	4619      	mov	r1, r3
 80031a0:	482f      	ldr	r0, [pc, #188]	@ (8003260 <HAL_ADC_ConfigChannel+0x7a8>)
 80031a2:	f7ff f812 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a6:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_ADC_ConfigChannel+0x7b4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <HAL_ADC_ConfigChannel+0x7b8>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031c0:	e002      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f9      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ce:	e03a      	b.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_ADC_ConfigChannel+0x7bc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d113      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <HAL_ADC_ConfigChannel+0x7b0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d12a      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f8:	4619      	mov	r1, r3
 80031fa:	4819      	ldr	r0, [pc, #100]	@ (8003260 <HAL_ADC_ConfigChannel+0x7a8>)
 80031fc:	f7fe ffe5 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003200:	e021      	b.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_ADC_ConfigChannel+0x7c0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d11c      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800320c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <HAL_ADC_ConfigChannel+0x7b0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800322a:	4619      	mov	r1, r3
 800322c:	480c      	ldr	r0, [pc, #48]	@ (8003260 <HAL_ADC_ConfigChannel+0x7a8>)
 800322e:	f7fe ffcc 	bl	80021ca <LL_ADC_SetCommonPathInternalCh>
 8003232:	e008      	b.n	8003246 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800324e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003252:	4618      	mov	r0, r3
 8003254:	37d8      	adds	r7, #216	@ 0xd8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	80080000 	.word	0x80080000
 8003260:	50040300 	.word	0x50040300
 8003264:	c7520000 	.word	0xc7520000
 8003268:	50040000 	.word	0x50040000
 800326c:	20000004 	.word	0x20000004
 8003270:	053e2d63 	.word	0x053e2d63
 8003274:	cb840000 	.word	0xcb840000
 8003278:	80000001 	.word	0x80000001

0800327c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f962 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8003298:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f983 	bl	80025aa <LL_ADC_INJ_IsConversionOngoing>
 80032a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8098 	beq.w	80033e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02a      	beq.n	8003318 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7e5b      	ldrb	r3, [r3, #25]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d126      	bne.n	8003318 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7e1b      	ldrb	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d122      	bne.n	8003318 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032d6:	e014      	b.n	8003302 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <ADC_ConversionStop+0x174>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d90d      	bls.n	80032fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e074      	b.n	80033e6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	d1e3      	bne.n	80032d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2240      	movs	r2, #64	@ 0x40
 8003316:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d014      	beq.n	8003348 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f91a 	bl	800255c <LL_ADC_REG_IsConversionOngoing>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f8d7 	bl	80024e6 <LL_ADC_IsDisableOngoing>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f8f6 	bl	8002534 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d014      	beq.n	8003378 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f929 	bl	80025aa <LL_ADC_INJ_IsConversionOngoing>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f8bf 	bl	80024e6 <LL_ADC_IsDisableOngoing>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f905 	bl	8002582 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d005      	beq.n	800338a <ADC_ConversionStop+0x10e>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d105      	bne.n	8003390 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003384:	230c      	movs	r3, #12
 8003386:	617b      	str	r3, [r7, #20]
        break;
 8003388:	e005      	b.n	8003396 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800338a:	2308      	movs	r3, #8
 800338c:	617b      	str	r3, [r7, #20]
        break;
 800338e:	e002      	b.n	8003396 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003390:	2304      	movs	r3, #4
 8003392:	617b      	str	r3, [r7, #20]
        break;
 8003394:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003396:	f7fe fed5 	bl	8002144 <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800339c:	e01b      	b.n	80033d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800339e:	f7fe fed1 	bl	8002144 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d914      	bls.n	80033d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e007      	b.n	80033e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1dc      	bne.n	800339e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	a33fffff 	.word	0xa33fffff

080033f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f85b 	bl	80024c0 <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d169      	bne.n	80034e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <ADC_Enable+0xfc>)
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e055      	b.n	80034e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f816 	bl	8002470 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003444:	482b      	ldr	r0, [pc, #172]	@ (80034f4 <ADC_Enable+0x100>)
 8003446:	f7fe fed3 	bl	80021f0 <LL_ADC_GetCommonPathInternalCh>
 800344a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800344c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <ADC_Enable+0x104>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <ADC_Enable+0x108>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346e:	e002      	b.n	8003476 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f9      	bne.n	8003470 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800347c:	f7fe fe62 	bl	8002144 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003482:	e028      	b.n	80034d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f819 	bl	80024c0 <LL_ADC_IsEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe ffe9 	bl	8002470 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800349e:	f7fe fe51 	bl	8002144 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d914      	bls.n	80034d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d00d      	beq.n	80034d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f043 0210 	orr.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e007      	b.n	80034e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d1cf      	bne.n	8003484 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	8000003f 	.word	0x8000003f
 80034f4:	50040300 	.word	0x50040300
 80034f8:	20000004 	.word	0x20000004
 80034fc:	053e2d63 	.word	0x053e2d63

08003500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe ffea 	bl	80024e6 <LL_ADC_IsDisableOngoing>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ffd1 	bl	80024c0 <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d144      	bne.n	80035b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030d 	and.w	r3, r3, #13
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ffab 	bl	8002498 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2203      	movs	r2, #3
 8003548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354a:	f7fe fdfb 	bl	8002144 <HAL_GetTick>
 800354e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	e029      	b.n	80035a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e023      	b.n	80035b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356e:	f7fe fde9 	bl	8002144 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d914      	bls.n	80035a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1dc      	bne.n	800356e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <LL_ADC_StartCalibration>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80035d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035da:	4313      	orrs	r3, r2
 80035dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_IsCalibrationOnGoing>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003604:	d101      	bne.n	800360a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_ADCEx_Calibration_Start+0x1c>
 8003630:	2302      	movs	r3, #2
 8003632:	e04d      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff5f 	bl	8003500 <ADC_Disable>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d136      	bne.n	80036ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003654:	f023 0302 	bic.w	r3, r3, #2
 8003658:	f043 0202 	orr.w	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ffa9 	bl	80035be <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800366c:	e014      	b.n	8003698 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3301      	adds	r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800367a:	d30d      	bcc.n	8003698 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f023 0312 	bic.w	r3, r3, #18
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01b      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ffa7 	bl	80035f0 <LL_ADC_IsCalibrationOnGoing>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e2      	bne.n	800366e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80036b8:	e005      	b.n	80036c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0ed      	b.n	80038c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fa12 	bl	8001b20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800370c:	f7fe fd1a 	bl	8002144 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003712:	e012      	b.n	800373a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003714:	f7fe fd16 	bl	8002144 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d90b      	bls.n	800373a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2205      	movs	r2, #5
 8003732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0c5      	b.n	80038c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0e5      	beq.n	8003714 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0202 	bic.w	r2, r2, #2
 8003756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003758:	f7fe fcf4 	bl	8002144 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800375e:	e012      	b.n	8003786 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003760:	f7fe fcf0 	bl	8002144 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b0a      	cmp	r3, #10
 800376c:	d90b      	bls.n	8003786 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2205      	movs	r2, #5
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e09f      	b.n	80038c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e5      	bne.n	8003760 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7e1b      	ldrb	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e007      	b.n	80037be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7e5b      	ldrb	r3, [r3, #25]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d108      	bne.n	80037d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7e9b      	ldrb	r3, [r3, #26]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0220 	bic.w	r2, r2, #32
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7edb      	ldrb	r3, [r3, #27]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0210 	bic.w	r2, r2, #16
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0210 	orr.w	r2, r2, #16
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7f1b      	ldrb	r3, [r3, #28]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d108      	bne.n	8003856 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0208 	orr.w	r2, r2, #8
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0208 	bic.w	r2, r2, #8
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7f5b      	ldrb	r3, [r3, #29]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0204 	orr.w	r2, r2, #4
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	ea42 0103 	orr.w	r1, r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d003      	beq.n	80038f4 <HAL_CAN_ConfigFilter+0x26>
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	f040 80aa 	bne.w	8003a48 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2201      	movs	r2, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d123      	bne.n	8003976 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43db      	mvns	r3, r3
 8003938:	401a      	ands	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003950:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3248      	adds	r2, #72	@ 0x48
 8003956:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800396a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800396c:	6979      	ldr	r1, [r7, #20]
 800396e:	3348      	adds	r3, #72	@ 0x48
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d122      	bne.n	80039c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800399e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3248      	adds	r2, #72	@ 0x48
 80039a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	3348      	adds	r3, #72	@ 0x48
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80039de:	e007      	b.n	80039f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003a0a:	e007      	b.n	8003a1c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a3a:	f023 0201 	bic.w	r2, r3, #1
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e006      	b.n	8003a56 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12e      	bne.n	8003ad4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fb59 	bl	8002144 <HAL_GetTick>
 8003a92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a94:	e012      	b.n	8003abc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a96:	f7fe fb55 	bl	8002144 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b0a      	cmp	r3, #10
 8003aa2:	d90b      	bls.n	8003abc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e012      	b.n	8003ae2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e006      	b.n	8003ae2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b089      	sub	sp, #36	@ 0x24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <HAL_CAN_AddTxMessage+0x2c>
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f040 80ad 	bne.w	8003c70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8095 	beq.w	8003c60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	0e1b      	lsrs	r3, r3, #24
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b40:	2201      	movs	r2, #1
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	409a      	lsls	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	6809      	ldr	r1, [r1, #0]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3318      	adds	r3, #24
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	440b      	add	r3, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e00f      	b.n	8003b8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3318      	adds	r3, #24
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	440b      	add	r3, r1
 8003b8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	7d1b      	ldrb	r3, [r3, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d111      	bne.n	8003bce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6811      	ldr	r1, [r2, #0]
 8003bbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	440b      	add	r3, r1
 8003bca:	3304      	adds	r3, #4
 8003bcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	061a      	lsls	r2, r3, #24
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3306      	adds	r3, #6
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3305      	adds	r3, #5
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	4313      	orrs	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	3204      	adds	r2, #4
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	6811      	ldr	r1, [r2, #0]
 8003bf6:	ea43 0200 	orr.w	r2, r3, r0
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003c04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	061a      	lsls	r2, r3, #24
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3302      	adds	r3, #2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	4313      	orrs	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	4610      	mov	r0, r2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6811      	ldr	r1, [r2, #0]
 8003c2c:	ea43 0200 	orr.w	r2, r3, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003c3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3318      	adds	r3, #24
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4413      	add	r3, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	3318      	adds	r3, #24
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	440b      	add	r3, r1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e00e      	b.n	8003c7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e006      	b.n	8003c7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	@ 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d003      	beq.n	8003cae <HAL_CAN_GetRxMessage+0x24>
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f040 8103 	bne.w	8003eb4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10e      	bne.n	8003cd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0f7      	b.n	8003ec2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0e8      	b.n	8003ec2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	331b      	adds	r3, #27
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0204 	and.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	331b      	adds	r3, #27
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0d5b      	lsrs	r3, r3, #21
 8003d1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	331b      	adds	r3, #27
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	08db      	lsrs	r3, r3, #3
 8003d38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	331b      	adds	r3, #27
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4413      	add	r3, r2
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0202 	and.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	331b      	adds	r3, #27
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2208      	movs	r2, #8
 8003d72:	611a      	str	r2, [r3, #16]
 8003d74:	e00b      	b.n	8003d8e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	331b      	adds	r3, #27
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	3304      	adds	r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	331b      	adds	r3, #27
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	331b      	adds	r3, #27
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0a1a      	lsrs	r2, r3, #8
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0c1a      	lsrs	r2, r3, #16
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	3302      	adds	r3, #2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e1a      	lsrs	r2, r3, #24
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3303      	adds	r3, #3
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	3304      	adds	r3, #4
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0a1a      	lsrs	r2, r3, #8
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	3305      	adds	r3, #5
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	0c1a      	lsrs	r2, r3, #16
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	3306      	adds	r3, #6
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	0e1a      	lsrs	r2, r3, #24
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3307      	adds	r3, #7
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0220 	orr.w	r2, r2, #32
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	e007      	b.n	8003eb0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0220 	orr.w	r2, r2, #32
 8003eae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e006      	b.n	8003ec2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ede:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d002      	beq.n	8003eec <HAL_CAN_ActivateNotification+0x1e>
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d109      	bne.n	8003f00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6959      	ldr	r1, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e006      	b.n	8003f0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b08a      	sub	sp, #40	@ 0x28
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d07c      	beq.n	800405a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d023      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f983 	bl	8004288 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f82:	e016      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f96:	e00c      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	e002      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f989 	bl	80042c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d024      	beq.n	8004006 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f963 	bl	800429c <HAL_CAN_TxMailbox1CompleteCallback>
 8003fd6:	e016      	b.n	8004006 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	e00c      	b.n	8004006 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	e002      	b.n	8004006 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f969 	bl	80042d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d024      	beq.n	800405a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004018:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f943 	bl	80042b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800402a:	e016      	b.n	800405a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e00c      	b.n	800405a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	e002      	b.n	800405a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f949 	bl	80042ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2208      	movs	r2, #8
 8004098:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f930 	bl	8004300 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc ffc7 	bl	800104c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2210      	movs	r2, #16
 80040e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2208      	movs	r2, #8
 80040fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f912 	bl	8004328 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8f9 	bl	8004314 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2210      	movs	r2, #16
 800413c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8fc 	bl	800433c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2208      	movs	r2, #8
 800415e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8f5 	bl	8004350 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d07b      	beq.n	8004268 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d072      	beq.n	8004260 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d043      	beq.n	8004260 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d03e      	beq.n	8004260 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e8:	2b60      	cmp	r3, #96	@ 0x60
 80041ea:	d02b      	beq.n	8004244 <HAL_CAN_IRQHandler+0x32a>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d82e      	bhi.n	800424e <HAL_CAN_IRQHandler+0x334>
 80041f0:	2b50      	cmp	r3, #80	@ 0x50
 80041f2:	d022      	beq.n	800423a <HAL_CAN_IRQHandler+0x320>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d82a      	bhi.n	800424e <HAL_CAN_IRQHandler+0x334>
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d019      	beq.n	8004230 <HAL_CAN_IRQHandler+0x316>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d826      	bhi.n	800424e <HAL_CAN_IRQHandler+0x334>
 8004200:	2b30      	cmp	r3, #48	@ 0x30
 8004202:	d010      	beq.n	8004226 <HAL_CAN_IRQHandler+0x30c>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d822      	bhi.n	800424e <HAL_CAN_IRQHandler+0x334>
 8004208:	2b10      	cmp	r3, #16
 800420a:	d002      	beq.n	8004212 <HAL_CAN_IRQHandler+0x2f8>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d005      	beq.n	800421c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004210:	e01d      	b.n	800424e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	f043 0308 	orr.w	r3, r3, #8
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800421a:	e019      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	f043 0310 	orr.w	r3, r3, #16
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004224:	e014      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800422e:	e00f      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004238:	e00a      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004242:	e005      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800424c:	e000      	b.n	8004250 <HAL_CAN_IRQHandler+0x336>
            break;
 800424e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800425e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f872 	bl	8004364 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004280:	bf00      	nop
 8004282:	3728      	adds	r7, #40	@ 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <__NVIC_GetPriorityGrouping+0x18>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0307 	and.w	r3, r3, #7
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db0b      	blt.n	8004406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	f003 021f 	and.w	r2, r3, #31
 80043f4:	4907      	ldr	r1, [pc, #28]	@ (8004414 <__NVIC_EnableIRQ+0x38>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2001      	movs	r0, #1
 80043fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000e100 	.word	0xe000e100

08004418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	db0a      	blt.n	8004442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	490c      	ldr	r1, [pc, #48]	@ (8004464 <__NVIC_SetPriority+0x4c>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	440b      	add	r3, r1
 800443c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004440:	e00a      	b.n	8004458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4908      	ldr	r1, [pc, #32]	@ (8004468 <__NVIC_SetPriority+0x50>)
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3b04      	subs	r3, #4
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	440b      	add	r3, r1
 8004456:	761a      	strb	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000e100 	.word	0xe000e100
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	@ 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f1c3 0307 	rsb	r3, r3, #7
 8004486:	2b04      	cmp	r3, #4
 8004488:	bf28      	it	cs
 800448a:	2304      	movcs	r3, #4
 800448c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3304      	adds	r3, #4
 8004492:	2b06      	cmp	r3, #6
 8004494:	d902      	bls.n	800449c <NVIC_EncodePriority+0x30>
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3b03      	subs	r3, #3
 800449a:	e000      	b.n	800449e <NVIC_EncodePriority+0x32>
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	401a      	ands	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b4:	f04f 31ff 	mov.w	r1, #4294967295
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	43d9      	mvns	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c4:	4313      	orrs	r3, r2
         );
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3724      	adds	r7, #36	@ 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e4:	d301      	bcc.n	80044ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044e6:	2301      	movs	r3, #1
 80044e8:	e00f      	b.n	800450a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <SysTick_Config+0x40>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044f2:	210f      	movs	r1, #15
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	f7ff ff8e 	bl	8004418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <SysTick_Config+0x40>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004502:	4b04      	ldr	r3, [pc, #16]	@ (8004514 <SysTick_Config+0x40>)
 8004504:	2207      	movs	r2, #7
 8004506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	e000e010 	.word	0xe000e010

08004518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff29 	bl	8004378 <__NVIC_SetPriorityGrouping>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004540:	f7ff ff3e 	bl	80043c0 <__NVIC_GetPriorityGrouping>
 8004544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ff8e 	bl	800446c <NVIC_EncodePriority>
 8004550:	4602      	mov	r2, r0
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff5d 	bl	8004418 <__NVIC_SetPriority>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff31 	bl	80043dc <__NVIC_EnableIRQ>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ffa2 	bl	80044d4 <SysTick_Config>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045aa:	e148      	b.n	800483e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	4013      	ands	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 813a 	beq.w	8004838 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d005      	beq.n	80045dc <HAL_GPIO_Init+0x40>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d130      	bne.n	800463e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004612:	2201      	movs	r2, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 0201 	and.w	r2, r3, #1
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b03      	cmp	r3, #3
 8004648:	d017      	beq.n	800467a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d123      	bne.n	80046ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	08da      	lsrs	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3208      	adds	r2, #8
 800468e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	220f      	movs	r2, #15
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	08da      	lsrs	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3208      	adds	r2, #8
 80046c8:	6939      	ldr	r1, [r7, #16]
 80046ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	2203      	movs	r2, #3
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0203 	and.w	r2, r3, #3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8094 	beq.w	8004838 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004710:	4b52      	ldr	r3, [pc, #328]	@ (800485c <HAL_GPIO_Init+0x2c0>)
 8004712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004714:	4a51      	ldr	r2, [pc, #324]	@ (800485c <HAL_GPIO_Init+0x2c0>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6613      	str	r3, [r2, #96]	@ 0x60
 800471c:	4b4f      	ldr	r3, [pc, #316]	@ (800485c <HAL_GPIO_Init+0x2c0>)
 800471e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004728:	4a4d      	ldr	r2, [pc, #308]	@ (8004860 <HAL_GPIO_Init+0x2c4>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	220f      	movs	r2, #15
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004752:	d00d      	beq.n	8004770 <HAL_GPIO_Init+0x1d4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a43      	ldr	r2, [pc, #268]	@ (8004864 <HAL_GPIO_Init+0x2c8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <HAL_GPIO_Init+0x1d0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a42      	ldr	r2, [pc, #264]	@ (8004868 <HAL_GPIO_Init+0x2cc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_GPIO_Init+0x1cc>
 8004764:	2302      	movs	r3, #2
 8004766:	e004      	b.n	8004772 <HAL_GPIO_Init+0x1d6>
 8004768:	2307      	movs	r3, #7
 800476a:	e002      	b.n	8004772 <HAL_GPIO_Init+0x1d6>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_GPIO_Init+0x1d6>
 8004770:	2300      	movs	r3, #0
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	f002 0203 	and.w	r2, r2, #3
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	4093      	lsls	r3, r2
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004782:	4937      	ldr	r1, [pc, #220]	@ (8004860 <HAL_GPIO_Init+0x2c4>)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004790:	4b36      	ldr	r3, [pc, #216]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	43db      	mvns	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b4:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ba:	4b2c      	ldr	r3, [pc, #176]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047de:	4a23      	ldr	r2, [pc, #140]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047e4:	4b21      	ldr	r3, [pc, #132]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004808:	4a18      	ldr	r2, [pc, #96]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004832:	4a0e      	ldr	r2, [pc, #56]	@ (800486c <HAL_GPIO_Init+0x2d0>)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3301      	adds	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f aeaf 	bne.w	80045ac <HAL_GPIO_Init+0x10>
  }
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	40010000 	.word	0x40010000
 8004864:	48000400 	.word	0x48000400
 8004868:	48000800 	.word	0x48000800
 800486c:	40010400 	.word	0x40010400

08004870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e001      	b.n	8004892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
 80048ac:	4613      	mov	r3, r2
 80048ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b0:	787b      	ldrb	r3, [r7, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048bc:	e002      	b.n	80048c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40007000 	.word	0x40007000

080048f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <HAL_PWREx_GetVoltageRange+0x18>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000

0800490c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491a:	d130      	bne.n	800497e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800491c:	4b23      	ldr	r3, [pc, #140]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004928:	d038      	beq.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800492a:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004932:	4a1e      	ldr	r2, [pc, #120]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800493a:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2232      	movs	r2, #50	@ 0x32
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004950:	e002      	b.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b01      	subs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004958:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d102      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f2      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004978:	d110      	bne.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498a:	d007      	beq.n	800499c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800498c:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004994:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800499a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40007000 	.word	0x40007000
 80049b0:	20000004 	.word	0x20000004
 80049b4:	431bde83 	.word	0x431bde83

080049b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f000 bc02 	b.w	80051d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049cc:	4b96      	ldr	r3, [pc, #600]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d6:	4b94      	ldr	r3, [pc, #592]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80e4 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4c>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	f040 808b 	bne.w	8004b12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	f040 8087 	bne.w	8004b12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a04:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x64>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e3d9      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	4b81      	ldr	r3, [pc, #516]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCC_OscConfig+0x7e>
 8004a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a34:	e005      	b.n	8004a42 <HAL_RCC_OscConfig+0x8a>
 8004a36:	4b7c      	ldr	r3, [pc, #496]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d223      	bcs.n	8004a8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd8c 	bl	8005568 <RCC_SetFlashLatencyFromMSIRange>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e3ba      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a5a:	4b73      	ldr	r3, [pc, #460]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	496d      	ldr	r1, [pc, #436]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a78:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	4968      	ldr	r1, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	e025      	b.n	8004ada <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a94:	f043 0308 	orr.w	r3, r3, #8
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b63      	ldr	r3, [pc, #396]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4960      	ldr	r1, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	495b      	ldr	r1, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd4c 	bl	8005568 <RCC_SetFlashLatencyFromMSIRange>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e37a      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ada:	f000 fc81 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b51      	ldr	r3, [pc, #324]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	4950      	ldr	r1, [pc, #320]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a4e      	ldr	r2, [pc, #312]	@ (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004af8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004afa:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fad0 	bl	80020a4 <HAL_InitTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d052      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	e35e      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d032      	beq.n	8004b80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b1a:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b26:	f7fd fb0d 	bl	8002144 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2e:	f7fd fb09 	bl	8002144 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e347      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	4930      	ldr	r1, [pc, #192]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	492b      	ldr	r1, [pc, #172]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b80:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fada 	bl	8002144 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b94:	f7fd fad6 	bl	8002144 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e314      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba6:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1dc>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d073      	beq.n	8004caa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x21c>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d10e      	bne.n	8004bec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d063      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d15f      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2f1      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCC_OscConfig+0x24c>
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e025      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0c:	d114      	bne.n	8004c38 <HAL_RCC_OscConfig+0x280>
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e013      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800c0fc 	.word	0x0800c0fc
 8004c30:	20000004 	.word	0x20000004
 8004c34:	20000008 	.word	0x20000008
 8004c38:	4ba0      	ldr	r3, [pc, #640]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b9d      	ldr	r3, [pc, #628]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a9c      	ldr	r2, [pc, #624]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fa74 	bl	8002144 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fd fa70 	bl	8002144 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e2ae      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	4b92      	ldr	r3, [pc, #584]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x2a8>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd fa60 	bl	8002144 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fd fa5c 	bl	8002144 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e29a      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2d0>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d060      	beq.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x310>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d116      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x328>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e277      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4973      	ldr	r1, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf4:	e040      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6e      	ldr	r2, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fd fa1b 	bl	8002144 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d12:	f7fd fa17 	bl	8002144 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e255      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d24:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b62      	ldr	r3, [pc, #392]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	495f      	ldr	r1, [pc, #380]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	e018      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fd f9f7 	bl	8002144 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fd f9f3 	bl	8002144 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e231      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6c:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d92:	4a4a      	ldr	r2, [pc, #296]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fd f9d2 	bl	8002144 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fd f9ce 	bl	8002144 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e20c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ef      	beq.n	8004da4 <HAL_RCC_OscConfig+0x3ec>
 8004dc4:	e01b      	b.n	8004dfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd f9b5 	bl	8002144 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fd f9b1 	bl	8002144 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1ef      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df0:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a6 	beq.w	8004f58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e10:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e34:	2301      	movs	r3, #1
 8004e36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d118      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e50:	f7fd f978 	bl	8002144 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fd f974 	bl	8002144 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1b2      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4d8>
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8e:	e029      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x50c>
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a03      	ldr	r2, [pc, #12]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	4b9a      	ldr	r3, [pc, #616]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	4a99      	ldr	r2, [pc, #612]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed4:	4b96      	ldr	r3, [pc, #600]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a95      	ldr	r2, [pc, #596]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fd f92a 	bl	8002144 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fd f926 	bl	8002144 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e162      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b89      	ldr	r3, [pc, #548]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ed      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x53c>
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fd f913 	bl	8002144 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fd f90f 	bl	8002144 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e14b      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f38:	4b7d      	ldr	r3, [pc, #500]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ed      	bne.n	8004f22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b78      	ldr	r3, [pc, #480]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a77      	ldr	r2, [pc, #476]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03c      	beq.n	8004fde <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6c:	4b70      	ldr	r3, [pc, #448]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f72:	4a6f      	ldr	r2, [pc, #444]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd f8e2 	bl	8002144 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f84:	f7fd f8de 	bl	8002144 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e11c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f96:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCC_OscConfig+0x5cc>
 8004fa4:	e01b      	b.n	8004fde <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa6:	4b62      	ldr	r3, [pc, #392]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fac:	4a60      	ldr	r2, [pc, #384]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fd f8c5 	bl	8002144 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fbe:	f7fd f8c1 	bl	8002144 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0ff      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fd0:	4b57      	ldr	r3, [pc, #348]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ef      	bne.n	8004fbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80f3 	beq.w	80051ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	f040 80c9 	bne.w	8005184 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	429a      	cmp	r2, r3
 8005004:	d12c      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	3b01      	subs	r3, #1
 8005012:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d123      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005022:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d11b      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d113      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	3b01      	subs	r3, #1
 8005046:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d109      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d06b      	beq.n	8005138 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d062      	beq.n	800512c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005066:	4b32      	ldr	r3, [pc, #200]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0ac      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005076:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 800507c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005080:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005082:	f7fd f85f 	bl	8002144 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fd f85b 	bl	8002144 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e099      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800509c:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a8:	4b21      	ldr	r3, [pc, #132]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <HAL_RCC_OscConfig+0x77c>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050b8:	3a01      	subs	r2, #1
 80050ba:	0112      	lsls	r2, r2, #4
 80050bc:	4311      	orrs	r1, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050c2:	0212      	lsls	r2, r2, #8
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0552      	lsls	r2, r2, #21
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050d6:	0852      	lsrs	r2, r2, #1
 80050d8:	3a01      	subs	r2, #1
 80050da:	0652      	lsls	r2, r2, #25
 80050dc:	4311      	orrs	r1, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050e2:	06d2      	lsls	r2, r2, #27
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4912      	ldr	r1, [pc, #72]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050ec:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 80050fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005102:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005104:	f7fd f81e 	bl	8002144 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fd f81a 	bl	8002144 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e058      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511e:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <HAL_RCC_OscConfig+0x778>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800512a:	e050      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04f      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
 8005130:	40021000 	.word	0x40021000
 8005134:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d144      	bne.n	80051ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005144:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a23      	ldr	r2, [pc, #140]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800514e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005150:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a20      	ldr	r2, [pc, #128]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800515c:	f7fc fff2 	bl	8002144 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fc ffee 	bl	8002144 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e02c      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	4b18      	ldr	r3, [pc, #96]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x7ac>
 8005182:	e024      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d01f      	beq.n	80051ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518a:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 8005190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fc ffd5 	bl	8002144 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519e:	f7fc ffd1 	bl	8002144 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b0:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	4905      	ldr	r1, [pc, #20]	@ (80051d8 <HAL_RCC_OscConfig+0x820>)
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCC_OscConfig+0x824>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60cb      	str	r3, [r1, #12]
 80051c8:	e001      	b.n	80051ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	feeefffc 	.word	0xfeeefffc

080051e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0e7      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f4:	4b75      	ldr	r3, [pc, #468]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d910      	bls.n	8005224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b72      	ldr	r3, [pc, #456]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 0207 	bic.w	r2, r3, #7
 800520a:	4970      	ldr	r1, [pc, #448]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b6e      	ldr	r3, [pc, #440]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0cf      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800523c:	429a      	cmp	r2, r3
 800523e:	d908      	bls.n	8005252 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4960      	ldr	r1, [pc, #384]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d04c      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005266:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d121      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0a6      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527e:	4b54      	ldr	r3, [pc, #336]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e09a      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005296:	4b4e      	ldr	r3, [pc, #312]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e08e      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052a6:	4b4a      	ldr	r3, [pc, #296]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e086      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b46      	ldr	r3, [pc, #280]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4943      	ldr	r1, [pc, #268]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc ff3c 	bl	8002144 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fc ff38 	bl	8002144 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e06e      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	4b3a      	ldr	r3, [pc, #232]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	4b31      	ldr	r3, [pc, #196]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005310:	429a      	cmp	r2, r3
 8005312:	d208      	bcs.n	8005326 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	492b      	ldr	r1, [pc, #172]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005326:	4b29      	ldr	r3, [pc, #164]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d210      	bcs.n	8005356 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005334:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f023 0207 	bic.w	r2, r3, #7
 800533c:	4923      	ldr	r1, [pc, #140]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005344:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <HAL_RCC_ClockConfig+0x1ec>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d001      	beq.n	8005356 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e036      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005362:	4b1b      	ldr	r3, [pc, #108]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4918      	ldr	r1, [pc, #96]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4910      	ldr	r1, [pc, #64]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005394:	f000 f824 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	490b      	ldr	r1, [pc, #44]	@ (80053d4 <HAL_RCC_ClockConfig+0x1f4>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <HAL_RCC_ClockConfig+0x1f8>)
 80053b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_RCC_ClockConfig+0x1fc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fc fe73 	bl	80020a4 <HAL_InitTick>
 80053be:	4603      	mov	r3, r0
 80053c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80053c2:	7afb      	ldrb	r3, [r7, #11]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40021000 	.word	0x40021000
 80053d4:	0800c0fc 	.word	0x0800c0fc
 80053d8:	20000004 	.word	0x20000004
 80053dc:	20000008 	.word	0x20000008

080053e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	@ 0x24
 80053e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ee:	4b3e      	ldr	r3, [pc, #248]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f8:	4b3b      	ldr	r3, [pc, #236]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x34>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d121      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11e      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005414:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005420:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e005      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800543c:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10d      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005450:	e00a      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d102      	bne.n	800545e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005458:	4b25      	ldr	r3, [pc, #148]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e004      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d101      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005464:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005466:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d134      	bne.n	80054d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800546e:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0xa6>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d003      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0xac>
 8005484:	e005      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005486:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005488:	617b      	str	r3, [r7, #20]
      break;
 800548a:	e005      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800548e:	617b      	str	r3, [r7, #20]
      break;
 8005490:	e002      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	617b      	str	r3, [r7, #20]
      break;
 8005496:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005498:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	3301      	adds	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	fb03 f202 	mul.w	r2, r3, r2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	0e5b      	lsrs	r3, r3, #25
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	3301      	adds	r3, #1
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054d8:	69bb      	ldr	r3, [r7, #24]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	@ 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	0800c114 	.word	0x0800c114
 80054f0:	00f42400 	.word	0x00f42400
 80054f4:	007a1200 	.word	0x007a1200

080054f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054fc:	4b03      	ldr	r3, [pc, #12]	@ (800550c <HAL_RCC_GetHCLKFreq+0x14>)
 80054fe:	681b      	ldr	r3, [r3, #0]
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000004 	.word	0x20000004

08005510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005514:	f7ff fff0 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4904      	ldr	r1, [pc, #16]	@ (8005538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	0800c10c 	.word	0x0800c10c

0800553c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005540:	f7ff ffda 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0adb      	lsrs	r3, r3, #11
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	0800c10c 	.word	0x0800c10c

08005568 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005574:	4b2a      	ldr	r3, [pc, #168]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005580:	f7ff f9b6 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 8005584:	6178      	str	r0, [r7, #20]
 8005586:	e014      	b.n	80055b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005588:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	4a24      	ldr	r2, [pc, #144]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005592:	6593      	str	r3, [r2, #88]	@ 0x58
 8005594:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055a0:	f7ff f9a6 	bl	80048f0 <HAL_PWREx_GetVoltageRange>
 80055a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b8:	d10b      	bne.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d919      	bls.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80055c4:	d902      	bls.n	80055cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055c6:	2302      	movs	r3, #2
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e013      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055cc:	2301      	movs	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e010      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b80      	cmp	r3, #128	@ 0x80
 80055d6:	d902      	bls.n	80055de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055d8:	2303      	movs	r3, #3
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	e00a      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b80      	cmp	r3, #128	@ 0x80
 80055e2:	d102      	bne.n	80055ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055e4:	2302      	movs	r3, #2
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e004      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d101      	bne.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f0:	2301      	movs	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 0207 	bic.w	r2, r3, #7
 80055fc:	4909      	ldr	r1, [pc, #36]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	40022000 	.word	0x40022000

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005630:	2300      	movs	r3, #0
 8005632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005634:	2300      	movs	r3, #0
 8005636:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005640:	2b00      	cmp	r3, #0
 8005642:	d031      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800564c:	d01a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800564e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005652:	d814      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005658:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800565c:	d10f      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800565e:	4b5d      	ldr	r3, [pc, #372]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	4a5c      	ldr	r2, [pc, #368]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005668:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800566a:	e00c      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9de 	bl	8005a34 <RCCEx_PLLSAI1_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	74fb      	strb	r3, [r7, #19]
      break;
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800568c:	4b51      	ldr	r3, [pc, #324]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569a:	494e      	ldr	r1, [pc, #312]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056a2:	e001      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809e 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056ba:	4b46      	ldr	r3, [pc, #280]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d0:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	4a3f      	ldr	r2, [pc, #252]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056da:	6593      	str	r3, [r2, #88]	@ 0x58
 80056dc:	4b3d      	ldr	r3, [pc, #244]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e8:	2301      	movs	r3, #1
 80056ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ec:	4b3a      	ldr	r3, [pc, #232]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a39      	ldr	r2, [pc, #228]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056f8:	f7fc fd24 	bl	8002144 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fc fd20 	bl	8002144 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	74fb      	strb	r3, [r7, #19]
        break;
 8005712:	e005      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005714:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ef      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d15a      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005726:	4b2b      	ldr	r3, [pc, #172]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005730:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d019      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005742:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800574e:	4b21      	ldr	r3, [pc, #132]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800575e:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800576e:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d016      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fce0 	bl	8002144 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005786:	e00b      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fc fcdc 	bl	8002144 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	74fb      	strb	r3, [r7, #19]
            break;
 800579e:	e006      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ec      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b4:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c2:	4904      	ldr	r1, [pc, #16]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057ca:	e009      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	74bb      	strb	r3, [r7, #18]
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057e0:	7c7b      	ldrb	r3, [r7, #17]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ea:	4a89      	ldr	r2, [pc, #548]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057fe:	4b84      	ldr	r3, [pc, #528]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f023 0203 	bic.w	r2, r3, #3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4980      	ldr	r1, [pc, #512]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005820:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f023 020c 	bic.w	r2, r3, #12
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	4978      	ldr	r1, [pc, #480]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005842:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	496f      	ldr	r1, [pc, #444]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005864:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	4967      	ldr	r1, [pc, #412]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005886:	4b62      	ldr	r3, [pc, #392]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	495e      	ldr	r1, [pc, #376]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a8:	4b59      	ldr	r3, [pc, #356]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	4956      	ldr	r1, [pc, #344]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ca:	4b51      	ldr	r3, [pc, #324]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	494d      	ldr	r1, [pc, #308]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d028      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ec:	4b48      	ldr	r3, [pc, #288]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	4945      	ldr	r1, [pc, #276]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590a:	d106      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b40      	ldr	r3, [pc, #256]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a3f      	ldr	r2, [pc, #252]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
 8005918:	e011      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f882 	bl	8005a34 <RCCEx_PLLSAI1_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005958:	492d      	ldr	r1, [pc, #180]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005968:	d106      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596a:	4b29      	ldr	r3, [pc, #164]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4a28      	ldr	r2, [pc, #160]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005970:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005974:	60d3      	str	r3, [r2, #12]
 8005976:	e011      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f853 	bl	8005a34 <RCCEx_PLLSAI1_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01c      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059a8:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b6:	4916      	ldr	r1, [pc, #88]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059c6:	d10c      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	2102      	movs	r1, #2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f830 	bl	8005a34 <RCCEx_PLLSAI1_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fc:	4904      	ldr	r1, [pc, #16]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000

08005a14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a04      	ldr	r2, [pc, #16]	@ (8005a30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000

08005a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a42:	4b74      	ldr	r3, [pc, #464]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d018      	beq.n	8005a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a4e:	4b71      	ldr	r3, [pc, #452]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0203 	and.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d10d      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
       ||
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a66:	4b6b      	ldr	r3, [pc, #428]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
       ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d047      	beq.n	8005b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	e044      	b.n	8005b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d018      	beq.n	8005aba <RCCEx_PLLSAI1_Config+0x86>
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d825      	bhi.n	8005ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d002      	beq.n	8005a96 <RCCEx_PLLSAI1_Config+0x62>
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d009      	beq.n	8005aa8 <RCCEx_PLLSAI1_Config+0x74>
 8005a94:	e020      	b.n	8005ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a96:	4b5f      	ldr	r3, [pc, #380]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d11d      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa6:	e01a      	b.n	8005ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d116      	bne.n	8005ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab8:	e013      	b.n	8005ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aba:	4b56      	ldr	r3, [pc, #344]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ac6:	4b53      	ldr	r3, [pc, #332]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ad6:	e006      	b.n	8005ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      break;
 8005adc:	e004      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e002      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10d      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aee:	4b49      	ldr	r3, [pc, #292]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6819      	ldr	r1, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	430b      	orrs	r3, r1
 8005b04:	4943      	ldr	r1, [pc, #268]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d17c      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b10:	4b40      	ldr	r3, [pc, #256]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a3f      	ldr	r2, [pc, #252]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1c:	f7fc fb12 	bl	8002144 <HAL_GetTick>
 8005b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b22:	e009      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b24:	f7fc fb0e 	bl	8002144 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d902      	bls.n	8005b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	73fb      	strb	r3, [r7, #15]
        break;
 8005b36:	e005      	b.n	8005b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b38:	4b36      	ldr	r3, [pc, #216]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ef      	bne.n	8005b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d15f      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d110      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b50:	4b30      	ldr	r3, [pc, #192]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6892      	ldr	r2, [r2, #8]
 8005b60:	0211      	lsls	r1, r2, #8
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	06d2      	lsls	r2, r2, #27
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	492a      	ldr	r1, [pc, #168]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	610b      	str	r3, [r1, #16]
 8005b70:	e027      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d112      	bne.n	8005b9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b78:	4b26      	ldr	r3, [pc, #152]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6892      	ldr	r2, [r2, #8]
 8005b88:	0211      	lsls	r1, r2, #8
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6912      	ldr	r2, [r2, #16]
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0552      	lsls	r2, r2, #21
 8005b94:	430a      	orrs	r2, r1
 8005b96:	491f      	ldr	r1, [pc, #124]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	610b      	str	r3, [r1, #16]
 8005b9c:	e011      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ba6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6892      	ldr	r2, [r2, #8]
 8005bae:	0211      	lsls	r1, r2, #8
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6952      	ldr	r2, [r2, #20]
 8005bb4:	0852      	lsrs	r2, r2, #1
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	0652      	lsls	r2, r2, #25
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	4915      	ldr	r1, [pc, #84]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a13      	ldr	r2, [pc, #76]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fc fab9 	bl	8002144 <HAL_GetTick>
 8005bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bd4:	e009      	b.n	8005bea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bd6:	f7fc fab5 	bl	8002144 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d902      	bls.n	8005bea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	73fb      	strb	r3, [r7, #15]
          break;
 8005be8:	e005      	b.n	8005bf6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ef      	beq.n	8005bd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	4903      	ldr	r1, [pc, #12]	@ (8005c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000

08005c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e049      	b.n	8005cbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb ffc2 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fcd8 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d001      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e03b      	b.n	8005d58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a19      	ldr	r2, [pc, #100]	@ (8005d64 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIM_Base_Start_IT+0x4e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIM_Base_Start_IT+0x4e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d115      	bne.n	8005d42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	4b13      	ldr	r3, [pc, #76]	@ (8005d6c <HAL_TIM_Base_Start_IT+0xa4>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d015      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x8c>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2e:	d011      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	e008      	b.n	8005d54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e000      	b.n	8005d56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	00010007 	.word	0x00010007

08005d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e049      	b.n	8005e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f841 	bl	8005e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f000 fc2c 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_TIM_PWM_Start+0x24>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e03c      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x9e>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d109      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x3e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	bf14      	ite	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	2300      	moveq	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	e02f      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x9e>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x58>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e022      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x9e>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x72>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e015      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x9e>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x8c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x9e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e07e      	b.n	8005fd8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xb6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ee8:	e023      	b.n	8005f32 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xc6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef8:	e01b      	b.n	8005f32 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xd6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f08:	e013      	b.n	8005f32 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Start+0xe6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f18:	e00b      	b.n	8005f32 <HAL_TIM_PWM_Start+0xfe>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_PWM_Start+0xf6>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f28:	e003      	b.n	8005f32 <HAL_TIM_PWM_Start+0xfe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 feee 	bl	8006d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a26      	ldr	r2, [pc, #152]	@ (8005fe0 <HAL_TIM_PWM_Start+0x1ac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x12a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a25      	ldr	r2, [pc, #148]	@ (8005fe4 <HAL_TIM_PWM_Start+0x1b0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x12a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	@ (8005fe8 <HAL_TIM_PWM_Start+0x1b4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_Start+0x12e>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_TIM_PWM_Start+0x130>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <HAL_TIM_PWM_Start+0x1ac>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x162>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d004      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x162>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a14      	ldr	r2, [pc, #80]	@ (8005fe4 <HAL_TIM_PWM_Start+0x1b0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d115      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b13      	ldr	r3, [pc, #76]	@ (8005fec <HAL_TIM_PWM_Start+0x1b8>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d015      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1a0>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fae:	d011      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	e008      	b.n	8005fd4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	00010007 	.word	0x00010007

08005ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0202 	mvn.w	r2, #2
 8006024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fac7 	bl	80065ce <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fab9 	bl	80065ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 faca 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0204 	mvn.w	r2, #4
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 faa1 	bl	80065ce <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa93 	bl	80065ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 faa4 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0208 	mvn.w	r2, #8
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa7b 	bl	80065ce <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa6d 	bl	80065ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa7e 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0210 	mvn.w	r2, #16
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2208      	movs	r2, #8
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa55 	bl	80065ce <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa47 	bl	80065ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa58 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00c      	beq.n	800615c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0201 	mvn.w	r2, #1
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fa ffa0 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fed7 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00c      	beq.n	80061ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fecf 	bl	8006f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa12 	bl	80065f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f06f 0220 	mvn.w	r2, #32
 80061ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fe97 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800621a:	2302      	movs	r3, #2
 800621c:	e0ff      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b14      	cmp	r3, #20
 800622a:	f200 80f0 	bhi.w	800640e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800622e:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006289 	.word	0x08006289
 8006238:	0800640f 	.word	0x0800640f
 800623c:	0800640f 	.word	0x0800640f
 8006240:	0800640f 	.word	0x0800640f
 8006244:	080062c9 	.word	0x080062c9
 8006248:	0800640f 	.word	0x0800640f
 800624c:	0800640f 	.word	0x0800640f
 8006250:	0800640f 	.word	0x0800640f
 8006254:	0800630b 	.word	0x0800630b
 8006258:	0800640f 	.word	0x0800640f
 800625c:	0800640f 	.word	0x0800640f
 8006260:	0800640f 	.word	0x0800640f
 8006264:	0800634b 	.word	0x0800634b
 8006268:	0800640f 	.word	0x0800640f
 800626c:	0800640f 	.word	0x0800640f
 8006270:	0800640f 	.word	0x0800640f
 8006274:	0800638d 	.word	0x0800638d
 8006278:	0800640f 	.word	0x0800640f
 800627c:	0800640f 	.word	0x0800640f
 8006280:	0800640f 	.word	0x0800640f
 8006284:	080063cd 	.word	0x080063cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fa2c 	bl	80066ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6999      	ldr	r1, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	619a      	str	r2, [r3, #24]
      break;
 80062c6:	e0a5      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fa88 	bl	80067e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6999      	ldr	r1, [r3, #24]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	619a      	str	r2, [r3, #24]
      break;
 8006308:	e084      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fae1 	bl	80068d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0208 	orr.w	r2, r2, #8
 8006324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0204 	bic.w	r2, r2, #4
 8006334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	61da      	str	r2, [r3, #28]
      break;
 8006348:	e064      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb39 	bl	80069c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69d9      	ldr	r1, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	61da      	str	r2, [r3, #28]
      break;
 800638a:	e043      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fb76 	bl	8006a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063ca:	e023      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fbae 	bl	8006b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800640c:	e002      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
      break;
 8006412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x1c>
 8006440:	2302      	movs	r3, #2
 8006442:	e0b6      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x18a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006480:	d03e      	beq.n	8006500 <HAL_TIM_ConfigClockSource+0xd8>
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006486:	f200 8087 	bhi.w	8006598 <HAL_TIM_ConfigClockSource+0x170>
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648e:	f000 8086 	beq.w	800659e <HAL_TIM_ConfigClockSource+0x176>
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006496:	d87f      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 8006498:	2b70      	cmp	r3, #112	@ 0x70
 800649a:	d01a      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0xaa>
 800649c:	2b70      	cmp	r3, #112	@ 0x70
 800649e:	d87b      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064a0:	2b60      	cmp	r3, #96	@ 0x60
 80064a2:	d050      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x11e>
 80064a4:	2b60      	cmp	r3, #96	@ 0x60
 80064a6:	d877      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064a8:	2b50      	cmp	r3, #80	@ 0x50
 80064aa:	d03c      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0xfe>
 80064ac:	2b50      	cmp	r3, #80	@ 0x50
 80064ae:	d873      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d058      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x13e>
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d86f      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064b8:	2b30      	cmp	r3, #48	@ 0x30
 80064ba:	d064      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064bc:	2b30      	cmp	r3, #48	@ 0x30
 80064be:	d86b      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d060      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d867      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05c      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d05a      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064d0:	e062      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064e2:	f000 fbfb 	bl	8006cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	609a      	str	r2, [r3, #8]
      break;
 80064fe:	e04f      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006510:	f000 fbe4 	bl	8006cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006522:	609a      	str	r2, [r3, #8]
      break;
 8006524:	e03c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006532:	461a      	mov	r2, r3
 8006534:	f000 fb58 	bl	8006be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2150      	movs	r1, #80	@ 0x50
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fbb1 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006544:	e02c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006552:	461a      	mov	r2, r3
 8006554:	f000 fb77 	bl	8006c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2160      	movs	r1, #96	@ 0x60
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fba1 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006564:	e01c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006572:	461a      	mov	r2, r3
 8006574:	f000 fb38 	bl	8006be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2140      	movs	r1, #64	@ 0x40
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fb91 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006584:	e00c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f000 fb88 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006596:	e003      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e000      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800659e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a30      	ldr	r2, [pc, #192]	@ (80066e0 <TIM_Base_SetConfig+0xd4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x20>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a27      	ldr	r2, [pc, #156]	@ (80066e0 <TIM_Base_SetConfig+0xd4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_Base_SetConfig+0x52>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664c:	d007      	beq.n	800665e <TIM_Base_SetConfig+0x52>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a24      	ldr	r2, [pc, #144]	@ (80066e4 <TIM_Base_SetConfig+0xd8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_Base_SetConfig+0x52>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a23      	ldr	r2, [pc, #140]	@ (80066e8 <TIM_Base_SetConfig+0xdc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a12      	ldr	r2, [pc, #72]	@ (80066e0 <TIM_Base_SetConfig+0xd4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0xa0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a11      	ldr	r2, [pc, #68]	@ (80066e4 <TIM_Base_SetConfig+0xd8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0xa0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a10      	ldr	r2, [pc, #64]	@ (80066e8 <TIM_Base_SetConfig+0xdc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d105      	bne.n	80066d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]
  }
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400

080066ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f023 0201 	bic.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f023 0302 	bic.w	r3, r3, #2
 8006738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a24      	ldr	r2, [pc, #144]	@ (80067d8 <TIM_OC1_SetConfig+0xec>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_OC1_SetConfig+0x70>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a23      	ldr	r2, [pc, #140]	@ (80067dc <TIM_OC1_SetConfig+0xf0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC1_SetConfig+0x70>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a22      	ldr	r2, [pc, #136]	@ (80067e0 <TIM_OC1_SetConfig+0xf4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a17      	ldr	r2, [pc, #92]	@ (80067d8 <TIM_OC1_SetConfig+0xec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_OC1_SetConfig+0xa2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a16      	ldr	r2, [pc, #88]	@ (80067dc <TIM_OC1_SetConfig+0xf0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_OC1_SetConfig+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <TIM_OC1_SetConfig+0xf4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d111      	bne.n	80067b2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800679c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	621a      	str	r2, [r3, #32]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40012c00 	.word	0x40012c00
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400

080067e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 0210 	bic.w	r2, r3, #16
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a22      	ldr	r2, [pc, #136]	@ (80068cc <TIM_OC2_SetConfig+0xe8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10d      	bne.n	8006864 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a19      	ldr	r2, [pc, #100]	@ (80068cc <TIM_OC2_SetConfig+0xe8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d007      	beq.n	800687c <TIM_OC2_SetConfig+0x98>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <TIM_OC2_SetConfig+0xec>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x98>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a17      	ldr	r2, [pc, #92]	@ (80068d4 <TIM_OC2_SetConfig+0xf0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d113      	bne.n	80068a4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400

080068d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a21      	ldr	r2, [pc, #132]	@ (80069bc <TIM_OC3_SetConfig+0xe4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d10d      	bne.n	8006956 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <TIM_OC3_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_OC3_SetConfig+0x96>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <TIM_OC3_SetConfig+0xe8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC3_SetConfig+0x96>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a16      	ldr	r2, [pc, #88]	@ (80069c4 <TIM_OC3_SetConfig+0xec>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d113      	bne.n	8006996 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400

080069c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	031b      	lsls	r3, r3, #12
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a14      	ldr	r2, [pc, #80]	@ (8006a78 <TIM_OC4_SetConfig+0xb0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_OC4_SetConfig+0x74>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <TIM_OC4_SetConfig+0xb4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC4_SetConfig+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	@ (8006a80 <TIM_OC4_SetConfig+0xb8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d109      	bne.n	8006a50 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400

08006a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a13      	ldr	r2, [pc, #76]	@ (8006b28 <TIM_OC5_SetConfig+0xa4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d007      	beq.n	8006aee <TIM_OC5_SetConfig+0x6a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a12      	ldr	r2, [pc, #72]	@ (8006b2c <TIM_OC5_SetConfig+0xa8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d003      	beq.n	8006aee <TIM_OC5_SetConfig+0x6a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <TIM_OC5_SetConfig+0xac>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d109      	bne.n	8006b02 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400

08006b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	051b      	lsls	r3, r3, #20
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a14      	ldr	r2, [pc, #80]	@ (8006bdc <TIM_OC6_SetConfig+0xa8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d007      	beq.n	8006ba0 <TIM_OC6_SetConfig+0x6c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a13      	ldr	r2, [pc, #76]	@ (8006be0 <TIM_OC6_SetConfig+0xac>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC6_SetConfig+0x6c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a12      	ldr	r2, [pc, #72]	@ (8006be4 <TIM_OC6_SetConfig+0xb0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d109      	bne.n	8006bb4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400

08006be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0201 	bic.w	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f023 030a 	bic.w	r3, r3, #10
 8006c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 0210 	bic.w	r2, r3, #16
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f043 0307 	orr.w	r3, r3, #7
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e04f      	b.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a21      	ldr	r2, [pc, #132]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a14      	ldr	r2, [pc, #80]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d009      	beq.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de8:	d004      	beq.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a10      	ldr	r2, [pc, #64]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d10c      	bne.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e060      	b.n	8006f12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a14      	ldr	r2, [pc, #80]	@ (8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d115      	bne.n	8006f00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	051b      	lsls	r3, r3, #20
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40012c00 	.word	0x40012c00

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e040      	b.n	8006ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fa fed2 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	@ 0x24
 8006f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fade 	bl	8007568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8af 	bl	8007110 <UART_SetConfig>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e01b      	b.n	8006ff4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb5d 	bl	80076ac <UART_CheckIdleState>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007010:	2b20      	cmp	r3, #32
 8007012:	d177      	bne.n	8007104 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_UART_Transmit+0x24>
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e070      	b.n	8007106 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2221      	movs	r2, #33	@ 0x21
 8007030:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007032:	f7fb f887 	bl	8002144 <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007050:	d108      	bne.n	8007064 <HAL_UART_Transmit+0x68>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e003      	b.n	800706c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800706c:	e02f      	b.n	80070ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fbbf 	bl	80077fc <UART_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e03b      	b.n	8007106 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	881a      	ldrh	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a0:	b292      	uxth	r2, r2
 80070a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	3302      	adds	r3, #2
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e007      	b.n	80070bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1c9      	bne.n	800706e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2140      	movs	r1, #64	@ 0x40
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fb89 	bl	80077fc <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e005      	b.n	8007106 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b08a      	sub	sp, #40	@ 0x28
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	431a      	orrs	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	4313      	orrs	r3, r2
 8007136:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4bb4      	ldr	r3, [pc, #720]	@ (8007410 <UART_SetConfig+0x300>)
 8007140:	4013      	ands	r3, r2
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007148:	430b      	orrs	r3, r1
 800714a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4aa9      	ldr	r2, [pc, #676]	@ (8007414 <UART_SetConfig+0x304>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007178:	4313      	orrs	r3, r2
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4aa0      	ldr	r2, [pc, #640]	@ (8007418 <UART_SetConfig+0x308>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d126      	bne.n	80071e8 <UART_SetConfig+0xd8>
 800719a:	4ba0      	ldr	r3, [pc, #640]	@ (800741c <UART_SetConfig+0x30c>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0xd0>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0xa0>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	080071c9 	.word	0x080071c9
 80071bc:	080071d9 	.word	0x080071d9
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c6:	e080      	b.n	80072ca <UART_SetConfig+0x1ba>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ce:	e07c      	b.n	80072ca <UART_SetConfig+0x1ba>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d6:	e078      	b.n	80072ca <UART_SetConfig+0x1ba>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071de:	e074      	b.n	80072ca <UART_SetConfig+0x1ba>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e6:	e070      	b.n	80072ca <UART_SetConfig+0x1ba>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a8c      	ldr	r2, [pc, #560]	@ (8007420 <UART_SetConfig+0x310>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d138      	bne.n	8007264 <UART_SetConfig+0x154>
 80071f2:	4b8a      	ldr	r3, [pc, #552]	@ (800741c <UART_SetConfig+0x30c>)
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d82d      	bhi.n	800725c <UART_SetConfig+0x14c>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <UART_SetConfig+0xf8>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800723d 	.word	0x0800723d
 800720c:	0800725d 	.word	0x0800725d
 8007210:	0800725d 	.word	0x0800725d
 8007214:	0800725d 	.word	0x0800725d
 8007218:	0800724d 	.word	0x0800724d
 800721c:	0800725d 	.word	0x0800725d
 8007220:	0800725d 	.word	0x0800725d
 8007224:	0800725d 	.word	0x0800725d
 8007228:	08007245 	.word	0x08007245
 800722c:	0800725d 	.word	0x0800725d
 8007230:	0800725d 	.word	0x0800725d
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007255 	.word	0x08007255
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007242:	e042      	b.n	80072ca <UART_SetConfig+0x1ba>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724a:	e03e      	b.n	80072ca <UART_SetConfig+0x1ba>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007252:	e03a      	b.n	80072ca <UART_SetConfig+0x1ba>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e036      	b.n	80072ca <UART_SetConfig+0x1ba>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e032      	b.n	80072ca <UART_SetConfig+0x1ba>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6a      	ldr	r2, [pc, #424]	@ (8007414 <UART_SetConfig+0x304>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d12a      	bne.n	80072c4 <UART_SetConfig+0x1b4>
 800726e:	4b6b      	ldr	r3, [pc, #428]	@ (800741c <UART_SetConfig+0x30c>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727c:	d01a      	beq.n	80072b4 <UART_SetConfig+0x1a4>
 800727e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007282:	d81b      	bhi.n	80072bc <UART_SetConfig+0x1ac>
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007288:	d00c      	beq.n	80072a4 <UART_SetConfig+0x194>
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d815      	bhi.n	80072bc <UART_SetConfig+0x1ac>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <UART_SetConfig+0x18c>
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x19c>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x1ac>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e012      	b.n	80072ca <UART_SetConfig+0x1ba>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e00e      	b.n	80072ca <UART_SetConfig+0x1ba>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b2:	e00a      	b.n	80072ca <UART_SetConfig+0x1ba>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ba:	e006      	b.n	80072ca <UART_SetConfig+0x1ba>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c2:	e002      	b.n	80072ca <UART_SetConfig+0x1ba>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a51      	ldr	r2, [pc, #324]	@ (8007414 <UART_SetConfig+0x304>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d17a      	bne.n	80073ca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d824      	bhi.n	8007326 <UART_SetConfig+0x216>
 80072dc:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <UART_SetConfig+0x1d4>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007327 	.word	0x08007327
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007327 	.word	0x08007327
 80072f4:	08007317 	.word	0x08007317
 80072f8:	08007327 	.word	0x08007327
 80072fc:	08007327 	.word	0x08007327
 8007300:	08007327 	.word	0x08007327
 8007304:	0800731f 	.word	0x0800731f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007308:	f7fe f902 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 800730c:	61f8      	str	r0, [r7, #28]
        break;
 800730e:	e010      	b.n	8007332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007310:	4b44      	ldr	r3, [pc, #272]	@ (8007424 <UART_SetConfig+0x314>)
 8007312:	61fb      	str	r3, [r7, #28]
        break;
 8007314:	e00d      	b.n	8007332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007316:	f7fe f863 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 800731a:	61f8      	str	r0, [r7, #28]
        break;
 800731c:	e009      	b.n	8007332 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007322:	61fb      	str	r3, [r7, #28]
        break;
 8007324:	e005      	b.n	8007332 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8107 	beq.w	8007548 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	429a      	cmp	r2, r3
 8007348:	d305      	bcc.n	8007356 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800735c:	e0f4      	b.n	8007548 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	2200      	movs	r2, #0
 8007362:	461c      	mov	r4, r3
 8007364:	4615      	mov	r5, r2
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	022b      	lsls	r3, r5, #8
 8007370:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007374:	0222      	lsls	r2, r4, #8
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	6849      	ldr	r1, [r1, #4]
 800737a:	0849      	lsrs	r1, r1, #1
 800737c:	2000      	movs	r0, #0
 800737e:	4688      	mov	r8, r1
 8007380:	4681      	mov	r9, r0
 8007382:	eb12 0a08 	adds.w	sl, r2, r8
 8007386:	eb43 0b09 	adc.w	fp, r3, r9
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007398:	4650      	mov	r0, sl
 800739a:	4659      	mov	r1, fp
 800739c:	f7f9 fc74 	bl	8000c88 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ae:	d308      	bcc.n	80073c2 <UART_SetConfig+0x2b2>
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b6:	d204      	bcs.n	80073c2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	60da      	str	r2, [r3, #12]
 80073c0:	e0c2      	b.n	8007548 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073c8:	e0be      	b.n	8007548 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d2:	d16a      	bne.n	80074aa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80073d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d834      	bhi.n	8007446 <UART_SetConfig+0x336>
 80073dc:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <UART_SetConfig+0x2d4>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007447 	.word	0x08007447
 80073f4:	08007437 	.word	0x08007437
 80073f8:	08007447 	.word	0x08007447
 80073fc:	08007447 	.word	0x08007447
 8007400:	08007447 	.word	0x08007447
 8007404:	0800743f 	.word	0x0800743f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007408:	f7fe f882 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 800740c:	61f8      	str	r0, [r7, #28]
        break;
 800740e:	e020      	b.n	8007452 <UART_SetConfig+0x342>
 8007410:	efff69f3 	.word	0xefff69f3
 8007414:	40008000 	.word	0x40008000
 8007418:	40013800 	.word	0x40013800
 800741c:	40021000 	.word	0x40021000
 8007420:	40004400 	.word	0x40004400
 8007424:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007428:	f7fe f888 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e010      	b.n	8007452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007430:	4b4c      	ldr	r3, [pc, #304]	@ (8007564 <UART_SetConfig+0x454>)
 8007432:	61fb      	str	r3, [r7, #28]
        break;
 8007434:	e00d      	b.n	8007452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007436:	f7fd ffd3 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 800743a:	61f8      	str	r0, [r7, #28]
        break;
 800743c:	e009      	b.n	8007452 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007442:	61fb      	str	r3, [r7, #28]
        break;
 8007444:	e005      	b.n	8007452 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d077      	beq.n	8007548 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	005a      	lsls	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	441a      	add	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	fbb2 f3f3 	udiv	r3, r2, r3
 800746c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b0f      	cmp	r3, #15
 8007472:	d916      	bls.n	80074a2 <UART_SetConfig+0x392>
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800747a:	d212      	bcs.n	80074a2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f023 030f 	bic.w	r3, r3, #15
 8007484:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	b29b      	uxth	r3, r3
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	b29a      	uxth	r2, r3
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	4313      	orrs	r3, r2
 8007496:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	8afa      	ldrh	r2, [r7, #22]
 800749e:	60da      	str	r2, [r3, #12]
 80074a0:	e052      	b.n	8007548 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074a8:	e04e      	b.n	8007548 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d827      	bhi.n	8007502 <UART_SetConfig+0x3f2>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x3a8>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	08007503 	.word	0x08007503
 80074c8:	080074f3 	.word	0x080074f3
 80074cc:	08007503 	.word	0x08007503
 80074d0:	08007503 	.word	0x08007503
 80074d4:	08007503 	.word	0x08007503
 80074d8:	080074fb 	.word	0x080074fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fe f818 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 80074e0:	61f8      	str	r0, [r7, #28]
        break;
 80074e2:	e014      	b.n	800750e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e4:	f7fe f82a 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 80074e8:	61f8      	str	r0, [r7, #28]
        break;
 80074ea:	e010      	b.n	800750e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007564 <UART_SetConfig+0x454>)
 80074ee:	61fb      	str	r3, [r7, #28]
        break;
 80074f0:	e00d      	b.n	800750e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f2:	f7fd ff75 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 80074f6:	61f8      	str	r0, [r7, #28]
        break;
 80074f8:	e009      	b.n	800750e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074fe:	61fb      	str	r3, [r7, #28]
        break;
 8007500:	e005      	b.n	800750e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800750c:	bf00      	nop
    }

    if (pclk != 0U)
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d019      	beq.n	8007548 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	085a      	lsrs	r2, r3, #1
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	441a      	add	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b0f      	cmp	r3, #15
 800752c:	d909      	bls.n	8007542 <UART_SetConfig+0x432>
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d205      	bcs.n	8007542 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60da      	str	r2, [r3, #12]
 8007540:	e002      	b.n	8007548 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007554:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	@ 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007562:	bf00      	nop
 8007564:	00f42400 	.word	0x00f42400

08007568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01a      	beq.n	800767e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007666:	d10a      	bne.n	800767e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b098      	sub	sp, #96	@ 0x60
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076bc:	f7fa fd42 	bl	8002144 <HAL_GetTick>
 80076c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d12e      	bne.n	800772e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d8:	2200      	movs	r2, #0
 80076da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f88c 	bl	80077fc <UART_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d021      	beq.n	800772e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007708:	647b      	str	r3, [r7, #68]	@ 0x44
 800770a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800770e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e062      	b.n	80077f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b04      	cmp	r3, #4
 800773a:	d149      	bne.n	80077d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800773c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007744:	2200      	movs	r2, #0
 8007746:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f856 	bl	80077fc <UART_WaitOnFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d03c      	beq.n	80077d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	623b      	str	r3, [r7, #32]
   return(result);
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800776a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	633b      	str	r3, [r7, #48]	@ 0x30
 8007776:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800777a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60fb      	str	r3, [r7, #12]
   return(result);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3308      	adds	r3, #8
 80077a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a8:	61fa      	str	r2, [r7, #28]
 80077aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	69b9      	ldr	r1, [r7, #24]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	617b      	str	r3, [r7, #20]
   return(result);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e011      	b.n	80077f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3758      	adds	r7, #88	@ 0x58
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	4613      	mov	r3, r2
 800780a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780c:	e04f      	b.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d04b      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007816:	f7fa fc95 	bl	8002144 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	429a      	cmp	r2, r3
 8007824:	d302      	bcc.n	800782c <UART_WaitOnFlagUntilTimeout+0x30>
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e04e      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b00      	cmp	r3, #0
 800783c:	d037      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b80      	cmp	r3, #128	@ 0x80
 8007842:	d034      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b40      	cmp	r3, #64	@ 0x40
 8007848:	d031      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b08      	cmp	r3, #8
 8007856:	d110      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2208      	movs	r2, #8
 800785e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f838 	bl	80078d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2208      	movs	r2, #8
 800786a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e029      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007888:	d111      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f81e 	bl	80078d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	bf0c      	ite	eq
 80078be:	2301      	moveq	r3, #1
 80078c0:	2300      	movne	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d0a0      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b095      	sub	sp, #84	@ 0x54
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80078fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007902:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800790a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f023 0301 	bic.w	r3, r3, #1
 8007926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e5      	bne.n	8007910 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007948:	2b01      	cmp	r3, #1
 800794a:	d118      	bne.n	800797e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60bb      	str	r3, [r7, #8]
   return(result);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0310 	bic.w	r3, r3, #16
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	613b      	str	r3, [r7, #16]
   return(result);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007992:	bf00      	nop
 8007994:	3754      	adds	r7, #84	@ 0x54
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <__cvt>:
 800799e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a2:	ec57 6b10 	vmov	r6, r7, d0
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	460c      	mov	r4, r1
 80079aa:	4619      	mov	r1, r3
 80079ac:	463b      	mov	r3, r7
 80079ae:	bfbb      	ittet	lt
 80079b0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80079b4:	461f      	movlt	r7, r3
 80079b6:	2300      	movge	r3, #0
 80079b8:	232d      	movlt	r3, #45	@ 0x2d
 80079ba:	700b      	strb	r3, [r1, #0]
 80079bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079be:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80079c2:	4691      	mov	r9, r2
 80079c4:	f023 0820 	bic.w	r8, r3, #32
 80079c8:	bfbc      	itt	lt
 80079ca:	4632      	movlt	r2, r6
 80079cc:	4616      	movlt	r6, r2
 80079ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079d2:	d005      	beq.n	80079e0 <__cvt+0x42>
 80079d4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80079d8:	d100      	bne.n	80079dc <__cvt+0x3e>
 80079da:	3401      	adds	r4, #1
 80079dc:	2102      	movs	r1, #2
 80079de:	e000      	b.n	80079e2 <__cvt+0x44>
 80079e0:	2103      	movs	r1, #3
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	ab02      	add	r3, sp, #8
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	ec47 6b10 	vmov	d0, r6, r7
 80079ee:	4653      	mov	r3, sl
 80079f0:	4622      	mov	r2, r4
 80079f2:	f001 f881 	bl	8008af8 <_dtoa_r>
 80079f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80079fa:	4605      	mov	r5, r0
 80079fc:	d119      	bne.n	8007a32 <__cvt+0x94>
 80079fe:	f019 0f01 	tst.w	r9, #1
 8007a02:	d00e      	beq.n	8007a22 <__cvt+0x84>
 8007a04:	eb00 0904 	add.w	r9, r0, r4
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f9 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a14:	b108      	cbz	r0, 8007a1a <__cvt+0x7c>
 8007a16:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a1a:	2230      	movs	r2, #48	@ 0x30
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	454b      	cmp	r3, r9
 8007a20:	d31e      	bcc.n	8007a60 <__cvt+0xc2>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a26:	1b5b      	subs	r3, r3, r5
 8007a28:	4628      	mov	r0, r5
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	b004      	add	sp, #16
 8007a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a36:	eb00 0904 	add.w	r9, r0, r4
 8007a3a:	d1e5      	bne.n	8007a08 <__cvt+0x6a>
 8007a3c:	7803      	ldrb	r3, [r0, #0]
 8007a3e:	2b30      	cmp	r3, #48	@ 0x30
 8007a40:	d10a      	bne.n	8007a58 <__cvt+0xba>
 8007a42:	2200      	movs	r2, #0
 8007a44:	2300      	movs	r3, #0
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f9 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4e:	b918      	cbnz	r0, 8007a58 <__cvt+0xba>
 8007a50:	f1c4 0401 	rsb	r4, r4, #1
 8007a54:	f8ca 4000 	str.w	r4, [sl]
 8007a58:	f8da 3000 	ldr.w	r3, [sl]
 8007a5c:	4499      	add	r9, r3
 8007a5e:	e7d3      	b.n	8007a08 <__cvt+0x6a>
 8007a60:	1c59      	adds	r1, r3, #1
 8007a62:	9103      	str	r1, [sp, #12]
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e7d9      	b.n	8007a1c <__cvt+0x7e>

08007a68 <__exponent>:
 8007a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a6a:	2900      	cmp	r1, #0
 8007a6c:	bfba      	itte	lt
 8007a6e:	4249      	neglt	r1, r1
 8007a70:	232d      	movlt	r3, #45	@ 0x2d
 8007a72:	232b      	movge	r3, #43	@ 0x2b
 8007a74:	2909      	cmp	r1, #9
 8007a76:	7002      	strb	r2, [r0, #0]
 8007a78:	7043      	strb	r3, [r0, #1]
 8007a7a:	dd29      	ble.n	8007ad0 <__exponent+0x68>
 8007a7c:	f10d 0307 	add.w	r3, sp, #7
 8007a80:	461d      	mov	r5, r3
 8007a82:	270a      	movs	r7, #10
 8007a84:	461a      	mov	r2, r3
 8007a86:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a8a:	fb07 1416 	mls	r4, r7, r6, r1
 8007a8e:	3430      	adds	r4, #48	@ 0x30
 8007a90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a94:	460c      	mov	r4, r1
 8007a96:	2c63      	cmp	r4, #99	@ 0x63
 8007a98:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	dcf1      	bgt.n	8007a84 <__exponent+0x1c>
 8007aa0:	3130      	adds	r1, #48	@ 0x30
 8007aa2:	1e94      	subs	r4, r2, #2
 8007aa4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007aa8:	1c41      	adds	r1, r0, #1
 8007aaa:	4623      	mov	r3, r4
 8007aac:	42ab      	cmp	r3, r5
 8007aae:	d30a      	bcc.n	8007ac6 <__exponent+0x5e>
 8007ab0:	f10d 0309 	add.w	r3, sp, #9
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	42ac      	cmp	r4, r5
 8007ab8:	bf88      	it	hi
 8007aba:	2300      	movhi	r3, #0
 8007abc:	3302      	adds	r3, #2
 8007abe:	4403      	add	r3, r0
 8007ac0:	1a18      	subs	r0, r3, r0
 8007ac2:	b003      	add	sp, #12
 8007ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007aca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ace:	e7ed      	b.n	8007aac <__exponent+0x44>
 8007ad0:	2330      	movs	r3, #48	@ 0x30
 8007ad2:	3130      	adds	r1, #48	@ 0x30
 8007ad4:	7083      	strb	r3, [r0, #2]
 8007ad6:	70c1      	strb	r1, [r0, #3]
 8007ad8:	1d03      	adds	r3, r0, #4
 8007ada:	e7f1      	b.n	8007ac0 <__exponent+0x58>

08007adc <_printf_float>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	b08d      	sub	sp, #52	@ 0x34
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ae8:	4616      	mov	r6, r2
 8007aea:	461f      	mov	r7, r3
 8007aec:	4605      	mov	r5, r0
 8007aee:	f000 fefb 	bl	80088e8 <_localeconv_r>
 8007af2:	6803      	ldr	r3, [r0, #0]
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fbba 	bl	8000270 <strlen>
 8007afc:	2300      	movs	r3, #0
 8007afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b00:	f8d8 3000 	ldr.w	r3, [r8]
 8007b04:	9005      	str	r0, [sp, #20]
 8007b06:	3307      	adds	r3, #7
 8007b08:	f023 0307 	bic.w	r3, r3, #7
 8007b0c:	f103 0208 	add.w	r2, r3, #8
 8007b10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b14:	f8d4 b000 	ldr.w	fp, [r4]
 8007b18:	f8c8 2000 	str.w	r2, [r8]
 8007b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b24:	9307      	str	r3, [sp, #28]
 8007b26:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b32:	4b9c      	ldr	r3, [pc, #624]	@ (8007da4 <_printf_float+0x2c8>)
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295
 8007b38:	f7f8 fff8 	bl	8000b2c <__aeabi_dcmpun>
 8007b3c:	bb70      	cbnz	r0, 8007b9c <_printf_float+0xc0>
 8007b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b42:	4b98      	ldr	r3, [pc, #608]	@ (8007da4 <_printf_float+0x2c8>)
 8007b44:	f04f 32ff 	mov.w	r2, #4294967295
 8007b48:	f7f8 ffd2 	bl	8000af0 <__aeabi_dcmple>
 8007b4c:	bb30      	cbnz	r0, 8007b9c <_printf_float+0xc0>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 ffc1 	bl	8000adc <__aeabi_dcmplt>
 8007b5a:	b110      	cbz	r0, 8007b62 <_printf_float+0x86>
 8007b5c:	232d      	movs	r3, #45	@ 0x2d
 8007b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b62:	4a91      	ldr	r2, [pc, #580]	@ (8007da8 <_printf_float+0x2cc>)
 8007b64:	4b91      	ldr	r3, [pc, #580]	@ (8007dac <_printf_float+0x2d0>)
 8007b66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b6a:	bf8c      	ite	hi
 8007b6c:	4690      	movhi	r8, r2
 8007b6e:	4698      	movls	r8, r3
 8007b70:	2303      	movs	r3, #3
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	f02b 0304 	bic.w	r3, fp, #4
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	9700      	str	r7, [sp, #0]
 8007b80:	4633      	mov	r3, r6
 8007b82:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f9d2 	bl	8007f30 <_printf_common>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f040 808d 	bne.w	8007cac <_printf_float+0x1d0>
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	b00d      	add	sp, #52	@ 0x34
 8007b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 ffc2 	bl	8000b2c <__aeabi_dcmpun>
 8007ba8:	b140      	cbz	r0, 8007bbc <_printf_float+0xe0>
 8007baa:	464b      	mov	r3, r9
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bfbc      	itt	lt
 8007bb0:	232d      	movlt	r3, #45	@ 0x2d
 8007bb2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8007db0 <_printf_float+0x2d4>)
 8007bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8007db4 <_printf_float+0x2d8>)
 8007bba:	e7d4      	b.n	8007b66 <_printf_float+0x8a>
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007bc2:	9206      	str	r2, [sp, #24]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	d13b      	bne.n	8007c40 <_printf_float+0x164>
 8007bc8:	2306      	movs	r3, #6
 8007bca:	6063      	str	r3, [r4, #4]
 8007bcc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6022      	str	r2, [r4, #0]
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bd8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007bdc:	ab09      	add	r3, sp, #36	@ 0x24
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	6861      	ldr	r1, [r4, #4]
 8007be2:	ec49 8b10 	vmov	d0, r8, r9
 8007be6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007bea:	4628      	mov	r0, r5
 8007bec:	f7ff fed7 	bl	800799e <__cvt>
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bf4:	2b47      	cmp	r3, #71	@ 0x47
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	d129      	bne.n	8007c4e <_printf_float+0x172>
 8007bfa:	1cc8      	adds	r0, r1, #3
 8007bfc:	db02      	blt.n	8007c04 <_printf_float+0x128>
 8007bfe:	6863      	ldr	r3, [r4, #4]
 8007c00:	4299      	cmp	r1, r3
 8007c02:	dd41      	ble.n	8007c88 <_printf_float+0x1ac>
 8007c04:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c08:	fa5f fa8a 	uxtb.w	sl, sl
 8007c0c:	3901      	subs	r1, #1
 8007c0e:	4652      	mov	r2, sl
 8007c10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c14:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c16:	f7ff ff27 	bl	8007a68 <__exponent>
 8007c1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c1c:	1813      	adds	r3, r2, r0
 8007c1e:	2a01      	cmp	r2, #1
 8007c20:	4681      	mov	r9, r0
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	dc02      	bgt.n	8007c2c <_printf_float+0x150>
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	07d2      	lsls	r2, r2, #31
 8007c2a:	d501      	bpl.n	8007c30 <_printf_float+0x154>
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	6123      	str	r3, [r4, #16]
 8007c30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0a2      	beq.n	8007b7e <_printf_float+0xa2>
 8007c38:	232d      	movs	r3, #45	@ 0x2d
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c3e:	e79e      	b.n	8007b7e <_printf_float+0xa2>
 8007c40:	9a06      	ldr	r2, [sp, #24]
 8007c42:	2a47      	cmp	r2, #71	@ 0x47
 8007c44:	d1c2      	bne.n	8007bcc <_printf_float+0xf0>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1c0      	bne.n	8007bcc <_printf_float+0xf0>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e7bd      	b.n	8007bca <_printf_float+0xee>
 8007c4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c52:	d9db      	bls.n	8007c0c <_printf_float+0x130>
 8007c54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c58:	d118      	bne.n	8007c8c <_printf_float+0x1b0>
 8007c5a:	2900      	cmp	r1, #0
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	dd0b      	ble.n	8007c78 <_printf_float+0x19c>
 8007c60:	6121      	str	r1, [r4, #16]
 8007c62:	b913      	cbnz	r3, 8007c6a <_printf_float+0x18e>
 8007c64:	6822      	ldr	r2, [r4, #0]
 8007c66:	07d0      	lsls	r0, r2, #31
 8007c68:	d502      	bpl.n	8007c70 <_printf_float+0x194>
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	440b      	add	r3, r1
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	e7db      	b.n	8007c30 <_printf_float+0x154>
 8007c78:	b913      	cbnz	r3, 8007c80 <_printf_float+0x1a4>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	07d2      	lsls	r2, r2, #31
 8007c7e:	d501      	bpl.n	8007c84 <_printf_float+0x1a8>
 8007c80:	3302      	adds	r3, #2
 8007c82:	e7f4      	b.n	8007c6e <_printf_float+0x192>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e7f2      	b.n	8007c6e <_printf_float+0x192>
 8007c88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8e:	4299      	cmp	r1, r3
 8007c90:	db05      	blt.n	8007c9e <_printf_float+0x1c2>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6121      	str	r1, [r4, #16]
 8007c96:	07d8      	lsls	r0, r3, #31
 8007c98:	d5ea      	bpl.n	8007c70 <_printf_float+0x194>
 8007c9a:	1c4b      	adds	r3, r1, #1
 8007c9c:	e7e7      	b.n	8007c6e <_printf_float+0x192>
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	bfd4      	ite	le
 8007ca2:	f1c1 0202 	rsble	r2, r1, #2
 8007ca6:	2201      	movgt	r2, #1
 8007ca8:	4413      	add	r3, r2
 8007caa:	e7e0      	b.n	8007c6e <_printf_float+0x192>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	055a      	lsls	r2, r3, #21
 8007cb0:	d407      	bmi.n	8007cc2 <_printf_float+0x1e6>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d12b      	bne.n	8007d18 <_printf_float+0x23c>
 8007cc0:	e767      	b.n	8007b92 <_printf_float+0xb6>
 8007cc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cc6:	f240 80dd 	bls.w	8007e84 <_printf_float+0x3a8>
 8007cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f7f8 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d033      	beq.n	8007d42 <_printf_float+0x266>
 8007cda:	4a37      	ldr	r2, [pc, #220]	@ (8007db8 <_printf_float+0x2dc>)
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f43f af54 	beq.w	8007b92 <_printf_float+0xb6>
 8007cea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007cee:	4543      	cmp	r3, r8
 8007cf0:	db02      	blt.n	8007cf8 <_printf_float+0x21c>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	07d8      	lsls	r0, r3, #31
 8007cf6:	d50f      	bpl.n	8007d18 <_printf_float+0x23c>
 8007cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f af45 	beq.w	8007b92 <_printf_float+0xb6>
 8007d08:	f04f 0900 	mov.w	r9, #0
 8007d0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d10:	f104 0a1a 	add.w	sl, r4, #26
 8007d14:	45c8      	cmp	r8, r9
 8007d16:	dc09      	bgt.n	8007d2c <_printf_float+0x250>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	079b      	lsls	r3, r3, #30
 8007d1c:	f100 8103 	bmi.w	8007f26 <_printf_float+0x44a>
 8007d20:	68e0      	ldr	r0, [r4, #12]
 8007d22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d24:	4298      	cmp	r0, r3
 8007d26:	bfb8      	it	lt
 8007d28:	4618      	movlt	r0, r3
 8007d2a:	e734      	b.n	8007b96 <_printf_float+0xba>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4652      	mov	r2, sl
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f af2b 	beq.w	8007b92 <_printf_float+0xb6>
 8007d3c:	f109 0901 	add.w	r9, r9, #1
 8007d40:	e7e8      	b.n	8007d14 <_printf_float+0x238>
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc39      	bgt.n	8007dbc <_printf_float+0x2e0>
 8007d48:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <_printf_float+0x2dc>)
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f af1d 	beq.w	8007b92 <_printf_float+0xb6>
 8007d58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d5c:	ea59 0303 	orrs.w	r3, r9, r3
 8007d60:	d102      	bne.n	8007d68 <_printf_float+0x28c>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	07d9      	lsls	r1, r3, #31
 8007d66:	d5d7      	bpl.n	8007d18 <_printf_float+0x23c>
 8007d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f af0d 	beq.w	8007b92 <_printf_float+0xb6>
 8007d78:	f04f 0a00 	mov.w	sl, #0
 8007d7c:	f104 0b1a 	add.w	fp, r4, #26
 8007d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d82:	425b      	negs	r3, r3
 8007d84:	4553      	cmp	r3, sl
 8007d86:	dc01      	bgt.n	8007d8c <_printf_float+0x2b0>
 8007d88:	464b      	mov	r3, r9
 8007d8a:	e793      	b.n	8007cb4 <_printf_float+0x1d8>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	465a      	mov	r2, fp
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f aefb 	beq.w	8007b92 <_printf_float+0xb6>
 8007d9c:	f10a 0a01 	add.w	sl, sl, #1
 8007da0:	e7ee      	b.n	8007d80 <_printf_float+0x2a4>
 8007da2:	bf00      	nop
 8007da4:	7fefffff 	.word	0x7fefffff
 8007da8:	0800c148 	.word	0x0800c148
 8007dac:	0800c144 	.word	0x0800c144
 8007db0:	0800c150 	.word	0x0800c150
 8007db4:	0800c14c 	.word	0x0800c14c
 8007db8:	0800c154 	.word	0x0800c154
 8007dbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007dbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dc2:	4553      	cmp	r3, sl
 8007dc4:	bfa8      	it	ge
 8007dc6:	4653      	movge	r3, sl
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	4699      	mov	r9, r3
 8007dcc:	dc36      	bgt.n	8007e3c <_printf_float+0x360>
 8007dce:	f04f 0b00 	mov.w	fp, #0
 8007dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dd6:	f104 021a 	add.w	r2, r4, #26
 8007dda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ddc:	9306      	str	r3, [sp, #24]
 8007dde:	eba3 0309 	sub.w	r3, r3, r9
 8007de2:	455b      	cmp	r3, fp
 8007de4:	dc31      	bgt.n	8007e4a <_printf_float+0x36e>
 8007de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de8:	459a      	cmp	sl, r3
 8007dea:	dc3a      	bgt.n	8007e62 <_printf_float+0x386>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d437      	bmi.n	8007e62 <_printf_float+0x386>
 8007df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df4:	ebaa 0903 	sub.w	r9, sl, r3
 8007df8:	9b06      	ldr	r3, [sp, #24]
 8007dfa:	ebaa 0303 	sub.w	r3, sl, r3
 8007dfe:	4599      	cmp	r9, r3
 8007e00:	bfa8      	it	ge
 8007e02:	4699      	movge	r9, r3
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	dc33      	bgt.n	8007e72 <_printf_float+0x396>
 8007e0a:	f04f 0800 	mov.w	r8, #0
 8007e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e12:	f104 0b1a 	add.w	fp, r4, #26
 8007e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e18:	ebaa 0303 	sub.w	r3, sl, r3
 8007e1c:	eba3 0309 	sub.w	r3, r3, r9
 8007e20:	4543      	cmp	r3, r8
 8007e22:	f77f af79 	ble.w	8007d18 <_printf_float+0x23c>
 8007e26:	2301      	movs	r3, #1
 8007e28:	465a      	mov	r2, fp
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	f43f aeae 	beq.w	8007b92 <_printf_float+0xb6>
 8007e36:	f108 0801 	add.w	r8, r8, #1
 8007e3a:	e7ec      	b.n	8007e16 <_printf_float+0x33a>
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	d1c2      	bne.n	8007dce <_printf_float+0x2f2>
 8007e48:	e6a3      	b.n	8007b92 <_printf_float+0xb6>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	9206      	str	r2, [sp, #24]
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae9c 	beq.w	8007b92 <_printf_float+0xb6>
 8007e5a:	9a06      	ldr	r2, [sp, #24]
 8007e5c:	f10b 0b01 	add.w	fp, fp, #1
 8007e60:	e7bb      	b.n	8007dda <_printf_float+0x2fe>
 8007e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1c0      	bne.n	8007df2 <_printf_float+0x316>
 8007e70:	e68f      	b.n	8007b92 <_printf_float+0xb6>
 8007e72:	9a06      	ldr	r2, [sp, #24]
 8007e74:	464b      	mov	r3, r9
 8007e76:	4442      	add	r2, r8
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d1c3      	bne.n	8007e0a <_printf_float+0x32e>
 8007e82:	e686      	b.n	8007b92 <_printf_float+0xb6>
 8007e84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e88:	f1ba 0f01 	cmp.w	sl, #1
 8007e8c:	dc01      	bgt.n	8007e92 <_printf_float+0x3b6>
 8007e8e:	07db      	lsls	r3, r3, #31
 8007e90:	d536      	bpl.n	8007f00 <_printf_float+0x424>
 8007e92:	2301      	movs	r3, #1
 8007e94:	4642      	mov	r2, r8
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f ae78 	beq.w	8007b92 <_printf_float+0xb6>
 8007ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b8      	blx	r7
 8007eac:	3001      	adds	r0, #1
 8007eae:	f43f ae70 	beq.w	8007b92 <_printf_float+0xb6>
 8007eb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ebe:	f7f8 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec2:	b9c0      	cbnz	r0, 8007ef6 <_printf_float+0x41a>
 8007ec4:	4653      	mov	r3, sl
 8007ec6:	f108 0201 	add.w	r2, r8, #1
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d10c      	bne.n	8007eee <_printf_float+0x412>
 8007ed4:	e65d      	b.n	8007b92 <_printf_float+0xb6>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	465a      	mov	r2, fp
 8007eda:	4631      	mov	r1, r6
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b8      	blx	r7
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f43f ae56 	beq.w	8007b92 <_printf_float+0xb6>
 8007ee6:	f108 0801 	add.w	r8, r8, #1
 8007eea:	45d0      	cmp	r8, sl
 8007eec:	dbf3      	blt.n	8007ed6 <_printf_float+0x3fa>
 8007eee:	464b      	mov	r3, r9
 8007ef0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ef4:	e6df      	b.n	8007cb6 <_printf_float+0x1da>
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	f104 0b1a 	add.w	fp, r4, #26
 8007efe:	e7f4      	b.n	8007eea <_printf_float+0x40e>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4642      	mov	r2, r8
 8007f04:	e7e1      	b.n	8007eca <_printf_float+0x3ee>
 8007f06:	2301      	movs	r3, #1
 8007f08:	464a      	mov	r2, r9
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f ae3e 	beq.w	8007b92 <_printf_float+0xb6>
 8007f16:	f108 0801 	add.w	r8, r8, #1
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f1e:	1a5b      	subs	r3, r3, r1
 8007f20:	4543      	cmp	r3, r8
 8007f22:	dcf0      	bgt.n	8007f06 <_printf_float+0x42a>
 8007f24:	e6fc      	b.n	8007d20 <_printf_float+0x244>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	f104 0919 	add.w	r9, r4, #25
 8007f2e:	e7f4      	b.n	8007f1a <_printf_float+0x43e>

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4616      	mov	r6, r2
 8007f36:	4698      	mov	r8, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b10a      	cbz	r2, 8007f56 <_printf_common+0x26>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	0699      	lsls	r1, r3, #26
 8007f5a:	bf42      	ittt	mi
 8007f5c:	6833      	ldrmi	r3, [r6, #0]
 8007f5e:	3302      	addmi	r3, #2
 8007f60:	6033      	strmi	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	f015 0506 	ands.w	r5, r5, #6
 8007f68:	d106      	bne.n	8007f78 <_printf_common+0x48>
 8007f6a:	f104 0a19 	add.w	sl, r4, #25
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dc26      	bgt.n	8007fc6 <_printf_common+0x96>
 8007f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	3b00      	subs	r3, #0
 8007f80:	bf18      	it	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	0692      	lsls	r2, r2, #26
 8007f86:	d42b      	bmi.n	8007fe0 <_printf_common+0xb0>
 8007f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c8      	blx	r9
 8007f92:	3001      	adds	r0, #1
 8007f94:	d01e      	beq.n	8007fd4 <_printf_common+0xa4>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	f003 0306 	and.w	r3, r3, #6
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	bf02      	ittt	eq
 8007fa2:	68e5      	ldreq	r5, [r4, #12]
 8007fa4:	6833      	ldreq	r3, [r6, #0]
 8007fa6:	1aed      	subeq	r5, r5, r3
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	bf0c      	ite	eq
 8007fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb0:	2500      	movne	r5, #0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bfc4      	itt	gt
 8007fb6:	1a9b      	subgt	r3, r3, r2
 8007fb8:	18ed      	addgt	r5, r5, r3
 8007fba:	2600      	movs	r6, #0
 8007fbc:	341a      	adds	r4, #26
 8007fbe:	42b5      	cmp	r5, r6
 8007fc0:	d11a      	bne.n	8007ff8 <_printf_common+0xc8>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e008      	b.n	8007fd8 <_printf_common+0xa8>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4638      	mov	r0, r7
 8007fce:	47c8      	blx	r9
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d103      	bne.n	8007fdc <_printf_common+0xac>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7c6      	b.n	8007f6e <_printf_common+0x3e>
 8007fe0:	18e1      	adds	r1, r4, r3
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	2030      	movs	r0, #48	@ 0x30
 8007fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fea:	4422      	add	r2, r4
 8007fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7c7      	b.n	8007f88 <_printf_common+0x58>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c8      	blx	r9
 8008002:	3001      	adds	r0, #1
 8008004:	d0e6      	beq.n	8007fd4 <_printf_common+0xa4>
 8008006:	3601      	adds	r6, #1
 8008008:	e7d9      	b.n	8007fbe <_printf_common+0x8e>
	...

0800800c <_printf_i>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	7e0f      	ldrb	r7, [r1, #24]
 8008012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008014:	2f78      	cmp	r7, #120	@ 0x78
 8008016:	4691      	mov	r9, r2
 8008018:	4680      	mov	r8, r0
 800801a:	460c      	mov	r4, r1
 800801c:	469a      	mov	sl, r3
 800801e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008022:	d807      	bhi.n	8008034 <_printf_i+0x28>
 8008024:	2f62      	cmp	r7, #98	@ 0x62
 8008026:	d80a      	bhi.n	800803e <_printf_i+0x32>
 8008028:	2f00      	cmp	r7, #0
 800802a:	f000 80d1 	beq.w	80081d0 <_printf_i+0x1c4>
 800802e:	2f58      	cmp	r7, #88	@ 0x58
 8008030:	f000 80b8 	beq.w	80081a4 <_printf_i+0x198>
 8008034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800803c:	e03a      	b.n	80080b4 <_printf_i+0xa8>
 800803e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008042:	2b15      	cmp	r3, #21
 8008044:	d8f6      	bhi.n	8008034 <_printf_i+0x28>
 8008046:	a101      	add	r1, pc, #4	@ (adr r1, 800804c <_printf_i+0x40>)
 8008048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008035 	.word	0x08008035
 8008058:	08008035 	.word	0x08008035
 800805c:	08008035 	.word	0x08008035
 8008060:	08008035 	.word	0x08008035
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008035 	.word	0x08008035
 800806c:	08008035 	.word	0x08008035
 8008070:	08008035 	.word	0x08008035
 8008074:	08008035 	.word	0x08008035
 8008078:	080081b7 	.word	0x080081b7
 800807c:	080080e3 	.word	0x080080e3
 8008080:	08008171 	.word	0x08008171
 8008084:	08008035 	.word	0x08008035
 8008088:	08008035 	.word	0x08008035
 800808c:	080081d9 	.word	0x080081d9
 8008090:	08008035 	.word	0x08008035
 8008094:	080080e3 	.word	0x080080e3
 8008098:	08008035 	.word	0x08008035
 800809c:	08008035 	.word	0x08008035
 80080a0:	08008179 	.word	0x08008179
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6032      	str	r2, [r6, #0]
 80080ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080b4:	2301      	movs	r3, #1
 80080b6:	e09c      	b.n	80081f2 <_printf_i+0x1e6>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	0606      	lsls	r6, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xbc>
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	e003      	b.n	80080d0 <_printf_i+0xc4>
 80080c8:	0645      	lsls	r5, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xb8>
 80080cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	da03      	bge.n	80080dc <_printf_i+0xd0>
 80080d4:	232d      	movs	r3, #45	@ 0x2d
 80080d6:	426d      	negs	r5, r5
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080dc:	4858      	ldr	r0, [pc, #352]	@ (8008240 <_printf_i+0x234>)
 80080de:	230a      	movs	r3, #10
 80080e0:	e011      	b.n	8008106 <_printf_i+0xfa>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	0608      	lsls	r0, r1, #24
 80080e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80080ec:	d402      	bmi.n	80080f4 <_printf_i+0xe8>
 80080ee:	0649      	lsls	r1, r1, #25
 80080f0:	bf48      	it	mi
 80080f2:	b2ad      	uxthmi	r5, r5
 80080f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080f6:	4852      	ldr	r0, [pc, #328]	@ (8008240 <_printf_i+0x234>)
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	bf14      	ite	ne
 80080fc:	230a      	movne	r3, #10
 80080fe:	2308      	moveq	r3, #8
 8008100:	2100      	movs	r1, #0
 8008102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008106:	6866      	ldr	r6, [r4, #4]
 8008108:	60a6      	str	r6, [r4, #8]
 800810a:	2e00      	cmp	r6, #0
 800810c:	db05      	blt.n	800811a <_printf_i+0x10e>
 800810e:	6821      	ldr	r1, [r4, #0]
 8008110:	432e      	orrs	r6, r5
 8008112:	f021 0104 	bic.w	r1, r1, #4
 8008116:	6021      	str	r1, [r4, #0]
 8008118:	d04b      	beq.n	80081b2 <_printf_i+0x1a6>
 800811a:	4616      	mov	r6, r2
 800811c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008120:	fb03 5711 	mls	r7, r3, r1, r5
 8008124:	5dc7      	ldrb	r7, [r0, r7]
 8008126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800812a:	462f      	mov	r7, r5
 800812c:	42bb      	cmp	r3, r7
 800812e:	460d      	mov	r5, r1
 8008130:	d9f4      	bls.n	800811c <_printf_i+0x110>
 8008132:	2b08      	cmp	r3, #8
 8008134:	d10b      	bne.n	800814e <_printf_i+0x142>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07df      	lsls	r7, r3, #31
 800813a:	d508      	bpl.n	800814e <_printf_i+0x142>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	4299      	cmp	r1, r3
 8008142:	bfde      	ittt	le
 8008144:	2330      	movle	r3, #48	@ 0x30
 8008146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800814a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800814e:	1b92      	subs	r2, r2, r6
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	f8cd a000 	str.w	sl, [sp]
 8008156:	464b      	mov	r3, r9
 8008158:	aa03      	add	r2, sp, #12
 800815a:	4621      	mov	r1, r4
 800815c:	4640      	mov	r0, r8
 800815e:	f7ff fee7 	bl	8007f30 <_printf_common>
 8008162:	3001      	adds	r0, #1
 8008164:	d14a      	bne.n	80081fc <_printf_i+0x1f0>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	f043 0320 	orr.w	r3, r3, #32
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	4832      	ldr	r0, [pc, #200]	@ (8008244 <_printf_i+0x238>)
 800817a:	2778      	movs	r7, #120	@ 0x78
 800817c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6831      	ldr	r1, [r6, #0]
 8008184:	061f      	lsls	r7, r3, #24
 8008186:	f851 5b04 	ldr.w	r5, [r1], #4
 800818a:	d402      	bmi.n	8008192 <_printf_i+0x186>
 800818c:	065f      	lsls	r7, r3, #25
 800818e:	bf48      	it	mi
 8008190:	b2ad      	uxthmi	r5, r5
 8008192:	6031      	str	r1, [r6, #0]
 8008194:	07d9      	lsls	r1, r3, #31
 8008196:	bf44      	itt	mi
 8008198:	f043 0320 	orrmi.w	r3, r3, #32
 800819c:	6023      	strmi	r3, [r4, #0]
 800819e:	b11d      	cbz	r5, 80081a8 <_printf_i+0x19c>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e7ad      	b.n	8008100 <_printf_i+0xf4>
 80081a4:	4826      	ldr	r0, [pc, #152]	@ (8008240 <_printf_i+0x234>)
 80081a6:	e7e9      	b.n	800817c <_printf_i+0x170>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	e7f6      	b.n	80081a0 <_printf_i+0x194>
 80081b2:	4616      	mov	r6, r2
 80081b4:	e7bd      	b.n	8008132 <_printf_i+0x126>
 80081b6:	6833      	ldr	r3, [r6, #0]
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	6961      	ldr	r1, [r4, #20]
 80081bc:	1d18      	adds	r0, r3, #4
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	062e      	lsls	r6, r5, #24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0x1be>
 80081c6:	6019      	str	r1, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0x1c4>
 80081ca:	0668      	lsls	r0, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0x1ba>
 80081ce:	8019      	strh	r1, [r3, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	4616      	mov	r6, r2
 80081d6:	e7bc      	b.n	8008152 <_printf_i+0x146>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	6032      	str	r2, [r6, #0]
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	2100      	movs	r1, #0
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f7 fff3 	bl	80001d0 <memchr>
 80081ea:	b108      	cbz	r0, 80081f0 <_printf_i+0x1e4>
 80081ec:	1b80      	subs	r0, r0, r6
 80081ee:	6060      	str	r0, [r4, #4]
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fa:	e7aa      	b.n	8008152 <_printf_i+0x146>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	4632      	mov	r2, r6
 8008200:	4649      	mov	r1, r9
 8008202:	4640      	mov	r0, r8
 8008204:	47d0      	blx	sl
 8008206:	3001      	adds	r0, #1
 8008208:	d0ad      	beq.n	8008166 <_printf_i+0x15a>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	079b      	lsls	r3, r3, #30
 800820e:	d413      	bmi.n	8008238 <_printf_i+0x22c>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e7a6      	b.n	800816a <_printf_i+0x15e>
 800821c:	2301      	movs	r3, #1
 800821e:	4632      	mov	r2, r6
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	47d0      	blx	sl
 8008226:	3001      	adds	r0, #1
 8008228:	d09d      	beq.n	8008166 <_printf_i+0x15a>
 800822a:	3501      	adds	r5, #1
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	1a5b      	subs	r3, r3, r1
 8008232:	42ab      	cmp	r3, r5
 8008234:	dcf2      	bgt.n	800821c <_printf_i+0x210>
 8008236:	e7eb      	b.n	8008210 <_printf_i+0x204>
 8008238:	2500      	movs	r5, #0
 800823a:	f104 0619 	add.w	r6, r4, #25
 800823e:	e7f5      	b.n	800822c <_printf_i+0x220>
 8008240:	0800c156 	.word	0x0800c156
 8008244:	0800c167 	.word	0x0800c167

08008248 <_scanf_float>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	b087      	sub	sp, #28
 800824e:	4691      	mov	r9, r2
 8008250:	9303      	str	r3, [sp, #12]
 8008252:	688b      	ldr	r3, [r1, #8]
 8008254:	1e5a      	subs	r2, r3, #1
 8008256:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800825a:	bf81      	itttt	hi
 800825c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008260:	eb03 0b05 	addhi.w	fp, r3, r5
 8008264:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008268:	608b      	strhi	r3, [r1, #8]
 800826a:	680b      	ldr	r3, [r1, #0]
 800826c:	460a      	mov	r2, r1
 800826e:	f04f 0500 	mov.w	r5, #0
 8008272:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008276:	f842 3b1c 	str.w	r3, [r2], #28
 800827a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800827e:	4680      	mov	r8, r0
 8008280:	460c      	mov	r4, r1
 8008282:	bf98      	it	ls
 8008284:	f04f 0b00 	movls.w	fp, #0
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	4616      	mov	r6, r2
 800828c:	46aa      	mov	sl, r5
 800828e:	462f      	mov	r7, r5
 8008290:	9502      	str	r5, [sp, #8]
 8008292:	68a2      	ldr	r2, [r4, #8]
 8008294:	b15a      	cbz	r2, 80082ae <_scanf_float+0x66>
 8008296:	f8d9 3000 	ldr.w	r3, [r9]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b4e      	cmp	r3, #78	@ 0x4e
 800829e:	d863      	bhi.n	8008368 <_scanf_float+0x120>
 80082a0:	2b40      	cmp	r3, #64	@ 0x40
 80082a2:	d83b      	bhi.n	800831c <_scanf_float+0xd4>
 80082a4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80082a8:	b2c8      	uxtb	r0, r1
 80082aa:	280e      	cmp	r0, #14
 80082ac:	d939      	bls.n	8008322 <_scanf_float+0xda>
 80082ae:	b11f      	cbz	r7, 80082b8 <_scanf_float+0x70>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082bc:	f1ba 0f01 	cmp.w	sl, #1
 80082c0:	f200 8114 	bhi.w	80084ec <_scanf_float+0x2a4>
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	429e      	cmp	r6, r3
 80082c8:	f200 8105 	bhi.w	80084d6 <_scanf_float+0x28e>
 80082cc:	2001      	movs	r0, #1
 80082ce:	b007      	add	sp, #28
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80082d8:	2a0d      	cmp	r2, #13
 80082da:	d8e8      	bhi.n	80082ae <_scanf_float+0x66>
 80082dc:	a101      	add	r1, pc, #4	@ (adr r1, 80082e4 <_scanf_float+0x9c>)
 80082de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	0800842d 	.word	0x0800842d
 80082e8:	080082af 	.word	0x080082af
 80082ec:	080082af 	.word	0x080082af
 80082f0:	080082af 	.word	0x080082af
 80082f4:	08008489 	.word	0x08008489
 80082f8:	08008463 	.word	0x08008463
 80082fc:	080082af 	.word	0x080082af
 8008300:	080082af 	.word	0x080082af
 8008304:	0800843b 	.word	0x0800843b
 8008308:	080082af 	.word	0x080082af
 800830c:	080082af 	.word	0x080082af
 8008310:	080082af 	.word	0x080082af
 8008314:	080082af 	.word	0x080082af
 8008318:	080083f7 	.word	0x080083f7
 800831c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008320:	e7da      	b.n	80082d8 <_scanf_float+0x90>
 8008322:	290e      	cmp	r1, #14
 8008324:	d8c3      	bhi.n	80082ae <_scanf_float+0x66>
 8008326:	a001      	add	r0, pc, #4	@ (adr r0, 800832c <_scanf_float+0xe4>)
 8008328:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800832c:	080083e7 	.word	0x080083e7
 8008330:	080082af 	.word	0x080082af
 8008334:	080083e7 	.word	0x080083e7
 8008338:	08008477 	.word	0x08008477
 800833c:	080082af 	.word	0x080082af
 8008340:	08008389 	.word	0x08008389
 8008344:	080083cd 	.word	0x080083cd
 8008348:	080083cd 	.word	0x080083cd
 800834c:	080083cd 	.word	0x080083cd
 8008350:	080083cd 	.word	0x080083cd
 8008354:	080083cd 	.word	0x080083cd
 8008358:	080083cd 	.word	0x080083cd
 800835c:	080083cd 	.word	0x080083cd
 8008360:	080083cd 	.word	0x080083cd
 8008364:	080083cd 	.word	0x080083cd
 8008368:	2b6e      	cmp	r3, #110	@ 0x6e
 800836a:	d809      	bhi.n	8008380 <_scanf_float+0x138>
 800836c:	2b60      	cmp	r3, #96	@ 0x60
 800836e:	d8b1      	bhi.n	80082d4 <_scanf_float+0x8c>
 8008370:	2b54      	cmp	r3, #84	@ 0x54
 8008372:	d07b      	beq.n	800846c <_scanf_float+0x224>
 8008374:	2b59      	cmp	r3, #89	@ 0x59
 8008376:	d19a      	bne.n	80082ae <_scanf_float+0x66>
 8008378:	2d07      	cmp	r5, #7
 800837a:	d198      	bne.n	80082ae <_scanf_float+0x66>
 800837c:	2508      	movs	r5, #8
 800837e:	e02f      	b.n	80083e0 <_scanf_float+0x198>
 8008380:	2b74      	cmp	r3, #116	@ 0x74
 8008382:	d073      	beq.n	800846c <_scanf_float+0x224>
 8008384:	2b79      	cmp	r3, #121	@ 0x79
 8008386:	e7f6      	b.n	8008376 <_scanf_float+0x12e>
 8008388:	6821      	ldr	r1, [r4, #0]
 800838a:	05c8      	lsls	r0, r1, #23
 800838c:	d51e      	bpl.n	80083cc <_scanf_float+0x184>
 800838e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008392:	6021      	str	r1, [r4, #0]
 8008394:	3701      	adds	r7, #1
 8008396:	f1bb 0f00 	cmp.w	fp, #0
 800839a:	d003      	beq.n	80083a4 <_scanf_float+0x15c>
 800839c:	3201      	adds	r2, #1
 800839e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083a2:	60a2      	str	r2, [r4, #8]
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	3301      	adds	r3, #1
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80083bc:	f340 8082 	ble.w	80084c4 <_scanf_float+0x27c>
 80083c0:	f8d9 3000 	ldr.w	r3, [r9]
 80083c4:	3301      	adds	r3, #1
 80083c6:	f8c9 3000 	str.w	r3, [r9]
 80083ca:	e762      	b.n	8008292 <_scanf_float+0x4a>
 80083cc:	eb1a 0105 	adds.w	r1, sl, r5
 80083d0:	f47f af6d 	bne.w	80082ae <_scanf_float+0x66>
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80083da:	6022      	str	r2, [r4, #0]
 80083dc:	460d      	mov	r5, r1
 80083de:	468a      	mov	sl, r1
 80083e0:	f806 3b01 	strb.w	r3, [r6], #1
 80083e4:	e7de      	b.n	80083a4 <_scanf_float+0x15c>
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	0610      	lsls	r0, r2, #24
 80083ea:	f57f af60 	bpl.w	80082ae <_scanf_float+0x66>
 80083ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	e7f4      	b.n	80083e0 <_scanf_float+0x198>
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	d10c      	bne.n	8008416 <_scanf_float+0x1ce>
 80083fc:	b977      	cbnz	r7, 800841c <_scanf_float+0x1d4>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008404:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008408:	d108      	bne.n	800841c <_scanf_float+0x1d4>
 800840a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	f04f 0a01 	mov.w	sl, #1
 8008414:	e7e4      	b.n	80083e0 <_scanf_float+0x198>
 8008416:	f1ba 0f02 	cmp.w	sl, #2
 800841a:	d050      	beq.n	80084be <_scanf_float+0x276>
 800841c:	2d01      	cmp	r5, #1
 800841e:	d002      	beq.n	8008426 <_scanf_float+0x1de>
 8008420:	2d04      	cmp	r5, #4
 8008422:	f47f af44 	bne.w	80082ae <_scanf_float+0x66>
 8008426:	3501      	adds	r5, #1
 8008428:	b2ed      	uxtb	r5, r5
 800842a:	e7d9      	b.n	80083e0 <_scanf_float+0x198>
 800842c:	f1ba 0f01 	cmp.w	sl, #1
 8008430:	f47f af3d 	bne.w	80082ae <_scanf_float+0x66>
 8008434:	f04f 0a02 	mov.w	sl, #2
 8008438:	e7d2      	b.n	80083e0 <_scanf_float+0x198>
 800843a:	b975      	cbnz	r5, 800845a <_scanf_float+0x212>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f47f af37 	bne.w	80082b0 <_scanf_float+0x68>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008448:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800844c:	f040 8103 	bne.w	8008656 <_scanf_float+0x40e>
 8008450:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	2501      	movs	r5, #1
 8008458:	e7c2      	b.n	80083e0 <_scanf_float+0x198>
 800845a:	2d03      	cmp	r5, #3
 800845c:	d0e3      	beq.n	8008426 <_scanf_float+0x1de>
 800845e:	2d05      	cmp	r5, #5
 8008460:	e7df      	b.n	8008422 <_scanf_float+0x1da>
 8008462:	2d02      	cmp	r5, #2
 8008464:	f47f af23 	bne.w	80082ae <_scanf_float+0x66>
 8008468:	2503      	movs	r5, #3
 800846a:	e7b9      	b.n	80083e0 <_scanf_float+0x198>
 800846c:	2d06      	cmp	r5, #6
 800846e:	f47f af1e 	bne.w	80082ae <_scanf_float+0x66>
 8008472:	2507      	movs	r5, #7
 8008474:	e7b4      	b.n	80083e0 <_scanf_float+0x198>
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	0591      	lsls	r1, r2, #22
 800847a:	f57f af18 	bpl.w	80082ae <_scanf_float+0x66>
 800847e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	9702      	str	r7, [sp, #8]
 8008486:	e7ab      	b.n	80083e0 <_scanf_float+0x198>
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800848e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008492:	d005      	beq.n	80084a0 <_scanf_float+0x258>
 8008494:	0550      	lsls	r0, r2, #21
 8008496:	f57f af0a 	bpl.w	80082ae <_scanf_float+0x66>
 800849a:	2f00      	cmp	r7, #0
 800849c:	f000 80db 	beq.w	8008656 <_scanf_float+0x40e>
 80084a0:	0591      	lsls	r1, r2, #22
 80084a2:	bf58      	it	pl
 80084a4:	9902      	ldrpl	r1, [sp, #8]
 80084a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084aa:	bf58      	it	pl
 80084ac:	1a79      	subpl	r1, r7, r1
 80084ae:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80084b2:	bf58      	it	pl
 80084b4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	2700      	movs	r7, #0
 80084bc:	e790      	b.n	80083e0 <_scanf_float+0x198>
 80084be:	f04f 0a03 	mov.w	sl, #3
 80084c2:	e78d      	b.n	80083e0 <_scanf_float+0x198>
 80084c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80084c8:	4649      	mov	r1, r9
 80084ca:	4640      	mov	r0, r8
 80084cc:	4798      	blx	r3
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f aedf 	beq.w	8008292 <_scanf_float+0x4a>
 80084d4:	e6eb      	b.n	80082ae <_scanf_float+0x66>
 80084d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084de:	464a      	mov	r2, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	4798      	blx	r3
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	e6eb      	b.n	80082c4 <_scanf_float+0x7c>
 80084ec:	1e6b      	subs	r3, r5, #1
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d824      	bhi.n	800853c <_scanf_float+0x2f4>
 80084f2:	2d02      	cmp	r5, #2
 80084f4:	d836      	bhi.n	8008564 <_scanf_float+0x31c>
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	429e      	cmp	r6, r3
 80084fa:	f67f aee7 	bls.w	80082cc <_scanf_float+0x84>
 80084fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008506:	464a      	mov	r2, r9
 8008508:	4640      	mov	r0, r8
 800850a:	4798      	blx	r3
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	3b01      	subs	r3, #1
 8008510:	6123      	str	r3, [r4, #16]
 8008512:	e7f0      	b.n	80084f6 <_scanf_float+0x2ae>
 8008514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008518:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800851c:	464a      	mov	r2, r9
 800851e:	4640      	mov	r0, r8
 8008520:	4798      	blx	r3
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	3b01      	subs	r3, #1
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	f10a 3aff 	add.w	sl, sl, #4294967295
 800852c:	fa5f fa8a 	uxtb.w	sl, sl
 8008530:	f1ba 0f02 	cmp.w	sl, #2
 8008534:	d1ee      	bne.n	8008514 <_scanf_float+0x2cc>
 8008536:	3d03      	subs	r5, #3
 8008538:	b2ed      	uxtb	r5, r5
 800853a:	1b76      	subs	r6, r6, r5
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	05da      	lsls	r2, r3, #23
 8008540:	d530      	bpl.n	80085a4 <_scanf_float+0x35c>
 8008542:	055b      	lsls	r3, r3, #21
 8008544:	d511      	bpl.n	800856a <_scanf_float+0x322>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	429e      	cmp	r6, r3
 800854a:	f67f aebf 	bls.w	80082cc <_scanf_float+0x84>
 800854e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008556:	464a      	mov	r2, r9
 8008558:	4640      	mov	r0, r8
 800855a:	4798      	blx	r3
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	3b01      	subs	r3, #1
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	e7f0      	b.n	8008546 <_scanf_float+0x2fe>
 8008564:	46aa      	mov	sl, r5
 8008566:	46b3      	mov	fp, r6
 8008568:	e7de      	b.n	8008528 <_scanf_float+0x2e0>
 800856a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	2965      	cmp	r1, #101	@ 0x65
 8008572:	f103 33ff 	add.w	r3, r3, #4294967295
 8008576:	f106 35ff 	add.w	r5, r6, #4294967295
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	d00c      	beq.n	8008598 <_scanf_float+0x350>
 800857e:	2945      	cmp	r1, #69	@ 0x45
 8008580:	d00a      	beq.n	8008598 <_scanf_float+0x350>
 8008582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008586:	464a      	mov	r2, r9
 8008588:	4640      	mov	r0, r8
 800858a:	4798      	blx	r3
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008592:	3b01      	subs	r3, #1
 8008594:	1eb5      	subs	r5, r6, #2
 8008596:	6123      	str	r3, [r4, #16]
 8008598:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800859c:	464a      	mov	r2, r9
 800859e:	4640      	mov	r0, r8
 80085a0:	4798      	blx	r3
 80085a2:	462e      	mov	r6, r5
 80085a4:	6822      	ldr	r2, [r4, #0]
 80085a6:	f012 0210 	ands.w	r2, r2, #16
 80085aa:	d001      	beq.n	80085b0 <_scanf_float+0x368>
 80085ac:	2000      	movs	r0, #0
 80085ae:	e68e      	b.n	80082ce <_scanf_float+0x86>
 80085b0:	7032      	strb	r2, [r6, #0]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085bc:	d125      	bne.n	800860a <_scanf_float+0x3c2>
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	429f      	cmp	r7, r3
 80085c2:	d00a      	beq.n	80085da <_scanf_float+0x392>
 80085c4:	1bda      	subs	r2, r3, r7
 80085c6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80085ca:	429e      	cmp	r6, r3
 80085cc:	bf28      	it	cs
 80085ce:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80085d2:	4922      	ldr	r1, [pc, #136]	@ (800865c <_scanf_float+0x414>)
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 f919 	bl	800880c <siprintf>
 80085da:	9901      	ldr	r1, [sp, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	4640      	mov	r0, r8
 80085e0:	f002 fc06 	bl	800adf0 <_strtod_r>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	6821      	ldr	r1, [r4, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f011 0f02 	tst.w	r1, #2
 80085ee:	ec57 6b10 	vmov	r6, r7, d0
 80085f2:	f103 0204 	add.w	r2, r3, #4
 80085f6:	d015      	beq.n	8008624 <_scanf_float+0x3dc>
 80085f8:	9903      	ldr	r1, [sp, #12]
 80085fa:	600a      	str	r2, [r1, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	e9c3 6700 	strd	r6, r7, [r3]
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60e3      	str	r3, [r4, #12]
 8008608:	e7d0      	b.n	80085ac <_scanf_float+0x364>
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0e4      	beq.n	80085da <_scanf_float+0x392>
 8008610:	9905      	ldr	r1, [sp, #20]
 8008612:	230a      	movs	r3, #10
 8008614:	3101      	adds	r1, #1
 8008616:	4640      	mov	r0, r8
 8008618:	f002 fc6a 	bl	800aef0 <_strtol_r>
 800861c:	9b04      	ldr	r3, [sp, #16]
 800861e:	9e05      	ldr	r6, [sp, #20]
 8008620:	1ac2      	subs	r2, r0, r3
 8008622:	e7d0      	b.n	80085c6 <_scanf_float+0x37e>
 8008624:	f011 0f04 	tst.w	r1, #4
 8008628:	9903      	ldr	r1, [sp, #12]
 800862a:	600a      	str	r2, [r1, #0]
 800862c:	d1e6      	bne.n	80085fc <_scanf_float+0x3b4>
 800862e:	681d      	ldr	r5, [r3, #0]
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f8 fa78 	bl	8000b2c <__aeabi_dcmpun>
 800863c:	b128      	cbz	r0, 800864a <_scanf_float+0x402>
 800863e:	4808      	ldr	r0, [pc, #32]	@ (8008660 <_scanf_float+0x418>)
 8008640:	f000 f9ca 	bl	80089d8 <nanf>
 8008644:	ed85 0a00 	vstr	s0, [r5]
 8008648:	e7db      	b.n	8008602 <_scanf_float+0x3ba>
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	f7f8 facb 	bl	8000be8 <__aeabi_d2f>
 8008652:	6028      	str	r0, [r5, #0]
 8008654:	e7d5      	b.n	8008602 <_scanf_float+0x3ba>
 8008656:	2700      	movs	r7, #0
 8008658:	e62e      	b.n	80082b8 <_scanf_float+0x70>
 800865a:	bf00      	nop
 800865c:	0800c178 	.word	0x0800c178
 8008660:	0800c2b9 	.word	0x0800c2b9

08008664 <std>:
 8008664:	2300      	movs	r3, #0
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	e9c0 3300 	strd	r3, r3, [r0]
 800866e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008672:	6083      	str	r3, [r0, #8]
 8008674:	8181      	strh	r1, [r0, #12]
 8008676:	6643      	str	r3, [r0, #100]	@ 0x64
 8008678:	81c2      	strh	r2, [r0, #14]
 800867a:	6183      	str	r3, [r0, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	2208      	movs	r2, #8
 8008680:	305c      	adds	r0, #92	@ 0x5c
 8008682:	f000 f928 	bl	80088d6 <memset>
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <std+0x58>)
 8008688:	6263      	str	r3, [r4, #36]	@ 0x24
 800868a:	4b0d      	ldr	r3, [pc, #52]	@ (80086c0 <std+0x5c>)
 800868c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800868e:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <std+0x60>)
 8008690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008692:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <std+0x64>)
 8008694:	6323      	str	r3, [r4, #48]	@ 0x30
 8008696:	4b0d      	ldr	r3, [pc, #52]	@ (80086cc <std+0x68>)
 8008698:	6224      	str	r4, [r4, #32]
 800869a:	429c      	cmp	r4, r3
 800869c:	d006      	beq.n	80086ac <std+0x48>
 800869e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086a2:	4294      	cmp	r4, r2
 80086a4:	d002      	beq.n	80086ac <std+0x48>
 80086a6:	33d0      	adds	r3, #208	@ 0xd0
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d105      	bne.n	80086b8 <std+0x54>
 80086ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b4:	f000 b98c 	b.w	80089d0 <__retarget_lock_init_recursive>
 80086b8:	bd10      	pop	{r4, pc}
 80086ba:	bf00      	nop
 80086bc:	08008851 	.word	0x08008851
 80086c0:	08008873 	.word	0x08008873
 80086c4:	080088ab 	.word	0x080088ab
 80086c8:	080088cf 	.word	0x080088cf
 80086cc:	200004a0 	.word	0x200004a0

080086d0 <stdio_exit_handler>:
 80086d0:	4a02      	ldr	r2, [pc, #8]	@ (80086dc <stdio_exit_handler+0xc>)
 80086d2:	4903      	ldr	r1, [pc, #12]	@ (80086e0 <stdio_exit_handler+0x10>)
 80086d4:	4803      	ldr	r0, [pc, #12]	@ (80086e4 <stdio_exit_handler+0x14>)
 80086d6:	f000 b869 	b.w	80087ac <_fwalk_sglue>
 80086da:	bf00      	nop
 80086dc:	20000010 	.word	0x20000010
 80086e0:	0800b531 	.word	0x0800b531
 80086e4:	20000020 	.word	0x20000020

080086e8 <cleanup_stdio>:
 80086e8:	6841      	ldr	r1, [r0, #4]
 80086ea:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <cleanup_stdio+0x34>)
 80086ec:	4299      	cmp	r1, r3
 80086ee:	b510      	push	{r4, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	d001      	beq.n	80086f8 <cleanup_stdio+0x10>
 80086f4:	f002 ff1c 	bl	800b530 <_fflush_r>
 80086f8:	68a1      	ldr	r1, [r4, #8]
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <cleanup_stdio+0x38>)
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <cleanup_stdio+0x1e>
 8008700:	4620      	mov	r0, r4
 8008702:	f002 ff15 	bl	800b530 <_fflush_r>
 8008706:	68e1      	ldr	r1, [r4, #12]
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <cleanup_stdio+0x3c>)
 800870a:	4299      	cmp	r1, r3
 800870c:	d004      	beq.n	8008718 <cleanup_stdio+0x30>
 800870e:	4620      	mov	r0, r4
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008714:	f002 bf0c 	b.w	800b530 <_fflush_r>
 8008718:	bd10      	pop	{r4, pc}
 800871a:	bf00      	nop
 800871c:	200004a0 	.word	0x200004a0
 8008720:	20000508 	.word	0x20000508
 8008724:	20000570 	.word	0x20000570

08008728 <global_stdio_init.part.0>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <global_stdio_init.part.0+0x30>)
 800872c:	4c0b      	ldr	r4, [pc, #44]	@ (800875c <global_stdio_init.part.0+0x34>)
 800872e:	4a0c      	ldr	r2, [pc, #48]	@ (8008760 <global_stdio_init.part.0+0x38>)
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	4620      	mov	r0, r4
 8008734:	2200      	movs	r2, #0
 8008736:	2104      	movs	r1, #4
 8008738:	f7ff ff94 	bl	8008664 <std>
 800873c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008740:	2201      	movs	r2, #1
 8008742:	2109      	movs	r1, #9
 8008744:	f7ff ff8e 	bl	8008664 <std>
 8008748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800874c:	2202      	movs	r2, #2
 800874e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008752:	2112      	movs	r1, #18
 8008754:	f7ff bf86 	b.w	8008664 <std>
 8008758:	200005d8 	.word	0x200005d8
 800875c:	200004a0 	.word	0x200004a0
 8008760:	080086d1 	.word	0x080086d1

08008764 <__sfp_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	@ (800876c <__sfp_lock_acquire+0x8>)
 8008766:	f000 b934 	b.w	80089d2 <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	200005e1 	.word	0x200005e1

08008770 <__sfp_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	@ (8008778 <__sfp_lock_release+0x8>)
 8008772:	f000 b92f 	b.w	80089d4 <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	200005e1 	.word	0x200005e1

0800877c <__sinit>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f7ff fff0 	bl	8008764 <__sfp_lock_acquire>
 8008784:	6a23      	ldr	r3, [r4, #32]
 8008786:	b11b      	cbz	r3, 8008790 <__sinit+0x14>
 8008788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878c:	f7ff bff0 	b.w	8008770 <__sfp_lock_release>
 8008790:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <__sinit+0x28>)
 8008792:	6223      	str	r3, [r4, #32]
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <__sinit+0x2c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f5      	bne.n	8008788 <__sinit+0xc>
 800879c:	f7ff ffc4 	bl	8008728 <global_stdio_init.part.0>
 80087a0:	e7f2      	b.n	8008788 <__sinit+0xc>
 80087a2:	bf00      	nop
 80087a4:	080086e9 	.word	0x080086e9
 80087a8:	200005d8 	.word	0x200005d8

080087ac <_fwalk_sglue>:
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b0:	4607      	mov	r7, r0
 80087b2:	4688      	mov	r8, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	2600      	movs	r6, #0
 80087b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087bc:	f1b9 0901 	subs.w	r9, r9, #1
 80087c0:	d505      	bpl.n	80087ce <_fwalk_sglue+0x22>
 80087c2:	6824      	ldr	r4, [r4, #0]
 80087c4:	2c00      	cmp	r4, #0
 80087c6:	d1f7      	bne.n	80087b8 <_fwalk_sglue+0xc>
 80087c8:	4630      	mov	r0, r6
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d907      	bls.n	80087e4 <_fwalk_sglue+0x38>
 80087d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d8:	3301      	adds	r3, #1
 80087da:	d003      	beq.n	80087e4 <_fwalk_sglue+0x38>
 80087dc:	4629      	mov	r1, r5
 80087de:	4638      	mov	r0, r7
 80087e0:	47c0      	blx	r8
 80087e2:	4306      	orrs	r6, r0
 80087e4:	3568      	adds	r5, #104	@ 0x68
 80087e6:	e7e9      	b.n	80087bc <_fwalk_sglue+0x10>

080087e8 <iprintf>:
 80087e8:	b40f      	push	{r0, r1, r2, r3}
 80087ea:	b507      	push	{r0, r1, r2, lr}
 80087ec:	4906      	ldr	r1, [pc, #24]	@ (8008808 <iprintf+0x20>)
 80087ee:	ab04      	add	r3, sp, #16
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f6:	6881      	ldr	r1, [r0, #8]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	f002 fcfd 	bl	800b1f8 <_vfiprintf_r>
 80087fe:	b003      	add	sp, #12
 8008800:	f85d eb04 	ldr.w	lr, [sp], #4
 8008804:	b004      	add	sp, #16
 8008806:	4770      	bx	lr
 8008808:	2000001c 	.word	0x2000001c

0800880c <siprintf>:
 800880c:	b40e      	push	{r1, r2, r3}
 800880e:	b510      	push	{r4, lr}
 8008810:	b09d      	sub	sp, #116	@ 0x74
 8008812:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008814:	9002      	str	r0, [sp, #8]
 8008816:	9006      	str	r0, [sp, #24]
 8008818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800881c:	480a      	ldr	r0, [pc, #40]	@ (8008848 <siprintf+0x3c>)
 800881e:	9107      	str	r1, [sp, #28]
 8008820:	9104      	str	r1, [sp, #16]
 8008822:	490a      	ldr	r1, [pc, #40]	@ (800884c <siprintf+0x40>)
 8008824:	f853 2b04 	ldr.w	r2, [r3], #4
 8008828:	9105      	str	r1, [sp, #20]
 800882a:	2400      	movs	r4, #0
 800882c:	a902      	add	r1, sp, #8
 800882e:	6800      	ldr	r0, [r0, #0]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008834:	f002 fbba 	bl	800afac <_svfiprintf_r>
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	701c      	strb	r4, [r3, #0]
 800883c:	b01d      	add	sp, #116	@ 0x74
 800883e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008842:	b003      	add	sp, #12
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	2000001c 	.word	0x2000001c
 800884c:	ffff0208 	.word	0xffff0208

08008850 <__sread>:
 8008850:	b510      	push	{r4, lr}
 8008852:	460c      	mov	r4, r1
 8008854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008858:	f000 f86c 	bl	8008934 <_read_r>
 800885c:	2800      	cmp	r0, #0
 800885e:	bfab      	itete	ge
 8008860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008862:	89a3      	ldrhlt	r3, [r4, #12]
 8008864:	181b      	addge	r3, r3, r0
 8008866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800886a:	bfac      	ite	ge
 800886c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800886e:	81a3      	strhlt	r3, [r4, #12]
 8008870:	bd10      	pop	{r4, pc}

08008872 <__swrite>:
 8008872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	461f      	mov	r7, r3
 8008878:	898b      	ldrh	r3, [r1, #12]
 800887a:	05db      	lsls	r3, r3, #23
 800887c:	4605      	mov	r5, r0
 800887e:	460c      	mov	r4, r1
 8008880:	4616      	mov	r6, r2
 8008882:	d505      	bpl.n	8008890 <__swrite+0x1e>
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	2302      	movs	r3, #2
 800888a:	2200      	movs	r2, #0
 800888c:	f000 f840 	bl	8008910 <_lseek_r>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800889a:	81a3      	strh	r3, [r4, #12]
 800889c:	4632      	mov	r2, r6
 800889e:	463b      	mov	r3, r7
 80088a0:	4628      	mov	r0, r5
 80088a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	f000 b857 	b.w	8008958 <_write_r>

080088aa <__sseek>:
 80088aa:	b510      	push	{r4, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b2:	f000 f82d 	bl	8008910 <_lseek_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	bf15      	itete	ne
 80088bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088c6:	81a3      	strheq	r3, [r4, #12]
 80088c8:	bf18      	it	ne
 80088ca:	81a3      	strhne	r3, [r4, #12]
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__sclose>:
 80088ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d2:	f000 b80d 	b.w	80088f0 <_close_r>

080088d6 <memset>:
 80088d6:	4402      	add	r2, r0
 80088d8:	4603      	mov	r3, r0
 80088da:	4293      	cmp	r3, r2
 80088dc:	d100      	bne.n	80088e0 <memset+0xa>
 80088de:	4770      	bx	lr
 80088e0:	f803 1b01 	strb.w	r1, [r3], #1
 80088e4:	e7f9      	b.n	80088da <memset+0x4>
	...

080088e8 <_localeconv_r>:
 80088e8:	4800      	ldr	r0, [pc, #0]	@ (80088ec <_localeconv_r+0x4>)
 80088ea:	4770      	bx	lr
 80088ec:	2000015c 	.word	0x2000015c

080088f0 <_close_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d06      	ldr	r5, [pc, #24]	@ (800890c <_close_r+0x1c>)
 80088f4:	2300      	movs	r3, #0
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	f7f9 fb14 	bl	8001f28 <_close>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_close_r+0x1a>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_close_r+0x1a>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	200005dc 	.word	0x200005dc

08008910 <_lseek_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_lseek_r+0x20>)
 8008914:	4604      	mov	r4, r0
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	2200      	movs	r2, #0
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f9 fb29 	bl	8001f76 <_lseek>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_lseek_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_lseek_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	200005dc 	.word	0x200005dc

08008934 <_read_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	@ (8008954 <_read_r+0x20>)
 8008938:	4604      	mov	r4, r0
 800893a:	4608      	mov	r0, r1
 800893c:	4611      	mov	r1, r2
 800893e:	2200      	movs	r2, #0
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f9 fad3 	bl	8001eee <_read>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_read_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_read_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	200005dc 	.word	0x200005dc

08008958 <_write_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	@ (8008978 <_write_r+0x20>)
 800895c:	4604      	mov	r4, r0
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	2200      	movs	r2, #0
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f7f8 fb5a 	bl	8001020 <_write>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_write_r+0x1e>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_write_r+0x1e>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200005dc 	.word	0x200005dc

0800897c <__errno>:
 800897c:	4b01      	ldr	r3, [pc, #4]	@ (8008984 <__errno+0x8>)
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	2000001c 	.word	0x2000001c

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4d0d      	ldr	r5, [pc, #52]	@ (80089c0 <__libc_init_array+0x38>)
 800898c:	4c0d      	ldr	r4, [pc, #52]	@ (80089c4 <__libc_init_array+0x3c>)
 800898e:	1b64      	subs	r4, r4, r5
 8008990:	10a4      	asrs	r4, r4, #2
 8008992:	2600      	movs	r6, #0
 8008994:	42a6      	cmp	r6, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	4d0b      	ldr	r5, [pc, #44]	@ (80089c8 <__libc_init_array+0x40>)
 800899a:	4c0c      	ldr	r4, [pc, #48]	@ (80089cc <__libc_init_array+0x44>)
 800899c:	f003 fb7a 	bl	800c094 <_init>
 80089a0:	1b64      	subs	r4, r4, r5
 80089a2:	10a4      	asrs	r4, r4, #2
 80089a4:	2600      	movs	r6, #0
 80089a6:	42a6      	cmp	r6, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b0:	4798      	blx	r3
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ba:	4798      	blx	r3
 80089bc:	3601      	adds	r6, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	0800c574 	.word	0x0800c574
 80089c4:	0800c574 	.word	0x0800c574
 80089c8:	0800c574 	.word	0x0800c574
 80089cc:	0800c578 	.word	0x0800c578

080089d0 <__retarget_lock_init_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <__retarget_lock_acquire_recursive>:
 80089d2:	4770      	bx	lr

080089d4 <__retarget_lock_release_recursive>:
 80089d4:	4770      	bx	lr
	...

080089d8 <nanf>:
 80089d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089e0 <nanf+0x8>
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	7fc00000 	.word	0x7fc00000

080089e4 <quorem>:
 80089e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	6903      	ldr	r3, [r0, #16]
 80089ea:	690c      	ldr	r4, [r1, #16]
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	4607      	mov	r7, r0
 80089f0:	db7e      	blt.n	8008af0 <quorem+0x10c>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	f101 0814 	add.w	r8, r1, #20
 80089f8:	00a3      	lsls	r3, r4, #2
 80089fa:	f100 0514 	add.w	r5, r0, #20
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	429a      	cmp	r2, r3
 8008a12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a16:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a1a:	d32e      	bcc.n	8008a7a <quorem+0x96>
 8008a1c:	f04f 0a00 	mov.w	sl, #0
 8008a20:	46c4      	mov	ip, r8
 8008a22:	46ae      	mov	lr, r5
 8008a24:	46d3      	mov	fp, sl
 8008a26:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a2a:	b298      	uxth	r0, r3
 8008a2c:	fb06 a000 	mla	r0, r6, r0, sl
 8008a30:	0c02      	lsrs	r2, r0, #16
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	fb06 2303 	mla	r3, r6, r3, r2
 8008a38:	f8de 2000 	ldr.w	r2, [lr]
 8008a3c:	b280      	uxth	r0, r0
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	1a12      	subs	r2, r2, r0
 8008a42:	445a      	add	r2, fp
 8008a44:	f8de 0000 	ldr.w	r0, [lr]
 8008a48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a56:	b292      	uxth	r2, r2
 8008a58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a5c:	45e1      	cmp	r9, ip
 8008a5e:	f84e 2b04 	str.w	r2, [lr], #4
 8008a62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a66:	d2de      	bcs.n	8008a26 <quorem+0x42>
 8008a68:	9b00      	ldr	r3, [sp, #0]
 8008a6a:	58eb      	ldr	r3, [r5, r3]
 8008a6c:	b92b      	cbnz	r3, 8008a7a <quorem+0x96>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	3b04      	subs	r3, #4
 8008a72:	429d      	cmp	r5, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	d32f      	bcc.n	8008ad8 <quorem+0xf4>
 8008a78:	613c      	str	r4, [r7, #16]
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f001 f9c8 	bl	8009e10 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	db25      	blt.n	8008ad0 <quorem+0xec>
 8008a84:	4629      	mov	r1, r5
 8008a86:	2000      	movs	r0, #0
 8008a88:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a8c:	f8d1 c000 	ldr.w	ip, [r1]
 8008a90:	fa1f fe82 	uxth.w	lr, r2
 8008a94:	fa1f f38c 	uxth.w	r3, ip
 8008a98:	eba3 030e 	sub.w	r3, r3, lr
 8008a9c:	4403      	add	r3, r0
 8008a9e:	0c12      	lsrs	r2, r2, #16
 8008aa0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008aa4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aae:	45c1      	cmp	r9, r8
 8008ab0:	f841 3b04 	str.w	r3, [r1], #4
 8008ab4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ab8:	d2e6      	bcs.n	8008a88 <quorem+0xa4>
 8008aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ac2:	b922      	cbnz	r2, 8008ace <quorem+0xea>
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	d30b      	bcc.n	8008ae4 <quorem+0x100>
 8008acc:	613c      	str	r4, [r7, #16]
 8008ace:	3601      	adds	r6, #1
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	b003      	add	sp, #12
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	3b04      	subs	r3, #4
 8008adc:	2a00      	cmp	r2, #0
 8008ade:	d1cb      	bne.n	8008a78 <quorem+0x94>
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	e7c6      	b.n	8008a72 <quorem+0x8e>
 8008ae4:	6812      	ldr	r2, [r2, #0]
 8008ae6:	3b04      	subs	r3, #4
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	d1ef      	bne.n	8008acc <quorem+0xe8>
 8008aec:	3c01      	subs	r4, #1
 8008aee:	e7ea      	b.n	8008ac6 <quorem+0xe2>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e7ee      	b.n	8008ad2 <quorem+0xee>
 8008af4:	0000      	movs	r0, r0
	...

08008af8 <_dtoa_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	69c7      	ldr	r7, [r0, #28]
 8008afe:	b097      	sub	sp, #92	@ 0x5c
 8008b00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b04:	ec55 4b10 	vmov	r4, r5, d0
 8008b08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008b0a:	9107      	str	r1, [sp, #28]
 8008b0c:	4681      	mov	r9, r0
 8008b0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b10:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b12:	b97f      	cbnz	r7, 8008b34 <_dtoa_r+0x3c>
 8008b14:	2010      	movs	r0, #16
 8008b16:	f000 fe09 	bl	800972c <malloc>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008b20:	b920      	cbnz	r0, 8008b2c <_dtoa_r+0x34>
 8008b22:	4ba9      	ldr	r3, [pc, #676]	@ (8008dc8 <_dtoa_r+0x2d0>)
 8008b24:	21ef      	movs	r1, #239	@ 0xef
 8008b26:	48a9      	ldr	r0, [pc, #676]	@ (8008dcc <_dtoa_r+0x2d4>)
 8008b28:	f002 fe12 	bl	800b750 <__assert_func>
 8008b2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b30:	6007      	str	r7, [r0, #0]
 8008b32:	60c7      	str	r7, [r0, #12]
 8008b34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b38:	6819      	ldr	r1, [r3, #0]
 8008b3a:	b159      	cbz	r1, 8008b54 <_dtoa_r+0x5c>
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	604a      	str	r2, [r1, #4]
 8008b40:	2301      	movs	r3, #1
 8008b42:	4093      	lsls	r3, r2
 8008b44:	608b      	str	r3, [r1, #8]
 8008b46:	4648      	mov	r0, r9
 8008b48:	f000 fee6 	bl	8009918 <_Bfree>
 8008b4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	1e2b      	subs	r3, r5, #0
 8008b56:	bfb9      	ittee	lt
 8008b58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b5c:	9305      	strlt	r3, [sp, #20]
 8008b5e:	2300      	movge	r3, #0
 8008b60:	6033      	strge	r3, [r6, #0]
 8008b62:	9f05      	ldr	r7, [sp, #20]
 8008b64:	4b9a      	ldr	r3, [pc, #616]	@ (8008dd0 <_dtoa_r+0x2d8>)
 8008b66:	bfbc      	itt	lt
 8008b68:	2201      	movlt	r2, #1
 8008b6a:	6032      	strlt	r2, [r6, #0]
 8008b6c:	43bb      	bics	r3, r7
 8008b6e:	d112      	bne.n	8008b96 <_dtoa_r+0x9e>
 8008b70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b7c:	4323      	orrs	r3, r4
 8008b7e:	f000 855a 	beq.w	8009636 <_dtoa_r+0xb3e>
 8008b82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008de4 <_dtoa_r+0x2ec>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 855c 	beq.w	8009646 <_dtoa_r+0xb4e>
 8008b8e:	f10a 0303 	add.w	r3, sl, #3
 8008b92:	f000 bd56 	b.w	8009642 <_dtoa_r+0xb4a>
 8008b96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	ec51 0b17 	vmov	r0, r1, d7
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008ba6:	f7f7 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008baa:	4680      	mov	r8, r0
 8008bac:	b158      	cbz	r0, 8008bc6 <_dtoa_r+0xce>
 8008bae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bb6:	b113      	cbz	r3, 8008bbe <_dtoa_r+0xc6>
 8008bb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008bba:	4b86      	ldr	r3, [pc, #536]	@ (8008dd4 <_dtoa_r+0x2dc>)
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008de8 <_dtoa_r+0x2f0>
 8008bc2:	f000 bd40 	b.w	8009646 <_dtoa_r+0xb4e>
 8008bc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008bca:	aa14      	add	r2, sp, #80	@ 0x50
 8008bcc:	a915      	add	r1, sp, #84	@ 0x54
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f001 fa3e 	bl	800a050 <__d2b>
 8008bd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008bd8:	9002      	str	r0, [sp, #8]
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d078      	beq.n	8008cd0 <_dtoa_r+0x1d8>
 8008bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008bec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008bf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008bf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4b76      	ldr	r3, [pc, #472]	@ (8008dd8 <_dtoa_r+0x2e0>)
 8008bfe:	f7f7 fb43 	bl	8000288 <__aeabi_dsub>
 8008c02:	a36b      	add	r3, pc, #428	@ (adr r3, 8008db0 <_dtoa_r+0x2b8>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008db8 <_dtoa_r+0x2c0>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fb3b 	bl	800028c <__adddf3>
 8008c16:	4604      	mov	r4, r0
 8008c18:	4630      	mov	r0, r6
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	f7f7 fc82 	bl	8000524 <__aeabi_i2d>
 8008c20:	a367      	add	r3, pc, #412	@ (adr r3, 8008dc0 <_dtoa_r+0x2c8>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb2b 	bl	800028c <__adddf3>
 8008c36:	4604      	mov	r4, r0
 8008c38:	460d      	mov	r5, r1
 8008c3a:	f7f7 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4607      	mov	r7, r0
 8008c42:	2300      	movs	r3, #0
 8008c44:	4620      	mov	r0, r4
 8008c46:	4629      	mov	r1, r5
 8008c48:	f7f7 ff48 	bl	8000adc <__aeabi_dcmplt>
 8008c4c:	b140      	cbz	r0, 8008c60 <_dtoa_r+0x168>
 8008c4e:	4638      	mov	r0, r7
 8008c50:	f7f7 fc68 	bl	8000524 <__aeabi_i2d>
 8008c54:	4622      	mov	r2, r4
 8008c56:	462b      	mov	r3, r5
 8008c58:	f7f7 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c5c:	b900      	cbnz	r0, 8008c60 <_dtoa_r+0x168>
 8008c5e:	3f01      	subs	r7, #1
 8008c60:	2f16      	cmp	r7, #22
 8008c62:	d852      	bhi.n	8008d0a <_dtoa_r+0x212>
 8008c64:	4b5d      	ldr	r3, [pc, #372]	@ (8008ddc <_dtoa_r+0x2e4>)
 8008c66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c72:	f7f7 ff33 	bl	8000adc <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d049      	beq.n	8008d0e <_dtoa_r+0x216>
 8008c7a:	3f01      	subs	r7, #1
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c82:	1b9b      	subs	r3, r3, r6
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	bf45      	ittet	mi
 8008c88:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c8c:	9300      	strmi	r3, [sp, #0]
 8008c8e:	2300      	movpl	r3, #0
 8008c90:	2300      	movmi	r3, #0
 8008c92:	9206      	str	r2, [sp, #24]
 8008c94:	bf54      	ite	pl
 8008c96:	9300      	strpl	r3, [sp, #0]
 8008c98:	9306      	strmi	r3, [sp, #24]
 8008c9a:	2f00      	cmp	r7, #0
 8008c9c:	db39      	blt.n	8008d12 <_dtoa_r+0x21a>
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	970d      	str	r7, [sp, #52]	@ 0x34
 8008ca2:	443b      	add	r3, r7
 8008ca4:	9306      	str	r3, [sp, #24]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9308      	str	r3, [sp, #32]
 8008caa:	9b07      	ldr	r3, [sp, #28]
 8008cac:	2b09      	cmp	r3, #9
 8008cae:	d863      	bhi.n	8008d78 <_dtoa_r+0x280>
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	bfc4      	itt	gt
 8008cb4:	3b04      	subgt	r3, #4
 8008cb6:	9307      	strgt	r3, [sp, #28]
 8008cb8:	9b07      	ldr	r3, [sp, #28]
 8008cba:	f1a3 0302 	sub.w	r3, r3, #2
 8008cbe:	bfcc      	ite	gt
 8008cc0:	2400      	movgt	r4, #0
 8008cc2:	2401      	movle	r4, #1
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d863      	bhi.n	8008d90 <_dtoa_r+0x298>
 8008cc8:	e8df f003 	tbb	[pc, r3]
 8008ccc:	2b375452 	.word	0x2b375452
 8008cd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008cd4:	441e      	add	r6, r3
 8008cd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	bfc1      	itttt	gt
 8008cde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ce2:	409f      	lslgt	r7, r3
 8008ce4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ce8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008cec:	bfd6      	itet	le
 8008cee:	f1c3 0320 	rsble	r3, r3, #32
 8008cf2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008cf6:	fa04 f003 	lslle.w	r0, r4, r3
 8008cfa:	f7f7 fc03 	bl	8000504 <__aeabi_ui2d>
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d04:	3e01      	subs	r6, #1
 8008d06:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d08:	e776      	b.n	8008bf8 <_dtoa_r+0x100>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e7b7      	b.n	8008c7e <_dtoa_r+0x186>
 8008d0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008d10:	e7b6      	b.n	8008c80 <_dtoa_r+0x188>
 8008d12:	9b00      	ldr	r3, [sp, #0]
 8008d14:	1bdb      	subs	r3, r3, r7
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	427b      	negs	r3, r7
 8008d1a:	9308      	str	r3, [sp, #32]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d20:	e7c3      	b.n	8008caa <_dtoa_r+0x1b2>
 8008d22:	2301      	movs	r3, #1
 8008d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d28:	eb07 0b03 	add.w	fp, r7, r3
 8008d2c:	f10b 0301 	add.w	r3, fp, #1
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	9303      	str	r3, [sp, #12]
 8008d34:	bfb8      	it	lt
 8008d36:	2301      	movlt	r3, #1
 8008d38:	e006      	b.n	8008d48 <_dtoa_r+0x250>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dd28      	ble.n	8008d96 <_dtoa_r+0x29e>
 8008d44:	469b      	mov	fp, r3
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	2204      	movs	r2, #4
 8008d50:	f102 0514 	add.w	r5, r2, #20
 8008d54:	429d      	cmp	r5, r3
 8008d56:	d926      	bls.n	8008da6 <_dtoa_r+0x2ae>
 8008d58:	6041      	str	r1, [r0, #4]
 8008d5a:	4648      	mov	r0, r9
 8008d5c:	f000 fd9c 	bl	8009898 <_Balloc>
 8008d60:	4682      	mov	sl, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d142      	bne.n	8008dec <_dtoa_r+0x2f4>
 8008d66:	4b1e      	ldr	r3, [pc, #120]	@ (8008de0 <_dtoa_r+0x2e8>)
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d6e:	e6da      	b.n	8008b26 <_dtoa_r+0x2e>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e7e3      	b.n	8008d3c <_dtoa_r+0x244>
 8008d74:	2300      	movs	r3, #0
 8008d76:	e7d5      	b.n	8008d24 <_dtoa_r+0x22c>
 8008d78:	2401      	movs	r4, #1
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d80:	f04f 3bff 	mov.w	fp, #4294967295
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d8a:	2312      	movs	r3, #18
 8008d8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d8e:	e7db      	b.n	8008d48 <_dtoa_r+0x250>
 8008d90:	2301      	movs	r3, #1
 8008d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d94:	e7f4      	b.n	8008d80 <_dtoa_r+0x288>
 8008d96:	f04f 0b01 	mov.w	fp, #1
 8008d9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d9e:	465b      	mov	r3, fp
 8008da0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008da4:	e7d0      	b.n	8008d48 <_dtoa_r+0x250>
 8008da6:	3101      	adds	r1, #1
 8008da8:	0052      	lsls	r2, r2, #1
 8008daa:	e7d1      	b.n	8008d50 <_dtoa_r+0x258>
 8008dac:	f3af 8000 	nop.w
 8008db0:	636f4361 	.word	0x636f4361
 8008db4:	3fd287a7 	.word	0x3fd287a7
 8008db8:	8b60c8b3 	.word	0x8b60c8b3
 8008dbc:	3fc68a28 	.word	0x3fc68a28
 8008dc0:	509f79fb 	.word	0x509f79fb
 8008dc4:	3fd34413 	.word	0x3fd34413
 8008dc8:	0800c18a 	.word	0x0800c18a
 8008dcc:	0800c1a1 	.word	0x0800c1a1
 8008dd0:	7ff00000 	.word	0x7ff00000
 8008dd4:	0800c155 	.word	0x0800c155
 8008dd8:	3ff80000 	.word	0x3ff80000
 8008ddc:	0800c350 	.word	0x0800c350
 8008de0:	0800c1f9 	.word	0x0800c1f9
 8008de4:	0800c186 	.word	0x0800c186
 8008de8:	0800c154 	.word	0x0800c154
 8008dec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008df0:	6018      	str	r0, [r3, #0]
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	2b0e      	cmp	r3, #14
 8008df6:	f200 80a1 	bhi.w	8008f3c <_dtoa_r+0x444>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	f000 809e 	beq.w	8008f3c <_dtoa_r+0x444>
 8008e00:	2f00      	cmp	r7, #0
 8008e02:	dd33      	ble.n	8008e6c <_dtoa_r+0x374>
 8008e04:	4b9c      	ldr	r3, [pc, #624]	@ (8009078 <_dtoa_r+0x580>)
 8008e06:	f007 020f 	and.w	r2, r7, #15
 8008e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e0e:	ed93 7b00 	vldr	d7, [r3]
 8008e12:	05f8      	lsls	r0, r7, #23
 8008e14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008e18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e1c:	d516      	bpl.n	8008e4c <_dtoa_r+0x354>
 8008e1e:	4b97      	ldr	r3, [pc, #604]	@ (800907c <_dtoa_r+0x584>)
 8008e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e28:	f7f7 fd10 	bl	800084c <__aeabi_ddiv>
 8008e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e30:	f004 040f 	and.w	r4, r4, #15
 8008e34:	2603      	movs	r6, #3
 8008e36:	4d91      	ldr	r5, [pc, #580]	@ (800907c <_dtoa_r+0x584>)
 8008e38:	b954      	cbnz	r4, 8008e50 <_dtoa_r+0x358>
 8008e3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e42:	f7f7 fd03 	bl	800084c <__aeabi_ddiv>
 8008e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e4a:	e028      	b.n	8008e9e <_dtoa_r+0x3a6>
 8008e4c:	2602      	movs	r6, #2
 8008e4e:	e7f2      	b.n	8008e36 <_dtoa_r+0x33e>
 8008e50:	07e1      	lsls	r1, r4, #31
 8008e52:	d508      	bpl.n	8008e66 <_dtoa_r+0x36e>
 8008e54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e5c:	f7f7 fbcc 	bl	80005f8 <__aeabi_dmul>
 8008e60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e64:	3601      	adds	r6, #1
 8008e66:	1064      	asrs	r4, r4, #1
 8008e68:	3508      	adds	r5, #8
 8008e6a:	e7e5      	b.n	8008e38 <_dtoa_r+0x340>
 8008e6c:	f000 80af 	beq.w	8008fce <_dtoa_r+0x4d6>
 8008e70:	427c      	negs	r4, r7
 8008e72:	4b81      	ldr	r3, [pc, #516]	@ (8009078 <_dtoa_r+0x580>)
 8008e74:	4d81      	ldr	r5, [pc, #516]	@ (800907c <_dtoa_r+0x584>)
 8008e76:	f004 020f 	and.w	r2, r4, #15
 8008e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e86:	f7f7 fbb7 	bl	80005f8 <__aeabi_dmul>
 8008e8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8e:	1124      	asrs	r4, r4, #4
 8008e90:	2300      	movs	r3, #0
 8008e92:	2602      	movs	r6, #2
 8008e94:	2c00      	cmp	r4, #0
 8008e96:	f040 808f 	bne.w	8008fb8 <_dtoa_r+0x4c0>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1d3      	bne.n	8008e46 <_dtoa_r+0x34e>
 8008e9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ea0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8094 	beq.w	8008fd2 <_dtoa_r+0x4da>
 8008eaa:	4b75      	ldr	r3, [pc, #468]	@ (8009080 <_dtoa_r+0x588>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 fe13 	bl	8000adc <__aeabi_dcmplt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f000 808b 	beq.w	8008fd2 <_dtoa_r+0x4da>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 8087 	beq.w	8008fd2 <_dtoa_r+0x4da>
 8008ec4:	f1bb 0f00 	cmp.w	fp, #0
 8008ec8:	dd34      	ble.n	8008f34 <_dtoa_r+0x43c>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4b6d      	ldr	r3, [pc, #436]	@ (8009084 <_dtoa_r+0x58c>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7f7 fb91 	bl	80005f8 <__aeabi_dmul>
 8008ed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eda:	f107 38ff 	add.w	r8, r7, #4294967295
 8008ede:	3601      	adds	r6, #1
 8008ee0:	465c      	mov	r4, fp
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7f7 fb1e 	bl	8000524 <__aeabi_i2d>
 8008ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	4b65      	ldr	r3, [pc, #404]	@ (8009088 <_dtoa_r+0x590>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 f9ca 	bl	800028c <__adddf3>
 8008ef8:	4605      	mov	r5, r0
 8008efa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d16a      	bne.n	8008fd8 <_dtoa_r+0x4e0>
 8008f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f06:	4b61      	ldr	r3, [pc, #388]	@ (800908c <_dtoa_r+0x594>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f7f7 f9bd 	bl	8000288 <__aeabi_dsub>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f16:	462a      	mov	r2, r5
 8008f18:	4633      	mov	r3, r6
 8008f1a:	f7f7 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 8298 	bne.w	8009454 <_dtoa_r+0x95c>
 8008f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f28:	462a      	mov	r2, r5
 8008f2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f2e:	f7f7 fdd5 	bl	8000adc <__aeabi_dcmplt>
 8008f32:	bb38      	cbnz	r0, 8008f84 <_dtoa_r+0x48c>
 8008f34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008f38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f2c0 8157 	blt.w	80091f2 <_dtoa_r+0x6fa>
 8008f44:	2f0e      	cmp	r7, #14
 8008f46:	f300 8154 	bgt.w	80091f2 <_dtoa_r+0x6fa>
 8008f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8009078 <_dtoa_r+0x580>)
 8008f4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f50:	ed93 7b00 	vldr	d7, [r3]
 8008f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	ed8d 7b00 	vstr	d7, [sp]
 8008f5c:	f280 80e5 	bge.w	800912a <_dtoa_r+0x632>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f300 80e1 	bgt.w	800912a <_dtoa_r+0x632>
 8008f68:	d10c      	bne.n	8008f84 <_dtoa_r+0x48c>
 8008f6a:	4b48      	ldr	r3, [pc, #288]	@ (800908c <_dtoa_r+0x594>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	ec51 0b17 	vmov	r0, r1, d7
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f7a:	f7f7 fdc3 	bl	8000b04 <__aeabi_dcmpge>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f000 8266 	beq.w	8009450 <_dtoa_r+0x958>
 8008f84:	2400      	movs	r4, #0
 8008f86:	4625      	mov	r5, r4
 8008f88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f8a:	4656      	mov	r6, sl
 8008f8c:	ea6f 0803 	mvn.w	r8, r3
 8008f90:	2700      	movs	r7, #0
 8008f92:	4621      	mov	r1, r4
 8008f94:	4648      	mov	r0, r9
 8008f96:	f000 fcbf 	bl	8009918 <_Bfree>
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	f000 80bd 	beq.w	800911a <_dtoa_r+0x622>
 8008fa0:	b12f      	cbz	r7, 8008fae <_dtoa_r+0x4b6>
 8008fa2:	42af      	cmp	r7, r5
 8008fa4:	d003      	beq.n	8008fae <_dtoa_r+0x4b6>
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4648      	mov	r0, r9
 8008faa:	f000 fcb5 	bl	8009918 <_Bfree>
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	f000 fcb1 	bl	8009918 <_Bfree>
 8008fb6:	e0b0      	b.n	800911a <_dtoa_r+0x622>
 8008fb8:	07e2      	lsls	r2, r4, #31
 8008fba:	d505      	bpl.n	8008fc8 <_dtoa_r+0x4d0>
 8008fbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	1064      	asrs	r4, r4, #1
 8008fca:	3508      	adds	r5, #8
 8008fcc:	e762      	b.n	8008e94 <_dtoa_r+0x39c>
 8008fce:	2602      	movs	r6, #2
 8008fd0:	e765      	b.n	8008e9e <_dtoa_r+0x3a6>
 8008fd2:	9c03      	ldr	r4, [sp, #12]
 8008fd4:	46b8      	mov	r8, r7
 8008fd6:	e784      	b.n	8008ee2 <_dtoa_r+0x3ea>
 8008fd8:	4b27      	ldr	r3, [pc, #156]	@ (8009078 <_dtoa_r+0x580>)
 8008fda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fe4:	4454      	add	r4, sl
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d054      	beq.n	8009094 <_dtoa_r+0x59c>
 8008fea:	4929      	ldr	r1, [pc, #164]	@ (8009090 <_dtoa_r+0x598>)
 8008fec:	2000      	movs	r0, #0
 8008fee:	f7f7 fc2d 	bl	800084c <__aeabi_ddiv>
 8008ff2:	4633      	mov	r3, r6
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	f7f7 f947 	bl	8000288 <__aeabi_dsub>
 8008ffa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ffe:	4656      	mov	r6, sl
 8009000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009004:	f7f7 fda8 	bl	8000b58 <__aeabi_d2iz>
 8009008:	4605      	mov	r5, r0
 800900a:	f7f7 fa8b 	bl	8000524 <__aeabi_i2d>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009016:	f7f7 f937 	bl	8000288 <__aeabi_dsub>
 800901a:	3530      	adds	r5, #48	@ 0x30
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009024:	f806 5b01 	strb.w	r5, [r6], #1
 8009028:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800902c:	f7f7 fd56 	bl	8000adc <__aeabi_dcmplt>
 8009030:	2800      	cmp	r0, #0
 8009032:	d172      	bne.n	800911a <_dtoa_r+0x622>
 8009034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009038:	4911      	ldr	r1, [pc, #68]	@ (8009080 <_dtoa_r+0x588>)
 800903a:	2000      	movs	r0, #0
 800903c:	f7f7 f924 	bl	8000288 <__aeabi_dsub>
 8009040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009044:	f7f7 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8009048:	2800      	cmp	r0, #0
 800904a:	f040 80b4 	bne.w	80091b6 <_dtoa_r+0x6be>
 800904e:	42a6      	cmp	r6, r4
 8009050:	f43f af70 	beq.w	8008f34 <_dtoa_r+0x43c>
 8009054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009058:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <_dtoa_r+0x58c>)
 800905a:	2200      	movs	r2, #0
 800905c:	f7f7 facc 	bl	80005f8 <__aeabi_dmul>
 8009060:	4b08      	ldr	r3, [pc, #32]	@ (8009084 <_dtoa_r+0x58c>)
 8009062:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009066:	2200      	movs	r2, #0
 8009068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800906c:	f7f7 fac4 	bl	80005f8 <__aeabi_dmul>
 8009070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009074:	e7c4      	b.n	8009000 <_dtoa_r+0x508>
 8009076:	bf00      	nop
 8009078:	0800c350 	.word	0x0800c350
 800907c:	0800c328 	.word	0x0800c328
 8009080:	3ff00000 	.word	0x3ff00000
 8009084:	40240000 	.word	0x40240000
 8009088:	401c0000 	.word	0x401c0000
 800908c:	40140000 	.word	0x40140000
 8009090:	3fe00000 	.word	0x3fe00000
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80090a2:	4656      	mov	r6, sl
 80090a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a8:	f7f7 fd56 	bl	8000b58 <__aeabi_d2iz>
 80090ac:	4605      	mov	r5, r0
 80090ae:	f7f7 fa39 	bl	8000524 <__aeabi_i2d>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ba:	f7f7 f8e5 	bl	8000288 <__aeabi_dsub>
 80090be:	3530      	adds	r5, #48	@ 0x30
 80090c0:	f806 5b01 	strb.w	r5, [r6], #1
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	d124      	bne.n	800911e <_dtoa_r+0x626>
 80090d4:	4baf      	ldr	r3, [pc, #700]	@ (8009394 <_dtoa_r+0x89c>)
 80090d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090da:	f7f7 f8d7 	bl	800028c <__adddf3>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e6:	f7f7 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d163      	bne.n	80091b6 <_dtoa_r+0x6be>
 80090ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090f2:	49a8      	ldr	r1, [pc, #672]	@ (8009394 <_dtoa_r+0x89c>)
 80090f4:	2000      	movs	r0, #0
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009102:	f7f7 fceb 	bl	8000adc <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f af14 	beq.w	8008f34 <_dtoa_r+0x43c>
 800910c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800910e:	1e73      	subs	r3, r6, #1
 8009110:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009112:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009116:	2b30      	cmp	r3, #48	@ 0x30
 8009118:	d0f8      	beq.n	800910c <_dtoa_r+0x614>
 800911a:	4647      	mov	r7, r8
 800911c:	e03b      	b.n	8009196 <_dtoa_r+0x69e>
 800911e:	4b9e      	ldr	r3, [pc, #632]	@ (8009398 <_dtoa_r+0x8a0>)
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009128:	e7bc      	b.n	80090a4 <_dtoa_r+0x5ac>
 800912a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800912e:	4656      	mov	r6, sl
 8009130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 fb88 	bl	800084c <__aeabi_ddiv>
 800913c:	f7f7 fd0c 	bl	8000b58 <__aeabi_d2iz>
 8009140:	4680      	mov	r8, r0
 8009142:	f7f7 f9ef 	bl	8000524 <__aeabi_i2d>
 8009146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800914a:	f7f7 fa55 	bl	80005f8 <__aeabi_dmul>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4620      	mov	r0, r4
 8009154:	4629      	mov	r1, r5
 8009156:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	f806 4b01 	strb.w	r4, [r6], #1
 8009162:	9d03      	ldr	r5, [sp, #12]
 8009164:	eba6 040a 	sub.w	r4, r6, sl
 8009168:	42a5      	cmp	r5, r4
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	d133      	bne.n	80091d8 <_dtoa_r+0x6e0>
 8009170:	f7f7 f88c 	bl	800028c <__adddf3>
 8009174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009178:	4604      	mov	r4, r0
 800917a:	460d      	mov	r5, r1
 800917c:	f7f7 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8009180:	b9c0      	cbnz	r0, 80091b4 <_dtoa_r+0x6bc>
 8009182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800918e:	b110      	cbz	r0, 8009196 <_dtoa_r+0x69e>
 8009190:	f018 0f01 	tst.w	r8, #1
 8009194:	d10e      	bne.n	80091b4 <_dtoa_r+0x6bc>
 8009196:	9902      	ldr	r1, [sp, #8]
 8009198:	4648      	mov	r0, r9
 800919a:	f000 fbbd 	bl	8009918 <_Bfree>
 800919e:	2300      	movs	r3, #0
 80091a0:	7033      	strb	r3, [r6, #0]
 80091a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091a4:	3701      	adds	r7, #1
 80091a6:	601f      	str	r7, [r3, #0]
 80091a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 824b 	beq.w	8009646 <_dtoa_r+0xb4e>
 80091b0:	601e      	str	r6, [r3, #0]
 80091b2:	e248      	b.n	8009646 <_dtoa_r+0xb4e>
 80091b4:	46b8      	mov	r8, r7
 80091b6:	4633      	mov	r3, r6
 80091b8:	461e      	mov	r6, r3
 80091ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091be:	2a39      	cmp	r2, #57	@ 0x39
 80091c0:	d106      	bne.n	80091d0 <_dtoa_r+0x6d8>
 80091c2:	459a      	cmp	sl, r3
 80091c4:	d1f8      	bne.n	80091b8 <_dtoa_r+0x6c0>
 80091c6:	2230      	movs	r2, #48	@ 0x30
 80091c8:	f108 0801 	add.w	r8, r8, #1
 80091cc:	f88a 2000 	strb.w	r2, [sl]
 80091d0:	781a      	ldrb	r2, [r3, #0]
 80091d2:	3201      	adds	r2, #1
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	e7a0      	b.n	800911a <_dtoa_r+0x622>
 80091d8:	4b6f      	ldr	r3, [pc, #444]	@ (8009398 <_dtoa_r+0x8a0>)
 80091da:	2200      	movs	r2, #0
 80091dc:	f7f7 fa0c 	bl	80005f8 <__aeabi_dmul>
 80091e0:	2200      	movs	r2, #0
 80091e2:	2300      	movs	r3, #0
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	f7f7 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d09f      	beq.n	8009130 <_dtoa_r+0x638>
 80091f0:	e7d1      	b.n	8009196 <_dtoa_r+0x69e>
 80091f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	f000 80ea 	beq.w	80093ce <_dtoa_r+0x8d6>
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	2a01      	cmp	r2, #1
 80091fe:	f300 80cd 	bgt.w	800939c <_dtoa_r+0x8a4>
 8009202:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009204:	2a00      	cmp	r2, #0
 8009206:	f000 80c1 	beq.w	800938c <_dtoa_r+0x894>
 800920a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800920e:	9c08      	ldr	r4, [sp, #32]
 8009210:	9e00      	ldr	r6, [sp, #0]
 8009212:	9a00      	ldr	r2, [sp, #0]
 8009214:	441a      	add	r2, r3
 8009216:	9200      	str	r2, [sp, #0]
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	2101      	movs	r1, #1
 800921c:	441a      	add	r2, r3
 800921e:	4648      	mov	r0, r9
 8009220:	9206      	str	r2, [sp, #24]
 8009222:	f000 fc77 	bl	8009b14 <__i2b>
 8009226:	4605      	mov	r5, r0
 8009228:	b166      	cbz	r6, 8009244 <_dtoa_r+0x74c>
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd09      	ble.n	8009244 <_dtoa_r+0x74c>
 8009230:	42b3      	cmp	r3, r6
 8009232:	9a00      	ldr	r2, [sp, #0]
 8009234:	bfa8      	it	ge
 8009236:	4633      	movge	r3, r6
 8009238:	1ad2      	subs	r2, r2, r3
 800923a:	9200      	str	r2, [sp, #0]
 800923c:	9a06      	ldr	r2, [sp, #24]
 800923e:	1af6      	subs	r6, r6, r3
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	9306      	str	r3, [sp, #24]
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	b30b      	cbz	r3, 800928c <_dtoa_r+0x794>
 8009248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80c6 	beq.w	80093dc <_dtoa_r+0x8e4>
 8009250:	2c00      	cmp	r4, #0
 8009252:	f000 80c0 	beq.w	80093d6 <_dtoa_r+0x8de>
 8009256:	4629      	mov	r1, r5
 8009258:	4622      	mov	r2, r4
 800925a:	4648      	mov	r0, r9
 800925c:	f000 fd12 	bl	8009c84 <__pow5mult>
 8009260:	9a02      	ldr	r2, [sp, #8]
 8009262:	4601      	mov	r1, r0
 8009264:	4605      	mov	r5, r0
 8009266:	4648      	mov	r0, r9
 8009268:	f000 fc6a 	bl	8009b40 <__multiply>
 800926c:	9902      	ldr	r1, [sp, #8]
 800926e:	4680      	mov	r8, r0
 8009270:	4648      	mov	r0, r9
 8009272:	f000 fb51 	bl	8009918 <_Bfree>
 8009276:	9b08      	ldr	r3, [sp, #32]
 8009278:	1b1b      	subs	r3, r3, r4
 800927a:	9308      	str	r3, [sp, #32]
 800927c:	f000 80b1 	beq.w	80093e2 <_dtoa_r+0x8ea>
 8009280:	9a08      	ldr	r2, [sp, #32]
 8009282:	4641      	mov	r1, r8
 8009284:	4648      	mov	r0, r9
 8009286:	f000 fcfd 	bl	8009c84 <__pow5mult>
 800928a:	9002      	str	r0, [sp, #8]
 800928c:	2101      	movs	r1, #1
 800928e:	4648      	mov	r0, r9
 8009290:	f000 fc40 	bl	8009b14 <__i2b>
 8009294:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009296:	4604      	mov	r4, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 81d8 	beq.w	800964e <_dtoa_r+0xb56>
 800929e:	461a      	mov	r2, r3
 80092a0:	4601      	mov	r1, r0
 80092a2:	4648      	mov	r0, r9
 80092a4:	f000 fcee 	bl	8009c84 <__pow5mult>
 80092a8:	9b07      	ldr	r3, [sp, #28]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	4604      	mov	r4, r0
 80092ae:	f300 809f 	bgt.w	80093f0 <_dtoa_r+0x8f8>
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 8097 	bne.w	80093e8 <_dtoa_r+0x8f0>
 80092ba:	9b05      	ldr	r3, [sp, #20]
 80092bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f040 8093 	bne.w	80093ec <_dtoa_r+0x8f4>
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092cc:	0d1b      	lsrs	r3, r3, #20
 80092ce:	051b      	lsls	r3, r3, #20
 80092d0:	b133      	cbz	r3, 80092e0 <_dtoa_r+0x7e8>
 80092d2:	9b00      	ldr	r3, [sp, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	3301      	adds	r3, #1
 80092dc:	9306      	str	r3, [sp, #24]
 80092de:	2301      	movs	r3, #1
 80092e0:	9308      	str	r3, [sp, #32]
 80092e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 81b8 	beq.w	800965a <_dtoa_r+0xb62>
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092f0:	6918      	ldr	r0, [r3, #16]
 80092f2:	f000 fbc3 	bl	8009a7c <__hi0bits>
 80092f6:	f1c0 0020 	rsb	r0, r0, #32
 80092fa:	9b06      	ldr	r3, [sp, #24]
 80092fc:	4418      	add	r0, r3
 80092fe:	f010 001f 	ands.w	r0, r0, #31
 8009302:	f000 8082 	beq.w	800940a <_dtoa_r+0x912>
 8009306:	f1c0 0320 	rsb	r3, r0, #32
 800930a:	2b04      	cmp	r3, #4
 800930c:	dd73      	ble.n	80093f6 <_dtoa_r+0x8fe>
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	f1c0 001c 	rsb	r0, r0, #28
 8009314:	4403      	add	r3, r0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	9b06      	ldr	r3, [sp, #24]
 800931a:	4403      	add	r3, r0
 800931c:	4406      	add	r6, r0
 800931e:	9306      	str	r3, [sp, #24]
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd05      	ble.n	8009332 <_dtoa_r+0x83a>
 8009326:	9902      	ldr	r1, [sp, #8]
 8009328:	461a      	mov	r2, r3
 800932a:	4648      	mov	r0, r9
 800932c:	f000 fd04 	bl	8009d38 <__lshift>
 8009330:	9002      	str	r0, [sp, #8]
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dd05      	ble.n	8009344 <_dtoa_r+0x84c>
 8009338:	4621      	mov	r1, r4
 800933a:	461a      	mov	r2, r3
 800933c:	4648      	mov	r0, r9
 800933e:	f000 fcfb 	bl	8009d38 <__lshift>
 8009342:	4604      	mov	r4, r0
 8009344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d061      	beq.n	800940e <_dtoa_r+0x916>
 800934a:	9802      	ldr	r0, [sp, #8]
 800934c:	4621      	mov	r1, r4
 800934e:	f000 fd5f 	bl	8009e10 <__mcmp>
 8009352:	2800      	cmp	r0, #0
 8009354:	da5b      	bge.n	800940e <_dtoa_r+0x916>
 8009356:	2300      	movs	r3, #0
 8009358:	9902      	ldr	r1, [sp, #8]
 800935a:	220a      	movs	r2, #10
 800935c:	4648      	mov	r0, r9
 800935e:	f000 fafd 	bl	800995c <__multadd>
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	f107 38ff 	add.w	r8, r7, #4294967295
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8177 	beq.w	800965e <_dtoa_r+0xb66>
 8009370:	4629      	mov	r1, r5
 8009372:	2300      	movs	r3, #0
 8009374:	220a      	movs	r2, #10
 8009376:	4648      	mov	r0, r9
 8009378:	f000 faf0 	bl	800995c <__multadd>
 800937c:	f1bb 0f00 	cmp.w	fp, #0
 8009380:	4605      	mov	r5, r0
 8009382:	dc6f      	bgt.n	8009464 <_dtoa_r+0x96c>
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	2b02      	cmp	r3, #2
 8009388:	dc49      	bgt.n	800941e <_dtoa_r+0x926>
 800938a:	e06b      	b.n	8009464 <_dtoa_r+0x96c>
 800938c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800938e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009392:	e73c      	b.n	800920e <_dtoa_r+0x716>
 8009394:	3fe00000 	.word	0x3fe00000
 8009398:	40240000 	.word	0x40240000
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1e5c      	subs	r4, r3, #1
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	db09      	blt.n	80093ba <_dtoa_r+0x8c2>
 80093a6:	1b1c      	subs	r4, r3, r4
 80093a8:	9b03      	ldr	r3, [sp, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f6bf af30 	bge.w	8009210 <_dtoa_r+0x718>
 80093b0:	9b00      	ldr	r3, [sp, #0]
 80093b2:	9a03      	ldr	r2, [sp, #12]
 80093b4:	1a9e      	subs	r6, r3, r2
 80093b6:	2300      	movs	r3, #0
 80093b8:	e72b      	b.n	8009212 <_dtoa_r+0x71a>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093be:	9408      	str	r4, [sp, #32]
 80093c0:	1ae3      	subs	r3, r4, r3
 80093c2:	441a      	add	r2, r3
 80093c4:	9e00      	ldr	r6, [sp, #0]
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80093ca:	2400      	movs	r4, #0
 80093cc:	e721      	b.n	8009212 <_dtoa_r+0x71a>
 80093ce:	9c08      	ldr	r4, [sp, #32]
 80093d0:	9e00      	ldr	r6, [sp, #0]
 80093d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80093d4:	e728      	b.n	8009228 <_dtoa_r+0x730>
 80093d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80093da:	e751      	b.n	8009280 <_dtoa_r+0x788>
 80093dc:	9a08      	ldr	r2, [sp, #32]
 80093de:	9902      	ldr	r1, [sp, #8]
 80093e0:	e750      	b.n	8009284 <_dtoa_r+0x78c>
 80093e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80093e6:	e751      	b.n	800928c <_dtoa_r+0x794>
 80093e8:	2300      	movs	r3, #0
 80093ea:	e779      	b.n	80092e0 <_dtoa_r+0x7e8>
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	e777      	b.n	80092e0 <_dtoa_r+0x7e8>
 80093f0:	2300      	movs	r3, #0
 80093f2:	9308      	str	r3, [sp, #32]
 80093f4:	e779      	b.n	80092ea <_dtoa_r+0x7f2>
 80093f6:	d093      	beq.n	8009320 <_dtoa_r+0x828>
 80093f8:	9a00      	ldr	r2, [sp, #0]
 80093fa:	331c      	adds	r3, #28
 80093fc:	441a      	add	r2, r3
 80093fe:	9200      	str	r2, [sp, #0]
 8009400:	9a06      	ldr	r2, [sp, #24]
 8009402:	441a      	add	r2, r3
 8009404:	441e      	add	r6, r3
 8009406:	9206      	str	r2, [sp, #24]
 8009408:	e78a      	b.n	8009320 <_dtoa_r+0x828>
 800940a:	4603      	mov	r3, r0
 800940c:	e7f4      	b.n	80093f8 <_dtoa_r+0x900>
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	46b8      	mov	r8, r7
 8009414:	dc20      	bgt.n	8009458 <_dtoa_r+0x960>
 8009416:	469b      	mov	fp, r3
 8009418:	9b07      	ldr	r3, [sp, #28]
 800941a:	2b02      	cmp	r3, #2
 800941c:	dd1e      	ble.n	800945c <_dtoa_r+0x964>
 800941e:	f1bb 0f00 	cmp.w	fp, #0
 8009422:	f47f adb1 	bne.w	8008f88 <_dtoa_r+0x490>
 8009426:	4621      	mov	r1, r4
 8009428:	465b      	mov	r3, fp
 800942a:	2205      	movs	r2, #5
 800942c:	4648      	mov	r0, r9
 800942e:	f000 fa95 	bl	800995c <__multadd>
 8009432:	4601      	mov	r1, r0
 8009434:	4604      	mov	r4, r0
 8009436:	9802      	ldr	r0, [sp, #8]
 8009438:	f000 fcea 	bl	8009e10 <__mcmp>
 800943c:	2800      	cmp	r0, #0
 800943e:	f77f ada3 	ble.w	8008f88 <_dtoa_r+0x490>
 8009442:	4656      	mov	r6, sl
 8009444:	2331      	movs	r3, #49	@ 0x31
 8009446:	f806 3b01 	strb.w	r3, [r6], #1
 800944a:	f108 0801 	add.w	r8, r8, #1
 800944e:	e59f      	b.n	8008f90 <_dtoa_r+0x498>
 8009450:	9c03      	ldr	r4, [sp, #12]
 8009452:	46b8      	mov	r8, r7
 8009454:	4625      	mov	r5, r4
 8009456:	e7f4      	b.n	8009442 <_dtoa_r+0x94a>
 8009458:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800945c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 8101 	beq.w	8009666 <_dtoa_r+0xb6e>
 8009464:	2e00      	cmp	r6, #0
 8009466:	dd05      	ble.n	8009474 <_dtoa_r+0x97c>
 8009468:	4629      	mov	r1, r5
 800946a:	4632      	mov	r2, r6
 800946c:	4648      	mov	r0, r9
 800946e:	f000 fc63 	bl	8009d38 <__lshift>
 8009472:	4605      	mov	r5, r0
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d05c      	beq.n	8009534 <_dtoa_r+0xa3c>
 800947a:	6869      	ldr	r1, [r5, #4]
 800947c:	4648      	mov	r0, r9
 800947e:	f000 fa0b 	bl	8009898 <_Balloc>
 8009482:	4606      	mov	r6, r0
 8009484:	b928      	cbnz	r0, 8009492 <_dtoa_r+0x99a>
 8009486:	4b82      	ldr	r3, [pc, #520]	@ (8009690 <_dtoa_r+0xb98>)
 8009488:	4602      	mov	r2, r0
 800948a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800948e:	f7ff bb4a 	b.w	8008b26 <_dtoa_r+0x2e>
 8009492:	692a      	ldr	r2, [r5, #16]
 8009494:	3202      	adds	r2, #2
 8009496:	0092      	lsls	r2, r2, #2
 8009498:	f105 010c 	add.w	r1, r5, #12
 800949c:	300c      	adds	r0, #12
 800949e:	f002 f93f 	bl	800b720 <memcpy>
 80094a2:	2201      	movs	r2, #1
 80094a4:	4631      	mov	r1, r6
 80094a6:	4648      	mov	r0, r9
 80094a8:	f000 fc46 	bl	8009d38 <__lshift>
 80094ac:	f10a 0301 	add.w	r3, sl, #1
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	eb0a 030b 	add.w	r3, sl, fp
 80094b6:	9308      	str	r3, [sp, #32]
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	462f      	mov	r7, r5
 80094c0:	9306      	str	r3, [sp, #24]
 80094c2:	4605      	mov	r5, r0
 80094c4:	9b00      	ldr	r3, [sp, #0]
 80094c6:	9802      	ldr	r0, [sp, #8]
 80094c8:	4621      	mov	r1, r4
 80094ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80094ce:	f7ff fa89 	bl	80089e4 <quorem>
 80094d2:	4603      	mov	r3, r0
 80094d4:	3330      	adds	r3, #48	@ 0x30
 80094d6:	9003      	str	r0, [sp, #12]
 80094d8:	4639      	mov	r1, r7
 80094da:	9802      	ldr	r0, [sp, #8]
 80094dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80094de:	f000 fc97 	bl	8009e10 <__mcmp>
 80094e2:	462a      	mov	r2, r5
 80094e4:	9004      	str	r0, [sp, #16]
 80094e6:	4621      	mov	r1, r4
 80094e8:	4648      	mov	r0, r9
 80094ea:	f000 fcad 	bl	8009e48 <__mdiff>
 80094ee:	68c2      	ldr	r2, [r0, #12]
 80094f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f2:	4606      	mov	r6, r0
 80094f4:	bb02      	cbnz	r2, 8009538 <_dtoa_r+0xa40>
 80094f6:	4601      	mov	r1, r0
 80094f8:	9802      	ldr	r0, [sp, #8]
 80094fa:	f000 fc89 	bl	8009e10 <__mcmp>
 80094fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009500:	4602      	mov	r2, r0
 8009502:	4631      	mov	r1, r6
 8009504:	4648      	mov	r0, r9
 8009506:	920c      	str	r2, [sp, #48]	@ 0x30
 8009508:	9309      	str	r3, [sp, #36]	@ 0x24
 800950a:	f000 fa05 	bl	8009918 <_Bfree>
 800950e:	9b07      	ldr	r3, [sp, #28]
 8009510:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009512:	9e00      	ldr	r6, [sp, #0]
 8009514:	ea42 0103 	orr.w	r1, r2, r3
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	4319      	orrs	r1, r3
 800951c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951e:	d10d      	bne.n	800953c <_dtoa_r+0xa44>
 8009520:	2b39      	cmp	r3, #57	@ 0x39
 8009522:	d027      	beq.n	8009574 <_dtoa_r+0xa7c>
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	2a00      	cmp	r2, #0
 8009528:	dd01      	ble.n	800952e <_dtoa_r+0xa36>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	3331      	adds	r3, #49	@ 0x31
 800952e:	f88b 3000 	strb.w	r3, [fp]
 8009532:	e52e      	b.n	8008f92 <_dtoa_r+0x49a>
 8009534:	4628      	mov	r0, r5
 8009536:	e7b9      	b.n	80094ac <_dtoa_r+0x9b4>
 8009538:	2201      	movs	r2, #1
 800953a:	e7e2      	b.n	8009502 <_dtoa_r+0xa0a>
 800953c:	9904      	ldr	r1, [sp, #16]
 800953e:	2900      	cmp	r1, #0
 8009540:	db04      	blt.n	800954c <_dtoa_r+0xa54>
 8009542:	9807      	ldr	r0, [sp, #28]
 8009544:	4301      	orrs	r1, r0
 8009546:	9806      	ldr	r0, [sp, #24]
 8009548:	4301      	orrs	r1, r0
 800954a:	d120      	bne.n	800958e <_dtoa_r+0xa96>
 800954c:	2a00      	cmp	r2, #0
 800954e:	ddee      	ble.n	800952e <_dtoa_r+0xa36>
 8009550:	9902      	ldr	r1, [sp, #8]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2201      	movs	r2, #1
 8009556:	4648      	mov	r0, r9
 8009558:	f000 fbee 	bl	8009d38 <__lshift>
 800955c:	4621      	mov	r1, r4
 800955e:	9002      	str	r0, [sp, #8]
 8009560:	f000 fc56 	bl	8009e10 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	dc02      	bgt.n	8009570 <_dtoa_r+0xa78>
 800956a:	d1e0      	bne.n	800952e <_dtoa_r+0xa36>
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	d5de      	bpl.n	800952e <_dtoa_r+0xa36>
 8009570:	2b39      	cmp	r3, #57	@ 0x39
 8009572:	d1da      	bne.n	800952a <_dtoa_r+0xa32>
 8009574:	2339      	movs	r3, #57	@ 0x39
 8009576:	f88b 3000 	strb.w	r3, [fp]
 800957a:	4633      	mov	r3, r6
 800957c:	461e      	mov	r6, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009584:	2a39      	cmp	r2, #57	@ 0x39
 8009586:	d04e      	beq.n	8009626 <_dtoa_r+0xb2e>
 8009588:	3201      	adds	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e501      	b.n	8008f92 <_dtoa_r+0x49a>
 800958e:	2a00      	cmp	r2, #0
 8009590:	dd03      	ble.n	800959a <_dtoa_r+0xaa2>
 8009592:	2b39      	cmp	r3, #57	@ 0x39
 8009594:	d0ee      	beq.n	8009574 <_dtoa_r+0xa7c>
 8009596:	3301      	adds	r3, #1
 8009598:	e7c9      	b.n	800952e <_dtoa_r+0xa36>
 800959a:	9a00      	ldr	r2, [sp, #0]
 800959c:	9908      	ldr	r1, [sp, #32]
 800959e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095a2:	428a      	cmp	r2, r1
 80095a4:	d028      	beq.n	80095f8 <_dtoa_r+0xb00>
 80095a6:	9902      	ldr	r1, [sp, #8]
 80095a8:	2300      	movs	r3, #0
 80095aa:	220a      	movs	r2, #10
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 f9d5 	bl	800995c <__multadd>
 80095b2:	42af      	cmp	r7, r5
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	f04f 0300 	mov.w	r3, #0
 80095ba:	f04f 020a 	mov.w	r2, #10
 80095be:	4639      	mov	r1, r7
 80095c0:	4648      	mov	r0, r9
 80095c2:	d107      	bne.n	80095d4 <_dtoa_r+0xadc>
 80095c4:	f000 f9ca 	bl	800995c <__multadd>
 80095c8:	4607      	mov	r7, r0
 80095ca:	4605      	mov	r5, r0
 80095cc:	9b00      	ldr	r3, [sp, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	e777      	b.n	80094c4 <_dtoa_r+0x9cc>
 80095d4:	f000 f9c2 	bl	800995c <__multadd>
 80095d8:	4629      	mov	r1, r5
 80095da:	4607      	mov	r7, r0
 80095dc:	2300      	movs	r3, #0
 80095de:	220a      	movs	r2, #10
 80095e0:	4648      	mov	r0, r9
 80095e2:	f000 f9bb 	bl	800995c <__multadd>
 80095e6:	4605      	mov	r5, r0
 80095e8:	e7f0      	b.n	80095cc <_dtoa_r+0xad4>
 80095ea:	f1bb 0f00 	cmp.w	fp, #0
 80095ee:	bfcc      	ite	gt
 80095f0:	465e      	movgt	r6, fp
 80095f2:	2601      	movle	r6, #1
 80095f4:	4456      	add	r6, sl
 80095f6:	2700      	movs	r7, #0
 80095f8:	9902      	ldr	r1, [sp, #8]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	4648      	mov	r0, r9
 8009600:	f000 fb9a 	bl	8009d38 <__lshift>
 8009604:	4621      	mov	r1, r4
 8009606:	9002      	str	r0, [sp, #8]
 8009608:	f000 fc02 	bl	8009e10 <__mcmp>
 800960c:	2800      	cmp	r0, #0
 800960e:	dcb4      	bgt.n	800957a <_dtoa_r+0xa82>
 8009610:	d102      	bne.n	8009618 <_dtoa_r+0xb20>
 8009612:	9b00      	ldr	r3, [sp, #0]
 8009614:	07db      	lsls	r3, r3, #31
 8009616:	d4b0      	bmi.n	800957a <_dtoa_r+0xa82>
 8009618:	4633      	mov	r3, r6
 800961a:	461e      	mov	r6, r3
 800961c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009620:	2a30      	cmp	r2, #48	@ 0x30
 8009622:	d0fa      	beq.n	800961a <_dtoa_r+0xb22>
 8009624:	e4b5      	b.n	8008f92 <_dtoa_r+0x49a>
 8009626:	459a      	cmp	sl, r3
 8009628:	d1a8      	bne.n	800957c <_dtoa_r+0xa84>
 800962a:	2331      	movs	r3, #49	@ 0x31
 800962c:	f108 0801 	add.w	r8, r8, #1
 8009630:	f88a 3000 	strb.w	r3, [sl]
 8009634:	e4ad      	b.n	8008f92 <_dtoa_r+0x49a>
 8009636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009638:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009694 <_dtoa_r+0xb9c>
 800963c:	b11b      	cbz	r3, 8009646 <_dtoa_r+0xb4e>
 800963e:	f10a 0308 	add.w	r3, sl, #8
 8009642:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	4650      	mov	r0, sl
 8009648:	b017      	add	sp, #92	@ 0x5c
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	9b07      	ldr	r3, [sp, #28]
 8009650:	2b01      	cmp	r3, #1
 8009652:	f77f ae2e 	ble.w	80092b2 <_dtoa_r+0x7ba>
 8009656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	2001      	movs	r0, #1
 800965c:	e64d      	b.n	80092fa <_dtoa_r+0x802>
 800965e:	f1bb 0f00 	cmp.w	fp, #0
 8009662:	f77f aed9 	ble.w	8009418 <_dtoa_r+0x920>
 8009666:	4656      	mov	r6, sl
 8009668:	9802      	ldr	r0, [sp, #8]
 800966a:	4621      	mov	r1, r4
 800966c:	f7ff f9ba 	bl	80089e4 <quorem>
 8009670:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009674:	f806 3b01 	strb.w	r3, [r6], #1
 8009678:	eba6 020a 	sub.w	r2, r6, sl
 800967c:	4593      	cmp	fp, r2
 800967e:	ddb4      	ble.n	80095ea <_dtoa_r+0xaf2>
 8009680:	9902      	ldr	r1, [sp, #8]
 8009682:	2300      	movs	r3, #0
 8009684:	220a      	movs	r2, #10
 8009686:	4648      	mov	r0, r9
 8009688:	f000 f968 	bl	800995c <__multadd>
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	e7eb      	b.n	8009668 <_dtoa_r+0xb70>
 8009690:	0800c1f9 	.word	0x0800c1f9
 8009694:	0800c17d 	.word	0x0800c17d

08009698 <_free_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	2900      	cmp	r1, #0
 800969e:	d041      	beq.n	8009724 <_free_r+0x8c>
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f0c      	subs	r4, r1, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfb8      	it	lt
 80096aa:	18e4      	addlt	r4, r4, r3
 80096ac:	f000 f8e8 	bl	8009880 <__malloc_lock>
 80096b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009728 <_free_r+0x90>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	b933      	cbnz	r3, 80096c4 <_free_r+0x2c>
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	6014      	str	r4, [r2, #0]
 80096ba:	4628      	mov	r0, r5
 80096bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c0:	f000 b8e4 	b.w	800988c <__malloc_unlock>
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d908      	bls.n	80096da <_free_r+0x42>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	1821      	adds	r1, r4, r0
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf01      	itttt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	e7ed      	b.n	80096b6 <_free_r+0x1e>
 80096da:	461a      	mov	r2, r3
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b10b      	cbz	r3, 80096e4 <_free_r+0x4c>
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d9fa      	bls.n	80096da <_free_r+0x42>
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	1850      	adds	r0, r2, r1
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d10b      	bne.n	8009704 <_free_r+0x6c>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	4401      	add	r1, r0
 80096f0:	1850      	adds	r0, r2, r1
 80096f2:	4283      	cmp	r3, r0
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	d1e0      	bne.n	80096ba <_free_r+0x22>
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	6053      	str	r3, [r2, #4]
 80096fe:	4408      	add	r0, r1
 8009700:	6010      	str	r0, [r2, #0]
 8009702:	e7da      	b.n	80096ba <_free_r+0x22>
 8009704:	d902      	bls.n	800970c <_free_r+0x74>
 8009706:	230c      	movs	r3, #12
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	e7d6      	b.n	80096ba <_free_r+0x22>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	1821      	adds	r1, r4, r0
 8009710:	428b      	cmp	r3, r1
 8009712:	bf04      	itt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	bf04      	itt	eq
 800971c:	1809      	addeq	r1, r1, r0
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	6054      	str	r4, [r2, #4]
 8009722:	e7ca      	b.n	80096ba <_free_r+0x22>
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	bf00      	nop
 8009728:	200005e8 	.word	0x200005e8

0800972c <malloc>:
 800972c:	4b02      	ldr	r3, [pc, #8]	@ (8009738 <malloc+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f000 b825 	b.w	8009780 <_malloc_r>
 8009736:	bf00      	nop
 8009738:	2000001c 	.word	0x2000001c

0800973c <sbrk_aligned>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	4e0f      	ldr	r6, [pc, #60]	@ (800977c <sbrk_aligned+0x40>)
 8009740:	460c      	mov	r4, r1
 8009742:	6831      	ldr	r1, [r6, #0]
 8009744:	4605      	mov	r5, r0
 8009746:	b911      	cbnz	r1, 800974e <sbrk_aligned+0x12>
 8009748:	f001 ffda 	bl	800b700 <_sbrk_r>
 800974c:	6030      	str	r0, [r6, #0]
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f001 ffd5 	bl	800b700 <_sbrk_r>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d103      	bne.n	8009762 <sbrk_aligned+0x26>
 800975a:	f04f 34ff 	mov.w	r4, #4294967295
 800975e:	4620      	mov	r0, r4
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	1cc4      	adds	r4, r0, #3
 8009764:	f024 0403 	bic.w	r4, r4, #3
 8009768:	42a0      	cmp	r0, r4
 800976a:	d0f8      	beq.n	800975e <sbrk_aligned+0x22>
 800976c:	1a21      	subs	r1, r4, r0
 800976e:	4628      	mov	r0, r5
 8009770:	f001 ffc6 	bl	800b700 <_sbrk_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d1f2      	bne.n	800975e <sbrk_aligned+0x22>
 8009778:	e7ef      	b.n	800975a <sbrk_aligned+0x1e>
 800977a:	bf00      	nop
 800977c:	200005e4 	.word	0x200005e4

08009780 <_malloc_r>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	f025 0503 	bic.w	r5, r5, #3
 800978a:	3508      	adds	r5, #8
 800978c:	2d0c      	cmp	r5, #12
 800978e:	bf38      	it	cc
 8009790:	250c      	movcc	r5, #12
 8009792:	2d00      	cmp	r5, #0
 8009794:	4606      	mov	r6, r0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d904      	bls.n	80097a6 <_malloc_r+0x26>
 800979c:	230c      	movs	r3, #12
 800979e:	6033      	str	r3, [r6, #0]
 80097a0:	2000      	movs	r0, #0
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800987c <_malloc_r+0xfc>
 80097aa:	f000 f869 	bl	8009880 <__malloc_lock>
 80097ae:	f8d8 3000 	ldr.w	r3, [r8]
 80097b2:	461c      	mov	r4, r3
 80097b4:	bb44      	cbnz	r4, 8009808 <_malloc_r+0x88>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7ff ffbf 	bl	800973c <sbrk_aligned>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	4604      	mov	r4, r0
 80097c2:	d158      	bne.n	8009876 <_malloc_r+0xf6>
 80097c4:	f8d8 4000 	ldr.w	r4, [r8]
 80097c8:	4627      	mov	r7, r4
 80097ca:	2f00      	cmp	r7, #0
 80097cc:	d143      	bne.n	8009856 <_malloc_r+0xd6>
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	d04b      	beq.n	800986a <_malloc_r+0xea>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	4639      	mov	r1, r7
 80097d6:	4630      	mov	r0, r6
 80097d8:	eb04 0903 	add.w	r9, r4, r3
 80097dc:	f001 ff90 	bl	800b700 <_sbrk_r>
 80097e0:	4581      	cmp	r9, r0
 80097e2:	d142      	bne.n	800986a <_malloc_r+0xea>
 80097e4:	6821      	ldr	r1, [r4, #0]
 80097e6:	1a6d      	subs	r5, r5, r1
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffa6 	bl	800973c <sbrk_aligned>
 80097f0:	3001      	adds	r0, #1
 80097f2:	d03a      	beq.n	800986a <_malloc_r+0xea>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	442b      	add	r3, r5
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	f8d8 3000 	ldr.w	r3, [r8]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	bb62      	cbnz	r2, 800985c <_malloc_r+0xdc>
 8009802:	f8c8 7000 	str.w	r7, [r8]
 8009806:	e00f      	b.n	8009828 <_malloc_r+0xa8>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	1b52      	subs	r2, r2, r5
 800980c:	d420      	bmi.n	8009850 <_malloc_r+0xd0>
 800980e:	2a0b      	cmp	r2, #11
 8009810:	d917      	bls.n	8009842 <_malloc_r+0xc2>
 8009812:	1961      	adds	r1, r4, r5
 8009814:	42a3      	cmp	r3, r4
 8009816:	6025      	str	r5, [r4, #0]
 8009818:	bf18      	it	ne
 800981a:	6059      	strne	r1, [r3, #4]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	bf08      	it	eq
 8009820:	f8c8 1000 	streq.w	r1, [r8]
 8009824:	5162      	str	r2, [r4, r5]
 8009826:	604b      	str	r3, [r1, #4]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f82f 	bl	800988c <__malloc_unlock>
 800982e:	f104 000b 	add.w	r0, r4, #11
 8009832:	1d23      	adds	r3, r4, #4
 8009834:	f020 0007 	bic.w	r0, r0, #7
 8009838:	1ac2      	subs	r2, r0, r3
 800983a:	bf1c      	itt	ne
 800983c:	1a1b      	subne	r3, r3, r0
 800983e:	50a3      	strne	r3, [r4, r2]
 8009840:	e7af      	b.n	80097a2 <_malloc_r+0x22>
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	42a3      	cmp	r3, r4
 8009846:	bf0c      	ite	eq
 8009848:	f8c8 2000 	streq.w	r2, [r8]
 800984c:	605a      	strne	r2, [r3, #4]
 800984e:	e7eb      	b.n	8009828 <_malloc_r+0xa8>
 8009850:	4623      	mov	r3, r4
 8009852:	6864      	ldr	r4, [r4, #4]
 8009854:	e7ae      	b.n	80097b4 <_malloc_r+0x34>
 8009856:	463c      	mov	r4, r7
 8009858:	687f      	ldr	r7, [r7, #4]
 800985a:	e7b6      	b.n	80097ca <_malloc_r+0x4a>
 800985c:	461a      	mov	r2, r3
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	42a3      	cmp	r3, r4
 8009862:	d1fb      	bne.n	800985c <_malloc_r+0xdc>
 8009864:	2300      	movs	r3, #0
 8009866:	6053      	str	r3, [r2, #4]
 8009868:	e7de      	b.n	8009828 <_malloc_r+0xa8>
 800986a:	230c      	movs	r3, #12
 800986c:	6033      	str	r3, [r6, #0]
 800986e:	4630      	mov	r0, r6
 8009870:	f000 f80c 	bl	800988c <__malloc_unlock>
 8009874:	e794      	b.n	80097a0 <_malloc_r+0x20>
 8009876:	6005      	str	r5, [r0, #0]
 8009878:	e7d6      	b.n	8009828 <_malloc_r+0xa8>
 800987a:	bf00      	nop
 800987c:	200005e8 	.word	0x200005e8

08009880 <__malloc_lock>:
 8009880:	4801      	ldr	r0, [pc, #4]	@ (8009888 <__malloc_lock+0x8>)
 8009882:	f7ff b8a6 	b.w	80089d2 <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	200005e0 	.word	0x200005e0

0800988c <__malloc_unlock>:
 800988c:	4801      	ldr	r0, [pc, #4]	@ (8009894 <__malloc_unlock+0x8>)
 800988e:	f7ff b8a1 	b.w	80089d4 <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	200005e0 	.word	0x200005e0

08009898 <_Balloc>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	69c6      	ldr	r6, [r0, #28]
 800989c:	4604      	mov	r4, r0
 800989e:	460d      	mov	r5, r1
 80098a0:	b976      	cbnz	r6, 80098c0 <_Balloc+0x28>
 80098a2:	2010      	movs	r0, #16
 80098a4:	f7ff ff42 	bl	800972c <malloc>
 80098a8:	4602      	mov	r2, r0
 80098aa:	61e0      	str	r0, [r4, #28]
 80098ac:	b920      	cbnz	r0, 80098b8 <_Balloc+0x20>
 80098ae:	4b18      	ldr	r3, [pc, #96]	@ (8009910 <_Balloc+0x78>)
 80098b0:	4818      	ldr	r0, [pc, #96]	@ (8009914 <_Balloc+0x7c>)
 80098b2:	216b      	movs	r1, #107	@ 0x6b
 80098b4:	f001 ff4c 	bl	800b750 <__assert_func>
 80098b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098bc:	6006      	str	r6, [r0, #0]
 80098be:	60c6      	str	r6, [r0, #12]
 80098c0:	69e6      	ldr	r6, [r4, #28]
 80098c2:	68f3      	ldr	r3, [r6, #12]
 80098c4:	b183      	cbz	r3, 80098e8 <_Balloc+0x50>
 80098c6:	69e3      	ldr	r3, [r4, #28]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098ce:	b9b8      	cbnz	r0, 8009900 <_Balloc+0x68>
 80098d0:	2101      	movs	r1, #1
 80098d2:	fa01 f605 	lsl.w	r6, r1, r5
 80098d6:	1d72      	adds	r2, r6, #5
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	4620      	mov	r0, r4
 80098dc:	f001 ff56 	bl	800b78c <_calloc_r>
 80098e0:	b160      	cbz	r0, 80098fc <_Balloc+0x64>
 80098e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098e6:	e00e      	b.n	8009906 <_Balloc+0x6e>
 80098e8:	2221      	movs	r2, #33	@ 0x21
 80098ea:	2104      	movs	r1, #4
 80098ec:	4620      	mov	r0, r4
 80098ee:	f001 ff4d 	bl	800b78c <_calloc_r>
 80098f2:	69e3      	ldr	r3, [r4, #28]
 80098f4:	60f0      	str	r0, [r6, #12]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e4      	bne.n	80098c6 <_Balloc+0x2e>
 80098fc:	2000      	movs	r0, #0
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	6802      	ldr	r2, [r0, #0]
 8009902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009906:	2300      	movs	r3, #0
 8009908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800990c:	e7f7      	b.n	80098fe <_Balloc+0x66>
 800990e:	bf00      	nop
 8009910:	0800c18a 	.word	0x0800c18a
 8009914:	0800c20a 	.word	0x0800c20a

08009918 <_Bfree>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	69c6      	ldr	r6, [r0, #28]
 800991c:	4605      	mov	r5, r0
 800991e:	460c      	mov	r4, r1
 8009920:	b976      	cbnz	r6, 8009940 <_Bfree+0x28>
 8009922:	2010      	movs	r0, #16
 8009924:	f7ff ff02 	bl	800972c <malloc>
 8009928:	4602      	mov	r2, r0
 800992a:	61e8      	str	r0, [r5, #28]
 800992c:	b920      	cbnz	r0, 8009938 <_Bfree+0x20>
 800992e:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <_Bfree+0x3c>)
 8009930:	4809      	ldr	r0, [pc, #36]	@ (8009958 <_Bfree+0x40>)
 8009932:	218f      	movs	r1, #143	@ 0x8f
 8009934:	f001 ff0c 	bl	800b750 <__assert_func>
 8009938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800993c:	6006      	str	r6, [r0, #0]
 800993e:	60c6      	str	r6, [r0, #12]
 8009940:	b13c      	cbz	r4, 8009952 <_Bfree+0x3a>
 8009942:	69eb      	ldr	r3, [r5, #28]
 8009944:	6862      	ldr	r2, [r4, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800994c:	6021      	str	r1, [r4, #0]
 800994e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	0800c18a 	.word	0x0800c18a
 8009958:	0800c20a 	.word	0x0800c20a

0800995c <__multadd>:
 800995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009960:	690d      	ldr	r5, [r1, #16]
 8009962:	4607      	mov	r7, r0
 8009964:	460c      	mov	r4, r1
 8009966:	461e      	mov	r6, r3
 8009968:	f101 0c14 	add.w	ip, r1, #20
 800996c:	2000      	movs	r0, #0
 800996e:	f8dc 3000 	ldr.w	r3, [ip]
 8009972:	b299      	uxth	r1, r3
 8009974:	fb02 6101 	mla	r1, r2, r1, r6
 8009978:	0c1e      	lsrs	r6, r3, #16
 800997a:	0c0b      	lsrs	r3, r1, #16
 800997c:	fb02 3306 	mla	r3, r2, r6, r3
 8009980:	b289      	uxth	r1, r1
 8009982:	3001      	adds	r0, #1
 8009984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009988:	4285      	cmp	r5, r0
 800998a:	f84c 1b04 	str.w	r1, [ip], #4
 800998e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009992:	dcec      	bgt.n	800996e <__multadd+0x12>
 8009994:	b30e      	cbz	r6, 80099da <__multadd+0x7e>
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	42ab      	cmp	r3, r5
 800999a:	dc19      	bgt.n	80099d0 <__multadd+0x74>
 800999c:	6861      	ldr	r1, [r4, #4]
 800999e:	4638      	mov	r0, r7
 80099a0:	3101      	adds	r1, #1
 80099a2:	f7ff ff79 	bl	8009898 <_Balloc>
 80099a6:	4680      	mov	r8, r0
 80099a8:	b928      	cbnz	r0, 80099b6 <__multadd+0x5a>
 80099aa:	4602      	mov	r2, r0
 80099ac:	4b0c      	ldr	r3, [pc, #48]	@ (80099e0 <__multadd+0x84>)
 80099ae:	480d      	ldr	r0, [pc, #52]	@ (80099e4 <__multadd+0x88>)
 80099b0:	21ba      	movs	r1, #186	@ 0xba
 80099b2:	f001 fecd 	bl	800b750 <__assert_func>
 80099b6:	6922      	ldr	r2, [r4, #16]
 80099b8:	3202      	adds	r2, #2
 80099ba:	f104 010c 	add.w	r1, r4, #12
 80099be:	0092      	lsls	r2, r2, #2
 80099c0:	300c      	adds	r0, #12
 80099c2:	f001 fead 	bl	800b720 <memcpy>
 80099c6:	4621      	mov	r1, r4
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7ff ffa5 	bl	8009918 <_Bfree>
 80099ce:	4644      	mov	r4, r8
 80099d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d4:	3501      	adds	r5, #1
 80099d6:	615e      	str	r6, [r3, #20]
 80099d8:	6125      	str	r5, [r4, #16]
 80099da:	4620      	mov	r0, r4
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e0:	0800c1f9 	.word	0x0800c1f9
 80099e4:	0800c20a 	.word	0x0800c20a

080099e8 <__s2b>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	4615      	mov	r5, r2
 80099f0:	461f      	mov	r7, r3
 80099f2:	2209      	movs	r2, #9
 80099f4:	3308      	adds	r3, #8
 80099f6:	4606      	mov	r6, r0
 80099f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099fc:	2100      	movs	r1, #0
 80099fe:	2201      	movs	r2, #1
 8009a00:	429a      	cmp	r2, r3
 8009a02:	db09      	blt.n	8009a18 <__s2b+0x30>
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff ff47 	bl	8009898 <_Balloc>
 8009a0a:	b940      	cbnz	r0, 8009a1e <__s2b+0x36>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <__s2b+0x8c>)
 8009a10:	4819      	ldr	r0, [pc, #100]	@ (8009a78 <__s2b+0x90>)
 8009a12:	21d3      	movs	r1, #211	@ 0xd3
 8009a14:	f001 fe9c 	bl	800b750 <__assert_func>
 8009a18:	0052      	lsls	r2, r2, #1
 8009a1a:	3101      	adds	r1, #1
 8009a1c:	e7f0      	b.n	8009a00 <__s2b+0x18>
 8009a1e:	9b08      	ldr	r3, [sp, #32]
 8009a20:	6143      	str	r3, [r0, #20]
 8009a22:	2d09      	cmp	r5, #9
 8009a24:	f04f 0301 	mov.w	r3, #1
 8009a28:	6103      	str	r3, [r0, #16]
 8009a2a:	dd16      	ble.n	8009a5a <__s2b+0x72>
 8009a2c:	f104 0909 	add.w	r9, r4, #9
 8009a30:	46c8      	mov	r8, r9
 8009a32:	442c      	add	r4, r5
 8009a34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a38:	4601      	mov	r1, r0
 8009a3a:	3b30      	subs	r3, #48	@ 0x30
 8009a3c:	220a      	movs	r2, #10
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff ff8c 	bl	800995c <__multadd>
 8009a44:	45a0      	cmp	r8, r4
 8009a46:	d1f5      	bne.n	8009a34 <__s2b+0x4c>
 8009a48:	f1a5 0408 	sub.w	r4, r5, #8
 8009a4c:	444c      	add	r4, r9
 8009a4e:	1b2d      	subs	r5, r5, r4
 8009a50:	1963      	adds	r3, r4, r5
 8009a52:	42bb      	cmp	r3, r7
 8009a54:	db04      	blt.n	8009a60 <__s2b+0x78>
 8009a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	340a      	adds	r4, #10
 8009a5c:	2509      	movs	r5, #9
 8009a5e:	e7f6      	b.n	8009a4e <__s2b+0x66>
 8009a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a64:	4601      	mov	r1, r0
 8009a66:	3b30      	subs	r3, #48	@ 0x30
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ff76 	bl	800995c <__multadd>
 8009a70:	e7ee      	b.n	8009a50 <__s2b+0x68>
 8009a72:	bf00      	nop
 8009a74:	0800c1f9 	.word	0x0800c1f9
 8009a78:	0800c20a 	.word	0x0800c20a

08009a7c <__hi0bits>:
 8009a7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a80:	4603      	mov	r3, r0
 8009a82:	bf36      	itet	cc
 8009a84:	0403      	lslcc	r3, r0, #16
 8009a86:	2000      	movcs	r0, #0
 8009a88:	2010      	movcc	r0, #16
 8009a8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a8e:	bf3c      	itt	cc
 8009a90:	021b      	lslcc	r3, r3, #8
 8009a92:	3008      	addcc	r0, #8
 8009a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a98:	bf3c      	itt	cc
 8009a9a:	011b      	lslcc	r3, r3, #4
 8009a9c:	3004      	addcc	r0, #4
 8009a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa2:	bf3c      	itt	cc
 8009aa4:	009b      	lslcc	r3, r3, #2
 8009aa6:	3002      	addcc	r0, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db05      	blt.n	8009ab8 <__hi0bits+0x3c>
 8009aac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ab0:	f100 0001 	add.w	r0, r0, #1
 8009ab4:	bf08      	it	eq
 8009ab6:	2020      	moveq	r0, #32
 8009ab8:	4770      	bx	lr

08009aba <__lo0bits>:
 8009aba:	6803      	ldr	r3, [r0, #0]
 8009abc:	4602      	mov	r2, r0
 8009abe:	f013 0007 	ands.w	r0, r3, #7
 8009ac2:	d00b      	beq.n	8009adc <__lo0bits+0x22>
 8009ac4:	07d9      	lsls	r1, r3, #31
 8009ac6:	d421      	bmi.n	8009b0c <__lo0bits+0x52>
 8009ac8:	0798      	lsls	r0, r3, #30
 8009aca:	bf49      	itett	mi
 8009acc:	085b      	lsrmi	r3, r3, #1
 8009ace:	089b      	lsrpl	r3, r3, #2
 8009ad0:	2001      	movmi	r0, #1
 8009ad2:	6013      	strmi	r3, [r2, #0]
 8009ad4:	bf5c      	itt	pl
 8009ad6:	6013      	strpl	r3, [r2, #0]
 8009ad8:	2002      	movpl	r0, #2
 8009ada:	4770      	bx	lr
 8009adc:	b299      	uxth	r1, r3
 8009ade:	b909      	cbnz	r1, 8009ae4 <__lo0bits+0x2a>
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	2010      	movs	r0, #16
 8009ae4:	b2d9      	uxtb	r1, r3
 8009ae6:	b909      	cbnz	r1, 8009aec <__lo0bits+0x32>
 8009ae8:	3008      	adds	r0, #8
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	bf04      	itt	eq
 8009af0:	091b      	lsreq	r3, r3, #4
 8009af2:	3004      	addeq	r0, #4
 8009af4:	0799      	lsls	r1, r3, #30
 8009af6:	bf04      	itt	eq
 8009af8:	089b      	lsreq	r3, r3, #2
 8009afa:	3002      	addeq	r0, #2
 8009afc:	07d9      	lsls	r1, r3, #31
 8009afe:	d403      	bmi.n	8009b08 <__lo0bits+0x4e>
 8009b00:	085b      	lsrs	r3, r3, #1
 8009b02:	f100 0001 	add.w	r0, r0, #1
 8009b06:	d003      	beq.n	8009b10 <__lo0bits+0x56>
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	4770      	bx	lr
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	4770      	bx	lr
 8009b10:	2020      	movs	r0, #32
 8009b12:	4770      	bx	lr

08009b14 <__i2b>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	2101      	movs	r1, #1
 8009b1a:	f7ff febd 	bl	8009898 <_Balloc>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	b928      	cbnz	r0, 8009b2e <__i2b+0x1a>
 8009b22:	4b05      	ldr	r3, [pc, #20]	@ (8009b38 <__i2b+0x24>)
 8009b24:	4805      	ldr	r0, [pc, #20]	@ (8009b3c <__i2b+0x28>)
 8009b26:	f240 1145 	movw	r1, #325	@ 0x145
 8009b2a:	f001 fe11 	bl	800b750 <__assert_func>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	6144      	str	r4, [r0, #20]
 8009b32:	6103      	str	r3, [r0, #16]
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	bf00      	nop
 8009b38:	0800c1f9 	.word	0x0800c1f9
 8009b3c:	0800c20a 	.word	0x0800c20a

08009b40 <__multiply>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4617      	mov	r7, r2
 8009b46:	690a      	ldr	r2, [r1, #16]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	bfa8      	it	ge
 8009b4e:	463b      	movge	r3, r7
 8009b50:	4689      	mov	r9, r1
 8009b52:	bfa4      	itt	ge
 8009b54:	460f      	movge	r7, r1
 8009b56:	4699      	movge	r9, r3
 8009b58:	693d      	ldr	r5, [r7, #16]
 8009b5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	eb05 060a 	add.w	r6, r5, sl
 8009b66:	42b3      	cmp	r3, r6
 8009b68:	b085      	sub	sp, #20
 8009b6a:	bfb8      	it	lt
 8009b6c:	3101      	addlt	r1, #1
 8009b6e:	f7ff fe93 	bl	8009898 <_Balloc>
 8009b72:	b930      	cbnz	r0, 8009b82 <__multiply+0x42>
 8009b74:	4602      	mov	r2, r0
 8009b76:	4b41      	ldr	r3, [pc, #260]	@ (8009c7c <__multiply+0x13c>)
 8009b78:	4841      	ldr	r0, [pc, #260]	@ (8009c80 <__multiply+0x140>)
 8009b7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b7e:	f001 fde7 	bl	800b750 <__assert_func>
 8009b82:	f100 0414 	add.w	r4, r0, #20
 8009b86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4573      	cmp	r3, lr
 8009b90:	d320      	bcc.n	8009bd4 <__multiply+0x94>
 8009b92:	f107 0814 	add.w	r8, r7, #20
 8009b96:	f109 0114 	add.w	r1, r9, #20
 8009b9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	1beb      	subs	r3, r5, r7
 8009ba6:	3b15      	subs	r3, #21
 8009ba8:	f023 0303 	bic.w	r3, r3, #3
 8009bac:	3304      	adds	r3, #4
 8009bae:	3715      	adds	r7, #21
 8009bb0:	42bd      	cmp	r5, r7
 8009bb2:	bf38      	it	cc
 8009bb4:	2304      	movcc	r3, #4
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	9b02      	ldr	r3, [sp, #8]
 8009bba:	9103      	str	r1, [sp, #12]
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	d80c      	bhi.n	8009bda <__multiply+0x9a>
 8009bc0:	2e00      	cmp	r6, #0
 8009bc2:	dd03      	ble.n	8009bcc <__multiply+0x8c>
 8009bc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d055      	beq.n	8009c78 <__multiply+0x138>
 8009bcc:	6106      	str	r6, [r0, #16]
 8009bce:	b005      	add	sp, #20
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	f843 2b04 	str.w	r2, [r3], #4
 8009bd8:	e7d9      	b.n	8009b8e <__multiply+0x4e>
 8009bda:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bde:	f1ba 0f00 	cmp.w	sl, #0
 8009be2:	d01f      	beq.n	8009c24 <__multiply+0xe4>
 8009be4:	46c4      	mov	ip, r8
 8009be6:	46a1      	mov	r9, r4
 8009be8:	2700      	movs	r7, #0
 8009bea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bee:	f8d9 3000 	ldr.w	r3, [r9]
 8009bf2:	fa1f fb82 	uxth.w	fp, r2
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bfc:	443b      	add	r3, r7
 8009bfe:	f8d9 7000 	ldr.w	r7, [r9]
 8009c02:	0c12      	lsrs	r2, r2, #16
 8009c04:	0c3f      	lsrs	r7, r7, #16
 8009c06:	fb0a 7202 	mla	r2, sl, r2, r7
 8009c0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c14:	4565      	cmp	r5, ip
 8009c16:	f849 3b04 	str.w	r3, [r9], #4
 8009c1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009c1e:	d8e4      	bhi.n	8009bea <__multiply+0xaa>
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	50e7      	str	r7, [r4, r3]
 8009c24:	9b03      	ldr	r3, [sp, #12]
 8009c26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c2a:	3104      	adds	r1, #4
 8009c2c:	f1b9 0f00 	cmp.w	r9, #0
 8009c30:	d020      	beq.n	8009c74 <__multiply+0x134>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	4647      	mov	r7, r8
 8009c36:	46a4      	mov	ip, r4
 8009c38:	f04f 0a00 	mov.w	sl, #0
 8009c3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009c40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009c44:	fb09 220b 	mla	r2, r9, fp, r2
 8009c48:	4452      	add	r2, sl
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c50:	f84c 3b04 	str.w	r3, [ip], #4
 8009c54:	f857 3b04 	ldr.w	r3, [r7], #4
 8009c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009c60:	fb09 330a 	mla	r3, r9, sl, r3
 8009c64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009c68:	42bd      	cmp	r5, r7
 8009c6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c6e:	d8e5      	bhi.n	8009c3c <__multiply+0xfc>
 8009c70:	9a01      	ldr	r2, [sp, #4]
 8009c72:	50a3      	str	r3, [r4, r2]
 8009c74:	3404      	adds	r4, #4
 8009c76:	e79f      	b.n	8009bb8 <__multiply+0x78>
 8009c78:	3e01      	subs	r6, #1
 8009c7a:	e7a1      	b.n	8009bc0 <__multiply+0x80>
 8009c7c:	0800c1f9 	.word	0x0800c1f9
 8009c80:	0800c20a 	.word	0x0800c20a

08009c84 <__pow5mult>:
 8009c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c88:	4615      	mov	r5, r2
 8009c8a:	f012 0203 	ands.w	r2, r2, #3
 8009c8e:	4607      	mov	r7, r0
 8009c90:	460e      	mov	r6, r1
 8009c92:	d007      	beq.n	8009ca4 <__pow5mult+0x20>
 8009c94:	4c25      	ldr	r4, [pc, #148]	@ (8009d2c <__pow5mult+0xa8>)
 8009c96:	3a01      	subs	r2, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c9e:	f7ff fe5d 	bl	800995c <__multadd>
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	10ad      	asrs	r5, r5, #2
 8009ca6:	d03d      	beq.n	8009d24 <__pow5mult+0xa0>
 8009ca8:	69fc      	ldr	r4, [r7, #28]
 8009caa:	b97c      	cbnz	r4, 8009ccc <__pow5mult+0x48>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f7ff fd3d 	bl	800972c <malloc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	61f8      	str	r0, [r7, #28]
 8009cb6:	b928      	cbnz	r0, 8009cc4 <__pow5mult+0x40>
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <__pow5mult+0xac>)
 8009cba:	481e      	ldr	r0, [pc, #120]	@ (8009d34 <__pow5mult+0xb0>)
 8009cbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cc0:	f001 fd46 	bl	800b750 <__assert_func>
 8009cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cc8:	6004      	str	r4, [r0, #0]
 8009cca:	60c4      	str	r4, [r0, #12]
 8009ccc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cd4:	b94c      	cbnz	r4, 8009cea <__pow5mult+0x66>
 8009cd6:	f240 2171 	movw	r1, #625	@ 0x271
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7ff ff1a 	bl	8009b14 <__i2b>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	07eb      	lsls	r3, r5, #31
 8009cf0:	d50a      	bpl.n	8009d08 <__pow5mult+0x84>
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f7ff ff22 	bl	8009b40 <__multiply>
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4680      	mov	r8, r0
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7ff fe09 	bl	8009918 <_Bfree>
 8009d06:	4646      	mov	r6, r8
 8009d08:	106d      	asrs	r5, r5, #1
 8009d0a:	d00b      	beq.n	8009d24 <__pow5mult+0xa0>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	b938      	cbnz	r0, 8009d20 <__pow5mult+0x9c>
 8009d10:	4622      	mov	r2, r4
 8009d12:	4621      	mov	r1, r4
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff ff13 	bl	8009b40 <__multiply>
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f8c0 9000 	str.w	r9, [r0]
 8009d20:	4604      	mov	r4, r0
 8009d22:	e7e4      	b.n	8009cee <__pow5mult+0x6a>
 8009d24:	4630      	mov	r0, r6
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800c31c 	.word	0x0800c31c
 8009d30:	0800c18a 	.word	0x0800c18a
 8009d34:	0800c20a 	.word	0x0800c20a

08009d38 <__lshift>:
 8009d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	6849      	ldr	r1, [r1, #4]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	4607      	mov	r7, r0
 8009d4a:	4691      	mov	r9, r2
 8009d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d50:	f108 0601 	add.w	r6, r8, #1
 8009d54:	42b3      	cmp	r3, r6
 8009d56:	db0b      	blt.n	8009d70 <__lshift+0x38>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff fd9d 	bl	8009898 <_Balloc>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b948      	cbnz	r0, 8009d76 <__lshift+0x3e>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b28      	ldr	r3, [pc, #160]	@ (8009e08 <__lshift+0xd0>)
 8009d66:	4829      	ldr	r0, [pc, #164]	@ (8009e0c <__lshift+0xd4>)
 8009d68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d6c:	f001 fcf0 	bl	800b750 <__assert_func>
 8009d70:	3101      	adds	r1, #1
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	e7ee      	b.n	8009d54 <__lshift+0x1c>
 8009d76:	2300      	movs	r3, #0
 8009d78:	f100 0114 	add.w	r1, r0, #20
 8009d7c:	f100 0210 	add.w	r2, r0, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	4553      	cmp	r3, sl
 8009d84:	db33      	blt.n	8009dee <__lshift+0xb6>
 8009d86:	6920      	ldr	r0, [r4, #16]
 8009d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	f019 091f 	ands.w	r9, r9, #31
 8009d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d9c:	d02b      	beq.n	8009df6 <__lshift+0xbe>
 8009d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8009da2:	468a      	mov	sl, r1
 8009da4:	2200      	movs	r2, #0
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	fa00 f009 	lsl.w	r0, r0, r9
 8009dac:	4310      	orrs	r0, r2
 8009dae:	f84a 0b04 	str.w	r0, [sl], #4
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	459c      	cmp	ip, r3
 8009db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dbc:	d8f3      	bhi.n	8009da6 <__lshift+0x6e>
 8009dbe:	ebac 0304 	sub.w	r3, ip, r4
 8009dc2:	3b15      	subs	r3, #21
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	3304      	adds	r3, #4
 8009dca:	f104 0015 	add.w	r0, r4, #21
 8009dce:	4560      	cmp	r0, ip
 8009dd0:	bf88      	it	hi
 8009dd2:	2304      	movhi	r3, #4
 8009dd4:	50ca      	str	r2, [r1, r3]
 8009dd6:	b10a      	cbz	r2, 8009ddc <__lshift+0xa4>
 8009dd8:	f108 0602 	add.w	r6, r8, #2
 8009ddc:	3e01      	subs	r6, #1
 8009dde:	4638      	mov	r0, r7
 8009de0:	612e      	str	r6, [r5, #16]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7ff fd98 	bl	8009918 <_Bfree>
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009df2:	3301      	adds	r3, #1
 8009df4:	e7c5      	b.n	8009d82 <__lshift+0x4a>
 8009df6:	3904      	subs	r1, #4
 8009df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e00:	459c      	cmp	ip, r3
 8009e02:	d8f9      	bhi.n	8009df8 <__lshift+0xc0>
 8009e04:	e7ea      	b.n	8009ddc <__lshift+0xa4>
 8009e06:	bf00      	nop
 8009e08:	0800c1f9 	.word	0x0800c1f9
 8009e0c:	0800c20a 	.word	0x0800c20a

08009e10 <__mcmp>:
 8009e10:	690a      	ldr	r2, [r1, #16]
 8009e12:	4603      	mov	r3, r0
 8009e14:	6900      	ldr	r0, [r0, #16]
 8009e16:	1a80      	subs	r0, r0, r2
 8009e18:	b530      	push	{r4, r5, lr}
 8009e1a:	d10e      	bne.n	8009e3a <__mcmp+0x2a>
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	3114      	adds	r1, #20
 8009e20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e30:	4295      	cmp	r5, r2
 8009e32:	d003      	beq.n	8009e3c <__mcmp+0x2c>
 8009e34:	d205      	bcs.n	8009e42 <__mcmp+0x32>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	d3f3      	bcc.n	8009e28 <__mcmp+0x18>
 8009e40:	e7fb      	b.n	8009e3a <__mcmp+0x2a>
 8009e42:	2001      	movs	r0, #1
 8009e44:	e7f9      	b.n	8009e3a <__mcmp+0x2a>
	...

08009e48 <__mdiff>:
 8009e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	4689      	mov	r9, r1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	4611      	mov	r1, r2
 8009e52:	4648      	mov	r0, r9
 8009e54:	4614      	mov	r4, r2
 8009e56:	f7ff ffdb 	bl	8009e10 <__mcmp>
 8009e5a:	1e05      	subs	r5, r0, #0
 8009e5c:	d112      	bne.n	8009e84 <__mdiff+0x3c>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff fd19 	bl	8009898 <_Balloc>
 8009e66:	4602      	mov	r2, r0
 8009e68:	b928      	cbnz	r0, 8009e76 <__mdiff+0x2e>
 8009e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f68 <__mdiff+0x120>)
 8009e6c:	f240 2137 	movw	r1, #567	@ 0x237
 8009e70:	483e      	ldr	r0, [pc, #248]	@ (8009f6c <__mdiff+0x124>)
 8009e72:	f001 fc6d 	bl	800b750 <__assert_func>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	b003      	add	sp, #12
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	bfbc      	itt	lt
 8009e86:	464b      	movlt	r3, r9
 8009e88:	46a1      	movlt	r9, r4
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e90:	bfba      	itte	lt
 8009e92:	461c      	movlt	r4, r3
 8009e94:	2501      	movlt	r5, #1
 8009e96:	2500      	movge	r5, #0
 8009e98:	f7ff fcfe 	bl	8009898 <_Balloc>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	b918      	cbnz	r0, 8009ea8 <__mdiff+0x60>
 8009ea0:	4b31      	ldr	r3, [pc, #196]	@ (8009f68 <__mdiff+0x120>)
 8009ea2:	f240 2145 	movw	r1, #581	@ 0x245
 8009ea6:	e7e3      	b.n	8009e70 <__mdiff+0x28>
 8009ea8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009eac:	6926      	ldr	r6, [r4, #16]
 8009eae:	60c5      	str	r5, [r0, #12]
 8009eb0:	f109 0310 	add.w	r3, r9, #16
 8009eb4:	f109 0514 	add.w	r5, r9, #20
 8009eb8:	f104 0e14 	add.w	lr, r4, #20
 8009ebc:	f100 0b14 	add.w	fp, r0, #20
 8009ec0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ec4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	46d9      	mov	r9, fp
 8009ecc:	f04f 0c00 	mov.w	ip, #0
 8009ed0:	9b01      	ldr	r3, [sp, #4]
 8009ed2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ed6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eda:	9301      	str	r3, [sp, #4]
 8009edc:	fa1f f38a 	uxth.w	r3, sl
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	b283      	uxth	r3, r0
 8009ee4:	1acb      	subs	r3, r1, r3
 8009ee6:	0c00      	lsrs	r0, r0, #16
 8009ee8:	4463      	add	r3, ip
 8009eea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009eee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ef8:	4576      	cmp	r6, lr
 8009efa:	f849 3b04 	str.w	r3, [r9], #4
 8009efe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f02:	d8e5      	bhi.n	8009ed0 <__mdiff+0x88>
 8009f04:	1b33      	subs	r3, r6, r4
 8009f06:	3b15      	subs	r3, #21
 8009f08:	f023 0303 	bic.w	r3, r3, #3
 8009f0c:	3415      	adds	r4, #21
 8009f0e:	3304      	adds	r3, #4
 8009f10:	42a6      	cmp	r6, r4
 8009f12:	bf38      	it	cc
 8009f14:	2304      	movcc	r3, #4
 8009f16:	441d      	add	r5, r3
 8009f18:	445b      	add	r3, fp
 8009f1a:	461e      	mov	r6, r3
 8009f1c:	462c      	mov	r4, r5
 8009f1e:	4544      	cmp	r4, r8
 8009f20:	d30e      	bcc.n	8009f40 <__mdiff+0xf8>
 8009f22:	f108 0103 	add.w	r1, r8, #3
 8009f26:	1b49      	subs	r1, r1, r5
 8009f28:	f021 0103 	bic.w	r1, r1, #3
 8009f2c:	3d03      	subs	r5, #3
 8009f2e:	45a8      	cmp	r8, r5
 8009f30:	bf38      	it	cc
 8009f32:	2100      	movcc	r1, #0
 8009f34:	440b      	add	r3, r1
 8009f36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f3a:	b191      	cbz	r1, 8009f62 <__mdiff+0x11a>
 8009f3c:	6117      	str	r7, [r2, #16]
 8009f3e:	e79d      	b.n	8009e7c <__mdiff+0x34>
 8009f40:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f44:	46e6      	mov	lr, ip
 8009f46:	0c08      	lsrs	r0, r1, #16
 8009f48:	fa1c fc81 	uxtah	ip, ip, r1
 8009f4c:	4471      	add	r1, lr
 8009f4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f52:	b289      	uxth	r1, r1
 8009f54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f58:	f846 1b04 	str.w	r1, [r6], #4
 8009f5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f60:	e7dd      	b.n	8009f1e <__mdiff+0xd6>
 8009f62:	3f01      	subs	r7, #1
 8009f64:	e7e7      	b.n	8009f36 <__mdiff+0xee>
 8009f66:	bf00      	nop
 8009f68:	0800c1f9 	.word	0x0800c1f9
 8009f6c:	0800c20a 	.word	0x0800c20a

08009f70 <__ulp>:
 8009f70:	b082      	sub	sp, #8
 8009f72:	ed8d 0b00 	vstr	d0, [sp]
 8009f76:	9a01      	ldr	r2, [sp, #4]
 8009f78:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb8 <__ulp+0x48>)
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dc08      	bgt.n	8009f96 <__ulp+0x26>
 8009f84:	425b      	negs	r3, r3
 8009f86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f8e:	da04      	bge.n	8009f9a <__ulp+0x2a>
 8009f90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f94:	4113      	asrs	r3, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	e008      	b.n	8009fac <__ulp+0x3c>
 8009f9a:	f1a2 0314 	sub.w	r3, r2, #20
 8009f9e:	2b1e      	cmp	r3, #30
 8009fa0:	bfda      	itte	le
 8009fa2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009fa6:	40da      	lsrle	r2, r3
 8009fa8:	2201      	movgt	r2, #1
 8009faa:	2300      	movs	r3, #0
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	ec41 0b10 	vmov	d0, r0, r1
 8009fb4:	b002      	add	sp, #8
 8009fb6:	4770      	bx	lr
 8009fb8:	7ff00000 	.word	0x7ff00000

08009fbc <__b2d>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	6906      	ldr	r6, [r0, #16]
 8009fc2:	f100 0814 	add.w	r8, r0, #20
 8009fc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fca:	1f37      	subs	r7, r6, #4
 8009fcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	f7ff fd53 	bl	8009a7c <__hi0bits>
 8009fd6:	f1c0 0320 	rsb	r3, r0, #32
 8009fda:	280a      	cmp	r0, #10
 8009fdc:	600b      	str	r3, [r1, #0]
 8009fde:	491b      	ldr	r1, [pc, #108]	@ (800a04c <__b2d+0x90>)
 8009fe0:	dc15      	bgt.n	800a00e <__b2d+0x52>
 8009fe2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009fe6:	fa22 f30c 	lsr.w	r3, r2, ip
 8009fea:	45b8      	cmp	r8, r7
 8009fec:	ea43 0501 	orr.w	r5, r3, r1
 8009ff0:	bf34      	ite	cc
 8009ff2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ff6:	2300      	movcs	r3, #0
 8009ff8:	3015      	adds	r0, #21
 8009ffa:	fa02 f000 	lsl.w	r0, r2, r0
 8009ffe:	fa23 f30c 	lsr.w	r3, r3, ip
 800a002:	4303      	orrs	r3, r0
 800a004:	461c      	mov	r4, r3
 800a006:	ec45 4b10 	vmov	d0, r4, r5
 800a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00e:	45b8      	cmp	r8, r7
 800a010:	bf3a      	itte	cc
 800a012:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a016:	f1a6 0708 	subcc.w	r7, r6, #8
 800a01a:	2300      	movcs	r3, #0
 800a01c:	380b      	subs	r0, #11
 800a01e:	d012      	beq.n	800a046 <__b2d+0x8a>
 800a020:	f1c0 0120 	rsb	r1, r0, #32
 800a024:	fa23 f401 	lsr.w	r4, r3, r1
 800a028:	4082      	lsls	r2, r0
 800a02a:	4322      	orrs	r2, r4
 800a02c:	4547      	cmp	r7, r8
 800a02e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a032:	bf8c      	ite	hi
 800a034:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a038:	2200      	movls	r2, #0
 800a03a:	4083      	lsls	r3, r0
 800a03c:	40ca      	lsrs	r2, r1
 800a03e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a042:	4313      	orrs	r3, r2
 800a044:	e7de      	b.n	800a004 <__b2d+0x48>
 800a046:	ea42 0501 	orr.w	r5, r2, r1
 800a04a:	e7db      	b.n	800a004 <__b2d+0x48>
 800a04c:	3ff00000 	.word	0x3ff00000

0800a050 <__d2b>:
 800a050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a054:	460f      	mov	r7, r1
 800a056:	2101      	movs	r1, #1
 800a058:	ec59 8b10 	vmov	r8, r9, d0
 800a05c:	4616      	mov	r6, r2
 800a05e:	f7ff fc1b 	bl	8009898 <_Balloc>
 800a062:	4604      	mov	r4, r0
 800a064:	b930      	cbnz	r0, 800a074 <__d2b+0x24>
 800a066:	4602      	mov	r2, r0
 800a068:	4b23      	ldr	r3, [pc, #140]	@ (800a0f8 <__d2b+0xa8>)
 800a06a:	4824      	ldr	r0, [pc, #144]	@ (800a0fc <__d2b+0xac>)
 800a06c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a070:	f001 fb6e 	bl	800b750 <__assert_func>
 800a074:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a07c:	b10d      	cbz	r5, 800a082 <__d2b+0x32>
 800a07e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	f1b8 0300 	subs.w	r3, r8, #0
 800a088:	d023      	beq.n	800a0d2 <__d2b+0x82>
 800a08a:	4668      	mov	r0, sp
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	f7ff fd14 	bl	8009aba <__lo0bits>
 800a092:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a096:	b1d0      	cbz	r0, 800a0ce <__d2b+0x7e>
 800a098:	f1c0 0320 	rsb	r3, r0, #32
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	40c2      	lsrs	r2, r0
 800a0a4:	6163      	str	r3, [r4, #20]
 800a0a6:	9201      	str	r2, [sp, #4]
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	61a3      	str	r3, [r4, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf0c      	ite	eq
 800a0b0:	2201      	moveq	r2, #1
 800a0b2:	2202      	movne	r2, #2
 800a0b4:	6122      	str	r2, [r4, #16]
 800a0b6:	b1a5      	cbz	r5, 800a0e2 <__d2b+0x92>
 800a0b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0bc:	4405      	add	r5, r0
 800a0be:	603d      	str	r5, [r7, #0]
 800a0c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0c4:	6030      	str	r0, [r6, #0]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	b003      	add	sp, #12
 800a0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	6161      	str	r1, [r4, #20]
 800a0d0:	e7ea      	b.n	800a0a8 <__d2b+0x58>
 800a0d2:	a801      	add	r0, sp, #4
 800a0d4:	f7ff fcf1 	bl	8009aba <__lo0bits>
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	6163      	str	r3, [r4, #20]
 800a0dc:	3020      	adds	r0, #32
 800a0de:	2201      	movs	r2, #1
 800a0e0:	e7e8      	b.n	800a0b4 <__d2b+0x64>
 800a0e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0ea:	6038      	str	r0, [r7, #0]
 800a0ec:	6918      	ldr	r0, [r3, #16]
 800a0ee:	f7ff fcc5 	bl	8009a7c <__hi0bits>
 800a0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0f6:	e7e5      	b.n	800a0c4 <__d2b+0x74>
 800a0f8:	0800c1f9 	.word	0x0800c1f9
 800a0fc:	0800c20a 	.word	0x0800c20a

0800a100 <__ratio>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	b085      	sub	sp, #20
 800a106:	e9cd 1000 	strd	r1, r0, [sp]
 800a10a:	a902      	add	r1, sp, #8
 800a10c:	f7ff ff56 	bl	8009fbc <__b2d>
 800a110:	9800      	ldr	r0, [sp, #0]
 800a112:	a903      	add	r1, sp, #12
 800a114:	ec55 4b10 	vmov	r4, r5, d0
 800a118:	f7ff ff50 	bl	8009fbc <__b2d>
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	6919      	ldr	r1, [r3, #16]
 800a120:	9b00      	ldr	r3, [sp, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	1ac9      	subs	r1, r1, r3
 800a126:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	ec5b ab10 	vmov	sl, fp, d0
 800a130:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfce      	itee	gt
 800a138:	462a      	movgt	r2, r5
 800a13a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a13e:	465a      	movle	r2, fp
 800a140:	462f      	mov	r7, r5
 800a142:	46d9      	mov	r9, fp
 800a144:	bfcc      	ite	gt
 800a146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a14a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a14e:	464b      	mov	r3, r9
 800a150:	4652      	mov	r2, sl
 800a152:	4620      	mov	r0, r4
 800a154:	4639      	mov	r1, r7
 800a156:	f7f6 fb79 	bl	800084c <__aeabi_ddiv>
 800a15a:	ec41 0b10 	vmov	d0, r0, r1
 800a15e:	b005      	add	sp, #20
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a164 <__copybits>:
 800a164:	3901      	subs	r1, #1
 800a166:	b570      	push	{r4, r5, r6, lr}
 800a168:	1149      	asrs	r1, r1, #5
 800a16a:	6914      	ldr	r4, [r2, #16]
 800a16c:	3101      	adds	r1, #1
 800a16e:	f102 0314 	add.w	r3, r2, #20
 800a172:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a176:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a17a:	1f05      	subs	r5, r0, #4
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	d30c      	bcc.n	800a19a <__copybits+0x36>
 800a180:	1aa3      	subs	r3, r4, r2
 800a182:	3b11      	subs	r3, #17
 800a184:	f023 0303 	bic.w	r3, r3, #3
 800a188:	3211      	adds	r2, #17
 800a18a:	42a2      	cmp	r2, r4
 800a18c:	bf88      	it	hi
 800a18e:	2300      	movhi	r3, #0
 800a190:	4418      	add	r0, r3
 800a192:	2300      	movs	r3, #0
 800a194:	4288      	cmp	r0, r1
 800a196:	d305      	bcc.n	800a1a4 <__copybits+0x40>
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a19e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1a2:	e7eb      	b.n	800a17c <__copybits+0x18>
 800a1a4:	f840 3b04 	str.w	r3, [r0], #4
 800a1a8:	e7f4      	b.n	800a194 <__copybits+0x30>

0800a1aa <__any_on>:
 800a1aa:	f100 0214 	add.w	r2, r0, #20
 800a1ae:	6900      	ldr	r0, [r0, #16]
 800a1b0:	114b      	asrs	r3, r1, #5
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	db11      	blt.n	800a1dc <__any_on+0x32>
 800a1b8:	dd0a      	ble.n	800a1d0 <__any_on+0x26>
 800a1ba:	f011 011f 	ands.w	r1, r1, #31
 800a1be:	d007      	beq.n	800a1d0 <__any_on+0x26>
 800a1c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1c4:	fa24 f001 	lsr.w	r0, r4, r1
 800a1c8:	fa00 f101 	lsl.w	r1, r0, r1
 800a1cc:	428c      	cmp	r4, r1
 800a1ce:	d10b      	bne.n	800a1e8 <__any_on+0x3e>
 800a1d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d803      	bhi.n	800a1e0 <__any_on+0x36>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	bd10      	pop	{r4, pc}
 800a1dc:	4603      	mov	r3, r0
 800a1de:	e7f7      	b.n	800a1d0 <__any_on+0x26>
 800a1e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d0f5      	beq.n	800a1d4 <__any_on+0x2a>
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	e7f6      	b.n	800a1da <__any_on+0x30>

0800a1ec <sulp>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	ec45 4b10 	vmov	d0, r4, r5
 800a1f6:	4616      	mov	r6, r2
 800a1f8:	f7ff feba 	bl	8009f70 <__ulp>
 800a1fc:	ec51 0b10 	vmov	r0, r1, d0
 800a200:	b17e      	cbz	r6, 800a222 <sulp+0x36>
 800a202:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a206:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	dd09      	ble.n	800a222 <sulp+0x36>
 800a20e:	051b      	lsls	r3, r3, #20
 800a210:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a214:	2400      	movs	r4, #0
 800a216:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a21a:	4622      	mov	r2, r4
 800a21c:	462b      	mov	r3, r5
 800a21e:	f7f6 f9eb 	bl	80005f8 <__aeabi_dmul>
 800a222:	ec41 0b10 	vmov	d0, r0, r1
 800a226:	bd70      	pop	{r4, r5, r6, pc}

0800a228 <_strtod_l>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	b09f      	sub	sp, #124	@ 0x7c
 800a22e:	460c      	mov	r4, r1
 800a230:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a232:	2200      	movs	r2, #0
 800a234:	921a      	str	r2, [sp, #104]	@ 0x68
 800a236:	9005      	str	r0, [sp, #20]
 800a238:	f04f 0a00 	mov.w	sl, #0
 800a23c:	f04f 0b00 	mov.w	fp, #0
 800a240:	460a      	mov	r2, r1
 800a242:	9219      	str	r2, [sp, #100]	@ 0x64
 800a244:	7811      	ldrb	r1, [r2, #0]
 800a246:	292b      	cmp	r1, #43	@ 0x2b
 800a248:	d04a      	beq.n	800a2e0 <_strtod_l+0xb8>
 800a24a:	d838      	bhi.n	800a2be <_strtod_l+0x96>
 800a24c:	290d      	cmp	r1, #13
 800a24e:	d832      	bhi.n	800a2b6 <_strtod_l+0x8e>
 800a250:	2908      	cmp	r1, #8
 800a252:	d832      	bhi.n	800a2ba <_strtod_l+0x92>
 800a254:	2900      	cmp	r1, #0
 800a256:	d03b      	beq.n	800a2d0 <_strtod_l+0xa8>
 800a258:	2200      	movs	r2, #0
 800a25a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a25c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a25e:	782a      	ldrb	r2, [r5, #0]
 800a260:	2a30      	cmp	r2, #48	@ 0x30
 800a262:	f040 80b2 	bne.w	800a3ca <_strtod_l+0x1a2>
 800a266:	786a      	ldrb	r2, [r5, #1]
 800a268:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a26c:	2a58      	cmp	r2, #88	@ 0x58
 800a26e:	d16e      	bne.n	800a34e <_strtod_l+0x126>
 800a270:	9302      	str	r3, [sp, #8]
 800a272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	ab1a      	add	r3, sp, #104	@ 0x68
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4a8f      	ldr	r2, [pc, #572]	@ (800a4b8 <_strtod_l+0x290>)
 800a27c:	9805      	ldr	r0, [sp, #20]
 800a27e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a280:	a919      	add	r1, sp, #100	@ 0x64
 800a282:	f001 faff 	bl	800b884 <__gethex>
 800a286:	f010 060f 	ands.w	r6, r0, #15
 800a28a:	4604      	mov	r4, r0
 800a28c:	d005      	beq.n	800a29a <_strtod_l+0x72>
 800a28e:	2e06      	cmp	r6, #6
 800a290:	d128      	bne.n	800a2e4 <_strtod_l+0xbc>
 800a292:	3501      	adds	r5, #1
 800a294:	2300      	movs	r3, #0
 800a296:	9519      	str	r5, [sp, #100]	@ 0x64
 800a298:	930e      	str	r3, [sp, #56]	@ 0x38
 800a29a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f040 858e 	bne.w	800adbe <_strtod_l+0xb96>
 800a2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2a4:	b1cb      	cbz	r3, 800a2da <_strtod_l+0xb2>
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a2ac:	ec43 2b10 	vmov	d0, r2, r3
 800a2b0:	b01f      	add	sp, #124	@ 0x7c
 800a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b6:	2920      	cmp	r1, #32
 800a2b8:	d1ce      	bne.n	800a258 <_strtod_l+0x30>
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	e7c1      	b.n	800a242 <_strtod_l+0x1a>
 800a2be:	292d      	cmp	r1, #45	@ 0x2d
 800a2c0:	d1ca      	bne.n	800a258 <_strtod_l+0x30>
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a2c6:	1c51      	adds	r1, r2, #1
 800a2c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a2ca:	7852      	ldrb	r2, [r2, #1]
 800a2cc:	2a00      	cmp	r2, #0
 800a2ce:	d1c5      	bne.n	800a25c <_strtod_l+0x34>
 800a2d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f040 8570 	bne.w	800adba <_strtod_l+0xb92>
 800a2da:	4652      	mov	r2, sl
 800a2dc:	465b      	mov	r3, fp
 800a2de:	e7e5      	b.n	800a2ac <_strtod_l+0x84>
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	e7ef      	b.n	800a2c4 <_strtod_l+0x9c>
 800a2e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a2e6:	b13a      	cbz	r2, 800a2f8 <_strtod_l+0xd0>
 800a2e8:	2135      	movs	r1, #53	@ 0x35
 800a2ea:	a81c      	add	r0, sp, #112	@ 0x70
 800a2ec:	f7ff ff3a 	bl	800a164 <__copybits>
 800a2f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2f2:	9805      	ldr	r0, [sp, #20]
 800a2f4:	f7ff fb10 	bl	8009918 <_Bfree>
 800a2f8:	3e01      	subs	r6, #1
 800a2fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a2fc:	2e04      	cmp	r6, #4
 800a2fe:	d806      	bhi.n	800a30e <_strtod_l+0xe6>
 800a300:	e8df f006 	tbb	[pc, r6]
 800a304:	201d0314 	.word	0x201d0314
 800a308:	14          	.byte	0x14
 800a309:	00          	.byte	0x00
 800a30a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a30e:	05e1      	lsls	r1, r4, #23
 800a310:	bf48      	it	mi
 800a312:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a316:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a31a:	0d1b      	lsrs	r3, r3, #20
 800a31c:	051b      	lsls	r3, r3, #20
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1bb      	bne.n	800a29a <_strtod_l+0x72>
 800a322:	f7fe fb2b 	bl	800897c <__errno>
 800a326:	2322      	movs	r3, #34	@ 0x22
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	e7b6      	b.n	800a29a <_strtod_l+0x72>
 800a32c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a330:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a334:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a338:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a33c:	e7e7      	b.n	800a30e <_strtod_l+0xe6>
 800a33e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a4c0 <_strtod_l+0x298>
 800a342:	e7e4      	b.n	800a30e <_strtod_l+0xe6>
 800a344:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a348:	f04f 3aff 	mov.w	sl, #4294967295
 800a34c:	e7df      	b.n	800a30e <_strtod_l+0xe6>
 800a34e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	9219      	str	r2, [sp, #100]	@ 0x64
 800a354:	785b      	ldrb	r3, [r3, #1]
 800a356:	2b30      	cmp	r3, #48	@ 0x30
 800a358:	d0f9      	beq.n	800a34e <_strtod_l+0x126>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d09d      	beq.n	800a29a <_strtod_l+0x72>
 800a35e:	2301      	movs	r3, #1
 800a360:	2700      	movs	r7, #0
 800a362:	9308      	str	r3, [sp, #32]
 800a364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a366:	930c      	str	r3, [sp, #48]	@ 0x30
 800a368:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a36a:	46b9      	mov	r9, r7
 800a36c:	220a      	movs	r2, #10
 800a36e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a370:	7805      	ldrb	r5, [r0, #0]
 800a372:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a376:	b2d9      	uxtb	r1, r3
 800a378:	2909      	cmp	r1, #9
 800a37a:	d928      	bls.n	800a3ce <_strtod_l+0x1a6>
 800a37c:	494f      	ldr	r1, [pc, #316]	@ (800a4bc <_strtod_l+0x294>)
 800a37e:	2201      	movs	r2, #1
 800a380:	f001 f9ac 	bl	800b6dc <strncmp>
 800a384:	2800      	cmp	r0, #0
 800a386:	d032      	beq.n	800a3ee <_strtod_l+0x1c6>
 800a388:	2000      	movs	r0, #0
 800a38a:	462a      	mov	r2, r5
 800a38c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a38e:	464d      	mov	r5, r9
 800a390:	4603      	mov	r3, r0
 800a392:	2a65      	cmp	r2, #101	@ 0x65
 800a394:	d001      	beq.n	800a39a <_strtod_l+0x172>
 800a396:	2a45      	cmp	r2, #69	@ 0x45
 800a398:	d114      	bne.n	800a3c4 <_strtod_l+0x19c>
 800a39a:	b91d      	cbnz	r5, 800a3a4 <_strtod_l+0x17c>
 800a39c:	9a08      	ldr	r2, [sp, #32]
 800a39e:	4302      	orrs	r2, r0
 800a3a0:	d096      	beq.n	800a2d0 <_strtod_l+0xa8>
 800a3a2:	2500      	movs	r5, #0
 800a3a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a3a6:	1c62      	adds	r2, r4, #1
 800a3a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3aa:	7862      	ldrb	r2, [r4, #1]
 800a3ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800a3ae:	d07a      	beq.n	800a4a6 <_strtod_l+0x27e>
 800a3b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a3b2:	d07e      	beq.n	800a4b2 <_strtod_l+0x28a>
 800a3b4:	f04f 0c00 	mov.w	ip, #0
 800a3b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a3bc:	2909      	cmp	r1, #9
 800a3be:	f240 8085 	bls.w	800a4cc <_strtod_l+0x2a4>
 800a3c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3c4:	f04f 0800 	mov.w	r8, #0
 800a3c8:	e0a5      	b.n	800a516 <_strtod_l+0x2ee>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e7c8      	b.n	800a360 <_strtod_l+0x138>
 800a3ce:	f1b9 0f08 	cmp.w	r9, #8
 800a3d2:	bfd8      	it	le
 800a3d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a3d6:	f100 0001 	add.w	r0, r0, #1
 800a3da:	bfda      	itte	le
 800a3dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a3e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a3e6:	f109 0901 	add.w	r9, r9, #1
 800a3ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3ec:	e7bf      	b.n	800a36e <_strtod_l+0x146>
 800a3ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3f4:	785a      	ldrb	r2, [r3, #1]
 800a3f6:	f1b9 0f00 	cmp.w	r9, #0
 800a3fa:	d03b      	beq.n	800a474 <_strtod_l+0x24c>
 800a3fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3fe:	464d      	mov	r5, r9
 800a400:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a404:	2b09      	cmp	r3, #9
 800a406:	d912      	bls.n	800a42e <_strtod_l+0x206>
 800a408:	2301      	movs	r3, #1
 800a40a:	e7c2      	b.n	800a392 <_strtod_l+0x16a>
 800a40c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	9219      	str	r2, [sp, #100]	@ 0x64
 800a412:	785a      	ldrb	r2, [r3, #1]
 800a414:	3001      	adds	r0, #1
 800a416:	2a30      	cmp	r2, #48	@ 0x30
 800a418:	d0f8      	beq.n	800a40c <_strtod_l+0x1e4>
 800a41a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a41e:	2b08      	cmp	r3, #8
 800a420:	f200 84d2 	bhi.w	800adc8 <_strtod_l+0xba0>
 800a424:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a426:	900a      	str	r0, [sp, #40]	@ 0x28
 800a428:	2000      	movs	r0, #0
 800a42a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a42c:	4605      	mov	r5, r0
 800a42e:	3a30      	subs	r2, #48	@ 0x30
 800a430:	f100 0301 	add.w	r3, r0, #1
 800a434:	d018      	beq.n	800a468 <_strtod_l+0x240>
 800a436:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a438:	4419      	add	r1, r3
 800a43a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a43c:	462e      	mov	r6, r5
 800a43e:	f04f 0e0a 	mov.w	lr, #10
 800a442:	1c71      	adds	r1, r6, #1
 800a444:	eba1 0c05 	sub.w	ip, r1, r5
 800a448:	4563      	cmp	r3, ip
 800a44a:	dc15      	bgt.n	800a478 <_strtod_l+0x250>
 800a44c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a450:	182b      	adds	r3, r5, r0
 800a452:	2b08      	cmp	r3, #8
 800a454:	f105 0501 	add.w	r5, r5, #1
 800a458:	4405      	add	r5, r0
 800a45a:	dc1a      	bgt.n	800a492 <_strtod_l+0x26a>
 800a45c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a45e:	230a      	movs	r3, #10
 800a460:	fb03 2301 	mla	r3, r3, r1, r2
 800a464:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a466:	2300      	movs	r3, #0
 800a468:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a46a:	1c51      	adds	r1, r2, #1
 800a46c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a46e:	7852      	ldrb	r2, [r2, #1]
 800a470:	4618      	mov	r0, r3
 800a472:	e7c5      	b.n	800a400 <_strtod_l+0x1d8>
 800a474:	4648      	mov	r0, r9
 800a476:	e7ce      	b.n	800a416 <_strtod_l+0x1ee>
 800a478:	2e08      	cmp	r6, #8
 800a47a:	dc05      	bgt.n	800a488 <_strtod_l+0x260>
 800a47c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a47e:	fb0e f606 	mul.w	r6, lr, r6
 800a482:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a484:	460e      	mov	r6, r1
 800a486:	e7dc      	b.n	800a442 <_strtod_l+0x21a>
 800a488:	2910      	cmp	r1, #16
 800a48a:	bfd8      	it	le
 800a48c:	fb0e f707 	mulle.w	r7, lr, r7
 800a490:	e7f8      	b.n	800a484 <_strtod_l+0x25c>
 800a492:	2b0f      	cmp	r3, #15
 800a494:	bfdc      	itt	le
 800a496:	230a      	movle	r3, #10
 800a498:	fb03 2707 	mlale	r7, r3, r7, r2
 800a49c:	e7e3      	b.n	800a466 <_strtod_l+0x23e>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e77a      	b.n	800a39c <_strtod_l+0x174>
 800a4a6:	f04f 0c00 	mov.w	ip, #0
 800a4aa:	1ca2      	adds	r2, r4, #2
 800a4ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4ae:	78a2      	ldrb	r2, [r4, #2]
 800a4b0:	e782      	b.n	800a3b8 <_strtod_l+0x190>
 800a4b2:	f04f 0c01 	mov.w	ip, #1
 800a4b6:	e7f8      	b.n	800a4aa <_strtod_l+0x282>
 800a4b8:	0800c42c 	.word	0x0800c42c
 800a4bc:	0800c263 	.word	0x0800c263
 800a4c0:	7ff00000 	.word	0x7ff00000
 800a4c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4c6:	1c51      	adds	r1, r2, #1
 800a4c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4ca:	7852      	ldrb	r2, [r2, #1]
 800a4cc:	2a30      	cmp	r2, #48	@ 0x30
 800a4ce:	d0f9      	beq.n	800a4c4 <_strtod_l+0x29c>
 800a4d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a4d4:	2908      	cmp	r1, #8
 800a4d6:	f63f af75 	bhi.w	800a3c4 <_strtod_l+0x19c>
 800a4da:	3a30      	subs	r2, #48	@ 0x30
 800a4dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a4e2:	f04f 080a 	mov.w	r8, #10
 800a4e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4e8:	1c56      	adds	r6, r2, #1
 800a4ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800a4ec:	7852      	ldrb	r2, [r2, #1]
 800a4ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a4f2:	f1be 0f09 	cmp.w	lr, #9
 800a4f6:	d939      	bls.n	800a56c <_strtod_l+0x344>
 800a4f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a4fa:	1a76      	subs	r6, r6, r1
 800a4fc:	2e08      	cmp	r6, #8
 800a4fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a502:	dc03      	bgt.n	800a50c <_strtod_l+0x2e4>
 800a504:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a506:	4588      	cmp	r8, r1
 800a508:	bfa8      	it	ge
 800a50a:	4688      	movge	r8, r1
 800a50c:	f1bc 0f00 	cmp.w	ip, #0
 800a510:	d001      	beq.n	800a516 <_strtod_l+0x2ee>
 800a512:	f1c8 0800 	rsb	r8, r8, #0
 800a516:	2d00      	cmp	r5, #0
 800a518:	d14e      	bne.n	800a5b8 <_strtod_l+0x390>
 800a51a:	9908      	ldr	r1, [sp, #32]
 800a51c:	4308      	orrs	r0, r1
 800a51e:	f47f aebc 	bne.w	800a29a <_strtod_l+0x72>
 800a522:	2b00      	cmp	r3, #0
 800a524:	f47f aed4 	bne.w	800a2d0 <_strtod_l+0xa8>
 800a528:	2a69      	cmp	r2, #105	@ 0x69
 800a52a:	d028      	beq.n	800a57e <_strtod_l+0x356>
 800a52c:	dc25      	bgt.n	800a57a <_strtod_l+0x352>
 800a52e:	2a49      	cmp	r2, #73	@ 0x49
 800a530:	d025      	beq.n	800a57e <_strtod_l+0x356>
 800a532:	2a4e      	cmp	r2, #78	@ 0x4e
 800a534:	f47f aecc 	bne.w	800a2d0 <_strtod_l+0xa8>
 800a538:	499a      	ldr	r1, [pc, #616]	@ (800a7a4 <_strtod_l+0x57c>)
 800a53a:	a819      	add	r0, sp, #100	@ 0x64
 800a53c:	f001 fbc4 	bl	800bcc8 <__match>
 800a540:	2800      	cmp	r0, #0
 800a542:	f43f aec5 	beq.w	800a2d0 <_strtod_l+0xa8>
 800a546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b28      	cmp	r3, #40	@ 0x28
 800a54c:	d12e      	bne.n	800a5ac <_strtod_l+0x384>
 800a54e:	4996      	ldr	r1, [pc, #600]	@ (800a7a8 <_strtod_l+0x580>)
 800a550:	aa1c      	add	r2, sp, #112	@ 0x70
 800a552:	a819      	add	r0, sp, #100	@ 0x64
 800a554:	f001 fbcc 	bl	800bcf0 <__hexnan>
 800a558:	2805      	cmp	r0, #5
 800a55a:	d127      	bne.n	800a5ac <_strtod_l+0x384>
 800a55c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a55e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a562:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a566:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a56a:	e696      	b.n	800a29a <_strtod_l+0x72>
 800a56c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a56e:	fb08 2101 	mla	r1, r8, r1, r2
 800a572:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a576:	9209      	str	r2, [sp, #36]	@ 0x24
 800a578:	e7b5      	b.n	800a4e6 <_strtod_l+0x2be>
 800a57a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a57c:	e7da      	b.n	800a534 <_strtod_l+0x30c>
 800a57e:	498b      	ldr	r1, [pc, #556]	@ (800a7ac <_strtod_l+0x584>)
 800a580:	a819      	add	r0, sp, #100	@ 0x64
 800a582:	f001 fba1 	bl	800bcc8 <__match>
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f aea2 	beq.w	800a2d0 <_strtod_l+0xa8>
 800a58c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a58e:	4988      	ldr	r1, [pc, #544]	@ (800a7b0 <_strtod_l+0x588>)
 800a590:	3b01      	subs	r3, #1
 800a592:	a819      	add	r0, sp, #100	@ 0x64
 800a594:	9319      	str	r3, [sp, #100]	@ 0x64
 800a596:	f001 fb97 	bl	800bcc8 <__match>
 800a59a:	b910      	cbnz	r0, 800a5a2 <_strtod_l+0x37a>
 800a59c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a59e:	3301      	adds	r3, #1
 800a5a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a7c0 <_strtod_l+0x598>
 800a5a6:	f04f 0a00 	mov.w	sl, #0
 800a5aa:	e676      	b.n	800a29a <_strtod_l+0x72>
 800a5ac:	4881      	ldr	r0, [pc, #516]	@ (800a7b4 <_strtod_l+0x58c>)
 800a5ae:	f001 f8c7 	bl	800b740 <nan>
 800a5b2:	ec5b ab10 	vmov	sl, fp, d0
 800a5b6:	e670      	b.n	800a29a <_strtod_l+0x72>
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a5bc:	eba8 0303 	sub.w	r3, r8, r3
 800a5c0:	f1b9 0f00 	cmp.w	r9, #0
 800a5c4:	bf08      	it	eq
 800a5c6:	46a9      	moveq	r9, r5
 800a5c8:	2d10      	cmp	r5, #16
 800a5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5cc:	462c      	mov	r4, r5
 800a5ce:	bfa8      	it	ge
 800a5d0:	2410      	movge	r4, #16
 800a5d2:	f7f5 ff97 	bl	8000504 <__aeabi_ui2d>
 800a5d6:	2d09      	cmp	r5, #9
 800a5d8:	4682      	mov	sl, r0
 800a5da:	468b      	mov	fp, r1
 800a5dc:	dc13      	bgt.n	800a606 <_strtod_l+0x3de>
 800a5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f43f ae5a 	beq.w	800a29a <_strtod_l+0x72>
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	dd78      	ble.n	800a6dc <_strtod_l+0x4b4>
 800a5ea:	2b16      	cmp	r3, #22
 800a5ec:	dc5f      	bgt.n	800a6ae <_strtod_l+0x486>
 800a5ee:	4972      	ldr	r1, [pc, #456]	@ (800a7b8 <_strtod_l+0x590>)
 800a5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	f7f5 fffc 	bl	80005f8 <__aeabi_dmul>
 800a600:	4682      	mov	sl, r0
 800a602:	468b      	mov	fp, r1
 800a604:	e649      	b.n	800a29a <_strtod_l+0x72>
 800a606:	4b6c      	ldr	r3, [pc, #432]	@ (800a7b8 <_strtod_l+0x590>)
 800a608:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a60c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a610:	f7f5 fff2 	bl	80005f8 <__aeabi_dmul>
 800a614:	4682      	mov	sl, r0
 800a616:	4638      	mov	r0, r7
 800a618:	468b      	mov	fp, r1
 800a61a:	f7f5 ff73 	bl	8000504 <__aeabi_ui2d>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4650      	mov	r0, sl
 800a624:	4659      	mov	r1, fp
 800a626:	f7f5 fe31 	bl	800028c <__adddf3>
 800a62a:	2d0f      	cmp	r5, #15
 800a62c:	4682      	mov	sl, r0
 800a62e:	468b      	mov	fp, r1
 800a630:	ddd5      	ble.n	800a5de <_strtod_l+0x3b6>
 800a632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a634:	1b2c      	subs	r4, r5, r4
 800a636:	441c      	add	r4, r3
 800a638:	2c00      	cmp	r4, #0
 800a63a:	f340 8093 	ble.w	800a764 <_strtod_l+0x53c>
 800a63e:	f014 030f 	ands.w	r3, r4, #15
 800a642:	d00a      	beq.n	800a65a <_strtod_l+0x432>
 800a644:	495c      	ldr	r1, [pc, #368]	@ (800a7b8 <_strtod_l+0x590>)
 800a646:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a64a:	4652      	mov	r2, sl
 800a64c:	465b      	mov	r3, fp
 800a64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	4682      	mov	sl, r0
 800a658:	468b      	mov	fp, r1
 800a65a:	f034 040f 	bics.w	r4, r4, #15
 800a65e:	d073      	beq.n	800a748 <_strtod_l+0x520>
 800a660:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a664:	dd49      	ble.n	800a6fa <_strtod_l+0x4d2>
 800a666:	2400      	movs	r4, #0
 800a668:	46a0      	mov	r8, r4
 800a66a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a66c:	46a1      	mov	r9, r4
 800a66e:	9a05      	ldr	r2, [sp, #20]
 800a670:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a7c0 <_strtod_l+0x598>
 800a674:	2322      	movs	r3, #34	@ 0x22
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	f04f 0a00 	mov.w	sl, #0
 800a67c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f43f ae0b 	beq.w	800a29a <_strtod_l+0x72>
 800a684:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a686:	9805      	ldr	r0, [sp, #20]
 800a688:	f7ff f946 	bl	8009918 <_Bfree>
 800a68c:	9805      	ldr	r0, [sp, #20]
 800a68e:	4649      	mov	r1, r9
 800a690:	f7ff f942 	bl	8009918 <_Bfree>
 800a694:	9805      	ldr	r0, [sp, #20]
 800a696:	4641      	mov	r1, r8
 800a698:	f7ff f93e 	bl	8009918 <_Bfree>
 800a69c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a69e:	9805      	ldr	r0, [sp, #20]
 800a6a0:	f7ff f93a 	bl	8009918 <_Bfree>
 800a6a4:	9805      	ldr	r0, [sp, #20]
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	f7ff f936 	bl	8009918 <_Bfree>
 800a6ac:	e5f5      	b.n	800a29a <_strtod_l+0x72>
 800a6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	dbbc      	blt.n	800a632 <_strtod_l+0x40a>
 800a6b8:	4c3f      	ldr	r4, [pc, #252]	@ (800a7b8 <_strtod_l+0x590>)
 800a6ba:	f1c5 050f 	rsb	r5, r5, #15
 800a6be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ca:	f7f5 ff95 	bl	80005f8 <__aeabi_dmul>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6d0:	1b5d      	subs	r5, r3, r5
 800a6d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6da:	e78f      	b.n	800a5fc <_strtod_l+0x3d4>
 800a6dc:	3316      	adds	r3, #22
 800a6de:	dba8      	blt.n	800a632 <_strtod_l+0x40a>
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e2:	eba3 0808 	sub.w	r8, r3, r8
 800a6e6:	4b34      	ldr	r3, [pc, #208]	@ (800a7b8 <_strtod_l+0x590>)
 800a6e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a6ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	4659      	mov	r1, fp
 800a6f4:	f7f6 f8aa 	bl	800084c <__aeabi_ddiv>
 800a6f8:	e782      	b.n	800a600 <_strtod_l+0x3d8>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4f2f      	ldr	r7, [pc, #188]	@ (800a7bc <_strtod_l+0x594>)
 800a6fe:	1124      	asrs	r4, r4, #4
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	461e      	mov	r6, r3
 800a706:	2c01      	cmp	r4, #1
 800a708:	dc21      	bgt.n	800a74e <_strtod_l+0x526>
 800a70a:	b10b      	cbz	r3, 800a710 <_strtod_l+0x4e8>
 800a70c:	4682      	mov	sl, r0
 800a70e:	468b      	mov	fp, r1
 800a710:	492a      	ldr	r1, [pc, #168]	@ (800a7bc <_strtod_l+0x594>)
 800a712:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a716:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a71a:	4652      	mov	r2, sl
 800a71c:	465b      	mov	r3, fp
 800a71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a722:	f7f5 ff69 	bl	80005f8 <__aeabi_dmul>
 800a726:	4b26      	ldr	r3, [pc, #152]	@ (800a7c0 <_strtod_l+0x598>)
 800a728:	460a      	mov	r2, r1
 800a72a:	400b      	ands	r3, r1
 800a72c:	4925      	ldr	r1, [pc, #148]	@ (800a7c4 <_strtod_l+0x59c>)
 800a72e:	428b      	cmp	r3, r1
 800a730:	4682      	mov	sl, r0
 800a732:	d898      	bhi.n	800a666 <_strtod_l+0x43e>
 800a734:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a738:	428b      	cmp	r3, r1
 800a73a:	bf86      	itte	hi
 800a73c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a7c8 <_strtod_l+0x5a0>
 800a740:	f04f 3aff 	movhi.w	sl, #4294967295
 800a744:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a748:	2300      	movs	r3, #0
 800a74a:	9308      	str	r3, [sp, #32]
 800a74c:	e076      	b.n	800a83c <_strtod_l+0x614>
 800a74e:	07e2      	lsls	r2, r4, #31
 800a750:	d504      	bpl.n	800a75c <_strtod_l+0x534>
 800a752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a756:	f7f5 ff4f 	bl	80005f8 <__aeabi_dmul>
 800a75a:	2301      	movs	r3, #1
 800a75c:	3601      	adds	r6, #1
 800a75e:	1064      	asrs	r4, r4, #1
 800a760:	3708      	adds	r7, #8
 800a762:	e7d0      	b.n	800a706 <_strtod_l+0x4de>
 800a764:	d0f0      	beq.n	800a748 <_strtod_l+0x520>
 800a766:	4264      	negs	r4, r4
 800a768:	f014 020f 	ands.w	r2, r4, #15
 800a76c:	d00a      	beq.n	800a784 <_strtod_l+0x55c>
 800a76e:	4b12      	ldr	r3, [pc, #72]	@ (800a7b8 <_strtod_l+0x590>)
 800a770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a774:	4650      	mov	r0, sl
 800a776:	4659      	mov	r1, fp
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f6 f866 	bl	800084c <__aeabi_ddiv>
 800a780:	4682      	mov	sl, r0
 800a782:	468b      	mov	fp, r1
 800a784:	1124      	asrs	r4, r4, #4
 800a786:	d0df      	beq.n	800a748 <_strtod_l+0x520>
 800a788:	2c1f      	cmp	r4, #31
 800a78a:	dd1f      	ble.n	800a7cc <_strtod_l+0x5a4>
 800a78c:	2400      	movs	r4, #0
 800a78e:	46a0      	mov	r8, r4
 800a790:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a792:	46a1      	mov	r9, r4
 800a794:	9a05      	ldr	r2, [sp, #20]
 800a796:	2322      	movs	r3, #34	@ 0x22
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	f04f 0b00 	mov.w	fp, #0
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e76b      	b.n	800a67c <_strtod_l+0x454>
 800a7a4:	0800c151 	.word	0x0800c151
 800a7a8:	0800c418 	.word	0x0800c418
 800a7ac:	0800c149 	.word	0x0800c149
 800a7b0:	0800c180 	.word	0x0800c180
 800a7b4:	0800c2b9 	.word	0x0800c2b9
 800a7b8:	0800c350 	.word	0x0800c350
 800a7bc:	0800c328 	.word	0x0800c328
 800a7c0:	7ff00000 	.word	0x7ff00000
 800a7c4:	7ca00000 	.word	0x7ca00000
 800a7c8:	7fefffff 	.word	0x7fefffff
 800a7cc:	f014 0310 	ands.w	r3, r4, #16
 800a7d0:	bf18      	it	ne
 800a7d2:	236a      	movne	r3, #106	@ 0x6a
 800a7d4:	4ea9      	ldr	r6, [pc, #676]	@ (800aa7c <_strtod_l+0x854>)
 800a7d6:	9308      	str	r3, [sp, #32]
 800a7d8:	4650      	mov	r0, sl
 800a7da:	4659      	mov	r1, fp
 800a7dc:	2300      	movs	r3, #0
 800a7de:	07e7      	lsls	r7, r4, #31
 800a7e0:	d504      	bpl.n	800a7ec <_strtod_l+0x5c4>
 800a7e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7e6:	f7f5 ff07 	bl	80005f8 <__aeabi_dmul>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	1064      	asrs	r4, r4, #1
 800a7ee:	f106 0608 	add.w	r6, r6, #8
 800a7f2:	d1f4      	bne.n	800a7de <_strtod_l+0x5b6>
 800a7f4:	b10b      	cbz	r3, 800a7fa <_strtod_l+0x5d2>
 800a7f6:	4682      	mov	sl, r0
 800a7f8:	468b      	mov	fp, r1
 800a7fa:	9b08      	ldr	r3, [sp, #32]
 800a7fc:	b1b3      	cbz	r3, 800a82c <_strtod_l+0x604>
 800a7fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a802:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a806:	2b00      	cmp	r3, #0
 800a808:	4659      	mov	r1, fp
 800a80a:	dd0f      	ble.n	800a82c <_strtod_l+0x604>
 800a80c:	2b1f      	cmp	r3, #31
 800a80e:	dd56      	ble.n	800a8be <_strtod_l+0x696>
 800a810:	2b34      	cmp	r3, #52	@ 0x34
 800a812:	bfde      	ittt	le
 800a814:	f04f 33ff 	movle.w	r3, #4294967295
 800a818:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a81c:	4093      	lslle	r3, r2
 800a81e:	f04f 0a00 	mov.w	sl, #0
 800a822:	bfcc      	ite	gt
 800a824:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a828:	ea03 0b01 	andle.w	fp, r3, r1
 800a82c:	2200      	movs	r2, #0
 800a82e:	2300      	movs	r3, #0
 800a830:	4650      	mov	r0, sl
 800a832:	4659      	mov	r1, fp
 800a834:	f7f6 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d1a7      	bne.n	800a78c <_strtod_l+0x564>
 800a83c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a842:	9805      	ldr	r0, [sp, #20]
 800a844:	462b      	mov	r3, r5
 800a846:	464a      	mov	r2, r9
 800a848:	f7ff f8ce 	bl	80099e8 <__s2b>
 800a84c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a84e:	2800      	cmp	r0, #0
 800a850:	f43f af09 	beq.w	800a666 <_strtod_l+0x43e>
 800a854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a858:	2a00      	cmp	r2, #0
 800a85a:	eba3 0308 	sub.w	r3, r3, r8
 800a85e:	bfa8      	it	ge
 800a860:	2300      	movge	r3, #0
 800a862:	9312      	str	r3, [sp, #72]	@ 0x48
 800a864:	2400      	movs	r4, #0
 800a866:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a86a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a86c:	46a0      	mov	r8, r4
 800a86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a870:	9805      	ldr	r0, [sp, #20]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	f7ff f810 	bl	8009898 <_Balloc>
 800a878:	4681      	mov	r9, r0
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f43f aef7 	beq.w	800a66e <_strtod_l+0x446>
 800a880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	3202      	adds	r2, #2
 800a886:	f103 010c 	add.w	r1, r3, #12
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	300c      	adds	r0, #12
 800a88e:	f000 ff47 	bl	800b720 <memcpy>
 800a892:	ec4b ab10 	vmov	d0, sl, fp
 800a896:	9805      	ldr	r0, [sp, #20]
 800a898:	aa1c      	add	r2, sp, #112	@ 0x70
 800a89a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a89c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a8a0:	f7ff fbd6 	bl	800a050 <__d2b>
 800a8a4:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f aee1 	beq.w	800a66e <_strtod_l+0x446>
 800a8ac:	9805      	ldr	r0, [sp, #20]
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	f7ff f930 	bl	8009b14 <__i2b>
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	b948      	cbnz	r0, 800a8cc <_strtod_l+0x6a4>
 800a8b8:	f04f 0800 	mov.w	r8, #0
 800a8bc:	e6d7      	b.n	800a66e <_strtod_l+0x446>
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	ea03 0a0a 	and.w	sl, r3, sl
 800a8ca:	e7af      	b.n	800a82c <_strtod_l+0x604>
 800a8cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a8ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	bfab      	itete	ge
 800a8d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a8d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a8d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a8da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a8dc:	bfac      	ite	ge
 800a8de:	18ef      	addge	r7, r5, r3
 800a8e0:	1b5e      	sublt	r6, r3, r5
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	1aed      	subs	r5, r5, r3
 800a8e6:	4415      	add	r5, r2
 800a8e8:	4b65      	ldr	r3, [pc, #404]	@ (800aa80 <_strtod_l+0x858>)
 800a8ea:	3d01      	subs	r5, #1
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a8f2:	da50      	bge.n	800a996 <_strtod_l+0x76e>
 800a8f4:	1b5b      	subs	r3, r3, r5
 800a8f6:	2b1f      	cmp	r3, #31
 800a8f8:	eba2 0203 	sub.w	r2, r2, r3
 800a8fc:	f04f 0101 	mov.w	r1, #1
 800a900:	dc3d      	bgt.n	800a97e <_strtod_l+0x756>
 800a902:	fa01 f303 	lsl.w	r3, r1, r3
 800a906:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a908:	2300      	movs	r3, #0
 800a90a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a90c:	18bd      	adds	r5, r7, r2
 800a90e:	9b08      	ldr	r3, [sp, #32]
 800a910:	42af      	cmp	r7, r5
 800a912:	4416      	add	r6, r2
 800a914:	441e      	add	r6, r3
 800a916:	463b      	mov	r3, r7
 800a918:	bfa8      	it	ge
 800a91a:	462b      	movge	r3, r5
 800a91c:	42b3      	cmp	r3, r6
 800a91e:	bfa8      	it	ge
 800a920:	4633      	movge	r3, r6
 800a922:	2b00      	cmp	r3, #0
 800a924:	bfc2      	ittt	gt
 800a926:	1aed      	subgt	r5, r5, r3
 800a928:	1af6      	subgt	r6, r6, r3
 800a92a:	1aff      	subgt	r7, r7, r3
 800a92c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd16      	ble.n	800a960 <_strtod_l+0x738>
 800a932:	4641      	mov	r1, r8
 800a934:	9805      	ldr	r0, [sp, #20]
 800a936:	461a      	mov	r2, r3
 800a938:	f7ff f9a4 	bl	8009c84 <__pow5mult>
 800a93c:	4680      	mov	r8, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0ba      	beq.n	800a8b8 <_strtod_l+0x690>
 800a942:	4601      	mov	r1, r0
 800a944:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a946:	9805      	ldr	r0, [sp, #20]
 800a948:	f7ff f8fa 	bl	8009b40 <__multiply>
 800a94c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f ae8d 	beq.w	800a66e <_strtod_l+0x446>
 800a954:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a956:	9805      	ldr	r0, [sp, #20]
 800a958:	f7fe ffde 	bl	8009918 <_Bfree>
 800a95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a95e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a960:	2d00      	cmp	r5, #0
 800a962:	dc1d      	bgt.n	800a9a0 <_strtod_l+0x778>
 800a964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a966:	2b00      	cmp	r3, #0
 800a968:	dd23      	ble.n	800a9b2 <_strtod_l+0x78a>
 800a96a:	4649      	mov	r1, r9
 800a96c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a96e:	9805      	ldr	r0, [sp, #20]
 800a970:	f7ff f988 	bl	8009c84 <__pow5mult>
 800a974:	4681      	mov	r9, r0
 800a976:	b9e0      	cbnz	r0, 800a9b2 <_strtod_l+0x78a>
 800a978:	f04f 0900 	mov.w	r9, #0
 800a97c:	e677      	b.n	800a66e <_strtod_l+0x446>
 800a97e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a982:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a986:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a98a:	35e2      	adds	r5, #226	@ 0xe2
 800a98c:	fa01 f305 	lsl.w	r3, r1, r5
 800a990:	9310      	str	r3, [sp, #64]	@ 0x40
 800a992:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a994:	e7ba      	b.n	800a90c <_strtod_l+0x6e4>
 800a996:	2300      	movs	r3, #0
 800a998:	9310      	str	r3, [sp, #64]	@ 0x40
 800a99a:	2301      	movs	r3, #1
 800a99c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a99e:	e7b5      	b.n	800a90c <_strtod_l+0x6e4>
 800a9a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9a2:	9805      	ldr	r0, [sp, #20]
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	f7ff f9c7 	bl	8009d38 <__lshift>
 800a9aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d1d9      	bne.n	800a964 <_strtod_l+0x73c>
 800a9b0:	e65d      	b.n	800a66e <_strtod_l+0x446>
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	dd07      	ble.n	800a9c6 <_strtod_l+0x79e>
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	9805      	ldr	r0, [sp, #20]
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	f7ff f9bc 	bl	8009d38 <__lshift>
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d0d8      	beq.n	800a978 <_strtod_l+0x750>
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	dd08      	ble.n	800a9dc <_strtod_l+0x7b4>
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	9805      	ldr	r0, [sp, #20]
 800a9ce:	463a      	mov	r2, r7
 800a9d0:	f7ff f9b2 	bl	8009d38 <__lshift>
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f43f ae49 	beq.w	800a66e <_strtod_l+0x446>
 800a9dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9de:	9805      	ldr	r0, [sp, #20]
 800a9e0:	464a      	mov	r2, r9
 800a9e2:	f7ff fa31 	bl	8009e48 <__mdiff>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f43f ae40 	beq.w	800a66e <_strtod_l+0x446>
 800a9ee:	68c3      	ldr	r3, [r0, #12]
 800a9f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60c3      	str	r3, [r0, #12]
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	f7ff fa0a 	bl	8009e10 <__mcmp>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	da45      	bge.n	800aa8c <_strtod_l+0x864>
 800aa00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa02:	ea53 030a 	orrs.w	r3, r3, sl
 800aa06:	d16b      	bne.n	800aae0 <_strtod_l+0x8b8>
 800aa08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d167      	bne.n	800aae0 <_strtod_l+0x8b8>
 800aa10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa14:	0d1b      	lsrs	r3, r3, #20
 800aa16:	051b      	lsls	r3, r3, #20
 800aa18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa1c:	d960      	bls.n	800aae0 <_strtod_l+0x8b8>
 800aa1e:	6963      	ldr	r3, [r4, #20]
 800aa20:	b913      	cbnz	r3, 800aa28 <_strtod_l+0x800>
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	dd5b      	ble.n	800aae0 <_strtod_l+0x8b8>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	9805      	ldr	r0, [sp, #20]
 800aa2e:	f7ff f983 	bl	8009d38 <__lshift>
 800aa32:	4641      	mov	r1, r8
 800aa34:	4604      	mov	r4, r0
 800aa36:	f7ff f9eb 	bl	8009e10 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	dd50      	ble.n	800aae0 <_strtod_l+0x8b8>
 800aa3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa42:	9a08      	ldr	r2, [sp, #32]
 800aa44:	0d1b      	lsrs	r3, r3, #20
 800aa46:	051b      	lsls	r3, r3, #20
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	d06a      	beq.n	800ab22 <_strtod_l+0x8fa>
 800aa4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa50:	d867      	bhi.n	800ab22 <_strtod_l+0x8fa>
 800aa52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aa56:	f67f ae9d 	bls.w	800a794 <_strtod_l+0x56c>
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa84 <_strtod_l+0x85c>)
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	2200      	movs	r2, #0
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	4b08      	ldr	r3, [pc, #32]	@ (800aa88 <_strtod_l+0x860>)
 800aa68:	400b      	ands	r3, r1
 800aa6a:	4682      	mov	sl, r0
 800aa6c:	468b      	mov	fp, r1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f47f ae08 	bne.w	800a684 <_strtod_l+0x45c>
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	2322      	movs	r3, #34	@ 0x22
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	e603      	b.n	800a684 <_strtod_l+0x45c>
 800aa7c:	0800c440 	.word	0x0800c440
 800aa80:	fffffc02 	.word	0xfffffc02
 800aa84:	39500000 	.word	0x39500000
 800aa88:	7ff00000 	.word	0x7ff00000
 800aa8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aa90:	d165      	bne.n	800ab5e <_strtod_l+0x936>
 800aa92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa98:	b35a      	cbz	r2, 800aaf2 <_strtod_l+0x8ca>
 800aa9a:	4a9f      	ldr	r2, [pc, #636]	@ (800ad18 <_strtod_l+0xaf0>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d12b      	bne.n	800aaf8 <_strtod_l+0x8d0>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	4651      	mov	r1, sl
 800aaa4:	b303      	cbz	r3, 800aae8 <_strtod_l+0x8c0>
 800aaa6:	4b9d      	ldr	r3, [pc, #628]	@ (800ad1c <_strtod_l+0xaf4>)
 800aaa8:	465a      	mov	r2, fp
 800aaaa:	4013      	ands	r3, r2
 800aaac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aab0:	f04f 32ff 	mov.w	r2, #4294967295
 800aab4:	d81b      	bhi.n	800aaee <_strtod_l+0x8c6>
 800aab6:	0d1b      	lsrs	r3, r3, #20
 800aab8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aabc:	fa02 f303 	lsl.w	r3, r2, r3
 800aac0:	4299      	cmp	r1, r3
 800aac2:	d119      	bne.n	800aaf8 <_strtod_l+0x8d0>
 800aac4:	4b96      	ldr	r3, [pc, #600]	@ (800ad20 <_strtod_l+0xaf8>)
 800aac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d102      	bne.n	800aad2 <_strtod_l+0x8aa>
 800aacc:	3101      	adds	r1, #1
 800aace:	f43f adce 	beq.w	800a66e <_strtod_l+0x446>
 800aad2:	4b92      	ldr	r3, [pc, #584]	@ (800ad1c <_strtod_l+0xaf4>)
 800aad4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aad6:	401a      	ands	r2, r3
 800aad8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aadc:	f04f 0a00 	mov.w	sl, #0
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1b9      	bne.n	800aa5a <_strtod_l+0x832>
 800aae6:	e5cd      	b.n	800a684 <_strtod_l+0x45c>
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	e7e8      	b.n	800aac0 <_strtod_l+0x898>
 800aaee:	4613      	mov	r3, r2
 800aaf0:	e7e6      	b.n	800aac0 <_strtod_l+0x898>
 800aaf2:	ea53 030a 	orrs.w	r3, r3, sl
 800aaf6:	d0a2      	beq.n	800aa3e <_strtod_l+0x816>
 800aaf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aafa:	b1db      	cbz	r3, 800ab34 <_strtod_l+0x90c>
 800aafc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aafe:	4213      	tst	r3, r2
 800ab00:	d0ee      	beq.n	800aae0 <_strtod_l+0x8b8>
 800ab02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab04:	9a08      	ldr	r2, [sp, #32]
 800ab06:	4650      	mov	r0, sl
 800ab08:	4659      	mov	r1, fp
 800ab0a:	b1bb      	cbz	r3, 800ab3c <_strtod_l+0x914>
 800ab0c:	f7ff fb6e 	bl	800a1ec <sulp>
 800ab10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab14:	ec53 2b10 	vmov	r2, r3, d0
 800ab18:	f7f5 fbb8 	bl	800028c <__adddf3>
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	468b      	mov	fp, r1
 800ab20:	e7de      	b.n	800aae0 <_strtod_l+0x8b8>
 800ab22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ab26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab2e:	f04f 3aff 	mov.w	sl, #4294967295
 800ab32:	e7d5      	b.n	800aae0 <_strtod_l+0x8b8>
 800ab34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab36:	ea13 0f0a 	tst.w	r3, sl
 800ab3a:	e7e1      	b.n	800ab00 <_strtod_l+0x8d8>
 800ab3c:	f7ff fb56 	bl	800a1ec <sulp>
 800ab40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab44:	ec53 2b10 	vmov	r2, r3, d0
 800ab48:	f7f5 fb9e 	bl	8000288 <__aeabi_dsub>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4682      	mov	sl, r0
 800ab52:	468b      	mov	fp, r1
 800ab54:	f7f5 ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d0c1      	beq.n	800aae0 <_strtod_l+0x8b8>
 800ab5c:	e61a      	b.n	800a794 <_strtod_l+0x56c>
 800ab5e:	4641      	mov	r1, r8
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff facd 	bl	800a100 <__ratio>
 800ab66:	ec57 6b10 	vmov	r6, r7, d0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab70:	4630      	mov	r0, r6
 800ab72:	4639      	mov	r1, r7
 800ab74:	f7f5 ffbc 	bl	8000af0 <__aeabi_dcmple>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d06f      	beq.n	800ac5c <_strtod_l+0xa34>
 800ab7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d17a      	bne.n	800ac78 <_strtod_l+0xa50>
 800ab82:	f1ba 0f00 	cmp.w	sl, #0
 800ab86:	d158      	bne.n	800ac3a <_strtod_l+0xa12>
 800ab88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d15a      	bne.n	800ac48 <_strtod_l+0xa20>
 800ab92:	4b64      	ldr	r3, [pc, #400]	@ (800ad24 <_strtod_l+0xafc>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	4630      	mov	r0, r6
 800ab98:	4639      	mov	r1, r7
 800ab9a:	f7f5 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d159      	bne.n	800ac56 <_strtod_l+0xa2e>
 800aba2:	4630      	mov	r0, r6
 800aba4:	4639      	mov	r1, r7
 800aba6:	4b60      	ldr	r3, [pc, #384]	@ (800ad28 <_strtod_l+0xb00>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	f7f5 fd25 	bl	80005f8 <__aeabi_dmul>
 800abae:	4606      	mov	r6, r0
 800abb0:	460f      	mov	r7, r1
 800abb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800abb6:	9606      	str	r6, [sp, #24]
 800abb8:	9307      	str	r3, [sp, #28]
 800abba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abbe:	4d57      	ldr	r5, [pc, #348]	@ (800ad1c <_strtod_l+0xaf4>)
 800abc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc6:	401d      	ands	r5, r3
 800abc8:	4b58      	ldr	r3, [pc, #352]	@ (800ad2c <_strtod_l+0xb04>)
 800abca:	429d      	cmp	r5, r3
 800abcc:	f040 80b2 	bne.w	800ad34 <_strtod_l+0xb0c>
 800abd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800abd6:	ec4b ab10 	vmov	d0, sl, fp
 800abda:	f7ff f9c9 	bl	8009f70 <__ulp>
 800abde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abe2:	ec51 0b10 	vmov	r0, r1, d0
 800abe6:	f7f5 fd07 	bl	80005f8 <__aeabi_dmul>
 800abea:	4652      	mov	r2, sl
 800abec:	465b      	mov	r3, fp
 800abee:	f7f5 fb4d 	bl	800028c <__adddf3>
 800abf2:	460b      	mov	r3, r1
 800abf4:	4949      	ldr	r1, [pc, #292]	@ (800ad1c <_strtod_l+0xaf4>)
 800abf6:	4a4e      	ldr	r2, [pc, #312]	@ (800ad30 <_strtod_l+0xb08>)
 800abf8:	4019      	ands	r1, r3
 800abfa:	4291      	cmp	r1, r2
 800abfc:	4682      	mov	sl, r0
 800abfe:	d942      	bls.n	800ac86 <_strtod_l+0xa5e>
 800ac00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac02:	4b47      	ldr	r3, [pc, #284]	@ (800ad20 <_strtod_l+0xaf8>)
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d103      	bne.n	800ac10 <_strtod_l+0x9e8>
 800ac08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f43f ad2f 	beq.w	800a66e <_strtod_l+0x446>
 800ac10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ad20 <_strtod_l+0xaf8>
 800ac14:	f04f 3aff 	mov.w	sl, #4294967295
 800ac18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac1a:	9805      	ldr	r0, [sp, #20]
 800ac1c:	f7fe fe7c 	bl	8009918 <_Bfree>
 800ac20:	9805      	ldr	r0, [sp, #20]
 800ac22:	4649      	mov	r1, r9
 800ac24:	f7fe fe78 	bl	8009918 <_Bfree>
 800ac28:	9805      	ldr	r0, [sp, #20]
 800ac2a:	4641      	mov	r1, r8
 800ac2c:	f7fe fe74 	bl	8009918 <_Bfree>
 800ac30:	9805      	ldr	r0, [sp, #20]
 800ac32:	4621      	mov	r1, r4
 800ac34:	f7fe fe70 	bl	8009918 <_Bfree>
 800ac38:	e619      	b.n	800a86e <_strtod_l+0x646>
 800ac3a:	f1ba 0f01 	cmp.w	sl, #1
 800ac3e:	d103      	bne.n	800ac48 <_strtod_l+0xa20>
 800ac40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f43f ada6 	beq.w	800a794 <_strtod_l+0x56c>
 800ac48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800acf8 <_strtod_l+0xad0>
 800ac4c:	4f35      	ldr	r7, [pc, #212]	@ (800ad24 <_strtod_l+0xafc>)
 800ac4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac52:	2600      	movs	r6, #0
 800ac54:	e7b1      	b.n	800abba <_strtod_l+0x992>
 800ac56:	4f34      	ldr	r7, [pc, #208]	@ (800ad28 <_strtod_l+0xb00>)
 800ac58:	2600      	movs	r6, #0
 800ac5a:	e7aa      	b.n	800abb2 <_strtod_l+0x98a>
 800ac5c:	4b32      	ldr	r3, [pc, #200]	@ (800ad28 <_strtod_l+0xb00>)
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	2200      	movs	r2, #0
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d09f      	beq.n	800abb2 <_strtod_l+0x98a>
 800ac72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac76:	e7a0      	b.n	800abba <_strtod_l+0x992>
 800ac78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ad00 <_strtod_l+0xad8>
 800ac7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac80:	ec57 6b17 	vmov	r6, r7, d7
 800ac84:	e799      	b.n	800abba <_strtod_l+0x992>
 800ac86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac8a:	9b08      	ldr	r3, [sp, #32]
 800ac8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1c1      	bne.n	800ac18 <_strtod_l+0x9f0>
 800ac94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac98:	0d1b      	lsrs	r3, r3, #20
 800ac9a:	051b      	lsls	r3, r3, #20
 800ac9c:	429d      	cmp	r5, r3
 800ac9e:	d1bb      	bne.n	800ac18 <_strtod_l+0x9f0>
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f6 f808 	bl	8000cb8 <__aeabi_d2lz>
 800aca8:	f7f5 fc78 	bl	800059c <__aeabi_l2d>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4630      	mov	r0, r6
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	460b      	mov	r3, r1
 800acba:	4602      	mov	r2, r0
 800acbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800acc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800acc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acc6:	ea46 060a 	orr.w	r6, r6, sl
 800acca:	431e      	orrs	r6, r3
 800accc:	d06f      	beq.n	800adae <_strtod_l+0xb86>
 800acce:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad08 <_strtod_l+0xae0>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f7f5 ff02 	bl	8000adc <__aeabi_dcmplt>
 800acd8:	2800      	cmp	r0, #0
 800acda:	f47f acd3 	bne.w	800a684 <_strtod_l+0x45c>
 800acde:	a30c      	add	r3, pc, #48	@ (adr r3, 800ad10 <_strtod_l+0xae8>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ace8:	f7f5 ff16 	bl	8000b18 <__aeabi_dcmpgt>
 800acec:	2800      	cmp	r0, #0
 800acee:	d093      	beq.n	800ac18 <_strtod_l+0x9f0>
 800acf0:	e4c8      	b.n	800a684 <_strtod_l+0x45c>
 800acf2:	bf00      	nop
 800acf4:	f3af 8000 	nop.w
 800acf8:	00000000 	.word	0x00000000
 800acfc:	bff00000 	.word	0xbff00000
 800ad00:	00000000 	.word	0x00000000
 800ad04:	3ff00000 	.word	0x3ff00000
 800ad08:	94a03595 	.word	0x94a03595
 800ad0c:	3fdfffff 	.word	0x3fdfffff
 800ad10:	35afe535 	.word	0x35afe535
 800ad14:	3fe00000 	.word	0x3fe00000
 800ad18:	000fffff 	.word	0x000fffff
 800ad1c:	7ff00000 	.word	0x7ff00000
 800ad20:	7fefffff 	.word	0x7fefffff
 800ad24:	3ff00000 	.word	0x3ff00000
 800ad28:	3fe00000 	.word	0x3fe00000
 800ad2c:	7fe00000 	.word	0x7fe00000
 800ad30:	7c9fffff 	.word	0x7c9fffff
 800ad34:	9b08      	ldr	r3, [sp, #32]
 800ad36:	b323      	cbz	r3, 800ad82 <_strtod_l+0xb5a>
 800ad38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ad3c:	d821      	bhi.n	800ad82 <_strtod_l+0xb5a>
 800ad3e:	a328      	add	r3, pc, #160	@ (adr r3, 800ade0 <_strtod_l+0xbb8>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	4630      	mov	r0, r6
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 fed2 	bl	8000af0 <__aeabi_dcmple>
 800ad4c:	b1a0      	cbz	r0, 800ad78 <_strtod_l+0xb50>
 800ad4e:	4639      	mov	r1, r7
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7f5 ff29 	bl	8000ba8 <__aeabi_d2uiz>
 800ad56:	2801      	cmp	r0, #1
 800ad58:	bf38      	it	cc
 800ad5a:	2001      	movcc	r0, #1
 800ad5c:	f7f5 fbd2 	bl	8000504 <__aeabi_ui2d>
 800ad60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad62:	4606      	mov	r6, r0
 800ad64:	460f      	mov	r7, r1
 800ad66:	b9fb      	cbnz	r3, 800ada8 <_strtod_l+0xb80>
 800ad68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ad74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ad7e:	1b5b      	subs	r3, r3, r5
 800ad80:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ad8a:	f7ff f8f1 	bl	8009f70 <__ulp>
 800ad8e:	4650      	mov	r0, sl
 800ad90:	ec53 2b10 	vmov	r2, r3, d0
 800ad94:	4659      	mov	r1, fp
 800ad96:	f7f5 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ad9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad9e:	f7f5 fa75 	bl	800028c <__adddf3>
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	e770      	b.n	800ac8a <_strtod_l+0xa62>
 800ada8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800adac:	e7e0      	b.n	800ad70 <_strtod_l+0xb48>
 800adae:	a30e      	add	r3, pc, #56	@ (adr r3, 800ade8 <_strtod_l+0xbc0>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fe92 	bl	8000adc <__aeabi_dcmplt>
 800adb8:	e798      	b.n	800acec <_strtod_l+0xac4>
 800adba:	2300      	movs	r3, #0
 800adbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800adbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800adc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	f7ff ba6d 	b.w	800a2a2 <_strtod_l+0x7a>
 800adc8:	2a65      	cmp	r2, #101	@ 0x65
 800adca:	f43f ab68 	beq.w	800a49e <_strtod_l+0x276>
 800adce:	2a45      	cmp	r2, #69	@ 0x45
 800add0:	f43f ab65 	beq.w	800a49e <_strtod_l+0x276>
 800add4:	2301      	movs	r3, #1
 800add6:	f7ff bba0 	b.w	800a51a <_strtod_l+0x2f2>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	ffc00000 	.word	0xffc00000
 800ade4:	41dfffff 	.word	0x41dfffff
 800ade8:	94a03595 	.word	0x94a03595
 800adec:	3fcfffff 	.word	0x3fcfffff

0800adf0 <_strtod_r>:
 800adf0:	4b01      	ldr	r3, [pc, #4]	@ (800adf8 <_strtod_r+0x8>)
 800adf2:	f7ff ba19 	b.w	800a228 <_strtod_l>
 800adf6:	bf00      	nop
 800adf8:	2000006c 	.word	0x2000006c

0800adfc <_strtol_l.isra.0>:
 800adfc:	2b24      	cmp	r3, #36	@ 0x24
 800adfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae02:	4686      	mov	lr, r0
 800ae04:	4690      	mov	r8, r2
 800ae06:	d801      	bhi.n	800ae0c <_strtol_l.isra.0+0x10>
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d106      	bne.n	800ae1a <_strtol_l.isra.0+0x1e>
 800ae0c:	f7fd fdb6 	bl	800897c <__errno>
 800ae10:	2316      	movs	r3, #22
 800ae12:	6003      	str	r3, [r0, #0]
 800ae14:	2000      	movs	r0, #0
 800ae16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1a:	4834      	ldr	r0, [pc, #208]	@ (800aeec <_strtol_l.isra.0+0xf0>)
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	462a      	mov	r2, r5
 800ae20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae24:	5d06      	ldrb	r6, [r0, r4]
 800ae26:	f016 0608 	ands.w	r6, r6, #8
 800ae2a:	d1f8      	bne.n	800ae1e <_strtol_l.isra.0+0x22>
 800ae2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae2e:	d110      	bne.n	800ae52 <_strtol_l.isra.0+0x56>
 800ae30:	782c      	ldrb	r4, [r5, #0]
 800ae32:	2601      	movs	r6, #1
 800ae34:	1c95      	adds	r5, r2, #2
 800ae36:	f033 0210 	bics.w	r2, r3, #16
 800ae3a:	d115      	bne.n	800ae68 <_strtol_l.isra.0+0x6c>
 800ae3c:	2c30      	cmp	r4, #48	@ 0x30
 800ae3e:	d10d      	bne.n	800ae5c <_strtol_l.isra.0+0x60>
 800ae40:	782a      	ldrb	r2, [r5, #0]
 800ae42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae46:	2a58      	cmp	r2, #88	@ 0x58
 800ae48:	d108      	bne.n	800ae5c <_strtol_l.isra.0+0x60>
 800ae4a:	786c      	ldrb	r4, [r5, #1]
 800ae4c:	3502      	adds	r5, #2
 800ae4e:	2310      	movs	r3, #16
 800ae50:	e00a      	b.n	800ae68 <_strtol_l.isra.0+0x6c>
 800ae52:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae54:	bf04      	itt	eq
 800ae56:	782c      	ldrbeq	r4, [r5, #0]
 800ae58:	1c95      	addeq	r5, r2, #2
 800ae5a:	e7ec      	b.n	800ae36 <_strtol_l.isra.0+0x3a>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1f6      	bne.n	800ae4e <_strtol_l.isra.0+0x52>
 800ae60:	2c30      	cmp	r4, #48	@ 0x30
 800ae62:	bf14      	ite	ne
 800ae64:	230a      	movne	r3, #10
 800ae66:	2308      	moveq	r3, #8
 800ae68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae70:	2200      	movs	r2, #0
 800ae72:	fbbc f9f3 	udiv	r9, ip, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae80:	2f09      	cmp	r7, #9
 800ae82:	d80f      	bhi.n	800aea4 <_strtol_l.isra.0+0xa8>
 800ae84:	463c      	mov	r4, r7
 800ae86:	42a3      	cmp	r3, r4
 800ae88:	dd1b      	ble.n	800aec2 <_strtol_l.isra.0+0xc6>
 800ae8a:	1c57      	adds	r7, r2, #1
 800ae8c:	d007      	beq.n	800ae9e <_strtol_l.isra.0+0xa2>
 800ae8e:	4581      	cmp	r9, r0
 800ae90:	d314      	bcc.n	800aebc <_strtol_l.isra.0+0xc0>
 800ae92:	d101      	bne.n	800ae98 <_strtol_l.isra.0+0x9c>
 800ae94:	45a2      	cmp	sl, r4
 800ae96:	db11      	blt.n	800aebc <_strtol_l.isra.0+0xc0>
 800ae98:	fb00 4003 	mla	r0, r0, r3, r4
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aea2:	e7eb      	b.n	800ae7c <_strtol_l.isra.0+0x80>
 800aea4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aea8:	2f19      	cmp	r7, #25
 800aeaa:	d801      	bhi.n	800aeb0 <_strtol_l.isra.0+0xb4>
 800aeac:	3c37      	subs	r4, #55	@ 0x37
 800aeae:	e7ea      	b.n	800ae86 <_strtol_l.isra.0+0x8a>
 800aeb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aeb4:	2f19      	cmp	r7, #25
 800aeb6:	d804      	bhi.n	800aec2 <_strtol_l.isra.0+0xc6>
 800aeb8:	3c57      	subs	r4, #87	@ 0x57
 800aeba:	e7e4      	b.n	800ae86 <_strtol_l.isra.0+0x8a>
 800aebc:	f04f 32ff 	mov.w	r2, #4294967295
 800aec0:	e7ed      	b.n	800ae9e <_strtol_l.isra.0+0xa2>
 800aec2:	1c53      	adds	r3, r2, #1
 800aec4:	d108      	bne.n	800aed8 <_strtol_l.isra.0+0xdc>
 800aec6:	2322      	movs	r3, #34	@ 0x22
 800aec8:	f8ce 3000 	str.w	r3, [lr]
 800aecc:	4660      	mov	r0, ip
 800aece:	f1b8 0f00 	cmp.w	r8, #0
 800aed2:	d0a0      	beq.n	800ae16 <_strtol_l.isra.0+0x1a>
 800aed4:	1e69      	subs	r1, r5, #1
 800aed6:	e006      	b.n	800aee6 <_strtol_l.isra.0+0xea>
 800aed8:	b106      	cbz	r6, 800aedc <_strtol_l.isra.0+0xe0>
 800aeda:	4240      	negs	r0, r0
 800aedc:	f1b8 0f00 	cmp.w	r8, #0
 800aee0:	d099      	beq.n	800ae16 <_strtol_l.isra.0+0x1a>
 800aee2:	2a00      	cmp	r2, #0
 800aee4:	d1f6      	bne.n	800aed4 <_strtol_l.isra.0+0xd8>
 800aee6:	f8c8 1000 	str.w	r1, [r8]
 800aeea:	e794      	b.n	800ae16 <_strtol_l.isra.0+0x1a>
 800aeec:	0800c469 	.word	0x0800c469

0800aef0 <_strtol_r>:
 800aef0:	f7ff bf84 	b.w	800adfc <_strtol_l.isra.0>

0800aef4 <__ssputs_r>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	688e      	ldr	r6, [r1, #8]
 800aefa:	461f      	mov	r7, r3
 800aefc:	42be      	cmp	r6, r7
 800aefe:	680b      	ldr	r3, [r1, #0]
 800af00:	4682      	mov	sl, r0
 800af02:	460c      	mov	r4, r1
 800af04:	4690      	mov	r8, r2
 800af06:	d82d      	bhi.n	800af64 <__ssputs_r+0x70>
 800af08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af10:	d026      	beq.n	800af60 <__ssputs_r+0x6c>
 800af12:	6965      	ldr	r5, [r4, #20]
 800af14:	6909      	ldr	r1, [r1, #16]
 800af16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af1a:	eba3 0901 	sub.w	r9, r3, r1
 800af1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af22:	1c7b      	adds	r3, r7, #1
 800af24:	444b      	add	r3, r9
 800af26:	106d      	asrs	r5, r5, #1
 800af28:	429d      	cmp	r5, r3
 800af2a:	bf38      	it	cc
 800af2c:	461d      	movcc	r5, r3
 800af2e:	0553      	lsls	r3, r2, #21
 800af30:	d527      	bpl.n	800af82 <__ssputs_r+0x8e>
 800af32:	4629      	mov	r1, r5
 800af34:	f7fe fc24 	bl	8009780 <_malloc_r>
 800af38:	4606      	mov	r6, r0
 800af3a:	b360      	cbz	r0, 800af96 <__ssputs_r+0xa2>
 800af3c:	6921      	ldr	r1, [r4, #16]
 800af3e:	464a      	mov	r2, r9
 800af40:	f000 fbee 	bl	800b720 <memcpy>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	6126      	str	r6, [r4, #16]
 800af52:	6165      	str	r5, [r4, #20]
 800af54:	444e      	add	r6, r9
 800af56:	eba5 0509 	sub.w	r5, r5, r9
 800af5a:	6026      	str	r6, [r4, #0]
 800af5c:	60a5      	str	r5, [r4, #8]
 800af5e:	463e      	mov	r6, r7
 800af60:	42be      	cmp	r6, r7
 800af62:	d900      	bls.n	800af66 <__ssputs_r+0x72>
 800af64:	463e      	mov	r6, r7
 800af66:	6820      	ldr	r0, [r4, #0]
 800af68:	4632      	mov	r2, r6
 800af6a:	4641      	mov	r1, r8
 800af6c:	f000 fb9c 	bl	800b6a8 <memmove>
 800af70:	68a3      	ldr	r3, [r4, #8]
 800af72:	1b9b      	subs	r3, r3, r6
 800af74:	60a3      	str	r3, [r4, #8]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	4433      	add	r3, r6
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	2000      	movs	r0, #0
 800af7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af82:	462a      	mov	r2, r5
 800af84:	f000 ff61 	bl	800be4a <_realloc_r>
 800af88:	4606      	mov	r6, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d1e0      	bne.n	800af50 <__ssputs_r+0x5c>
 800af8e:	6921      	ldr	r1, [r4, #16]
 800af90:	4650      	mov	r0, sl
 800af92:	f7fe fb81 	bl	8009698 <_free_r>
 800af96:	230c      	movs	r3, #12
 800af98:	f8ca 3000 	str.w	r3, [sl]
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	e7e9      	b.n	800af7e <__ssputs_r+0x8a>
	...

0800afac <_svfiprintf_r>:
 800afac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb0:	4698      	mov	r8, r3
 800afb2:	898b      	ldrh	r3, [r1, #12]
 800afb4:	061b      	lsls	r3, r3, #24
 800afb6:	b09d      	sub	sp, #116	@ 0x74
 800afb8:	4607      	mov	r7, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	4614      	mov	r4, r2
 800afbe:	d510      	bpl.n	800afe2 <_svfiprintf_r+0x36>
 800afc0:	690b      	ldr	r3, [r1, #16]
 800afc2:	b973      	cbnz	r3, 800afe2 <_svfiprintf_r+0x36>
 800afc4:	2140      	movs	r1, #64	@ 0x40
 800afc6:	f7fe fbdb 	bl	8009780 <_malloc_r>
 800afca:	6028      	str	r0, [r5, #0]
 800afcc:	6128      	str	r0, [r5, #16]
 800afce:	b930      	cbnz	r0, 800afde <_svfiprintf_r+0x32>
 800afd0:	230c      	movs	r3, #12
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	b01d      	add	sp, #116	@ 0x74
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	2340      	movs	r3, #64	@ 0x40
 800afe0:	616b      	str	r3, [r5, #20]
 800afe2:	2300      	movs	r3, #0
 800afe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe6:	2320      	movs	r3, #32
 800afe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afec:	f8cd 800c 	str.w	r8, [sp, #12]
 800aff0:	2330      	movs	r3, #48	@ 0x30
 800aff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b190 <_svfiprintf_r+0x1e4>
 800aff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800affa:	f04f 0901 	mov.w	r9, #1
 800affe:	4623      	mov	r3, r4
 800b000:	469a      	mov	sl, r3
 800b002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b006:	b10a      	cbz	r2, 800b00c <_svfiprintf_r+0x60>
 800b008:	2a25      	cmp	r2, #37	@ 0x25
 800b00a:	d1f9      	bne.n	800b000 <_svfiprintf_r+0x54>
 800b00c:	ebba 0b04 	subs.w	fp, sl, r4
 800b010:	d00b      	beq.n	800b02a <_svfiprintf_r+0x7e>
 800b012:	465b      	mov	r3, fp
 800b014:	4622      	mov	r2, r4
 800b016:	4629      	mov	r1, r5
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff ff6b 	bl	800aef4 <__ssputs_r>
 800b01e:	3001      	adds	r0, #1
 800b020:	f000 80a7 	beq.w	800b172 <_svfiprintf_r+0x1c6>
 800b024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b026:	445a      	add	r2, fp
 800b028:	9209      	str	r2, [sp, #36]	@ 0x24
 800b02a:	f89a 3000 	ldrb.w	r3, [sl]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 809f 	beq.w	800b172 <_svfiprintf_r+0x1c6>
 800b034:	2300      	movs	r3, #0
 800b036:	f04f 32ff 	mov.w	r2, #4294967295
 800b03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b03e:	f10a 0a01 	add.w	sl, sl, #1
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	9307      	str	r3, [sp, #28]
 800b046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b04a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b04c:	4654      	mov	r4, sl
 800b04e:	2205      	movs	r2, #5
 800b050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b054:	484e      	ldr	r0, [pc, #312]	@ (800b190 <_svfiprintf_r+0x1e4>)
 800b056:	f7f5 f8bb 	bl	80001d0 <memchr>
 800b05a:	9a04      	ldr	r2, [sp, #16]
 800b05c:	b9d8      	cbnz	r0, 800b096 <_svfiprintf_r+0xea>
 800b05e:	06d0      	lsls	r0, r2, #27
 800b060:	bf44      	itt	mi
 800b062:	2320      	movmi	r3, #32
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b068:	0711      	lsls	r1, r2, #28
 800b06a:	bf44      	itt	mi
 800b06c:	232b      	movmi	r3, #43	@ 0x2b
 800b06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b072:	f89a 3000 	ldrb.w	r3, [sl]
 800b076:	2b2a      	cmp	r3, #42	@ 0x2a
 800b078:	d015      	beq.n	800b0a6 <_svfiprintf_r+0xfa>
 800b07a:	9a07      	ldr	r2, [sp, #28]
 800b07c:	4654      	mov	r4, sl
 800b07e:	2000      	movs	r0, #0
 800b080:	f04f 0c0a 	mov.w	ip, #10
 800b084:	4621      	mov	r1, r4
 800b086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b08a:	3b30      	subs	r3, #48	@ 0x30
 800b08c:	2b09      	cmp	r3, #9
 800b08e:	d94b      	bls.n	800b128 <_svfiprintf_r+0x17c>
 800b090:	b1b0      	cbz	r0, 800b0c0 <_svfiprintf_r+0x114>
 800b092:	9207      	str	r2, [sp, #28]
 800b094:	e014      	b.n	800b0c0 <_svfiprintf_r+0x114>
 800b096:	eba0 0308 	sub.w	r3, r0, r8
 800b09a:	fa09 f303 	lsl.w	r3, r9, r3
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	46a2      	mov	sl, r4
 800b0a4:	e7d2      	b.n	800b04c <_svfiprintf_r+0xa0>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	1d19      	adds	r1, r3, #4
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	9103      	str	r1, [sp, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfbb      	ittet	lt
 800b0b2:	425b      	neglt	r3, r3
 800b0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0b8:	9307      	strge	r3, [sp, #28]
 800b0ba:	9307      	strlt	r3, [sp, #28]
 800b0bc:	bfb8      	it	lt
 800b0be:	9204      	strlt	r2, [sp, #16]
 800b0c0:	7823      	ldrb	r3, [r4, #0]
 800b0c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0c4:	d10a      	bne.n	800b0dc <_svfiprintf_r+0x130>
 800b0c6:	7863      	ldrb	r3, [r4, #1]
 800b0c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0ca:	d132      	bne.n	800b132 <_svfiprintf_r+0x186>
 800b0cc:	9b03      	ldr	r3, [sp, #12]
 800b0ce:	1d1a      	adds	r2, r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	9203      	str	r2, [sp, #12]
 800b0d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0d8:	3402      	adds	r4, #2
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b1a0 <_svfiprintf_r+0x1f4>
 800b0e0:	7821      	ldrb	r1, [r4, #0]
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	f7f5 f873 	bl	80001d0 <memchr>
 800b0ea:	b138      	cbz	r0, 800b0fc <_svfiprintf_r+0x150>
 800b0ec:	9b04      	ldr	r3, [sp, #16]
 800b0ee:	eba0 000a 	sub.w	r0, r0, sl
 800b0f2:	2240      	movs	r2, #64	@ 0x40
 800b0f4:	4082      	lsls	r2, r0
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	3401      	adds	r4, #1
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b100:	4824      	ldr	r0, [pc, #144]	@ (800b194 <_svfiprintf_r+0x1e8>)
 800b102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b106:	2206      	movs	r2, #6
 800b108:	f7f5 f862 	bl	80001d0 <memchr>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d036      	beq.n	800b17e <_svfiprintf_r+0x1d2>
 800b110:	4b21      	ldr	r3, [pc, #132]	@ (800b198 <_svfiprintf_r+0x1ec>)
 800b112:	bb1b      	cbnz	r3, 800b15c <_svfiprintf_r+0x1b0>
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	3307      	adds	r3, #7
 800b118:	f023 0307 	bic.w	r3, r3, #7
 800b11c:	3308      	adds	r3, #8
 800b11e:	9303      	str	r3, [sp, #12]
 800b120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b122:	4433      	add	r3, r6
 800b124:	9309      	str	r3, [sp, #36]	@ 0x24
 800b126:	e76a      	b.n	800affe <_svfiprintf_r+0x52>
 800b128:	fb0c 3202 	mla	r2, ip, r2, r3
 800b12c:	460c      	mov	r4, r1
 800b12e:	2001      	movs	r0, #1
 800b130:	e7a8      	b.n	800b084 <_svfiprintf_r+0xd8>
 800b132:	2300      	movs	r3, #0
 800b134:	3401      	adds	r4, #1
 800b136:	9305      	str	r3, [sp, #20]
 800b138:	4619      	mov	r1, r3
 800b13a:	f04f 0c0a 	mov.w	ip, #10
 800b13e:	4620      	mov	r0, r4
 800b140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b144:	3a30      	subs	r2, #48	@ 0x30
 800b146:	2a09      	cmp	r2, #9
 800b148:	d903      	bls.n	800b152 <_svfiprintf_r+0x1a6>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0c6      	beq.n	800b0dc <_svfiprintf_r+0x130>
 800b14e:	9105      	str	r1, [sp, #20]
 800b150:	e7c4      	b.n	800b0dc <_svfiprintf_r+0x130>
 800b152:	fb0c 2101 	mla	r1, ip, r1, r2
 800b156:	4604      	mov	r4, r0
 800b158:	2301      	movs	r3, #1
 800b15a:	e7f0      	b.n	800b13e <_svfiprintf_r+0x192>
 800b15c:	ab03      	add	r3, sp, #12
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	462a      	mov	r2, r5
 800b162:	4b0e      	ldr	r3, [pc, #56]	@ (800b19c <_svfiprintf_r+0x1f0>)
 800b164:	a904      	add	r1, sp, #16
 800b166:	4638      	mov	r0, r7
 800b168:	f7fc fcb8 	bl	8007adc <_printf_float>
 800b16c:	1c42      	adds	r2, r0, #1
 800b16e:	4606      	mov	r6, r0
 800b170:	d1d6      	bne.n	800b120 <_svfiprintf_r+0x174>
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	065b      	lsls	r3, r3, #25
 800b176:	f53f af2d 	bmi.w	800afd4 <_svfiprintf_r+0x28>
 800b17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b17c:	e72c      	b.n	800afd8 <_svfiprintf_r+0x2c>
 800b17e:	ab03      	add	r3, sp, #12
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	462a      	mov	r2, r5
 800b184:	4b05      	ldr	r3, [pc, #20]	@ (800b19c <_svfiprintf_r+0x1f0>)
 800b186:	a904      	add	r1, sp, #16
 800b188:	4638      	mov	r0, r7
 800b18a:	f7fc ff3f 	bl	800800c <_printf_i>
 800b18e:	e7ed      	b.n	800b16c <_svfiprintf_r+0x1c0>
 800b190:	0800c265 	.word	0x0800c265
 800b194:	0800c26f 	.word	0x0800c26f
 800b198:	08007add 	.word	0x08007add
 800b19c:	0800aef5 	.word	0x0800aef5
 800b1a0:	0800c26b 	.word	0x0800c26b

0800b1a4 <__sfputc_r>:
 800b1a4:	6893      	ldr	r3, [r2, #8]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	b410      	push	{r4}
 800b1ac:	6093      	str	r3, [r2, #8]
 800b1ae:	da08      	bge.n	800b1c2 <__sfputc_r+0x1e>
 800b1b0:	6994      	ldr	r4, [r2, #24]
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	db01      	blt.n	800b1ba <__sfputc_r+0x16>
 800b1b6:	290a      	cmp	r1, #10
 800b1b8:	d103      	bne.n	800b1c2 <__sfputc_r+0x1e>
 800b1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1be:	f000 b9df 	b.w	800b580 <__swbuf_r>
 800b1c2:	6813      	ldr	r3, [r2, #0]
 800b1c4:	1c58      	adds	r0, r3, #1
 800b1c6:	6010      	str	r0, [r2, #0]
 800b1c8:	7019      	strb	r1, [r3, #0]
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <__sfputs_r>:
 800b1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	460f      	mov	r7, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	18d5      	adds	r5, r2, r3
 800b1dc:	42ac      	cmp	r4, r5
 800b1de:	d101      	bne.n	800b1e4 <__sfputs_r+0x12>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e007      	b.n	800b1f4 <__sfputs_r+0x22>
 800b1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e8:	463a      	mov	r2, r7
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ffda 	bl	800b1a4 <__sfputc_r>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d1f3      	bne.n	800b1dc <__sfputs_r+0xa>
 800b1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1f8 <_vfiprintf_r>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	b09d      	sub	sp, #116	@ 0x74
 800b200:	4614      	mov	r4, r2
 800b202:	4698      	mov	r8, r3
 800b204:	4606      	mov	r6, r0
 800b206:	b118      	cbz	r0, 800b210 <_vfiprintf_r+0x18>
 800b208:	6a03      	ldr	r3, [r0, #32]
 800b20a:	b90b      	cbnz	r3, 800b210 <_vfiprintf_r+0x18>
 800b20c:	f7fd fab6 	bl	800877c <__sinit>
 800b210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b212:	07d9      	lsls	r1, r3, #31
 800b214:	d405      	bmi.n	800b222 <_vfiprintf_r+0x2a>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	059a      	lsls	r2, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_vfiprintf_r+0x2a>
 800b21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b21e:	f7fd fbd8 	bl	80089d2 <__retarget_lock_acquire_recursive>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	071b      	lsls	r3, r3, #28
 800b226:	d501      	bpl.n	800b22c <_vfiprintf_r+0x34>
 800b228:	692b      	ldr	r3, [r5, #16]
 800b22a:	b99b      	cbnz	r3, 800b254 <_vfiprintf_r+0x5c>
 800b22c:	4629      	mov	r1, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	f000 f9e4 	bl	800b5fc <__swsetup_r>
 800b234:	b170      	cbz	r0, 800b254 <_vfiprintf_r+0x5c>
 800b236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b238:	07dc      	lsls	r4, r3, #31
 800b23a:	d504      	bpl.n	800b246 <_vfiprintf_r+0x4e>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	b01d      	add	sp, #116	@ 0x74
 800b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	0598      	lsls	r0, r3, #22
 800b24a:	d4f7      	bmi.n	800b23c <_vfiprintf_r+0x44>
 800b24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b24e:	f7fd fbc1 	bl	80089d4 <__retarget_lock_release_recursive>
 800b252:	e7f3      	b.n	800b23c <_vfiprintf_r+0x44>
 800b254:	2300      	movs	r3, #0
 800b256:	9309      	str	r3, [sp, #36]	@ 0x24
 800b258:	2320      	movs	r3, #32
 800b25a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b262:	2330      	movs	r3, #48	@ 0x30
 800b264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b414 <_vfiprintf_r+0x21c>
 800b268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b26c:	f04f 0901 	mov.w	r9, #1
 800b270:	4623      	mov	r3, r4
 800b272:	469a      	mov	sl, r3
 800b274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b278:	b10a      	cbz	r2, 800b27e <_vfiprintf_r+0x86>
 800b27a:	2a25      	cmp	r2, #37	@ 0x25
 800b27c:	d1f9      	bne.n	800b272 <_vfiprintf_r+0x7a>
 800b27e:	ebba 0b04 	subs.w	fp, sl, r4
 800b282:	d00b      	beq.n	800b29c <_vfiprintf_r+0xa4>
 800b284:	465b      	mov	r3, fp
 800b286:	4622      	mov	r2, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7ff ffa1 	bl	800b1d2 <__sfputs_r>
 800b290:	3001      	adds	r0, #1
 800b292:	f000 80a7 	beq.w	800b3e4 <_vfiprintf_r+0x1ec>
 800b296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b298:	445a      	add	r2, fp
 800b29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b29c:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 809f 	beq.w	800b3e4 <_vfiprintf_r+0x1ec>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2b0:	f10a 0a01 	add.w	sl, sl, #1
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2be:	4654      	mov	r4, sl
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	4853      	ldr	r0, [pc, #332]	@ (800b414 <_vfiprintf_r+0x21c>)
 800b2c8:	f7f4 ff82 	bl	80001d0 <memchr>
 800b2cc:	9a04      	ldr	r2, [sp, #16]
 800b2ce:	b9d8      	cbnz	r0, 800b308 <_vfiprintf_r+0x110>
 800b2d0:	06d1      	lsls	r1, r2, #27
 800b2d2:	bf44      	itt	mi
 800b2d4:	2320      	movmi	r3, #32
 800b2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2da:	0713      	lsls	r3, r2, #28
 800b2dc:	bf44      	itt	mi
 800b2de:	232b      	movmi	r3, #43	@ 0x2b
 800b2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ea:	d015      	beq.n	800b318 <_vfiprintf_r+0x120>
 800b2ec:	9a07      	ldr	r2, [sp, #28]
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f04f 0c0a 	mov.w	ip, #10
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2fc:	3b30      	subs	r3, #48	@ 0x30
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d94b      	bls.n	800b39a <_vfiprintf_r+0x1a2>
 800b302:	b1b0      	cbz	r0, 800b332 <_vfiprintf_r+0x13a>
 800b304:	9207      	str	r2, [sp, #28]
 800b306:	e014      	b.n	800b332 <_vfiprintf_r+0x13a>
 800b308:	eba0 0308 	sub.w	r3, r0, r8
 800b30c:	fa09 f303 	lsl.w	r3, r9, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	46a2      	mov	sl, r4
 800b316:	e7d2      	b.n	800b2be <_vfiprintf_r+0xc6>
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	1d19      	adds	r1, r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	9103      	str	r1, [sp, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfbb      	ittet	lt
 800b324:	425b      	neglt	r3, r3
 800b326:	f042 0202 	orrlt.w	r2, r2, #2
 800b32a:	9307      	strge	r3, [sp, #28]
 800b32c:	9307      	strlt	r3, [sp, #28]
 800b32e:	bfb8      	it	lt
 800b330:	9204      	strlt	r2, [sp, #16]
 800b332:	7823      	ldrb	r3, [r4, #0]
 800b334:	2b2e      	cmp	r3, #46	@ 0x2e
 800b336:	d10a      	bne.n	800b34e <_vfiprintf_r+0x156>
 800b338:	7863      	ldrb	r3, [r4, #1]
 800b33a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b33c:	d132      	bne.n	800b3a4 <_vfiprintf_r+0x1ac>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	9203      	str	r2, [sp, #12]
 800b346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b34a:	3402      	adds	r4, #2
 800b34c:	9305      	str	r3, [sp, #20]
 800b34e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b424 <_vfiprintf_r+0x22c>
 800b352:	7821      	ldrb	r1, [r4, #0]
 800b354:	2203      	movs	r2, #3
 800b356:	4650      	mov	r0, sl
 800b358:	f7f4 ff3a 	bl	80001d0 <memchr>
 800b35c:	b138      	cbz	r0, 800b36e <_vfiprintf_r+0x176>
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	eba0 000a 	sub.w	r0, r0, sl
 800b364:	2240      	movs	r2, #64	@ 0x40
 800b366:	4082      	lsls	r2, r0
 800b368:	4313      	orrs	r3, r2
 800b36a:	3401      	adds	r4, #1
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b372:	4829      	ldr	r0, [pc, #164]	@ (800b418 <_vfiprintf_r+0x220>)
 800b374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b378:	2206      	movs	r2, #6
 800b37a:	f7f4 ff29 	bl	80001d0 <memchr>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d03f      	beq.n	800b402 <_vfiprintf_r+0x20a>
 800b382:	4b26      	ldr	r3, [pc, #152]	@ (800b41c <_vfiprintf_r+0x224>)
 800b384:	bb1b      	cbnz	r3, 800b3ce <_vfiprintf_r+0x1d6>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	3307      	adds	r3, #7
 800b38a:	f023 0307 	bic.w	r3, r3, #7
 800b38e:	3308      	adds	r3, #8
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b394:	443b      	add	r3, r7
 800b396:	9309      	str	r3, [sp, #36]	@ 0x24
 800b398:	e76a      	b.n	800b270 <_vfiprintf_r+0x78>
 800b39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b39e:	460c      	mov	r4, r1
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	e7a8      	b.n	800b2f6 <_vfiprintf_r+0xfe>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	3401      	adds	r4, #1
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	f04f 0c0a 	mov.w	ip, #10
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b6:	3a30      	subs	r2, #48	@ 0x30
 800b3b8:	2a09      	cmp	r2, #9
 800b3ba:	d903      	bls.n	800b3c4 <_vfiprintf_r+0x1cc>
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d0c6      	beq.n	800b34e <_vfiprintf_r+0x156>
 800b3c0:	9105      	str	r1, [sp, #20]
 800b3c2:	e7c4      	b.n	800b34e <_vfiprintf_r+0x156>
 800b3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e7f0      	b.n	800b3b0 <_vfiprintf_r+0x1b8>
 800b3ce:	ab03      	add	r3, sp, #12
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	4b12      	ldr	r3, [pc, #72]	@ (800b420 <_vfiprintf_r+0x228>)
 800b3d6:	a904      	add	r1, sp, #16
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7fc fb7f 	bl	8007adc <_printf_float>
 800b3de:	4607      	mov	r7, r0
 800b3e0:	1c78      	adds	r0, r7, #1
 800b3e2:	d1d6      	bne.n	800b392 <_vfiprintf_r+0x19a>
 800b3e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3e6:	07d9      	lsls	r1, r3, #31
 800b3e8:	d405      	bmi.n	800b3f6 <_vfiprintf_r+0x1fe>
 800b3ea:	89ab      	ldrh	r3, [r5, #12]
 800b3ec:	059a      	lsls	r2, r3, #22
 800b3ee:	d402      	bmi.n	800b3f6 <_vfiprintf_r+0x1fe>
 800b3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3f2:	f7fd faef 	bl	80089d4 <__retarget_lock_release_recursive>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	065b      	lsls	r3, r3, #25
 800b3fa:	f53f af1f 	bmi.w	800b23c <_vfiprintf_r+0x44>
 800b3fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b400:	e71e      	b.n	800b240 <_vfiprintf_r+0x48>
 800b402:	ab03      	add	r3, sp, #12
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	462a      	mov	r2, r5
 800b408:	4b05      	ldr	r3, [pc, #20]	@ (800b420 <_vfiprintf_r+0x228>)
 800b40a:	a904      	add	r1, sp, #16
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fc fdfd 	bl	800800c <_printf_i>
 800b412:	e7e4      	b.n	800b3de <_vfiprintf_r+0x1e6>
 800b414:	0800c265 	.word	0x0800c265
 800b418:	0800c26f 	.word	0x0800c26f
 800b41c:	08007add 	.word	0x08007add
 800b420:	0800b1d3 	.word	0x0800b1d3
 800b424:	0800c26b 	.word	0x0800c26b

0800b428 <__sflush_r>:
 800b428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b430:	0716      	lsls	r6, r2, #28
 800b432:	4605      	mov	r5, r0
 800b434:	460c      	mov	r4, r1
 800b436:	d454      	bmi.n	800b4e2 <__sflush_r+0xba>
 800b438:	684b      	ldr	r3, [r1, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	dc02      	bgt.n	800b444 <__sflush_r+0x1c>
 800b43e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b440:	2b00      	cmp	r3, #0
 800b442:	dd48      	ble.n	800b4d6 <__sflush_r+0xae>
 800b444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b446:	2e00      	cmp	r6, #0
 800b448:	d045      	beq.n	800b4d6 <__sflush_r+0xae>
 800b44a:	2300      	movs	r3, #0
 800b44c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b450:	682f      	ldr	r7, [r5, #0]
 800b452:	6a21      	ldr	r1, [r4, #32]
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	d030      	beq.n	800b4ba <__sflush_r+0x92>
 800b458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	0759      	lsls	r1, r3, #29
 800b45e:	d505      	bpl.n	800b46c <__sflush_r+0x44>
 800b460:	6863      	ldr	r3, [r4, #4]
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b466:	b10b      	cbz	r3, 800b46c <__sflush_r+0x44>
 800b468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	2300      	movs	r3, #0
 800b46e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b470:	6a21      	ldr	r1, [r4, #32]
 800b472:	4628      	mov	r0, r5
 800b474:	47b0      	blx	r6
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	d106      	bne.n	800b48a <__sflush_r+0x62>
 800b47c:	6829      	ldr	r1, [r5, #0]
 800b47e:	291d      	cmp	r1, #29
 800b480:	d82b      	bhi.n	800b4da <__sflush_r+0xb2>
 800b482:	4a2a      	ldr	r2, [pc, #168]	@ (800b52c <__sflush_r+0x104>)
 800b484:	40ca      	lsrs	r2, r1
 800b486:	07d6      	lsls	r6, r2, #31
 800b488:	d527      	bpl.n	800b4da <__sflush_r+0xb2>
 800b48a:	2200      	movs	r2, #0
 800b48c:	6062      	str	r2, [r4, #4]
 800b48e:	04d9      	lsls	r1, r3, #19
 800b490:	6922      	ldr	r2, [r4, #16]
 800b492:	6022      	str	r2, [r4, #0]
 800b494:	d504      	bpl.n	800b4a0 <__sflush_r+0x78>
 800b496:	1c42      	adds	r2, r0, #1
 800b498:	d101      	bne.n	800b49e <__sflush_r+0x76>
 800b49a:	682b      	ldr	r3, [r5, #0]
 800b49c:	b903      	cbnz	r3, 800b4a0 <__sflush_r+0x78>
 800b49e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4a2:	602f      	str	r7, [r5, #0]
 800b4a4:	b1b9      	cbz	r1, 800b4d6 <__sflush_r+0xae>
 800b4a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4aa:	4299      	cmp	r1, r3
 800b4ac:	d002      	beq.n	800b4b4 <__sflush_r+0x8c>
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f7fe f8f2 	bl	8009698 <_free_r>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4b8:	e00d      	b.n	800b4d6 <__sflush_r+0xae>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b0      	blx	r6
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	1c50      	adds	r0, r2, #1
 800b4c4:	d1c9      	bne.n	800b45a <__sflush_r+0x32>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0c6      	beq.n	800b45a <__sflush_r+0x32>
 800b4cc:	2b1d      	cmp	r3, #29
 800b4ce:	d001      	beq.n	800b4d4 <__sflush_r+0xac>
 800b4d0:	2b16      	cmp	r3, #22
 800b4d2:	d11e      	bne.n	800b512 <__sflush_r+0xea>
 800b4d4:	602f      	str	r7, [r5, #0]
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e022      	b.n	800b520 <__sflush_r+0xf8>
 800b4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4de:	b21b      	sxth	r3, r3
 800b4e0:	e01b      	b.n	800b51a <__sflush_r+0xf2>
 800b4e2:	690f      	ldr	r7, [r1, #16]
 800b4e4:	2f00      	cmp	r7, #0
 800b4e6:	d0f6      	beq.n	800b4d6 <__sflush_r+0xae>
 800b4e8:	0793      	lsls	r3, r2, #30
 800b4ea:	680e      	ldr	r6, [r1, #0]
 800b4ec:	bf08      	it	eq
 800b4ee:	694b      	ldreq	r3, [r1, #20]
 800b4f0:	600f      	str	r7, [r1, #0]
 800b4f2:	bf18      	it	ne
 800b4f4:	2300      	movne	r3, #0
 800b4f6:	eba6 0807 	sub.w	r8, r6, r7
 800b4fa:	608b      	str	r3, [r1, #8]
 800b4fc:	f1b8 0f00 	cmp.w	r8, #0
 800b500:	dde9      	ble.n	800b4d6 <__sflush_r+0xae>
 800b502:	6a21      	ldr	r1, [r4, #32]
 800b504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b506:	4643      	mov	r3, r8
 800b508:	463a      	mov	r2, r7
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b0      	blx	r6
 800b50e:	2800      	cmp	r0, #0
 800b510:	dc08      	bgt.n	800b524 <__sflush_r+0xfc>
 800b512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b524:	4407      	add	r7, r0
 800b526:	eba8 0800 	sub.w	r8, r8, r0
 800b52a:	e7e7      	b.n	800b4fc <__sflush_r+0xd4>
 800b52c:	20400001 	.word	0x20400001

0800b530 <_fflush_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	690b      	ldr	r3, [r1, #16]
 800b534:	4605      	mov	r5, r0
 800b536:	460c      	mov	r4, r1
 800b538:	b913      	cbnz	r3, 800b540 <_fflush_r+0x10>
 800b53a:	2500      	movs	r5, #0
 800b53c:	4628      	mov	r0, r5
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	b118      	cbz	r0, 800b54a <_fflush_r+0x1a>
 800b542:	6a03      	ldr	r3, [r0, #32]
 800b544:	b90b      	cbnz	r3, 800b54a <_fflush_r+0x1a>
 800b546:	f7fd f919 	bl	800877c <__sinit>
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0f3      	beq.n	800b53a <_fflush_r+0xa>
 800b552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b554:	07d0      	lsls	r0, r2, #31
 800b556:	d404      	bmi.n	800b562 <_fflush_r+0x32>
 800b558:	0599      	lsls	r1, r3, #22
 800b55a:	d402      	bmi.n	800b562 <_fflush_r+0x32>
 800b55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b55e:	f7fd fa38 	bl	80089d2 <__retarget_lock_acquire_recursive>
 800b562:	4628      	mov	r0, r5
 800b564:	4621      	mov	r1, r4
 800b566:	f7ff ff5f 	bl	800b428 <__sflush_r>
 800b56a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b56c:	07da      	lsls	r2, r3, #31
 800b56e:	4605      	mov	r5, r0
 800b570:	d4e4      	bmi.n	800b53c <_fflush_r+0xc>
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	059b      	lsls	r3, r3, #22
 800b576:	d4e1      	bmi.n	800b53c <_fflush_r+0xc>
 800b578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b57a:	f7fd fa2b 	bl	80089d4 <__retarget_lock_release_recursive>
 800b57e:	e7dd      	b.n	800b53c <_fflush_r+0xc>

0800b580 <__swbuf_r>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	460e      	mov	r6, r1
 800b584:	4614      	mov	r4, r2
 800b586:	4605      	mov	r5, r0
 800b588:	b118      	cbz	r0, 800b592 <__swbuf_r+0x12>
 800b58a:	6a03      	ldr	r3, [r0, #32]
 800b58c:	b90b      	cbnz	r3, 800b592 <__swbuf_r+0x12>
 800b58e:	f7fd f8f5 	bl	800877c <__sinit>
 800b592:	69a3      	ldr	r3, [r4, #24]
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	071a      	lsls	r2, r3, #28
 800b59a:	d501      	bpl.n	800b5a0 <__swbuf_r+0x20>
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	b943      	cbnz	r3, 800b5b2 <__swbuf_r+0x32>
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f000 f82a 	bl	800b5fc <__swsetup_r>
 800b5a8:	b118      	cbz	r0, 800b5b2 <__swbuf_r+0x32>
 800b5aa:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	6922      	ldr	r2, [r4, #16]
 800b5b6:	1a98      	subs	r0, r3, r2
 800b5b8:	6963      	ldr	r3, [r4, #20]
 800b5ba:	b2f6      	uxtb	r6, r6
 800b5bc:	4283      	cmp	r3, r0
 800b5be:	4637      	mov	r7, r6
 800b5c0:	dc05      	bgt.n	800b5ce <__swbuf_r+0x4e>
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f7ff ffb3 	bl	800b530 <_fflush_r>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d1ed      	bne.n	800b5aa <__swbuf_r+0x2a>
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	60a3      	str	r3, [r4, #8]
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	6022      	str	r2, [r4, #0]
 800b5da:	701e      	strb	r6, [r3, #0]
 800b5dc:	6962      	ldr	r2, [r4, #20]
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d004      	beq.n	800b5ee <__swbuf_r+0x6e>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	07db      	lsls	r3, r3, #31
 800b5e8:	d5e1      	bpl.n	800b5ae <__swbuf_r+0x2e>
 800b5ea:	2e0a      	cmp	r6, #10
 800b5ec:	d1df      	bne.n	800b5ae <__swbuf_r+0x2e>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f7ff ff9d 	bl	800b530 <_fflush_r>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0d9      	beq.n	800b5ae <__swbuf_r+0x2e>
 800b5fa:	e7d6      	b.n	800b5aa <__swbuf_r+0x2a>

0800b5fc <__swsetup_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4b29      	ldr	r3, [pc, #164]	@ (800b6a4 <__swsetup_r+0xa8>)
 800b600:	4605      	mov	r5, r0
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	460c      	mov	r4, r1
 800b606:	b118      	cbz	r0, 800b610 <__swsetup_r+0x14>
 800b608:	6a03      	ldr	r3, [r0, #32]
 800b60a:	b90b      	cbnz	r3, 800b610 <__swsetup_r+0x14>
 800b60c:	f7fd f8b6 	bl	800877c <__sinit>
 800b610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b614:	0719      	lsls	r1, r3, #28
 800b616:	d422      	bmi.n	800b65e <__swsetup_r+0x62>
 800b618:	06da      	lsls	r2, r3, #27
 800b61a:	d407      	bmi.n	800b62c <__swsetup_r+0x30>
 800b61c:	2209      	movs	r2, #9
 800b61e:	602a      	str	r2, [r5, #0]
 800b620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	f04f 30ff 	mov.w	r0, #4294967295
 800b62a:	e033      	b.n	800b694 <__swsetup_r+0x98>
 800b62c:	0758      	lsls	r0, r3, #29
 800b62e:	d512      	bpl.n	800b656 <__swsetup_r+0x5a>
 800b630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b632:	b141      	cbz	r1, 800b646 <__swsetup_r+0x4a>
 800b634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b638:	4299      	cmp	r1, r3
 800b63a:	d002      	beq.n	800b642 <__swsetup_r+0x46>
 800b63c:	4628      	mov	r0, r5
 800b63e:	f7fe f82b 	bl	8009698 <_free_r>
 800b642:	2300      	movs	r3, #0
 800b644:	6363      	str	r3, [r4, #52]	@ 0x34
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	2300      	movs	r3, #0
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f043 0308 	orr.w	r3, r3, #8
 800b65c:	81a3      	strh	r3, [r4, #12]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	b94b      	cbnz	r3, 800b676 <__swsetup_r+0x7a>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b66c:	d003      	beq.n	800b676 <__swsetup_r+0x7a>
 800b66e:	4621      	mov	r1, r4
 800b670:	4628      	mov	r0, r5
 800b672:	f000 fc5d 	bl	800bf30 <__smakebuf_r>
 800b676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67a:	f013 0201 	ands.w	r2, r3, #1
 800b67e:	d00a      	beq.n	800b696 <__swsetup_r+0x9a>
 800b680:	2200      	movs	r2, #0
 800b682:	60a2      	str	r2, [r4, #8]
 800b684:	6962      	ldr	r2, [r4, #20]
 800b686:	4252      	negs	r2, r2
 800b688:	61a2      	str	r2, [r4, #24]
 800b68a:	6922      	ldr	r2, [r4, #16]
 800b68c:	b942      	cbnz	r2, 800b6a0 <__swsetup_r+0xa4>
 800b68e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b692:	d1c5      	bne.n	800b620 <__swsetup_r+0x24>
 800b694:	bd38      	pop	{r3, r4, r5, pc}
 800b696:	0799      	lsls	r1, r3, #30
 800b698:	bf58      	it	pl
 800b69a:	6962      	ldrpl	r2, [r4, #20]
 800b69c:	60a2      	str	r2, [r4, #8]
 800b69e:	e7f4      	b.n	800b68a <__swsetup_r+0x8e>
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	e7f7      	b.n	800b694 <__swsetup_r+0x98>
 800b6a4:	2000001c 	.word	0x2000001c

0800b6a8 <memmove>:
 800b6a8:	4288      	cmp	r0, r1
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	eb01 0402 	add.w	r4, r1, r2
 800b6b0:	d902      	bls.n	800b6b8 <memmove+0x10>
 800b6b2:	4284      	cmp	r4, r0
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	d807      	bhi.n	800b6c8 <memmove+0x20>
 800b6b8:	1e43      	subs	r3, r0, #1
 800b6ba:	42a1      	cmp	r1, r4
 800b6bc:	d008      	beq.n	800b6d0 <memmove+0x28>
 800b6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6c6:	e7f8      	b.n	800b6ba <memmove+0x12>
 800b6c8:	4402      	add	r2, r0
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	428a      	cmp	r2, r1
 800b6ce:	d100      	bne.n	800b6d2 <memmove+0x2a>
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6da:	e7f7      	b.n	800b6cc <memmove+0x24>

0800b6dc <strncmp>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	b16a      	cbz	r2, 800b6fc <strncmp+0x20>
 800b6e0:	3901      	subs	r1, #1
 800b6e2:	1884      	adds	r4, r0, r2
 800b6e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d103      	bne.n	800b6f8 <strncmp+0x1c>
 800b6f0:	42a0      	cmp	r0, r4
 800b6f2:	d001      	beq.n	800b6f8 <strncmp+0x1c>
 800b6f4:	2a00      	cmp	r2, #0
 800b6f6:	d1f5      	bne.n	800b6e4 <strncmp+0x8>
 800b6f8:	1ad0      	subs	r0, r2, r3
 800b6fa:	bd10      	pop	{r4, pc}
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	e7fc      	b.n	800b6fa <strncmp+0x1e>

0800b700 <_sbrk_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d06      	ldr	r5, [pc, #24]	@ (800b71c <_sbrk_r+0x1c>)
 800b704:	2300      	movs	r3, #0
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	602b      	str	r3, [r5, #0]
 800b70c:	f7f6 fc40 	bl	8001f90 <_sbrk>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_sbrk_r+0x1a>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_sbrk_r+0x1a>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	200005dc 	.word	0x200005dc

0800b720 <memcpy>:
 800b720:	440a      	add	r2, r1
 800b722:	4291      	cmp	r1, r2
 800b724:	f100 33ff 	add.w	r3, r0, #4294967295
 800b728:	d100      	bne.n	800b72c <memcpy+0xc>
 800b72a:	4770      	bx	lr
 800b72c:	b510      	push	{r4, lr}
 800b72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b736:	4291      	cmp	r1, r2
 800b738:	d1f9      	bne.n	800b72e <memcpy+0xe>
 800b73a:	bd10      	pop	{r4, pc}
 800b73c:	0000      	movs	r0, r0
	...

0800b740 <nan>:
 800b740:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b748 <nan+0x8>
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	00000000 	.word	0x00000000
 800b74c:	7ff80000 	.word	0x7ff80000

0800b750 <__assert_func>:
 800b750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b752:	4614      	mov	r4, r2
 800b754:	461a      	mov	r2, r3
 800b756:	4b09      	ldr	r3, [pc, #36]	@ (800b77c <__assert_func+0x2c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4605      	mov	r5, r0
 800b75c:	68d8      	ldr	r0, [r3, #12]
 800b75e:	b14c      	cbz	r4, 800b774 <__assert_func+0x24>
 800b760:	4b07      	ldr	r3, [pc, #28]	@ (800b780 <__assert_func+0x30>)
 800b762:	9100      	str	r1, [sp, #0]
 800b764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b768:	4906      	ldr	r1, [pc, #24]	@ (800b784 <__assert_func+0x34>)
 800b76a:	462b      	mov	r3, r5
 800b76c:	f000 fba8 	bl	800bec0 <fiprintf>
 800b770:	f000 fc3c 	bl	800bfec <abort>
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <__assert_func+0x38>)
 800b776:	461c      	mov	r4, r3
 800b778:	e7f3      	b.n	800b762 <__assert_func+0x12>
 800b77a:	bf00      	nop
 800b77c:	2000001c 	.word	0x2000001c
 800b780:	0800c27e 	.word	0x0800c27e
 800b784:	0800c28b 	.word	0x0800c28b
 800b788:	0800c2b9 	.word	0x0800c2b9

0800b78c <_calloc_r>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	fba1 5402 	umull	r5, r4, r1, r2
 800b792:	b934      	cbnz	r4, 800b7a2 <_calloc_r+0x16>
 800b794:	4629      	mov	r1, r5
 800b796:	f7fd fff3 	bl	8009780 <_malloc_r>
 800b79a:	4606      	mov	r6, r0
 800b79c:	b928      	cbnz	r0, 800b7aa <_calloc_r+0x1e>
 800b79e:	4630      	mov	r0, r6
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	220c      	movs	r2, #12
 800b7a4:	6002      	str	r2, [r0, #0]
 800b7a6:	2600      	movs	r6, #0
 800b7a8:	e7f9      	b.n	800b79e <_calloc_r+0x12>
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f7fd f892 	bl	80088d6 <memset>
 800b7b2:	e7f4      	b.n	800b79e <_calloc_r+0x12>

0800b7b4 <rshift>:
 800b7b4:	6903      	ldr	r3, [r0, #16]
 800b7b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7c2:	f100 0414 	add.w	r4, r0, #20
 800b7c6:	dd45      	ble.n	800b854 <rshift+0xa0>
 800b7c8:	f011 011f 	ands.w	r1, r1, #31
 800b7cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7d4:	d10c      	bne.n	800b7f0 <rshift+0x3c>
 800b7d6:	f100 0710 	add.w	r7, r0, #16
 800b7da:	4629      	mov	r1, r5
 800b7dc:	42b1      	cmp	r1, r6
 800b7de:	d334      	bcc.n	800b84a <rshift+0x96>
 800b7e0:	1a9b      	subs	r3, r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	1eea      	subs	r2, r5, #3
 800b7e6:	4296      	cmp	r6, r2
 800b7e8:	bf38      	it	cc
 800b7ea:	2300      	movcc	r3, #0
 800b7ec:	4423      	add	r3, r4
 800b7ee:	e015      	b.n	800b81c <rshift+0x68>
 800b7f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7f4:	f1c1 0820 	rsb	r8, r1, #32
 800b7f8:	40cf      	lsrs	r7, r1
 800b7fa:	f105 0e04 	add.w	lr, r5, #4
 800b7fe:	46a1      	mov	r9, r4
 800b800:	4576      	cmp	r6, lr
 800b802:	46f4      	mov	ip, lr
 800b804:	d815      	bhi.n	800b832 <rshift+0x7e>
 800b806:	1a9a      	subs	r2, r3, r2
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	3a04      	subs	r2, #4
 800b80c:	3501      	adds	r5, #1
 800b80e:	42ae      	cmp	r6, r5
 800b810:	bf38      	it	cc
 800b812:	2200      	movcc	r2, #0
 800b814:	18a3      	adds	r3, r4, r2
 800b816:	50a7      	str	r7, [r4, r2]
 800b818:	b107      	cbz	r7, 800b81c <rshift+0x68>
 800b81a:	3304      	adds	r3, #4
 800b81c:	1b1a      	subs	r2, r3, r4
 800b81e:	42a3      	cmp	r3, r4
 800b820:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b824:	bf08      	it	eq
 800b826:	2300      	moveq	r3, #0
 800b828:	6102      	str	r2, [r0, #16]
 800b82a:	bf08      	it	eq
 800b82c:	6143      	streq	r3, [r0, #20]
 800b82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b832:	f8dc c000 	ldr.w	ip, [ip]
 800b836:	fa0c fc08 	lsl.w	ip, ip, r8
 800b83a:	ea4c 0707 	orr.w	r7, ip, r7
 800b83e:	f849 7b04 	str.w	r7, [r9], #4
 800b842:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b846:	40cf      	lsrs	r7, r1
 800b848:	e7da      	b.n	800b800 <rshift+0x4c>
 800b84a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b84e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b852:	e7c3      	b.n	800b7dc <rshift+0x28>
 800b854:	4623      	mov	r3, r4
 800b856:	e7e1      	b.n	800b81c <rshift+0x68>

0800b858 <__hexdig_fun>:
 800b858:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b85c:	2b09      	cmp	r3, #9
 800b85e:	d802      	bhi.n	800b866 <__hexdig_fun+0xe>
 800b860:	3820      	subs	r0, #32
 800b862:	b2c0      	uxtb	r0, r0
 800b864:	4770      	bx	lr
 800b866:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d801      	bhi.n	800b872 <__hexdig_fun+0x1a>
 800b86e:	3847      	subs	r0, #71	@ 0x47
 800b870:	e7f7      	b.n	800b862 <__hexdig_fun+0xa>
 800b872:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b876:	2b05      	cmp	r3, #5
 800b878:	d801      	bhi.n	800b87e <__hexdig_fun+0x26>
 800b87a:	3827      	subs	r0, #39	@ 0x27
 800b87c:	e7f1      	b.n	800b862 <__hexdig_fun+0xa>
 800b87e:	2000      	movs	r0, #0
 800b880:	4770      	bx	lr
	...

0800b884 <__gethex>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	b085      	sub	sp, #20
 800b88a:	468a      	mov	sl, r1
 800b88c:	9302      	str	r3, [sp, #8]
 800b88e:	680b      	ldr	r3, [r1, #0]
 800b890:	9001      	str	r0, [sp, #4]
 800b892:	4690      	mov	r8, r2
 800b894:	1c9c      	adds	r4, r3, #2
 800b896:	46a1      	mov	r9, r4
 800b898:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b89c:	2830      	cmp	r0, #48	@ 0x30
 800b89e:	d0fa      	beq.n	800b896 <__gethex+0x12>
 800b8a0:	eba9 0303 	sub.w	r3, r9, r3
 800b8a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b8a8:	f7ff ffd6 	bl	800b858 <__hexdig_fun>
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d168      	bne.n	800b984 <__gethex+0x100>
 800b8b2:	49a0      	ldr	r1, [pc, #640]	@ (800bb34 <__gethex+0x2b0>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	4648      	mov	r0, r9
 800b8b8:	f7ff ff10 	bl	800b6dc <strncmp>
 800b8bc:	4607      	mov	r7, r0
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d167      	bne.n	800b992 <__gethex+0x10e>
 800b8c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b8c6:	4626      	mov	r6, r4
 800b8c8:	f7ff ffc6 	bl	800b858 <__hexdig_fun>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d062      	beq.n	800b996 <__gethex+0x112>
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	7818      	ldrb	r0, [r3, #0]
 800b8d4:	2830      	cmp	r0, #48	@ 0x30
 800b8d6:	4699      	mov	r9, r3
 800b8d8:	f103 0301 	add.w	r3, r3, #1
 800b8dc:	d0f9      	beq.n	800b8d2 <__gethex+0x4e>
 800b8de:	f7ff ffbb 	bl	800b858 <__hexdig_fun>
 800b8e2:	fab0 f580 	clz	r5, r0
 800b8e6:	096d      	lsrs	r5, r5, #5
 800b8e8:	f04f 0b01 	mov.w	fp, #1
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	4616      	mov	r6, r2
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	7830      	ldrb	r0, [r6, #0]
 800b8f4:	f7ff ffb0 	bl	800b858 <__hexdig_fun>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d1f8      	bne.n	800b8ee <__gethex+0x6a>
 800b8fc:	498d      	ldr	r1, [pc, #564]	@ (800bb34 <__gethex+0x2b0>)
 800b8fe:	2201      	movs	r2, #1
 800b900:	4630      	mov	r0, r6
 800b902:	f7ff feeb 	bl	800b6dc <strncmp>
 800b906:	2800      	cmp	r0, #0
 800b908:	d13f      	bne.n	800b98a <__gethex+0x106>
 800b90a:	b944      	cbnz	r4, 800b91e <__gethex+0x9a>
 800b90c:	1c74      	adds	r4, r6, #1
 800b90e:	4622      	mov	r2, r4
 800b910:	4616      	mov	r6, r2
 800b912:	3201      	adds	r2, #1
 800b914:	7830      	ldrb	r0, [r6, #0]
 800b916:	f7ff ff9f 	bl	800b858 <__hexdig_fun>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d1f8      	bne.n	800b910 <__gethex+0x8c>
 800b91e:	1ba4      	subs	r4, r4, r6
 800b920:	00a7      	lsls	r7, r4, #2
 800b922:	7833      	ldrb	r3, [r6, #0]
 800b924:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b928:	2b50      	cmp	r3, #80	@ 0x50
 800b92a:	d13e      	bne.n	800b9aa <__gethex+0x126>
 800b92c:	7873      	ldrb	r3, [r6, #1]
 800b92e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b930:	d033      	beq.n	800b99a <__gethex+0x116>
 800b932:	2b2d      	cmp	r3, #45	@ 0x2d
 800b934:	d034      	beq.n	800b9a0 <__gethex+0x11c>
 800b936:	1c71      	adds	r1, r6, #1
 800b938:	2400      	movs	r4, #0
 800b93a:	7808      	ldrb	r0, [r1, #0]
 800b93c:	f7ff ff8c 	bl	800b858 <__hexdig_fun>
 800b940:	1e43      	subs	r3, r0, #1
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b18      	cmp	r3, #24
 800b946:	d830      	bhi.n	800b9aa <__gethex+0x126>
 800b948:	f1a0 0210 	sub.w	r2, r0, #16
 800b94c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b950:	f7ff ff82 	bl	800b858 <__hexdig_fun>
 800b954:	f100 3cff 	add.w	ip, r0, #4294967295
 800b958:	fa5f fc8c 	uxtb.w	ip, ip
 800b95c:	f1bc 0f18 	cmp.w	ip, #24
 800b960:	f04f 030a 	mov.w	r3, #10
 800b964:	d91e      	bls.n	800b9a4 <__gethex+0x120>
 800b966:	b104      	cbz	r4, 800b96a <__gethex+0xe6>
 800b968:	4252      	negs	r2, r2
 800b96a:	4417      	add	r7, r2
 800b96c:	f8ca 1000 	str.w	r1, [sl]
 800b970:	b1ed      	cbz	r5, 800b9ae <__gethex+0x12a>
 800b972:	f1bb 0f00 	cmp.w	fp, #0
 800b976:	bf0c      	ite	eq
 800b978:	2506      	moveq	r5, #6
 800b97a:	2500      	movne	r5, #0
 800b97c:	4628      	mov	r0, r5
 800b97e:	b005      	add	sp, #20
 800b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b984:	2500      	movs	r5, #0
 800b986:	462c      	mov	r4, r5
 800b988:	e7b0      	b.n	800b8ec <__gethex+0x68>
 800b98a:	2c00      	cmp	r4, #0
 800b98c:	d1c7      	bne.n	800b91e <__gethex+0x9a>
 800b98e:	4627      	mov	r7, r4
 800b990:	e7c7      	b.n	800b922 <__gethex+0x9e>
 800b992:	464e      	mov	r6, r9
 800b994:	462f      	mov	r7, r5
 800b996:	2501      	movs	r5, #1
 800b998:	e7c3      	b.n	800b922 <__gethex+0x9e>
 800b99a:	2400      	movs	r4, #0
 800b99c:	1cb1      	adds	r1, r6, #2
 800b99e:	e7cc      	b.n	800b93a <__gethex+0xb6>
 800b9a0:	2401      	movs	r4, #1
 800b9a2:	e7fb      	b.n	800b99c <__gethex+0x118>
 800b9a4:	fb03 0002 	mla	r0, r3, r2, r0
 800b9a8:	e7ce      	b.n	800b948 <__gethex+0xc4>
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	e7de      	b.n	800b96c <__gethex+0xe8>
 800b9ae:	eba6 0309 	sub.w	r3, r6, r9
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	2b07      	cmp	r3, #7
 800b9b8:	dc0a      	bgt.n	800b9d0 <__gethex+0x14c>
 800b9ba:	9801      	ldr	r0, [sp, #4]
 800b9bc:	f7fd ff6c 	bl	8009898 <_Balloc>
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	b940      	cbnz	r0, 800b9d6 <__gethex+0x152>
 800b9c4:	4b5c      	ldr	r3, [pc, #368]	@ (800bb38 <__gethex+0x2b4>)
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	21e4      	movs	r1, #228	@ 0xe4
 800b9ca:	485c      	ldr	r0, [pc, #368]	@ (800bb3c <__gethex+0x2b8>)
 800b9cc:	f7ff fec0 	bl	800b750 <__assert_func>
 800b9d0:	3101      	adds	r1, #1
 800b9d2:	105b      	asrs	r3, r3, #1
 800b9d4:	e7ef      	b.n	800b9b6 <__gethex+0x132>
 800b9d6:	f100 0a14 	add.w	sl, r0, #20
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4655      	mov	r5, sl
 800b9de:	469b      	mov	fp, r3
 800b9e0:	45b1      	cmp	r9, r6
 800b9e2:	d337      	bcc.n	800ba54 <__gethex+0x1d0>
 800b9e4:	f845 bb04 	str.w	fp, [r5], #4
 800b9e8:	eba5 050a 	sub.w	r5, r5, sl
 800b9ec:	10ad      	asrs	r5, r5, #2
 800b9ee:	6125      	str	r5, [r4, #16]
 800b9f0:	4658      	mov	r0, fp
 800b9f2:	f7fe f843 	bl	8009a7c <__hi0bits>
 800b9f6:	016d      	lsls	r5, r5, #5
 800b9f8:	f8d8 6000 	ldr.w	r6, [r8]
 800b9fc:	1a2d      	subs	r5, r5, r0
 800b9fe:	42b5      	cmp	r5, r6
 800ba00:	dd54      	ble.n	800baac <__gethex+0x228>
 800ba02:	1bad      	subs	r5, r5, r6
 800ba04:	4629      	mov	r1, r5
 800ba06:	4620      	mov	r0, r4
 800ba08:	f7fe fbcf 	bl	800a1aa <__any_on>
 800ba0c:	4681      	mov	r9, r0
 800ba0e:	b178      	cbz	r0, 800ba30 <__gethex+0x1ac>
 800ba10:	1e6b      	subs	r3, r5, #1
 800ba12:	1159      	asrs	r1, r3, #5
 800ba14:	f003 021f 	and.w	r2, r3, #31
 800ba18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba1c:	f04f 0901 	mov.w	r9, #1
 800ba20:	fa09 f202 	lsl.w	r2, r9, r2
 800ba24:	420a      	tst	r2, r1
 800ba26:	d003      	beq.n	800ba30 <__gethex+0x1ac>
 800ba28:	454b      	cmp	r3, r9
 800ba2a:	dc36      	bgt.n	800ba9a <__gethex+0x216>
 800ba2c:	f04f 0902 	mov.w	r9, #2
 800ba30:	4629      	mov	r1, r5
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff febe 	bl	800b7b4 <rshift>
 800ba38:	442f      	add	r7, r5
 800ba3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba3e:	42bb      	cmp	r3, r7
 800ba40:	da42      	bge.n	800bac8 <__gethex+0x244>
 800ba42:	9801      	ldr	r0, [sp, #4]
 800ba44:	4621      	mov	r1, r4
 800ba46:	f7fd ff67 	bl	8009918 <_Bfree>
 800ba4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	25a3      	movs	r5, #163	@ 0xa3
 800ba52:	e793      	b.n	800b97c <__gethex+0xf8>
 800ba54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ba58:	2a2e      	cmp	r2, #46	@ 0x2e
 800ba5a:	d012      	beq.n	800ba82 <__gethex+0x1fe>
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	d104      	bne.n	800ba6a <__gethex+0x1e6>
 800ba60:	f845 bb04 	str.w	fp, [r5], #4
 800ba64:	f04f 0b00 	mov.w	fp, #0
 800ba68:	465b      	mov	r3, fp
 800ba6a:	7830      	ldrb	r0, [r6, #0]
 800ba6c:	9303      	str	r3, [sp, #12]
 800ba6e:	f7ff fef3 	bl	800b858 <__hexdig_fun>
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	f000 000f 	and.w	r0, r0, #15
 800ba78:	4098      	lsls	r0, r3
 800ba7a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ba7e:	3304      	adds	r3, #4
 800ba80:	e7ae      	b.n	800b9e0 <__gethex+0x15c>
 800ba82:	45b1      	cmp	r9, r6
 800ba84:	d8ea      	bhi.n	800ba5c <__gethex+0x1d8>
 800ba86:	492b      	ldr	r1, [pc, #172]	@ (800bb34 <__gethex+0x2b0>)
 800ba88:	9303      	str	r3, [sp, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f7ff fe25 	bl	800b6dc <strncmp>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d1e1      	bne.n	800ba5c <__gethex+0x1d8>
 800ba98:	e7a2      	b.n	800b9e0 <__gethex+0x15c>
 800ba9a:	1ea9      	subs	r1, r5, #2
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f7fe fb84 	bl	800a1aa <__any_on>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d0c2      	beq.n	800ba2c <__gethex+0x1a8>
 800baa6:	f04f 0903 	mov.w	r9, #3
 800baaa:	e7c1      	b.n	800ba30 <__gethex+0x1ac>
 800baac:	da09      	bge.n	800bac2 <__gethex+0x23e>
 800baae:	1b75      	subs	r5, r6, r5
 800bab0:	4621      	mov	r1, r4
 800bab2:	9801      	ldr	r0, [sp, #4]
 800bab4:	462a      	mov	r2, r5
 800bab6:	f7fe f93f 	bl	8009d38 <__lshift>
 800baba:	1b7f      	subs	r7, r7, r5
 800babc:	4604      	mov	r4, r0
 800babe:	f100 0a14 	add.w	sl, r0, #20
 800bac2:	f04f 0900 	mov.w	r9, #0
 800bac6:	e7b8      	b.n	800ba3a <__gethex+0x1b6>
 800bac8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bacc:	42bd      	cmp	r5, r7
 800bace:	dd6f      	ble.n	800bbb0 <__gethex+0x32c>
 800bad0:	1bed      	subs	r5, r5, r7
 800bad2:	42ae      	cmp	r6, r5
 800bad4:	dc34      	bgt.n	800bb40 <__gethex+0x2bc>
 800bad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d022      	beq.n	800bb24 <__gethex+0x2a0>
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d024      	beq.n	800bb2c <__gethex+0x2a8>
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d115      	bne.n	800bb12 <__gethex+0x28e>
 800bae6:	42ae      	cmp	r6, r5
 800bae8:	d113      	bne.n	800bb12 <__gethex+0x28e>
 800baea:	2e01      	cmp	r6, #1
 800baec:	d10b      	bne.n	800bb06 <__gethex+0x282>
 800baee:	9a02      	ldr	r2, [sp, #8]
 800baf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	2301      	movs	r3, #1
 800baf8:	6123      	str	r3, [r4, #16]
 800bafa:	f8ca 3000 	str.w	r3, [sl]
 800bafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb00:	2562      	movs	r5, #98	@ 0x62
 800bb02:	601c      	str	r4, [r3, #0]
 800bb04:	e73a      	b.n	800b97c <__gethex+0xf8>
 800bb06:	1e71      	subs	r1, r6, #1
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f7fe fb4e 	bl	800a1aa <__any_on>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d1ed      	bne.n	800baee <__gethex+0x26a>
 800bb12:	9801      	ldr	r0, [sp, #4]
 800bb14:	4621      	mov	r1, r4
 800bb16:	f7fd feff 	bl	8009918 <_Bfree>
 800bb1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	2550      	movs	r5, #80	@ 0x50
 800bb22:	e72b      	b.n	800b97c <__gethex+0xf8>
 800bb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1f3      	bne.n	800bb12 <__gethex+0x28e>
 800bb2a:	e7e0      	b.n	800baee <__gethex+0x26a>
 800bb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1dd      	bne.n	800baee <__gethex+0x26a>
 800bb32:	e7ee      	b.n	800bb12 <__gethex+0x28e>
 800bb34:	0800c263 	.word	0x0800c263
 800bb38:	0800c1f9 	.word	0x0800c1f9
 800bb3c:	0800c2ba 	.word	0x0800c2ba
 800bb40:	1e6f      	subs	r7, r5, #1
 800bb42:	f1b9 0f00 	cmp.w	r9, #0
 800bb46:	d130      	bne.n	800bbaa <__gethex+0x326>
 800bb48:	b127      	cbz	r7, 800bb54 <__gethex+0x2d0>
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7fe fb2c 	bl	800a1aa <__any_on>
 800bb52:	4681      	mov	r9, r0
 800bb54:	117a      	asrs	r2, r7, #5
 800bb56:	2301      	movs	r3, #1
 800bb58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb5c:	f007 071f 	and.w	r7, r7, #31
 800bb60:	40bb      	lsls	r3, r7
 800bb62:	4213      	tst	r3, r2
 800bb64:	4629      	mov	r1, r5
 800bb66:	4620      	mov	r0, r4
 800bb68:	bf18      	it	ne
 800bb6a:	f049 0902 	orrne.w	r9, r9, #2
 800bb6e:	f7ff fe21 	bl	800b7b4 <rshift>
 800bb72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bb76:	1b76      	subs	r6, r6, r5
 800bb78:	2502      	movs	r5, #2
 800bb7a:	f1b9 0f00 	cmp.w	r9, #0
 800bb7e:	d047      	beq.n	800bc10 <__gethex+0x38c>
 800bb80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d015      	beq.n	800bbb4 <__gethex+0x330>
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d017      	beq.n	800bbbc <__gethex+0x338>
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d109      	bne.n	800bba4 <__gethex+0x320>
 800bb90:	f019 0f02 	tst.w	r9, #2
 800bb94:	d006      	beq.n	800bba4 <__gethex+0x320>
 800bb96:	f8da 3000 	ldr.w	r3, [sl]
 800bb9a:	ea49 0903 	orr.w	r9, r9, r3
 800bb9e:	f019 0f01 	tst.w	r9, #1
 800bba2:	d10e      	bne.n	800bbc2 <__gethex+0x33e>
 800bba4:	f045 0510 	orr.w	r5, r5, #16
 800bba8:	e032      	b.n	800bc10 <__gethex+0x38c>
 800bbaa:	f04f 0901 	mov.w	r9, #1
 800bbae:	e7d1      	b.n	800bb54 <__gethex+0x2d0>
 800bbb0:	2501      	movs	r5, #1
 800bbb2:	e7e2      	b.n	800bb7a <__gethex+0x2f6>
 800bbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbb6:	f1c3 0301 	rsb	r3, r3, #1
 800bbba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0f0      	beq.n	800bba4 <__gethex+0x320>
 800bbc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bbc6:	f104 0314 	add.w	r3, r4, #20
 800bbca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bbce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bbd2:	f04f 0c00 	mov.w	ip, #0
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bbe0:	d01b      	beq.n	800bc1a <__gethex+0x396>
 800bbe2:	3201      	adds	r2, #1
 800bbe4:	6002      	str	r2, [r0, #0]
 800bbe6:	2d02      	cmp	r5, #2
 800bbe8:	f104 0314 	add.w	r3, r4, #20
 800bbec:	d13c      	bne.n	800bc68 <__gethex+0x3e4>
 800bbee:	f8d8 2000 	ldr.w	r2, [r8]
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	42b2      	cmp	r2, r6
 800bbf6:	d109      	bne.n	800bc0c <__gethex+0x388>
 800bbf8:	1171      	asrs	r1, r6, #5
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc00:	f006 061f 	and.w	r6, r6, #31
 800bc04:	fa02 f606 	lsl.w	r6, r2, r6
 800bc08:	421e      	tst	r6, r3
 800bc0a:	d13a      	bne.n	800bc82 <__gethex+0x3fe>
 800bc0c:	f045 0520 	orr.w	r5, r5, #32
 800bc10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc12:	601c      	str	r4, [r3, #0]
 800bc14:	9b02      	ldr	r3, [sp, #8]
 800bc16:	601f      	str	r7, [r3, #0]
 800bc18:	e6b0      	b.n	800b97c <__gethex+0xf8>
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc20:	d8d9      	bhi.n	800bbd6 <__gethex+0x352>
 800bc22:	68a3      	ldr	r3, [r4, #8]
 800bc24:	459b      	cmp	fp, r3
 800bc26:	db17      	blt.n	800bc58 <__gethex+0x3d4>
 800bc28:	6861      	ldr	r1, [r4, #4]
 800bc2a:	9801      	ldr	r0, [sp, #4]
 800bc2c:	3101      	adds	r1, #1
 800bc2e:	f7fd fe33 	bl	8009898 <_Balloc>
 800bc32:	4681      	mov	r9, r0
 800bc34:	b918      	cbnz	r0, 800bc3e <__gethex+0x3ba>
 800bc36:	4b1a      	ldr	r3, [pc, #104]	@ (800bca0 <__gethex+0x41c>)
 800bc38:	4602      	mov	r2, r0
 800bc3a:	2184      	movs	r1, #132	@ 0x84
 800bc3c:	e6c5      	b.n	800b9ca <__gethex+0x146>
 800bc3e:	6922      	ldr	r2, [r4, #16]
 800bc40:	3202      	adds	r2, #2
 800bc42:	f104 010c 	add.w	r1, r4, #12
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	300c      	adds	r0, #12
 800bc4a:	f7ff fd69 	bl	800b720 <memcpy>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	9801      	ldr	r0, [sp, #4]
 800bc52:	f7fd fe61 	bl	8009918 <_Bfree>
 800bc56:	464c      	mov	r4, r9
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc60:	6122      	str	r2, [r4, #16]
 800bc62:	2201      	movs	r2, #1
 800bc64:	615a      	str	r2, [r3, #20]
 800bc66:	e7be      	b.n	800bbe6 <__gethex+0x362>
 800bc68:	6922      	ldr	r2, [r4, #16]
 800bc6a:	455a      	cmp	r2, fp
 800bc6c:	dd0b      	ble.n	800bc86 <__gethex+0x402>
 800bc6e:	2101      	movs	r1, #1
 800bc70:	4620      	mov	r0, r4
 800bc72:	f7ff fd9f 	bl	800b7b4 <rshift>
 800bc76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc7a:	3701      	adds	r7, #1
 800bc7c:	42bb      	cmp	r3, r7
 800bc7e:	f6ff aee0 	blt.w	800ba42 <__gethex+0x1be>
 800bc82:	2501      	movs	r5, #1
 800bc84:	e7c2      	b.n	800bc0c <__gethex+0x388>
 800bc86:	f016 061f 	ands.w	r6, r6, #31
 800bc8a:	d0fa      	beq.n	800bc82 <__gethex+0x3fe>
 800bc8c:	4453      	add	r3, sl
 800bc8e:	f1c6 0620 	rsb	r6, r6, #32
 800bc92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc96:	f7fd fef1 	bl	8009a7c <__hi0bits>
 800bc9a:	42b0      	cmp	r0, r6
 800bc9c:	dbe7      	blt.n	800bc6e <__gethex+0x3ea>
 800bc9e:	e7f0      	b.n	800bc82 <__gethex+0x3fe>
 800bca0:	0800c1f9 	.word	0x0800c1f9

0800bca4 <L_shift>:
 800bca4:	f1c2 0208 	rsb	r2, r2, #8
 800bca8:	0092      	lsls	r2, r2, #2
 800bcaa:	b570      	push	{r4, r5, r6, lr}
 800bcac:	f1c2 0620 	rsb	r6, r2, #32
 800bcb0:	6843      	ldr	r3, [r0, #4]
 800bcb2:	6804      	ldr	r4, [r0, #0]
 800bcb4:	fa03 f506 	lsl.w	r5, r3, r6
 800bcb8:	432c      	orrs	r4, r5
 800bcba:	40d3      	lsrs	r3, r2
 800bcbc:	6004      	str	r4, [r0, #0]
 800bcbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800bcc2:	4288      	cmp	r0, r1
 800bcc4:	d3f4      	bcc.n	800bcb0 <L_shift+0xc>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}

0800bcc8 <__match>:
 800bcc8:	b530      	push	{r4, r5, lr}
 800bcca:	6803      	ldr	r3, [r0, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd2:	b914      	cbnz	r4, 800bcda <__match+0x12>
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	bd30      	pop	{r4, r5, pc}
 800bcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bce2:	2d19      	cmp	r5, #25
 800bce4:	bf98      	it	ls
 800bce6:	3220      	addls	r2, #32
 800bce8:	42a2      	cmp	r2, r4
 800bcea:	d0f0      	beq.n	800bcce <__match+0x6>
 800bcec:	2000      	movs	r0, #0
 800bcee:	e7f3      	b.n	800bcd8 <__match+0x10>

0800bcf0 <__hexnan>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	680b      	ldr	r3, [r1, #0]
 800bcf6:	6801      	ldr	r1, [r0, #0]
 800bcf8:	115e      	asrs	r6, r3, #5
 800bcfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bcfe:	f013 031f 	ands.w	r3, r3, #31
 800bd02:	b087      	sub	sp, #28
 800bd04:	bf18      	it	ne
 800bd06:	3604      	addne	r6, #4
 800bd08:	2500      	movs	r5, #0
 800bd0a:	1f37      	subs	r7, r6, #4
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	4690      	mov	r8, r2
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd16:	46b9      	mov	r9, r7
 800bd18:	463c      	mov	r4, r7
 800bd1a:	9502      	str	r5, [sp, #8]
 800bd1c:	46ab      	mov	fp, r5
 800bd1e:	784a      	ldrb	r2, [r1, #1]
 800bd20:	1c4b      	adds	r3, r1, #1
 800bd22:	9303      	str	r3, [sp, #12]
 800bd24:	b342      	cbz	r2, 800bd78 <__hexnan+0x88>
 800bd26:	4610      	mov	r0, r2
 800bd28:	9105      	str	r1, [sp, #20]
 800bd2a:	9204      	str	r2, [sp, #16]
 800bd2c:	f7ff fd94 	bl	800b858 <__hexdig_fun>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d151      	bne.n	800bdd8 <__hexnan+0xe8>
 800bd34:	9a04      	ldr	r2, [sp, #16]
 800bd36:	9905      	ldr	r1, [sp, #20]
 800bd38:	2a20      	cmp	r2, #32
 800bd3a:	d818      	bhi.n	800bd6e <__hexnan+0x7e>
 800bd3c:	9b02      	ldr	r3, [sp, #8]
 800bd3e:	459b      	cmp	fp, r3
 800bd40:	dd13      	ble.n	800bd6a <__hexnan+0x7a>
 800bd42:	454c      	cmp	r4, r9
 800bd44:	d206      	bcs.n	800bd54 <__hexnan+0x64>
 800bd46:	2d07      	cmp	r5, #7
 800bd48:	dc04      	bgt.n	800bd54 <__hexnan+0x64>
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7ff ffa8 	bl	800bca4 <L_shift>
 800bd54:	4544      	cmp	r4, r8
 800bd56:	d952      	bls.n	800bdfe <__hexnan+0x10e>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd62:	f8cd b008 	str.w	fp, [sp, #8]
 800bd66:	464c      	mov	r4, r9
 800bd68:	461d      	mov	r5, r3
 800bd6a:	9903      	ldr	r1, [sp, #12]
 800bd6c:	e7d7      	b.n	800bd1e <__hexnan+0x2e>
 800bd6e:	2a29      	cmp	r2, #41	@ 0x29
 800bd70:	d157      	bne.n	800be22 <__hexnan+0x132>
 800bd72:	3102      	adds	r1, #2
 800bd74:	f8ca 1000 	str.w	r1, [sl]
 800bd78:	f1bb 0f00 	cmp.w	fp, #0
 800bd7c:	d051      	beq.n	800be22 <__hexnan+0x132>
 800bd7e:	454c      	cmp	r4, r9
 800bd80:	d206      	bcs.n	800bd90 <__hexnan+0xa0>
 800bd82:	2d07      	cmp	r5, #7
 800bd84:	dc04      	bgt.n	800bd90 <__hexnan+0xa0>
 800bd86:	462a      	mov	r2, r5
 800bd88:	4649      	mov	r1, r9
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff ff8a 	bl	800bca4 <L_shift>
 800bd90:	4544      	cmp	r4, r8
 800bd92:	d936      	bls.n	800be02 <__hexnan+0x112>
 800bd94:	f1a8 0204 	sub.w	r2, r8, #4
 800bd98:	4623      	mov	r3, r4
 800bd9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bda2:	429f      	cmp	r7, r3
 800bda4:	d2f9      	bcs.n	800bd9a <__hexnan+0xaa>
 800bda6:	1b3b      	subs	r3, r7, r4
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	3304      	adds	r3, #4
 800bdae:	3401      	adds	r4, #1
 800bdb0:	3e03      	subs	r6, #3
 800bdb2:	42b4      	cmp	r4, r6
 800bdb4:	bf88      	it	hi
 800bdb6:	2304      	movhi	r3, #4
 800bdb8:	4443      	add	r3, r8
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f843 2b04 	str.w	r2, [r3], #4
 800bdc0:	429f      	cmp	r7, r3
 800bdc2:	d2fb      	bcs.n	800bdbc <__hexnan+0xcc>
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	b91b      	cbnz	r3, 800bdd0 <__hexnan+0xe0>
 800bdc8:	4547      	cmp	r7, r8
 800bdca:	d128      	bne.n	800be1e <__hexnan+0x12e>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	2005      	movs	r0, #5
 800bdd2:	b007      	add	sp, #28
 800bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd8:	3501      	adds	r5, #1
 800bdda:	2d08      	cmp	r5, #8
 800bddc:	f10b 0b01 	add.w	fp, fp, #1
 800bde0:	dd06      	ble.n	800bdf0 <__hexnan+0x100>
 800bde2:	4544      	cmp	r4, r8
 800bde4:	d9c1      	bls.n	800bd6a <__hexnan+0x7a>
 800bde6:	2300      	movs	r3, #0
 800bde8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdec:	2501      	movs	r5, #1
 800bdee:	3c04      	subs	r4, #4
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	f000 000f 	and.w	r0, r0, #15
 800bdf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bdfa:	6020      	str	r0, [r4, #0]
 800bdfc:	e7b5      	b.n	800bd6a <__hexnan+0x7a>
 800bdfe:	2508      	movs	r5, #8
 800be00:	e7b3      	b.n	800bd6a <__hexnan+0x7a>
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0dd      	beq.n	800bdc4 <__hexnan+0xd4>
 800be08:	f1c3 0320 	rsb	r3, r3, #32
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	40da      	lsrs	r2, r3
 800be12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be16:	4013      	ands	r3, r2
 800be18:	f846 3c04 	str.w	r3, [r6, #-4]
 800be1c:	e7d2      	b.n	800bdc4 <__hexnan+0xd4>
 800be1e:	3f04      	subs	r7, #4
 800be20:	e7d0      	b.n	800bdc4 <__hexnan+0xd4>
 800be22:	2004      	movs	r0, #4
 800be24:	e7d5      	b.n	800bdd2 <__hexnan+0xe2>

0800be26 <__ascii_mbtowc>:
 800be26:	b082      	sub	sp, #8
 800be28:	b901      	cbnz	r1, 800be2c <__ascii_mbtowc+0x6>
 800be2a:	a901      	add	r1, sp, #4
 800be2c:	b142      	cbz	r2, 800be40 <__ascii_mbtowc+0x1a>
 800be2e:	b14b      	cbz	r3, 800be44 <__ascii_mbtowc+0x1e>
 800be30:	7813      	ldrb	r3, [r2, #0]
 800be32:	600b      	str	r3, [r1, #0]
 800be34:	7812      	ldrb	r2, [r2, #0]
 800be36:	1e10      	subs	r0, r2, #0
 800be38:	bf18      	it	ne
 800be3a:	2001      	movne	r0, #1
 800be3c:	b002      	add	sp, #8
 800be3e:	4770      	bx	lr
 800be40:	4610      	mov	r0, r2
 800be42:	e7fb      	b.n	800be3c <__ascii_mbtowc+0x16>
 800be44:	f06f 0001 	mvn.w	r0, #1
 800be48:	e7f8      	b.n	800be3c <__ascii_mbtowc+0x16>

0800be4a <_realloc_r>:
 800be4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4e:	4607      	mov	r7, r0
 800be50:	4614      	mov	r4, r2
 800be52:	460d      	mov	r5, r1
 800be54:	b921      	cbnz	r1, 800be60 <_realloc_r+0x16>
 800be56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	4611      	mov	r1, r2
 800be5c:	f7fd bc90 	b.w	8009780 <_malloc_r>
 800be60:	b92a      	cbnz	r2, 800be6e <_realloc_r+0x24>
 800be62:	f7fd fc19 	bl	8009698 <_free_r>
 800be66:	4625      	mov	r5, r4
 800be68:	4628      	mov	r0, r5
 800be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6e:	f000 f8c4 	bl	800bffa <_malloc_usable_size_r>
 800be72:	4284      	cmp	r4, r0
 800be74:	4606      	mov	r6, r0
 800be76:	d802      	bhi.n	800be7e <_realloc_r+0x34>
 800be78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be7c:	d8f4      	bhi.n	800be68 <_realloc_r+0x1e>
 800be7e:	4621      	mov	r1, r4
 800be80:	4638      	mov	r0, r7
 800be82:	f7fd fc7d 	bl	8009780 <_malloc_r>
 800be86:	4680      	mov	r8, r0
 800be88:	b908      	cbnz	r0, 800be8e <_realloc_r+0x44>
 800be8a:	4645      	mov	r5, r8
 800be8c:	e7ec      	b.n	800be68 <_realloc_r+0x1e>
 800be8e:	42b4      	cmp	r4, r6
 800be90:	4622      	mov	r2, r4
 800be92:	4629      	mov	r1, r5
 800be94:	bf28      	it	cs
 800be96:	4632      	movcs	r2, r6
 800be98:	f7ff fc42 	bl	800b720 <memcpy>
 800be9c:	4629      	mov	r1, r5
 800be9e:	4638      	mov	r0, r7
 800bea0:	f7fd fbfa 	bl	8009698 <_free_r>
 800bea4:	e7f1      	b.n	800be8a <_realloc_r+0x40>

0800bea6 <__ascii_wctomb>:
 800bea6:	4603      	mov	r3, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	b141      	cbz	r1, 800bebe <__ascii_wctomb+0x18>
 800beac:	2aff      	cmp	r2, #255	@ 0xff
 800beae:	d904      	bls.n	800beba <__ascii_wctomb+0x14>
 800beb0:	228a      	movs	r2, #138	@ 0x8a
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	4770      	bx	lr
 800beba:	700a      	strb	r2, [r1, #0]
 800bebc:	2001      	movs	r0, #1
 800bebe:	4770      	bx	lr

0800bec0 <fiprintf>:
 800bec0:	b40e      	push	{r1, r2, r3}
 800bec2:	b503      	push	{r0, r1, lr}
 800bec4:	4601      	mov	r1, r0
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	4805      	ldr	r0, [pc, #20]	@ (800bee0 <fiprintf+0x20>)
 800beca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bece:	6800      	ldr	r0, [r0, #0]
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	f7ff f991 	bl	800b1f8 <_vfiprintf_r>
 800bed6:	b002      	add	sp, #8
 800bed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bedc:	b003      	add	sp, #12
 800bede:	4770      	bx	lr
 800bee0:	2000001c 	.word	0x2000001c

0800bee4 <__swhatbuf_r>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	460c      	mov	r4, r1
 800bee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beec:	2900      	cmp	r1, #0
 800beee:	b096      	sub	sp, #88	@ 0x58
 800bef0:	4615      	mov	r5, r2
 800bef2:	461e      	mov	r6, r3
 800bef4:	da0d      	bge.n	800bf12 <__swhatbuf_r+0x2e>
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800befc:	f04f 0100 	mov.w	r1, #0
 800bf00:	bf14      	ite	ne
 800bf02:	2340      	movne	r3, #64	@ 0x40
 800bf04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf08:	2000      	movs	r0, #0
 800bf0a:	6031      	str	r1, [r6, #0]
 800bf0c:	602b      	str	r3, [r5, #0]
 800bf0e:	b016      	add	sp, #88	@ 0x58
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	466a      	mov	r2, sp
 800bf14:	f000 f848 	bl	800bfa8 <_fstat_r>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	dbec      	blt.n	800bef6 <__swhatbuf_r+0x12>
 800bf1c:	9901      	ldr	r1, [sp, #4]
 800bf1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf26:	4259      	negs	r1, r3
 800bf28:	4159      	adcs	r1, r3
 800bf2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf2e:	e7eb      	b.n	800bf08 <__swhatbuf_r+0x24>

0800bf30 <__smakebuf_r>:
 800bf30:	898b      	ldrh	r3, [r1, #12]
 800bf32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf34:	079d      	lsls	r5, r3, #30
 800bf36:	4606      	mov	r6, r0
 800bf38:	460c      	mov	r4, r1
 800bf3a:	d507      	bpl.n	800bf4c <__smakebuf_r+0x1c>
 800bf3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	2301      	movs	r3, #1
 800bf46:	6163      	str	r3, [r4, #20]
 800bf48:	b003      	add	sp, #12
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf4c:	ab01      	add	r3, sp, #4
 800bf4e:	466a      	mov	r2, sp
 800bf50:	f7ff ffc8 	bl	800bee4 <__swhatbuf_r>
 800bf54:	9f00      	ldr	r7, [sp, #0]
 800bf56:	4605      	mov	r5, r0
 800bf58:	4639      	mov	r1, r7
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7fd fc10 	bl	8009780 <_malloc_r>
 800bf60:	b948      	cbnz	r0, 800bf76 <__smakebuf_r+0x46>
 800bf62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf66:	059a      	lsls	r2, r3, #22
 800bf68:	d4ee      	bmi.n	800bf48 <__smakebuf_r+0x18>
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	f043 0302 	orr.w	r3, r3, #2
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	e7e2      	b.n	800bf3c <__smakebuf_r+0xc>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	6020      	str	r0, [r4, #0]
 800bf7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf7e:	81a3      	strh	r3, [r4, #12]
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf86:	b15b      	cbz	r3, 800bfa0 <__smakebuf_r+0x70>
 800bf88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f000 f81d 	bl	800bfcc <_isatty_r>
 800bf92:	b128      	cbz	r0, 800bfa0 <__smakebuf_r+0x70>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f023 0303 	bic.w	r3, r3, #3
 800bf9a:	f043 0301 	orr.w	r3, r3, #1
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	431d      	orrs	r5, r3
 800bfa4:	81a5      	strh	r5, [r4, #12]
 800bfa6:	e7cf      	b.n	800bf48 <__smakebuf_r+0x18>

0800bfa8 <_fstat_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	@ (800bfc8 <_fstat_r+0x20>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	f7f5 ffc3 	bl	8001f40 <_fstat>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	d102      	bne.n	800bfc4 <_fstat_r+0x1c>
 800bfbe:	682b      	ldr	r3, [r5, #0]
 800bfc0:	b103      	cbz	r3, 800bfc4 <_fstat_r+0x1c>
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	bd38      	pop	{r3, r4, r5, pc}
 800bfc6:	bf00      	nop
 800bfc8:	200005dc 	.word	0x200005dc

0800bfcc <_isatty_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d06      	ldr	r5, [pc, #24]	@ (800bfe8 <_isatty_r+0x1c>)
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	602b      	str	r3, [r5, #0]
 800bfd8:	f7f5 ffc2 	bl	8001f60 <_isatty>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_isatty_r+0x1a>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_isatty_r+0x1a>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	200005dc 	.word	0x200005dc

0800bfec <abort>:
 800bfec:	b508      	push	{r3, lr}
 800bfee:	2006      	movs	r0, #6
 800bff0:	f000 f834 	bl	800c05c <raise>
 800bff4:	2001      	movs	r0, #1
 800bff6:	f7f5 ff6f 	bl	8001ed8 <_exit>

0800bffa <_malloc_usable_size_r>:
 800bffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffe:	1f18      	subs	r0, r3, #4
 800c000:	2b00      	cmp	r3, #0
 800c002:	bfbc      	itt	lt
 800c004:	580b      	ldrlt	r3, [r1, r0]
 800c006:	18c0      	addlt	r0, r0, r3
 800c008:	4770      	bx	lr

0800c00a <_raise_r>:
 800c00a:	291f      	cmp	r1, #31
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4605      	mov	r5, r0
 800c010:	460c      	mov	r4, r1
 800c012:	d904      	bls.n	800c01e <_raise_r+0x14>
 800c014:	2316      	movs	r3, #22
 800c016:	6003      	str	r3, [r0, #0]
 800c018:	f04f 30ff 	mov.w	r0, #4294967295
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c020:	b112      	cbz	r2, 800c028 <_raise_r+0x1e>
 800c022:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c026:	b94b      	cbnz	r3, 800c03c <_raise_r+0x32>
 800c028:	4628      	mov	r0, r5
 800c02a:	f000 f831 	bl	800c090 <_getpid_r>
 800c02e:	4622      	mov	r2, r4
 800c030:	4601      	mov	r1, r0
 800c032:	4628      	mov	r0, r5
 800c034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c038:	f000 b818 	b.w	800c06c <_kill_r>
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d00a      	beq.n	800c056 <_raise_r+0x4c>
 800c040:	1c59      	adds	r1, r3, #1
 800c042:	d103      	bne.n	800c04c <_raise_r+0x42>
 800c044:	2316      	movs	r3, #22
 800c046:	6003      	str	r3, [r0, #0]
 800c048:	2001      	movs	r0, #1
 800c04a:	e7e7      	b.n	800c01c <_raise_r+0x12>
 800c04c:	2100      	movs	r1, #0
 800c04e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c052:	4620      	mov	r0, r4
 800c054:	4798      	blx	r3
 800c056:	2000      	movs	r0, #0
 800c058:	e7e0      	b.n	800c01c <_raise_r+0x12>
	...

0800c05c <raise>:
 800c05c:	4b02      	ldr	r3, [pc, #8]	@ (800c068 <raise+0xc>)
 800c05e:	4601      	mov	r1, r0
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	f7ff bfd2 	b.w	800c00a <_raise_r>
 800c066:	bf00      	nop
 800c068:	2000001c 	.word	0x2000001c

0800c06c <_kill_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d07      	ldr	r5, [pc, #28]	@ (800c08c <_kill_r+0x20>)
 800c070:	2300      	movs	r3, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	4611      	mov	r1, r2
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	f7f5 ff1d 	bl	8001eb8 <_kill>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d102      	bne.n	800c088 <_kill_r+0x1c>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	b103      	cbz	r3, 800c088 <_kill_r+0x1c>
 800c086:	6023      	str	r3, [r4, #0]
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	bf00      	nop
 800c08c:	200005dc 	.word	0x200005dc

0800c090 <_getpid_r>:
 800c090:	f7f5 bf0a 	b.w	8001ea8 <_getpid>

0800c094 <_init>:
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	bf00      	nop
 800c098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c09a:	bc08      	pop	{r3}
 800c09c:	469e      	mov	lr, r3
 800c09e:	4770      	bx	lr

0800c0a0 <_fini>:
 800c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a2:	bf00      	nop
 800c0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a6:	bc08      	pop	{r3}
 800c0a8:	469e      	mov	lr, r3
 800c0aa:	4770      	bx	lr
