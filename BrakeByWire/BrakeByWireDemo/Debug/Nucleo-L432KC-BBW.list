
Nucleo-L432KC-BBW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800bf80  0800bf80  0000cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3f4  0800c3f4  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3f4  0800c3f4  0000d3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3fc  0800c3fc  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3fc  0800c3fc  0000d3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c400  0800c400  0000d400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c404  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001d8  0800c5dc  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800c5dc  0000e5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016668  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4d  00000000  00000000  00024870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000273c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101b  00000000  00000000  00028880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b56  00000000  00000000  0002989b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f88  00000000  00000000  0004d3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb0d  00000000  00000000  00063379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e20  00000000  00000000  00141ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00148cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf64 	.word	0x0800bf64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bf64 	.word	0x0800bf64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_write>:
float linearVoltage = 0.0f;
float linearAvg = 0.0f;


// uart print to serial terminal for debugging purpose
int _write(int file, char *ptr, int len){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <_write+0x28>)
 8001038:	f005 ff5e 	bl	8006ef8 <HAL_UART_Transmit>
	return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200003b0 	.word	0x200003b0

0800104c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fd93 	bl	8003b86 <HAL_CAN_GetRxMessage>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8001066:	f000 fc51 	bl	800190c <Error_Handler>
  }

  // 0x100 is the can device id of the main controller
  if ((RxHeader.StdId == 0x100))
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001072:	d109      	bne.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
  {
	  // first compute the brake percentage then the pressure needed
	  pressure_desired = CAN_RxData[1];
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa43 	bl	8000504 <__aeabi_ui2d>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4905      	ldr	r1, [pc, #20]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000046c 	.word	0x2000046c
 8001094:	20000450 	.word	0x20000450
 8001098:	20000470 	.word	0x20000470

0800109c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData, &TxMailbox);

	  printf("brake pressure measured: %.2f PSI \r\n", pressure_measured_avg);
	  printf("brake pressure desired: %.2f PSI \r\n", pressure_desired);
  }*/
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	linearVoltage = HAL_ADC_GetValue(&hadc1) / 4095.0 * 3.3;
 80010b8:	4815      	ldr	r0, [pc, #84]	@ (8001110 <HAL_ADC_ConvCpltCallback+0x60>)
 80010ba:	f001 fbff 	bl	80028bc <HAL_ADC_GetValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa1f 	bl	8000504 <__aeabi_ui2d>
 80010c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001100 <HAL_ADC_ConvCpltCallback+0x50>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fbbe 	bl	800084c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001108 <HAL_ADC_ConvCpltCallback+0x58>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa8b 	bl	80005f8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd7d 	bl	8000be8 <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_ADC_ConvCpltCallback+0x64>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40affe00 	.word	0x40affe00
 8001108:	66666666 	.word	0x66666666
 800110c:	400a6666 	.word	0x400a6666
 8001110:	200001f4 	.word	0x200001f4
 8001114:	20000478 	.word	0x20000478

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 ff3e 	bl	8001f9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f897 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 fb3b 	bl	80017a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112a:	f000 fb09 	bl	8001740 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800112e:	f000 f94b 	bl	80013c8 <MX_CAN1_Init>
  MX_TIM6_Init();
 8001132:	f000 fa67 	bl	8001604 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001136:	f000 f9b5 	bl	80014a4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800113a:	f000 f8e1 	bl	8001300 <MX_ADC1_Init>
  MX_TIM7_Init();
 800113e:	f000 fa9b 	bl	8001678 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001142:	f000 fad3 	bl	80016ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	483a      	ldr	r0, [pc, #232]	@ (8001234 <main+0x11c>)
 800114a:	f004 fdf1 	bl	8005d30 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800114e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001152:	f000 ff99 	bl	8002088 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001156:	217f      	movs	r1, #127	@ 0x7f
 8001158:	4837      	ldr	r0, [pc, #220]	@ (8001238 <main+0x120>)
 800115a:	f002 fa79 	bl	8003650 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800115e:	4836      	ldr	r0, [pc, #216]	@ (8001238 <main+0x120>)
 8001160:	f001 faf8 	bl	8002754 <HAL_ADC_Start_IT>
  HAL_Delay(500);
 8001164:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001168:	f000 ff8e 	bl	8002088 <HAL_Delay>
  // IMPORTANT: DO NOT MOVE THIS COUNTER TO GLOBAL VARIABLE
  // OR IT WILL BE RESET EVERY FEW LOOPS FOR NO REASON
  int count_max = 50;
 800116c:	2332      	movs	r3, #50	@ 0x32
 800116e:	60fb      	str	r3, [r7, #12]
  int loopCount = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  float linearSum = 0.0f;
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  float linearMax = 2.61f;
 800117a:	4b30      	ldr	r3, [pc, #192]	@ (800123c <main+0x124>)
 800117c:	60bb      	str	r3, [r7, #8]
  float linearMin = .68f;
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <main+0x128>)
 8001180:	607b      	str	r3, [r7, #4]
	  // reference adc reading [0-4095], reference voltage [0-3.3v]
	  linearVoltage = HAL_ADC_GetValue(&hadc1) / 4095.0 * 3.3;
	  HAL_ADC_Stop(&hadc1);*/

	  //rolling average type stuff
	  linearSum += linearVoltage;
 8001182:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <main+0x12c>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a04 	vldr	s14, [r7, #16]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]
	  loopCount ++;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]

	  if (loopCount >= count_max)
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	db10      	blt.n	80011c4 <main+0xac>
	  {
		  linearAvg = linearSum / count_max;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	edd7 6a04 	vldr	s13, [r7, #16]
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <main+0x130>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]

		  linearSum = 0.0f;
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	613b      	str	r3, [r7, #16]

		  loopCount = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
	  }

	  //read test pin for brake
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 80011c4:	2101      	movs	r1, #1
 80011c6:	4821      	ldr	r0, [pc, #132]	@ (800124c <main+0x134>)
 80011c8:	f003 fad0 	bl	800476c <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d103      	bne.n	80011da <main+0xc2>
	  {
	      // Button is pressed
		  testPin = 1;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <main+0x138>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e002      	b.n	80011e0 <main+0xc8>
	  }
	  else
	  {
		  // Button is not pressed
	      testPin = 0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <main+0x138>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	   }

	  //run motors if test pin is high
	  //duty cycle (max is 1000) @ 2kHz
	  int dutyCycle = 1000;
 80011e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e4:	603b      	str	r3, [r7, #0]

		  if (testPin == 1 && linearAvg > linearMin)
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <main+0x138>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10d      	bne.n	800120a <main+0xf2>
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <main+0x130>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80011f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	d503      	bpl.n	800120a <main+0xf2>
		  {
		  	  //Tighten brake
		  	  TightenBrake(dutyCycle);
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f000 fb38 	bl	8001878 <TightenBrake>
 8001208:	e013      	b.n	8001232 <main+0x11a>
		  }
		  else if (testPin == 0 && linearAvg < linearMax)
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <main+0x138>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <main+0x116>
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <main+0x130>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd03      	ble.n	800122e <main+0x116>
		  {
			  LoosenBrake(dutyCycle);
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f000 fb40 	bl	80018ac <LoosenBrake>
 800122c:	e001      	b.n	8001232 <main+0x11a>
		  }
		  else
		  {
			  StopBrake();
 800122e:	f000 fb57 	bl	80018e0 <StopBrake>
  {
 8001232:	e7a6      	b.n	8001182 <main+0x6a>
 8001234:	20000280 	.word	0x20000280
 8001238:	200001f4 	.word	0x200001f4
 800123c:	40270a3d 	.word	0x40270a3d
 8001240:	3f2e147b 	.word	0x3f2e147b
 8001244:	20000478 	.word	0x20000478
 8001248:	2000047c 	.word	0x2000047c
 800124c:	48000400 	.word	0x48000400
 8001250:	20000000 	.word	0x20000000

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	@ 0x58
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f007 faa3 	bl	80087ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800127a:	f003 fac5 	bl	8004808 <HAL_PWREx_ControlVoltageScaling>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001284:	f000 fb42 	bl	800190c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001288:	f003 faa0 	bl	80047cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <SystemClock_Config+0xa8>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001292:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <SystemClock_Config+0xa8>)
 8001294:	f023 0318 	bic.w	r3, r3, #24
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800129c:	2314      	movs	r3, #20
 800129e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fafb 	bl	80048b4 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012c4:	f000 fb22 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fefb 	bl	80050dc <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012ec:	f000 fb0e 	bl	800190c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012f0:	f004 fb0e 	bl	8005910 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012f4:	bf00      	nop
 80012f6:	3758      	adds	r7, #88	@ 0x58
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001318:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <MX_ADC1_Init+0xc0>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800131e:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8001322:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001338:	2204      	movs	r2, #4
 800133a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800133e:	2200      	movs	r2, #0
 8001340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001342:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001344:	2201      	movs	r2, #1
 8001346:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135c:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_ADC1_Init+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	@ (80013bc <MX_ADC1_Init+0xbc>)
 800137a:	f001 f8a9 	bl	80024d0 <HAL_ADC_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001384:	f000 fac2 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_ADC1_Init+0xc4>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138c:	2306      	movs	r3, #6
 800138e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001394:	237f      	movs	r3, #127	@ 0x7f
 8001396:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001398:	2304      	movs	r3, #4
 800139a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_ADC1_Init+0xbc>)
 80013a6:	f001 fc5f 	bl	8002c68 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80013b0:	f000 faac 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//  HAL_ADC_Start(&hadc1);
  /* USER CODE END ADC1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001f4 	.word	0x200001f4
 80013c0:	50040000 	.word	0x50040000
 80013c4:	25b00200 	.word	0x25b00200

080013c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.DLC = 4;
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x102;
 80013e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80013ec:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <MX_CAN1_Init+0xd0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <MX_CAN1_Init+0xd4>)
 80013f6:	4a2a      	ldr	r2, [pc, #168]	@ (80014a0 <MX_CAN1_Init+0xd8>)
 80013f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_CAN1_Init+0xd4>)
 80013fc:	2210      	movs	r2, #16
 80013fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800140c:	4b23      	ldr	r3, [pc, #140]	@ (800149c <MX_CAN1_Init+0xd4>)
 800140e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001412:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001416:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 800141a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_CAN1_Init+0xd4>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001424:	2201      	movs	r2, #1
 8001426:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_CAN1_Init+0xd4>)
 800142a:	2200      	movs	r2, #0
 800142c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001430:	2200      	movs	r2, #0
 8001432:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001436:	2200      	movs	r2, #0
 8001438:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_CAN1_Init+0xd4>)
 800143c:	2200      	movs	r2, #0
 800143e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001440:	4816      	ldr	r0, [pc, #88]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001442:	f002 f997 	bl	8003774 <HAL_CAN_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_CAN1_Init+0x88>
  {
    Error_Handler();
 800144c:	f000 fa5e 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001450:	2301      	movs	r3, #1
 8001452:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001454:	230a      	movs	r3, #10
 8001456:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001474:	2314      	movs	r3, #20
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_CAN1_Init+0xd4>)
 800147e:	f002 fa74 	bl	800396a <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8001482:	4806      	ldr	r0, [pc, #24]	@ (800149c <MX_CAN1_Init+0xd4>)
 8001484:	f002 fb3b 	bl	8003afe <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001488:	2102      	movs	r1, #2
 800148a:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_CAN1_Init+0xd4>)
 800148c:	f002 fc9d 	bl	8003dca <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000438 	.word	0x20000438
 800149c:	20000258 	.word	0x20000258
 80014a0:	40006400 	.word	0x40006400

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b09a      	sub	sp, #104	@ 0x68
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	222c      	movs	r2, #44	@ 0x2c
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f007 f965 	bl	80087ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e4:	4b45      	ldr	r3, [pc, #276]	@ (80015fc <MX_TIM1_Init+0x158>)
 80014e6:	4a46      	ldr	r2, [pc, #280]	@ (8001600 <MX_TIM1_Init+0x15c>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80014ea:	4b44      	ldr	r3, [pc, #272]	@ (80015fc <MX_TIM1_Init+0x158>)
 80014ec:	220f      	movs	r2, #15
 80014ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b42      	ldr	r3, [pc, #264]	@ (80015fc <MX_TIM1_Init+0x158>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80014f6:	4b41      	ldr	r3, [pc, #260]	@ (80015fc <MX_TIM1_Init+0x158>)
 80014f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b3f      	ldr	r3, [pc, #252]	@ (80015fc <MX_TIM1_Init+0x158>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <MX_TIM1_Init+0x158>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <MX_TIM1_Init+0x158>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001510:	483a      	ldr	r0, [pc, #232]	@ (80015fc <MX_TIM1_Init+0x158>)
 8001512:	f004 faff 	bl	8005b14 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800151c:	f000 f9f6 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800152a:	4619      	mov	r1, r3
 800152c:	4833      	ldr	r0, [pc, #204]	@ (80015fc <MX_TIM1_Init+0x158>)
 800152e:	f004 fef9 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001538:	f000 f9e8 	bl	800190c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800153c:	482f      	ldr	r0, [pc, #188]	@ (80015fc <MX_TIM1_Init+0x158>)
 800153e:	f004 fb95 	bl	8005c6c <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001548:	f000 f9e0 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001558:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800155c:	4619      	mov	r1, r3
 800155e:	4827      	ldr	r0, [pc, #156]	@ (80015fc <MX_TIM1_Init+0x158>)
 8001560:	f005 fb80 	bl	8006c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800156a:	f000 f9cf 	bl	800190c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156e:	2360      	movs	r3, #96	@ 0x60
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	481a      	ldr	r0, [pc, #104]	@ (80015fc <MX_TIM1_Init+0x158>)
 8001594:	f004 fdb2 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800159e:	f000 f9b5 	bl	800190c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4809      	ldr	r0, [pc, #36]	@ (80015fc <MX_TIM1_Init+0x158>)
 80015d8:	f005 fbaa 	bl	8006d30 <HAL_TIMEx_ConfigBreakDeadTime>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015e2:	f000 f993 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <MX_TIM1_Init+0x158>)
 80015ea:	f004 fba1 	bl	8005d30 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM1_Init+0x158>)
 80015f0:	f000 faf0 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 80015f4:	bf00      	nop
 80015f6:	3768      	adds	r7, #104	@ 0x68
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000280 	.word	0x20000280
 8001600:	40012c00 	.word	0x40012c00

08001604 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <MX_TIM6_Init+0x70>)
 8001618:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_TIM6_Init+0x6c>)
 800161c:	220f      	movs	r2, #15
 800161e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001628:	f242 7210 	movw	r2, #10000	@ 0x2710
 800162c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001634:	480e      	ldr	r0, [pc, #56]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001636:	f004 fa6d 	bl	8005b14 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001640:	f000 f964 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001652:	f005 fb07 	bl	8006c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800165c:	f000 f956 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <MX_TIM6_Init+0x6c>)
 8001662:	f004 faaf 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002cc 	.word	0x200002cc
 8001674:	40001000 	.word	0x40001000

08001678 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 800168a:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <MX_TIM7_Init+0x70>)
 800168c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 8001690:	223f      	movs	r2, #63	@ 0x3f
 8001692:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 25000;
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 800169c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80016a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016a8:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 80016aa:	f004 fa33 	bl	8005b14 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016b4:	f000 f92a 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 80016c6:	f005 facd 	bl	8006c64 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016d0:	f000 f91c 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM7_Init+0x6c>)
 80016d6:	f004 fa75 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000318 	.word	0x20000318
 80016e8:	40001400 	.word	0x40001400

080016ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_TIM16_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_TIM16_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160-1;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_TIM16_Init+0x4c>)
 80016f8:	229f      	movs	r2, #159	@ 0x9f
 80016fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_TIM16_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <MX_TIM16_Init+0x4c>)
 8001704:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001708:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_TIM16_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_TIM16_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_TIM16_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800171c:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_TIM16_Init+0x4c>)
 800171e:	f004 f9f9 	bl	8005b14 <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001728:	f000 f8f0 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <MX_TIM16_Init+0x4c>)
 800172e:	f004 fa49 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000364 	.word	0x20000364
 800173c:	40014400 	.word	0x40014400

08001740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001746:	4a15      	ldr	r2, [pc, #84]	@ (800179c <MX_USART2_UART_Init+0x5c>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_USART2_UART_Init+0x58>)
 8001784:	f005 fb6a 	bl	8006e5c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 f8bd 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200003b0 	.word	0x200003b0
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_GPIO_Init+0xd0>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_Pin|Motor2_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	21c0      	movs	r1, #192	@ 0xc0
 8001802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001806:	f002 ffc9 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2108      	movs	r1, #8
 800180e:	4819      	ldr	r0, [pc, #100]	@ (8001874 <MX_GPIO_Init+0xd4>)
 8001810:	f002 ffc4 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin;
 8001814:	23c0      	movs	r3, #192	@ 0xc0
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f002 fe33 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001832:	2301      	movs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800183a:	2302      	movs	r3, #2
 800183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <MX_GPIO_Init+0xd4>)
 8001846:	f002 fe27 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800184a:	2308      	movs	r3, #8
 800184c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <MX_GPIO_Init+0xd4>)
 8001862:	f002 fe19 	bl	8004498 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400

08001878 <TightenBrake>:

/* USER CODE BEGIN 4 */
void TightenBrake(int dutyCycle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <TightenBrake+0x30>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2140      	movs	r1, #64	@ 0x40
 800188c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001890:	f002 ff84 	bl	800479c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f002 ff7e 	bl	800479c <HAL_GPIO_WritePin>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000280 	.word	0x20000280

080018ac <LoosenBrake>:
void LoosenBrake(int dutyCycle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <LoosenBrake+0x30>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2140      	movs	r1, #64	@ 0x40
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c4:	f002 ff6a 	bl	800479c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d0:	f002 ff64 	bl	800479c <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000280 	.word	0x20000280

080018e0 <StopBrake>:
void StopBrake()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <StopBrake+0x28>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(GPIOA, Motor1_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2140      	movs	r1, #64	@ 0x40
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f4:	f002 ff52 	bl	800479c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Motor2_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f002 ff4c 	bl	800479c <HAL_GPIO_WritePin>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000280 	.word	0x20000280

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_MspInit+0x44>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001922:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <HAL_MspInit+0x44>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6613      	str	r3, [r2, #96]	@ 0x60
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_MspInit+0x44>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_MspInit+0x44>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_MspInit+0x44>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_MspInit+0x44>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09e      	sub	sp, #120	@ 0x78
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2254      	movs	r2, #84	@ 0x54
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f006 ff14 	bl	80087ae <memset>
  if(hadc->Instance==ADC1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a29      	ldr	r2, [pc, #164]	@ (8001a30 <HAL_ADC_MspInit+0xd0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d14b      	bne.n	8001a28 <HAL_ADC_MspInit+0xc8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001994:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001996:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800199a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019a4:	2308      	movs	r3, #8
 80019a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019a8:	2307      	movs	r3, #7
 80019aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fdb0 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80019ca:	f7ff ff9f 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_ADC_MspInit+0xd4>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fe:	2310      	movs	r3, #16
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a02:	2303      	movs	r3, #3
 8001a04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a14:	f002 fd40 	bl	8004498 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f002 fd04 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001a22:	2012      	movs	r0, #18
 8001a24:	f002 fd1d 	bl	8004462 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	3778      	adds	r7, #120	@ 0x78
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	50040000 	.word	0x50040000
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a20      	ldr	r2, [pc, #128]	@ (8001ad8 <HAL_CAN_MspInit+0xa0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d139      	bne.n	8001ace <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a9c:	2309      	movs	r3, #9
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aaa:	f002 fcf5 	bl	8004498 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2014      	movs	r0, #20
 8001ab4:	f002 fcb9 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ab8:	2014      	movs	r0, #20
 8001aba:	f002 fcd2 	bl	8004462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2015      	movs	r0, #21
 8001ac4:	f002 fcb1 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ac8:	2015      	movs	r0, #21
 8001aca:	f002 fcca 	bl	8004462 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	@ 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40006400 	.word	0x40006400
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a34      	ldr	r2, [pc, #208]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xe0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d114      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af6:	4a33      	ldr	r2, [pc, #204]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001af8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afe:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2019      	movs	r0, #25
 8001b10:	f002 fc8b 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b14:	2019      	movs	r0, #25
 8001b16:	f002 fca4 	bl	8004462 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b1a:	e04c      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a29      	ldr	r2, [pc, #164]	@ (8001bc8 <HAL_TIM_Base_MspInit+0xe8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2036      	movs	r0, #54	@ 0x36
 8001b44:	f002 fc71 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b48:	2036      	movs	r0, #54	@ 0x36
 8001b4a:	f002 fc8a 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8001b4e:	e032      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <HAL_TIM_Base_MspInit+0xec>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d114      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b60:	f043 0320 	orr.w	r3, r3, #32
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2037      	movs	r0, #55	@ 0x37
 8001b78:	f002 fc57 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b7c:	2037      	movs	r0, #55	@ 0x37
 8001b7e:	f002 fc70 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8001b82:	e018      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <HAL_TIM_Base_MspInit+0xf0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_TIM_Base_MspInit+0xe4>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2019      	movs	r0, #25
 8001bac:	f002 fc3d 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bb0:	2019      	movs	r0, #25
 8001bb2:	f002 fc56 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40001000 	.word	0x40001000
 8001bcc:	40001400 	.word	0x40001400
 8001bd0:	40014400 	.word	0x40014400

08001bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_TIM_MspPostInit+0x68>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11d      	bne.n	8001c32 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_TIM_MspPostInit+0x6c>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2e:	f002 fc33 	bl	8004498 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09e      	sub	sp, #120	@ 0x78
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2254      	movs	r2, #84	@ 0x54
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fda2 	bl	80087ae <memset>
  if(huart->Instance==USART2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_UART_MspInit+0xa8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d136      	bne.n	8001ce2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fc4f 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff fe3e 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_UART_MspInit+0xac>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cde:	f002 fbdb 	bl	8004498 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3778      	adds	r7, #120	@ 0x78
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4a:	f000 f97d 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <ADC1_IRQHandler+0x10>)
 8001d5a:	f000 fdbc 	bl	80028d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200001f4 	.word	0x200001f4

08001d68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <CAN1_RX0_IRQHandler+0x10>)
 8001d6e:	f002 f852 	bl	8003e16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000258 	.word	0x20000258

08001d7c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <CAN1_RX1_IRQHandler+0x10>)
 8001d82:	f002 f848 	bl	8003e16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000258 	.word	0x20000258

08001d90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d94:	4803      	ldr	r0, [pc, #12]	@ (8001da4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001d96:	f004 f8a9 	bl	8005eec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001d9a:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001d9c:	f004 f8a6 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000280 	.word	0x20000280
 8001da8:	20000364 	.word	0x20000364

08001dac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <TIM6_DAC_IRQHandler+0x10>)
 8001db2:	f004 f89b 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200002cc 	.word	0x200002cc

08001dc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <TIM7_IRQHandler+0x10>)
 8001dc6:	f004 f891 	bl	8005eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000318 	.word	0x20000318

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dee:	f006 fd31 	bl	8008854 <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
	return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <_exit+0x12>

08001e1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e00a      	b.n	8001e42 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2c:	f3af 8000 	nop.w
 8001e30:	4601      	mov	r1, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	b2ca      	uxtb	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf0      	blt.n	8001e2c <_read+0x12>
	}

return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7c:	605a      	str	r2, [r3, #4]
	return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_isatty>:

int _isatty(int file)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
	return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f006 fcb2 	bl	8008854 <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20010000 	.word	0x20010000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	20000480 	.word	0x20000480
 8001f24:	200005d8 	.word	0x200005d8

08001f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f50:	f7ff ffea 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopForever+0xe>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopForever+0x16>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f006 fc71 	bl	8008860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f7e:	f7ff f8cb 	bl	8001118 <main>

08001f82 <LoopForever>:

LoopForever:
    b LoopForever
 8001f82:	e7fe      	b.n	8001f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f90:	0800c404 	.word	0x0800c404
  ldr r2, =_sbss
 8001f94:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f98:	200005d4 	.word	0x200005d4

08001f9c <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <CAN1_SCE_IRQHandler>

08001f9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f002 fa33 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f80e 	bl	8001fd0 <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	e001      	b.n	8001fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc0:	f7ff fcaa 	bl	8001918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_InitTick+0x6c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d023      	beq.n	800202c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_InitTick+0x70>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_InitTick+0x6c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fa3f 	bl	800447e <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d809      	bhi.n	8002020 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f002 fa09 	bl	800442a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_InitTick+0x74>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e007      	b.n	8002030 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e004      	b.n	8002030 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e001      	b.n	8002030 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c
 8002040:	20000004 	.word	0x20000004
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20000484 	.word	0x20000484

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000484 	.word	0x20000484

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3360      	adds	r3, #96	@ 0x60
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <LL_ADC_SetOffset+0x44>)
 800215a:	4013      	ands	r3, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	4313      	orrs	r3, r2
 8002168:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	03fff000 	.word	0x03fff000

08002180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3360      	adds	r3, #96	@ 0x60
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3360      	adds	r3, #96	@ 0x60
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3330      	adds	r3, #48	@ 0x30
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	211f      	movs	r1, #31
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0e9b      	lsrs	r3, r3, #26
 8002240:	f003 011f 	and.w	r1, r3, #31
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	431a      	orrs	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002286:	b480      	push	{r7}
 8002288:	b087      	sub	sp, #28
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3314      	adds	r3, #20
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	0e5b      	lsrs	r3, r3, #25
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0d1b      	lsrs	r3, r3, #20
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2107      	movs	r1, #7
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	0d1b      	lsrs	r3, r3, #20
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	431a      	orrs	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022d0:	bf00      	nop
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0318 	and.w	r3, r3, #24
 80022fe:	4908      	ldr	r1, [pc, #32]	@ (8002320 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002300:	40d9      	lsrs	r1, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	400b      	ands	r3, r1
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	0007ffff 	.word	0x0007ffff

08002324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800235c:	d101      	bne.n	8002362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ac:	d101      	bne.n	80023b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023fc:	f043 0202 	orr.w	r2, r3, #2
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <LL_ADC_IsEnabled+0x18>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_ADC_IsEnabled+0x1a>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d101      	bne.n	800244e <LL_ADC_IsDisableOngoing+0x18>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_IsDisableOngoing+0x1a>
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d101      	bne.n	800249c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e126      	b.n	8002738 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fa31 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff19 	bl	8002348 <LL_ADC_IsDeepPowerDownEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff feff 	bl	8002324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff34 	bl	8002398 <LL_ADC_IsInternalRegulatorEnabled>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff18 	bl	8002370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002540:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_ADC_Init+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	4a7f      	ldr	r2, [pc, #508]	@ (8002744 <HAL_ADC_Init+0x274>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002554:	e002      	b.n	800255c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3b01      	subs	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff16 	bl	8002398 <LL_ADC_IsInternalRegulatorEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff76 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80bf 	bne.w	8002726 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80bb 	bne.w	8002726 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025b8:	f043 0202 	orr.w	r2, r3, #2
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff23 	bl	8002410 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d0:	485d      	ldr	r0, [pc, #372]	@ (8002748 <HAL_ADC_Init+0x278>)
 80025d2:	f7ff ff1d 	bl	8002410 <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4619      	mov	r1, r3
 80025e2:	485a      	ldr	r0, [pc, #360]	@ (800274c <HAL_ADC_Init+0x27c>)
 80025e4:	f7ff fd74 	bl	80020d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e5b      	ldrb	r3, [r3, #25]
 80025ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002606:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d106      	bne.n	8002624 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	3b01      	subs	r3, #1
 800261c:	045b      	lsls	r3, r3, #17
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	4b42      	ldr	r3, [pc, #264]	@ (8002750 <HAL_ADC_Init+0x280>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	430b      	orrs	r3, r1
 8002652:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff26 	bl	80024aa <LL_ADC_INJ_IsConversionOngoing>
 800265e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d13d      	bne.n	80026e2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13a      	bne.n	80026e2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002670:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002678:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	69b9      	ldr	r1, [r7, #24]
 8002692:	430b      	orrs	r3, r1
 8002694:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800269c:	2b01      	cmp	r3, #1
 800269e:	d118      	bne.n	80026d2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	e007      	b.n	80026e2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10c      	bne.n	8002704 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	f023 010f 	bic.w	r1, r3, #15
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
 8002702:	e007      	b.n	8002714 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020f 	bic.w	r2, r2, #15
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002718:	f023 0303 	bic.w	r3, r3, #3
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
 8002724:	e007      	b.n	8002736 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002736:	7ffb      	ldrb	r3, [r7, #31]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000004 	.word	0x20000004
 8002744:	053e2d63 	.word	0x053e2d63
 8002748:	50040000 	.word	0x50040000
 800274c:	50040300 	.word	0x50040300
 8002750:	fff0c007 	.word	0xfff0c007

08002754 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe8f 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 80a0 	bne.w	80028ae <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_ADC_Start_IT+0x28>
 8002778:	2302      	movs	r3, #2
 800277a:	e09b      	b.n	80028b4 <HAL_ADC_Start_IT+0x160>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fe51 	bl	800342c <ADC_Enable>
 800278a:	4603      	mov	r3, r0
 800278c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 8087 	bne.w	80028a4 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f023 0206 	bic.w	r2, r3, #6
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80027c2:	e002      	b.n	80027ca <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	221c      	movs	r2, #28
 80027d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 021c 	bic.w	r2, r2, #28
 80027e8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d108      	bne.n	8002804 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0208 	orr.w	r2, r2, #8
 8002800:	605a      	str	r2, [r3, #4]
          break;
 8002802:	e008      	b.n	8002816 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0204 	orr.w	r2, r2, #4
 8002812:	605a      	str	r2, [r3, #4]
          break;
 8002814:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	2b00      	cmp	r3, #0
 800281c:	d107      	bne.n	800282e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0210 	orr.w	r2, r2, #16
 800282c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02d      	beq.n	8002898 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002844:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d110      	bne.n	8002876 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0220 	bic.w	r2, r2, #32
 8002862:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002872:	605a      	str	r2, [r3, #4]
            break;
 8002874:	e010      	b.n	8002898 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002884:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	605a      	str	r2, [r3, #4]
            break;
 8002896:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fddd 	bl	800245c <LL_ADC_REG_StartConversion>
 80028a2:	e006      	b.n	80028b2 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028ac:	e001      	b.n	80028b2 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b088      	sub	sp, #32
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <HAL_ADC_IRQHandler+0x56>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff1e 	bl	8003760 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_ADC_IRQHandler+0x6a>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d05e      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d059      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fc36 	bl	80021e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03e      	beq.n	80029fa <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d135      	bne.n	80029fa <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	d12e      	bne.n	80029fa <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fd6f 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11a      	bne.n	80029e2 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 020c 	bic.w	r2, r2, #12
 80029ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d112      	bne.n	80029fa <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	@ 0x54
 80029e0:	e00b      	b.n	80029fa <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fb58 	bl	80010b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	220c      	movs	r2, #12
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_IRQHandler+0x146>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d072      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d06d      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fc07 	bl	8002260 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fbc2 	bl	80021e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d047      	beq.n	8002afe <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_ADC_IRQHandler+0x1b2>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d03f      	beq.n	8002afe <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d13a      	bne.n	8002afe <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b40      	cmp	r3, #64	@ 0x40
 8002a94:	d133      	bne.n	8002afe <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d12e      	bne.n	8002afe <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fd00 	bl	80024aa <LL_ADC_INJ_IsConversionOngoing>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11a      	bne.n	8002ae6 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002abe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d112      	bne.n	8002afe <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ae4:	e00b      	b.n	8002afe <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fe06 	bl	8003710 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2260      	movs	r2, #96	@ 0x60
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x264>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00c      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f886 	bl	8002c3e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d012      	beq.n	8002b6a <HAL_ADC_IRQHandler+0x294>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fdec 	bl	8003738 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x2c4>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fdde 	bl	800374c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d02a      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x324>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d025      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e008      	b.n	8002bce <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f830 	bl	8002c52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d018      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x360>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	f043 0208 	orr.w	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fd77 	bl	8003724 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0b6      	sub	sp, #216	@ 0xd8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x22>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e3bb      	b.n	8003402 <HAL_ADC_ConfigChannel+0x79a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fbf4 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 83a0 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d824      	bhi.n	8002cfe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	3b02      	subs	r3, #2
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d81b      	bhi.n	8002cf6 <HAL_ADC_ConfigChannel+0x8e>
 8002cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <HAL_ADC_ConfigChannel+0x5c>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002cdd 	.word	0x08002cdd
 8002ccc:	08002ce5 	.word	0x08002ce5
 8002cd0:	08002ced 	.word	0x08002ced
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002cd4:	230c      	movs	r3, #12
 8002cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cda:	e010      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002cdc:	2312      	movs	r3, #18
 8002cde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ce2:	e00c      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ce4:	2318      	movs	r3, #24
 8002ce6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cea:	e008      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cfc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d0c:	f7ff fa7c 	bl	8002208 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fbb5 	bl	8002484 <LL_ADC_REG_IsConversionOngoing>
 8002d1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fbc1 	bl	80024aa <LL_ADC_INJ_IsConversionOngoing>
 8002d28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 81a4 	bne.w	800307e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 819f 	bne.w	800307e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f7ff fa9a 	bl	8002286 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	08db      	lsrs	r3, r3, #3
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d00a      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6919      	ldr	r1, [r3, #16]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d84:	f7ff f9d8 	bl	8002138 <LL_ADC_SetOffset>
 8002d88:	e179      	b.n	800307e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f9f5 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x14e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f9ea 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	0e9b      	lsrs	r3, r3, #26
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	e01e      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x18c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f9df 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002de4:	2320      	movs	r3, #32
 8002de6:	e004      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1a4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	e018      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1d6>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e004      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f9ae 	bl	80021ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f992 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x214>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f987 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	e01e      	b.n	8002eba <HAL_ADC_ConfigChannel+0x252>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f97c 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e004      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x26a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	e018      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x29c>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e004      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002efa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f94b 	bl	80021ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f92f 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x2da>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f924 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	e01e      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x318>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff f919 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e004      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x330>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	e014      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x35a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e004      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d106      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f8ec 	bl	80021ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2103      	movs	r1, #3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f8d0 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x398>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f8c5 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	e017      	b.n	8003030 <HAL_ADC_ConfigChannel+0x3c8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f8ba 	bl	8002180 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800301c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e003      	b.n	800302e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x3e0>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	e011      	b.n	800306c <HAL_ADC_ConfigChannel+0x404>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003058:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800305a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e003      	b.n	800306c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800306c:	429a      	cmp	r2, r3
 800306e:	d106      	bne.n	800307e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	2103      	movs	r1, #3
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f897 	bl	80021ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f9c4 	bl	8002410 <LL_ADC_IsEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8140 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	461a      	mov	r2, r3
 800309e:	f7ff f91d 	bl	80022dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a8f      	ldr	r2, [pc, #572]	@ (80032e4 <HAL_ADC_ConfigChannel+0x67c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	f040 8131 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x46e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2b09      	cmp	r3, #9
 80030cc:	bf94      	ite	ls
 80030ce:	2301      	movls	r3, #1
 80030d0:	2300      	movhi	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e019      	b.n	800310a <HAL_ADC_ConfigChannel+0x4a2>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80030e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2b09      	cmp	r3, #9
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310a:	2b00      	cmp	r3, #0
 800310c:	d079      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_ADC_ConfigChannel+0x4c2>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	3301      	adds	r3, #1
 8003122:	069b      	lsls	r3, r3, #26
 8003124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003128:	e015      	b.n	8003156 <HAL_ADC_ConfigChannel+0x4ee>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800313c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	069b      	lsls	r3, r3, #26
 8003152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x50e>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	3301      	adds	r3, #1
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	e017      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x53e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003186:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	ea42 0103 	orr.w	r1, r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x564>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	f003 021f 	and.w	r2, r3, #31
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	051b      	lsls	r3, r3, #20
 80031ca:	e018      	b.n	80031fe <HAL_ADC_ConfigChannel+0x596>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fe:	430b      	orrs	r3, r1
 8003200:	e081      	b.n	8003306 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_ADC_ConfigChannel+0x5b6>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	3301      	adds	r3, #1
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800321c:	e015      	b.n	800324a <HAL_ADC_ConfigChannel+0x5e2>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e003      	b.n	8003242 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3301      	adds	r3, #1
 8003244:	069b      	lsls	r3, r3, #26
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_ADC_ConfigChannel+0x602>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	3301      	adds	r3, #1
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	e017      	b.n	800329a <HAL_ADC_ConfigChannel+0x632>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	61bb      	str	r3, [r7, #24]
  return result;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	ea42 0103 	orr.w	r1, r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x65e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 021f 	and.w	r2, r3, #31
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	3b1e      	subs	r3, #30
 80032be:	051b      	lsls	r3, r3, #20
 80032c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032c4:	e01e      	b.n	8003304 <HAL_ADC_ConfigChannel+0x69c>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	60fb      	str	r3, [r7, #12]
  return result;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e006      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x688>
 80032e2:	bf00      	nop
 80032e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 021f 	and.w	r2, r3, #31
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	3b1e      	subs	r3, #30
 80032fe:	051b      	lsls	r3, r3, #20
 8003300:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003304:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800330a:	4619      	mov	r1, r3
 800330c:	f7fe ffbb 	bl	8002286 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_ADC_ConfigChannel+0x7a4>)
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d06c      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331c:	483c      	ldr	r0, [pc, #240]	@ (8003410 <HAL_ADC_ConfigChannel+0x7a8>)
 800331e:	f7fe fefd 	bl	800211c <LL_ADC_GetCommonPathInternalCh>
 8003322:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <HAL_ADC_ConfigChannel+0x7ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d127      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d121      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a35      	ldr	r2, [pc, #212]	@ (8003418 <HAL_ADC_ConfigChannel+0x7b0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d157      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800334a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800334e:	4619      	mov	r1, r3
 8003350:	482f      	ldr	r0, [pc, #188]	@ (8003410 <HAL_ADC_ConfigChannel+0x7a8>)
 8003352:	f7fe fed0 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003356:	4b31      	ldr	r3, [pc, #196]	@ (800341c <HAL_ADC_ConfigChannel+0x7b4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_ADC_ConfigChannel+0x7b8>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003370:	e002      	b.n	8003378 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3b01      	subs	r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800337e:	e03a      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a27      	ldr	r2, [pc, #156]	@ (8003424 <HAL_ADC_ConfigChannel+0x7bc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d113      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800338a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800338e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1f      	ldr	r2, [pc, #124]	@ (8003418 <HAL_ADC_ConfigChannel+0x7b0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d12a      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a8:	4619      	mov	r1, r3
 80033aa:	4819      	ldr	r0, [pc, #100]	@ (8003410 <HAL_ADC_ConfigChannel+0x7a8>)
 80033ac:	f7fe fea3 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b0:	e021      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_ADC_ConfigChannel+0x7c0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d11c      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d116      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <HAL_ADC_ConfigChannel+0x7b0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033da:	4619      	mov	r1, r3
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <HAL_ADC_ConfigChannel+0x7a8>)
 80033de:	f7fe fe8a 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
 80033e2:	e008      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003402:	4618      	mov	r0, r3
 8003404:	37d8      	adds	r7, #216	@ 0xd8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	80080000 	.word	0x80080000
 8003410:	50040300 	.word	0x50040300
 8003414:	c7520000 	.word	0xc7520000
 8003418:	50040000 	.word	0x50040000
 800341c:	20000004 	.word	0x20000004
 8003420:	053e2d63 	.word	0x053e2d63
 8003424:	cb840000 	.word	0xcb840000
 8003428:	80000001 	.word	0x80000001

0800342c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe ffe7 	bl	8002410 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d169      	bne.n	800351c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <ADC_Enable+0xfc>)
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e055      	b.n	800351e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ffa2 	bl	80023c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800347c:	482b      	ldr	r0, [pc, #172]	@ (800352c <ADC_Enable+0x100>)
 800347e:	f7fe fe4d 	bl	800211c <LL_ADC_GetCommonPathInternalCh>
 8003482:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800348c:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <ADC_Enable+0x104>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	4a28      	ldr	r2, [pc, #160]	@ (8003534 <ADC_Enable+0x108>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034a6:	e002      	b.n	80034ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f9      	bne.n	80034a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034b4:	f7fe fddc 	bl	8002070 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ba:	e028      	b.n	800350e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe ffa5 	bl	8002410 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe ff75 	bl	80023c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034d6:	f7fe fdcb 	bl	8002070 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d914      	bls.n	800350e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d00d      	beq.n	800350e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d1cf      	bne.n	80034bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	8000003f 	.word	0x8000003f
 800352c:	50040300 	.word	0x50040300
 8003530:	20000004 	.word	0x20000004
 8003534:	053e2d63 	.word	0x053e2d63

08003538 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe ff76 	bl	8002436 <LL_ADC_IsDisableOngoing>
 800354a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe ff5d 	bl	8002410 <LL_ADC_IsEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d047      	beq.n	80035ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d144      	bne.n	80035ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030d 	and.w	r3, r3, #13
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10c      	bne.n	800358a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe ff37 	bl	80023e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2203      	movs	r2, #3
 8003580:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003582:	f7fe fd75 	bl	8002070 <HAL_GetTick>
 8003586:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003588:	e029      	b.n	80035de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e023      	b.n	80035ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035a6:	f7fe fd63 	bl	8002070 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d914      	bls.n	80035de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c6:	f043 0210 	orr.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e007      	b.n	80035ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1dc      	bne.n	80035a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <LL_ADC_StartCalibration>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003612:	4313      	orrs	r3, r2
 8003614:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_IsCalibrationOnGoing>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800363c:	d101      	bne.n	8003642 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_ADCEx_Calibration_Start+0x1c>
 8003668:	2302      	movs	r3, #2
 800366a:	e04d      	b.n	8003708 <HAL_ADCEx_Calibration_Start+0xb8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff5f 	bl	8003538 <ADC_Disable>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d136      	bne.n	80036f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800368c:	f023 0302 	bic.w	r3, r3, #2
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ffa9 	bl	80035f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036a4:	e014      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80036b2:	d30d      	bcc.n	80036d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	f023 0312 	bic.w	r3, r3, #18
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01b      	b.n	8003708 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ffa7 	bl	8003628 <LL_ADC_IsCalibrationOnGoing>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e2      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80036f0:	e005      	b.n	80036fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0ed      	b.n	8003962 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe f950 	bl	8001a38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7fe fc62 	bl	8002070 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b0:	f7fe fc5e 	bl	8002070 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0c5      	b.n	8003962 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0e5      	beq.n	80037b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0202 	bic.w	r2, r2, #2
 80037f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f4:	f7fe fc3c 	bl	8002070 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037fa:	e012      	b.n	8003822 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037fc:	f7fe fc38 	bl	8002070 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b0a      	cmp	r3, #10
 8003808:	d90b      	bls.n	8003822 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2205      	movs	r2, #5
 800381a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e09f      	b.n	8003962 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e1b      	ldrb	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e007      	b.n	800385a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7e5b      	ldrb	r3, [r3, #25]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e007      	b.n	8003884 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7e9b      	ldrb	r3, [r3, #26]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d108      	bne.n	800389e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e007      	b.n	80038ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0220 	bic.w	r2, r2, #32
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7edb      	ldrb	r3, [r3, #27]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0210 	bic.w	r2, r2, #16
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0210 	orr.w	r2, r2, #16
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7f1b      	ldrb	r3, [r3, #28]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0208 	orr.w	r2, r2, #8
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e007      	b.n	8003902 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0208 	bic.w	r2, r2, #8
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7f5b      	ldrb	r3, [r3, #29]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0204 	orr.w	r2, r2, #4
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e007      	b.n	800392c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	ea42 0103 	orr.w	r1, r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800396a:	b480      	push	{r7}
 800396c:	b087      	sub	sp, #28
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d003      	beq.n	8003990 <HAL_CAN_ConfigFilter+0x26>
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b02      	cmp	r3, #2
 800398c:	f040 80aa 	bne.w	8003ae4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2201      	movs	r2, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d123      	bne.n	8003a12 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3248      	adds	r2, #72	@ 0x48
 80039f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	3348      	adds	r3, #72	@ 0x48
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d122      	bne.n	8003a60 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3248      	adds	r2, #72	@ 0x48
 8003a40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	3348      	adds	r3, #72	@ 0x48
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003a7a:	e007      	b.n	8003a8c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003aa6:	e007      	b.n	8003ab8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e006      	b.n	8003af2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d12e      	bne.n	8003b70 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b2a:	f7fe faa1 	bl	8002070 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b30:	e012      	b.n	8003b58 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b32:	f7fe fa9d 	bl	8002070 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d90b      	bls.n	8003b58 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e012      	b.n	8003b7e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e006      	b.n	8003b7e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b86:	b480      	push	{r7}
 8003b88:	b087      	sub	sp, #28
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d003      	beq.n	8003baa <HAL_CAN_GetRxMessage+0x24>
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f040 8103 	bne.w	8003db0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10e      	bne.n	8003bce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0f7      	b.n	8003dbe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0e8      	b.n	8003dbe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0204 	and.w	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	331b      	adds	r3, #27
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	4413      	add	r3, r2
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0d5b      	lsrs	r3, r3, #21
 8003c1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	331b      	adds	r3, #27
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4413      	add	r3, r2
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	331b      	adds	r3, #27
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4413      	add	r3, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0202 	and.w	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	331b      	adds	r3, #27
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	e00b      	b.n	8003c8a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	331b      	adds	r3, #27
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	331b      	adds	r3, #27
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	331b      	adds	r3, #27
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0a1a      	lsrs	r2, r3, #8
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0c1a      	lsrs	r2, r3, #16
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0e1a      	lsrs	r2, r3, #24
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	3304      	adds	r3, #4
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0a1a      	lsrs	r2, r3, #8
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	3305      	adds	r3, #5
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0c1a      	lsrs	r2, r3, #16
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3306      	adds	r3, #6
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	0e1a      	lsrs	r2, r3, #24
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3307      	adds	r3, #7
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0220 	orr.w	r2, r2, #32
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e007      	b.n	8003dac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0220 	orr.w	r2, r2, #32
 8003daa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e006      	b.n	8003dbe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d002      	beq.n	8003de8 <HAL_CAN_ActivateNotification+0x1e>
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d109      	bne.n	8003dfc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6959      	ldr	r1, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e006      	b.n	8003e0a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08a      	sub	sp, #40	@ 0x28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d07c      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d023      	beq.n	8003eae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f983 	bl	8004184 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e7e:	e016      	b.n	8003eae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e92:	e00c      	b.n	8003eae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea6:	e002      	b.n	8003eae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f989 	bl	80041c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d024      	beq.n	8003f02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ec0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f963 	bl	8004198 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ed2:	e016      	b.n	8003f02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee6:	e00c      	b.n	8003f02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efa:	e002      	b.n	8003f02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f969 	bl	80041d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d024      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f943 	bl	80041ac <HAL_CAN_TxMailbox2CompleteCallback>
 8003f26:	e016      	b.n	8003f56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3a:	e00c      	b.n	8003f56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	e002      	b.n	8003f56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f949 	bl	80041e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2210      	movs	r2, #16
 8003f78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2208      	movs	r2, #8
 8003f94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f930 	bl	80041fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fd f849 	bl	800104c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00c      	beq.n	8003fde <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2210      	movs	r2, #16
 8003fdc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f912 	bl	8004224 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8f9 	bl	8004210 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2210      	movs	r2, #16
 8004038:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8fc 	bl	8004238 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2208      	movs	r2, #8
 800405a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8f5 	bl	800424c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d07b      	beq.n	8004164 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d072      	beq.n	800415c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	f043 0304 	orr.w	r3, r3, #4
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d043      	beq.n	800415c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03e      	beq.n	800415c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040e4:	2b60      	cmp	r3, #96	@ 0x60
 80040e6:	d02b      	beq.n	8004140 <HAL_CAN_IRQHandler+0x32a>
 80040e8:	2b60      	cmp	r3, #96	@ 0x60
 80040ea:	d82e      	bhi.n	800414a <HAL_CAN_IRQHandler+0x334>
 80040ec:	2b50      	cmp	r3, #80	@ 0x50
 80040ee:	d022      	beq.n	8004136 <HAL_CAN_IRQHandler+0x320>
 80040f0:	2b50      	cmp	r3, #80	@ 0x50
 80040f2:	d82a      	bhi.n	800414a <HAL_CAN_IRQHandler+0x334>
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d019      	beq.n	800412c <HAL_CAN_IRQHandler+0x316>
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d826      	bhi.n	800414a <HAL_CAN_IRQHandler+0x334>
 80040fc:	2b30      	cmp	r3, #48	@ 0x30
 80040fe:	d010      	beq.n	8004122 <HAL_CAN_IRQHandler+0x30c>
 8004100:	2b30      	cmp	r3, #48	@ 0x30
 8004102:	d822      	bhi.n	800414a <HAL_CAN_IRQHandler+0x334>
 8004104:	2b10      	cmp	r3, #16
 8004106:	d002      	beq.n	800410e <HAL_CAN_IRQHandler+0x2f8>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d005      	beq.n	8004118 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800410c:	e01d      	b.n	800414a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004116:	e019      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	f043 0310 	orr.w	r3, r3, #16
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004120:	e014      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800412a:	e00f      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004134:	e00a      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800413e:	e005      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004148:	e000      	b.n	800414c <HAL_CAN_IRQHandler+0x336>
            break;
 800414a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800415a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f872 	bl	8004260 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800417c:	bf00      	nop
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800429c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c0:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <__NVIC_GetPriorityGrouping+0x18>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0307 	and.w	r3, r3, #7
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db0b      	blt.n	8004302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	4907      	ldr	r1, [pc, #28]	@ (8004310 <__NVIC_EnableIRQ+0x38>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2001      	movs	r0, #1
 80042fa:	fa00 f202 	lsl.w	r2, r0, r2
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100

08004314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	@ (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	@ (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	@ 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf28      	it	cs
 8004386:	2304      	movcs	r3, #4
 8004388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3304      	adds	r3, #4
 800438e:	2b06      	cmp	r3, #6
 8004390:	d902      	bls.n	8004398 <NVIC_EncodePriority+0x30>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b03      	subs	r3, #3
 8004396:	e000      	b.n	800439a <NVIC_EncodePriority+0x32>
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	4313      	orrs	r3, r2
         );
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	@ 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e0:	d301      	bcc.n	80043e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00f      	b.n	8004406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004410 <SysTick_Config+0x40>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ee:	210f      	movs	r1, #15
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f7ff ff8e 	bl	8004314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <SysTick_Config+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <SysTick_Config+0x40>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff29 	bl	8004274 <__NVIC_SetPriorityGrouping>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800443c:	f7ff ff3e 	bl	80042bc <__NVIC_GetPriorityGrouping>
 8004440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff ff8e 	bl	8004368 <NVIC_EncodePriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff5d 	bl	8004314 <__NVIC_SetPriority>
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff31 	bl	80042d8 <__NVIC_EnableIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffa2 	bl	80043d0 <SysTick_Config>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a6:	e148      	b.n	800473a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 813a 	beq.w	8004734 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d005      	beq.n	80044d8 <HAL_GPIO_Init+0x40>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d130      	bne.n	800453a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800450e:	2201      	movs	r2, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0201 	and.w	r2, r3, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b03      	cmp	r3, #3
 8004544:	d017      	beq.n	8004576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d123      	bne.n	80045ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	08da      	lsrs	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3208      	adds	r2, #8
 800458a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	220f      	movs	r2, #15
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	6939      	ldr	r1, [r7, #16]
 80045c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0203 	and.w	r2, r3, #3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8094 	beq.w	8004734 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460c:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <HAL_GPIO_Init+0x2c0>)
 800460e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004610:	4a51      	ldr	r2, [pc, #324]	@ (8004758 <HAL_GPIO_Init+0x2c0>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6613      	str	r3, [r2, #96]	@ 0x60
 8004618:	4b4f      	ldr	r3, [pc, #316]	@ (8004758 <HAL_GPIO_Init+0x2c0>)
 800461a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004624:	4a4d      	ldr	r2, [pc, #308]	@ (800475c <HAL_GPIO_Init+0x2c4>)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	3302      	adds	r3, #2
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	220f      	movs	r2, #15
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800464e:	d00d      	beq.n	800466c <HAL_GPIO_Init+0x1d4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a43      	ldr	r2, [pc, #268]	@ (8004760 <HAL_GPIO_Init+0x2c8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <HAL_GPIO_Init+0x1d0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a42      	ldr	r2, [pc, #264]	@ (8004764 <HAL_GPIO_Init+0x2cc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <HAL_GPIO_Init+0x1cc>
 8004660:	2302      	movs	r3, #2
 8004662:	e004      	b.n	800466e <HAL_GPIO_Init+0x1d6>
 8004664:	2307      	movs	r3, #7
 8004666:	e002      	b.n	800466e <HAL_GPIO_Init+0x1d6>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_GPIO_Init+0x1d6>
 800466c:	2300      	movs	r3, #0
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	f002 0203 	and.w	r2, r2, #3
 8004674:	0092      	lsls	r2, r2, #2
 8004676:	4093      	lsls	r3, r2
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800467e:	4937      	ldr	r1, [pc, #220]	@ (800475c <HAL_GPIO_Init+0x2c4>)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800468c:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43db      	mvns	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43db      	mvns	r3, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046da:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046e0:	4b21      	ldr	r3, [pc, #132]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004704:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800470a:	4b17      	ldr	r3, [pc, #92]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800472e:	4a0e      	ldr	r2, [pc, #56]	@ (8004768 <HAL_GPIO_Init+0x2d0>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3301      	adds	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f aeaf 	bne.w	80044a8 <HAL_GPIO_Init+0x10>
  }
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40021000 	.word	0x40021000
 800475c:	40010000 	.word	0x40010000
 8004760:	48000400 	.word	0x48000400
 8004764:	48000800 	.word	0x48000800
 8004768:	40010400 	.word	0x40010400

0800476c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e001      	b.n	800478e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
 80047a8:	4613      	mov	r3, r2
 80047aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b8:	e002      	b.n	80047c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000

080047ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <HAL_PWREx_GetVoltageRange+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40007000 	.word	0x40007000

08004808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004816:	d130      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004818:	4b23      	ldr	r3, [pc, #140]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d038      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800482e:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2232      	movs	r2, #50	@ 0x32
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0c9b      	lsrs	r3, r3, #18
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800484c:	e002      	b.n	8004854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b01      	subs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004854:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004860:	d102      	bne.n	8004868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f2      	bne.n	800484e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004868:	4b0f      	ldr	r3, [pc, #60]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004874:	d110      	bne.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00f      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800487a:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d007      	beq.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004888:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004890:	4a05      	ldr	r2, [pc, #20]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40007000 	.word	0x40007000
 80048ac:	20000004 	.word	0x20000004
 80048b0:	431bde83 	.word	0x431bde83

080048b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f000 bc02 	b.w	80050cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c8:	4b96      	ldr	r3, [pc, #600]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d2:	4b94      	ldr	r3, [pc, #592]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80e4 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_RCC_OscConfig+0x4c>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	f040 808b 	bne.w	8004a0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	f040 8087 	bne.w	8004a0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004900:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_OscConfig+0x64>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e3d9      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	4b81      	ldr	r3, [pc, #516]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_RCC_OscConfig+0x7e>
 8004928:	4b7e      	ldr	r3, [pc, #504]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004930:	e005      	b.n	800493e <HAL_RCC_OscConfig+0x8a>
 8004932:	4b7c      	ldr	r3, [pc, #496]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800493e:	4293      	cmp	r3, r2
 8004940:	d223      	bcs.n	800498a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fd8c 	bl	8005464 <RCC_SetFlashLatencyFromMSIRange>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e3ba      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004956:	4b73      	ldr	r3, [pc, #460]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a72      	ldr	r2, [pc, #456]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b70      	ldr	r3, [pc, #448]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	496d      	ldr	r1, [pc, #436]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004974:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4968      	ldr	r1, [pc, #416]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	e025      	b.n	80049d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498a:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4960      	ldr	r1, [pc, #384]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	495b      	ldr	r1, [pc, #364]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fd4c 	bl	8005464 <RCC_SetFlashLatencyFromMSIRange>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e37a      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d6:	f000 fc81 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	4950      	ldr	r1, [pc, #320]	@ (8004b28 <HAL_RCC_OscConfig+0x274>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	4a4e      	ldr	r2, [pc, #312]	@ (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd fae8 	bl	8001fd0 <HAL_InitTick>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d052      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	e35e      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d032      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a16:	4b43      	ldr	r3, [pc, #268]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a42      	ldr	r2, [pc, #264]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fb25 	bl	8002070 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fb21 	bl	8002070 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e347      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a3c:	4b39      	ldr	r3, [pc, #228]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a48:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a35      	ldr	r2, [pc, #212]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	f043 0308 	orr.w	r3, r3, #8
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4930      	ldr	r1, [pc, #192]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	492b      	ldr	r1, [pc, #172]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
 8004a7a:	e01a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a7c:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a88:	f7fd faf2 	bl	8002070 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a90:	f7fd faee 	bl	8002070 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e314      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1dc>
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d073      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x21c>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d063      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d15f      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e2f1      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x24c>
 8004af2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a0b      	ldr	r2, [pc, #44]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e025      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b08:	d114      	bne.n	8004b34 <HAL_RCC_OscConfig+0x280>
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e013      	b.n	8004b4c <HAL_RCC_OscConfig+0x298>
 8004b24:	40021000 	.word	0x40021000
 8004b28:	0800bf80 	.word	0x0800bf80
 8004b2c:	20000004 	.word	0x20000004
 8004b30:	20000008 	.word	0x20000008
 8004b34:	4ba0      	ldr	r3, [pc, #640]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a9f      	ldr	r2, [pc, #636]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b9d      	ldr	r3, [pc, #628]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a9c      	ldr	r2, [pc, #624]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fa8c 	bl	8002070 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fa88 	bl	8002070 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e2ae      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6e:	4b92      	ldr	r3, [pc, #584]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x2a8>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fa78 	bl	8002070 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fa74 	bl	8002070 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e29a      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b96:	4b88      	ldr	r3, [pc, #544]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2d0>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d060      	beq.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x310>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d116      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x328>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e277      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b76      	ldr	r3, [pc, #472]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	4973      	ldr	r1, [pc, #460]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf0:	e040      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d023      	beq.n	8004c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fa33 	bl	8002070 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fa2f 	bl	8002070 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e255      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	4b65      	ldr	r3, [pc, #404]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4b62      	ldr	r3, [pc, #392]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	495f      	ldr	r1, [pc, #380]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	e018      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c42:	4b5d      	ldr	r3, [pc, #372]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5c      	ldr	r2, [pc, #368]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd fa0f 	bl	8002070 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fd fa0b 	bl	8002070 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e231      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c68:	4b53      	ldr	r3, [pc, #332]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c88:	4b4b      	ldr	r3, [pc, #300]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fd f9ea 	bl	8002070 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7fd f9e6 	bl	8002070 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e20c      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb2:	4b41      	ldr	r3, [pc, #260]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ef      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
 8004cc0:	e01b      	b.n	8004cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fd f9cd 	bl	8002070 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fd f9c9 	bl	8002070 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1ef      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cec:	4b32      	ldr	r3, [pc, #200]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ef      	bne.n	8004cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a6 	beq.w	8004e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	4b27      	ldr	r3, [pc, #156]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	4a26      	ldr	r2, [pc, #152]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d24:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d30:	2301      	movs	r3, #1
 8004d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	4b21      	ldr	r3, [pc, #132]	@ (8004dbc <HAL_RCC_OscConfig+0x508>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d118      	bne.n	8004d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d40:	4b1e      	ldr	r3, [pc, #120]	@ (8004dbc <HAL_RCC_OscConfig+0x508>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <HAL_RCC_OscConfig+0x508>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4c:	f7fd f990 	bl	8002070 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d54:	f7fd f98c 	bl	8002070 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1b2      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <HAL_RCC_OscConfig+0x508>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d108      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4d8>
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d8a:	e029      	b.n	8004de0 <HAL_RCC_OscConfig+0x52c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d115      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x50c>
 8004d94:	4b08      	ldr	r3, [pc, #32]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	4a03      	ldr	r2, [pc, #12]	@ (8004db8 <HAL_RCC_OscConfig+0x504>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x52c>
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	4a99      	ldr	r2, [pc, #612]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd0:	4b96      	ldr	r3, [pc, #600]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd6:	4a95      	ldr	r2, [pc, #596]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd f942 	bl	8002070 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd f93e 	bl	8002070 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e162      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	4b89      	ldr	r3, [pc, #548]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ed      	beq.n	8004df0 <HAL_RCC_OscConfig+0x53c>
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fd f92b 	bl	8002070 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd f927 	bl	8002070 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e14b      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ed      	bne.n	8004e1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b78      	ldr	r3, [pc, #480]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	4a77      	ldr	r2, [pc, #476]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03c      	beq.n	8004eda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e68:	4b70      	ldr	r3, [pc, #448]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd f8fa 	bl	8002070 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e80:	f7fd f8f6 	bl	8002070 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e11c      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e92:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCC_OscConfig+0x5cc>
 8004ea0:	e01b      	b.n	8004eda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	4b62      	ldr	r3, [pc, #392]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ea8:	4a60      	ldr	r2, [pc, #384]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f8dd 	bl	8002070 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eba:	f7fd f8d9 	bl	8002070 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0ff      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ecc:	4b57      	ldr	r3, [pc, #348]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ef      	bne.n	8004eba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80f3 	beq.w	80050ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	f040 80c9 	bne.w	8005080 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eee:	4b4f      	ldr	r3, [pc, #316]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0203 	and.w	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d12c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d123      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d11b      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d113      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	3b01      	subs	r3, #1
 8004f42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d109      	bne.n	8004f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	3b01      	subs	r3, #1
 8004f56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d06b      	beq.n	8005034 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d062      	beq.n	8005028 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f62:	4b32      	ldr	r3, [pc, #200]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0ac      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f72:	4b2e      	ldr	r3, [pc, #184]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2d      	ldr	r2, [pc, #180]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f7e:	f7fd f877 	bl	8002070 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fd f873 	bl	8002070 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e099      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f98:	4b24      	ldr	r3, [pc, #144]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4b21      	ldr	r3, [pc, #132]	@ (8005030 <HAL_RCC_OscConfig+0x77c>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	4311      	orrs	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fbe:	0212      	lsls	r2, r2, #8
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fc6:	0852      	lsrs	r2, r2, #1
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	0552      	lsls	r2, r2, #21
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fd2:	0852      	lsrs	r2, r2, #1
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0652      	lsls	r2, r2, #25
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fde:	06d2      	lsls	r2, r2, #27
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	4912      	ldr	r1, [pc, #72]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0f      	ldr	r2, [pc, #60]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005000:	f7fd f836 	bl	8002070 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fd f832 	bl	8002070 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e058      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	4b04      	ldr	r3, [pc, #16]	@ (800502c <HAL_RCC_OscConfig+0x778>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005026:	e050      	b.n	80050ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e04f      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
 800502c:	40021000 	.word	0x40021000
 8005030:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005034:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d144      	bne.n	80050ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005040:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800504c:	4b21      	ldr	r3, [pc, #132]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a20      	ldr	r2, [pc, #128]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005056:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005058:	f7fd f80a 	bl	8002070 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fd f806 	bl	8002070 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e02c      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005072:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x7ac>
 800507e:	e024      	b.n	80050ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d01f      	beq.n	80050c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 800508c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fc ffed 	bl	8002070 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fc ffe9 	bl	8002070 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e00f      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4905      	ldr	r1, [pc, #20]	@ (80050d4 <HAL_RCC_OscConfig+0x820>)
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_RCC_OscConfig+0x824>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60cb      	str	r3, [r1, #12]
 80050c4:	e001      	b.n	80050ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	feeefffc 	.word	0xfeeefffc

080050dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0e7      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d910      	bls.n	8005120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b72      	ldr	r3, [pc, #456]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	4970      	ldr	r1, [pc, #448]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0cf      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b66      	ldr	r3, [pc, #408]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005138:	429a      	cmp	r2, r3
 800513a:	d908      	bls.n	800514e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b63      	ldr	r3, [pc, #396]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4960      	ldr	r1, [pc, #384]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04c      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005162:	4b5a      	ldr	r3, [pc, #360]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d121      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e0a6      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d115      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e09a      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005192:	4b4e      	ldr	r3, [pc, #312]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e08e      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a2:	4b4a      	ldr	r3, [pc, #296]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e086      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b2:	4b46      	ldr	r3, [pc, #280]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4943      	ldr	r1, [pc, #268]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c4:	f7fc ff54 	bl	8002070 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fc ff50 	bl	8002070 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e06e      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	4b3a      	ldr	r3, [pc, #232]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 020c 	and.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1eb      	bne.n	80051cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d010      	beq.n	8005222 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800520c:	429a      	cmp	r2, r3
 800520e:	d208      	bcs.n	8005222 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	492b      	ldr	r1, [pc, #172]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005222:	4b29      	ldr	r3, [pc, #164]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d210      	bcs.n	8005252 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005230:	4b25      	ldr	r3, [pc, #148]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 0207 	bic.w	r2, r3, #7
 8005238:	4923      	ldr	r1, [pc, #140]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005240:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d001      	beq.n	8005252 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e036      	b.n	80052c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800525e:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4918      	ldr	r1, [pc, #96]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527c:	4b13      	ldr	r3, [pc, #76]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4910      	ldr	r1, [pc, #64]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005290:	f000 f824 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	490b      	ldr	r1, [pc, #44]	@ (80052d0 <HAL_RCC_ClockConfig+0x1f4>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052b0:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <HAL_RCC_ClockConfig+0x1fc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fc fe8b 	bl	8001fd0 <HAL_InitTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80052be:	7afb      	ldrb	r3, [r7, #11]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40021000 	.word	0x40021000
 80052d0:	0800bf80 	.word	0x0800bf80
 80052d4:	20000004 	.word	0x20000004
 80052d8:	20000008 	.word	0x20000008

080052dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	@ 0x24
 80052e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b3e      	ldr	r3, [pc, #248]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f4:	4b3b      	ldr	r3, [pc, #236]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x34>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b0c      	cmp	r3, #12
 8005308:	d121      	bne.n	800534e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d11e      	bne.n	800534e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005310:	4b34      	ldr	r3, [pc, #208]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d107      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800531c:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e005      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800532c:	4b2d      	ldr	r3, [pc, #180]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005338:	4a2b      	ldr	r2, [pc, #172]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005340:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10d      	bne.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d102      	bne.n	800535a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e004      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d101      	bne.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005360:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005362:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d134      	bne.n	80053d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0xa6>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d003      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0xac>
 8005380:	e005      	b.n	800538e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005384:	617b      	str	r3, [r7, #20]
      break;
 8005386:	e005      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005388:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800538a:	617b      	str	r3, [r7, #20]
      break;
 800538c:	e002      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	617b      	str	r3, [r7, #20]
      break;
 8005392:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	3301      	adds	r3, #1
 80053a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053a2:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	fb03 f202 	mul.w	r2, r3, r2
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ba:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	0e5b      	lsrs	r3, r3, #25
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	3301      	adds	r3, #1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053d4:	69bb      	ldr	r3, [r7, #24]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3724      	adds	r7, #36	@ 0x24
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	0800bf98 	.word	0x0800bf98
 80053ec:	00f42400 	.word	0x00f42400
 80053f0:	007a1200 	.word	0x007a1200

080053f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f8:	4b03      	ldr	r3, [pc, #12]	@ (8005408 <HAL_RCC_GetHCLKFreq+0x14>)
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000004 	.word	0x20000004

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005410:	f7ff fff0 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4904      	ldr	r1, [pc, #16]	@ (8005434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40021000 	.word	0x40021000
 8005434:	0800bf90 	.word	0x0800bf90

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800543c:	f7ff ffda 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0adb      	lsrs	r3, r3, #11
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	0800bf90 	.word	0x0800bf90

08005464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005470:	4b2a      	ldr	r3, [pc, #168]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800547c:	f7ff f9b6 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005480:	6178      	str	r0, [r7, #20]
 8005482:	e014      	b.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	4b25      	ldr	r3, [pc, #148]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005488:	4a24      	ldr	r2, [pc, #144]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005490:	4b22      	ldr	r3, [pc, #136]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800549c:	f7ff f9a6 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 80054a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054a2:	4b1e      	ldr	r3, [pc, #120]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	4a1d      	ldr	r2, [pc, #116]	@ (800551c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b4:	d10b      	bne.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d919      	bls.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2ba0      	cmp	r3, #160	@ 0xa0
 80054c0:	d902      	bls.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054c2:	2302      	movs	r3, #2
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e013      	b.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054c8:	2301      	movs	r3, #1
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e010      	b.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d902      	bls.n	80054da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054d4:	2303      	movs	r3, #3
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e00a      	b.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b80      	cmp	r3, #128	@ 0x80
 80054de:	d102      	bne.n	80054e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054e0:	2302      	movs	r3, #2
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e004      	b.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b70      	cmp	r3, #112	@ 0x70
 80054ea:	d101      	bne.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054ec:	2301      	movs	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 0207 	bic.w	r2, r3, #7
 80054f8:	4909      	ldr	r1, [pc, #36]	@ (8005520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d001      	beq.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	40022000 	.word	0x40022000

08005524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800552c:	2300      	movs	r3, #0
 800552e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005530:	2300      	movs	r3, #0
 8005532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553c:	2b00      	cmp	r3, #0
 800553e:	d031      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005548:	d01a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800554a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800554e:	d814      	bhi.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005554:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005558:	d10f      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800555a:	4b5d      	ldr	r3, [pc, #372]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4a5c      	ldr	r2, [pc, #368]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005564:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005566:	e00c      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f9de 	bl	8005930 <RCCEx_PLLSAI1_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	74fb      	strb	r3, [r7, #19]
      break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005588:	4b51      	ldr	r3, [pc, #324]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	494e      	ldr	r1, [pc, #312]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800559e:	e001      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 809e 	beq.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055b6:	4b46      	ldr	r3, [pc, #280]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055cc:	4b40      	ldr	r3, [pc, #256]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	4a3f      	ldr	r2, [pc, #252]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d8:	4b3d      	ldr	r3, [pc, #244]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e4:	2301      	movs	r3, #1
 80055e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e8:	4b3a      	ldr	r3, [pc, #232]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a39      	ldr	r2, [pc, #228]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f4:	f7fc fd3c 	bl	8002070 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055fa:	e009      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fc:	f7fc fd38 	bl	8002070 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d902      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	74fb      	strb	r3, [r7, #19]
        break;
 800560e:	e005      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005610:	4b30      	ldr	r3, [pc, #192]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d15a      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005622:	4b2b      	ldr	r3, [pc, #172]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	429a      	cmp	r2, r3
 800563c:	d019      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800563e:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005648:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800564a:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005650:	4a1f      	ldr	r2, [pc, #124]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800565a:	4b1d      	ldr	r3, [pc, #116]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005660:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800566a:	4a19      	ldr	r2, [pc, #100]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d016      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fc fcf8 	bl	8002070 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005682:	e00b      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005684:	f7fc fcf4 	bl	8002070 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d902      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	74fb      	strb	r3, [r7, #19]
            break;
 800569a:	e006      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569c:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ec      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b0:	4b07      	ldr	r3, [pc, #28]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056be:	4904      	ldr	r1, [pc, #16]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056c6:	e009      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056dc:	7c7b      	ldrb	r3, [r7, #17]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e2:	4b8a      	ldr	r3, [pc, #552]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e6:	4a89      	ldr	r2, [pc, #548]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056fa:	4b84      	ldr	r3, [pc, #528]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f023 0203 	bic.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4980      	ldr	r1, [pc, #512]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800571c:	4b7b      	ldr	r3, [pc, #492]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f023 020c 	bic.w	r2, r3, #12
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	4978      	ldr	r1, [pc, #480]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800573e:	4b73      	ldr	r3, [pc, #460]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574c:	496f      	ldr	r1, [pc, #444]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005760:	4b6a      	ldr	r3, [pc, #424]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576e:	4967      	ldr	r1, [pc, #412]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005782:	4b62      	ldr	r3, [pc, #392]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	495e      	ldr	r1, [pc, #376]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a4:	4b59      	ldr	r3, [pc, #356]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	4956      	ldr	r1, [pc, #344]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057c6:	4b51      	ldr	r3, [pc, #324]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	494d      	ldr	r1, [pc, #308]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d028      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e8:	4b48      	ldr	r3, [pc, #288]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	4945      	ldr	r1, [pc, #276]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005806:	d106      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005808:	4b40      	ldr	r3, [pc, #256]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4a3f      	ldr	r2, [pc, #252]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005812:	60d3      	str	r3, [r2, #12]
 8005814:	e011      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800581e:	d10c      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	2101      	movs	r1, #1
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f882 	bl	8005930 <RCCEx_PLLSAI1_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005836:	7cfb      	ldrb	r3, [r7, #19]
 8005838:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d028      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005846:	4b31      	ldr	r3, [pc, #196]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	492d      	ldr	r1, [pc, #180]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005864:	d106      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005866:	4b29      	ldr	r3, [pc, #164]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4a28      	ldr	r2, [pc, #160]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800586c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005870:	60d3      	str	r3, [r2, #12]
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800587c:	d10c      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f853 	bl	8005930 <RCCEx_PLLSAI1_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01c      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a4:	4b19      	ldr	r3, [pc, #100]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b2:	4916      	ldr	r1, [pc, #88]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c2:	d10c      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	2102      	movs	r1, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f830 	bl	8005930 <RCCEx_PLLSAI1_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80058da:	7cfb      	ldrb	r3, [r7, #19]
 80058dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058ea:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f8:	4904      	ldr	r1, [pc, #16]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005900:	7cbb      	ldrb	r3, [r7, #18]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a04      	ldr	r2, [pc, #16]	@ (800592c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000

08005930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593e:	4b74      	ldr	r3, [pc, #464]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800594a:	4b71      	ldr	r3, [pc, #452]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d10d      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
       ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005962:	4b6b      	ldr	r3, [pc, #428]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
       ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d047      	beq.n	8005a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	e044      	b.n	8005a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d018      	beq.n	80059b6 <RCCEx_PLLSAI1_Config+0x86>
 8005984:	2b03      	cmp	r3, #3
 8005986:	d825      	bhi.n	80059d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005988:	2b01      	cmp	r3, #1
 800598a:	d002      	beq.n	8005992 <RCCEx_PLLSAI1_Config+0x62>
 800598c:	2b02      	cmp	r3, #2
 800598e:	d009      	beq.n	80059a4 <RCCEx_PLLSAI1_Config+0x74>
 8005990:	e020      	b.n	80059d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005992:	4b5f      	ldr	r3, [pc, #380]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d11d      	bne.n	80059da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a2:	e01a      	b.n	80059da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d116      	bne.n	80059de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b4:	e013      	b.n	80059de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b6:	4b56      	ldr	r3, [pc, #344]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c2:	4b53      	ldr	r3, [pc, #332]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d2:	e006      	b.n	80059e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e004      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ea:	4b49      	ldr	r3, [pc, #292]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	430b      	orrs	r3, r1
 8005a00:	4943      	ldr	r1, [pc, #268]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d17c      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a0c:	4b40      	ldr	r3, [pc, #256]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a18:	f7fc fb2a 	bl	8002070 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a1e:	e009      	b.n	8005a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a20:	f7fc fb26 	bl	8002070 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d902      	bls.n	8005a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	73fb      	strb	r3, [r7, #15]
        break;
 8005a32:	e005      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a34:	4b36      	ldr	r3, [pc, #216]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ef      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d15f      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d110      	bne.n	8005a6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a4c:	4b30      	ldr	r3, [pc, #192]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005a54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6892      	ldr	r2, [r2, #8]
 8005a5c:	0211      	lsls	r1, r2, #8
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68d2      	ldr	r2, [r2, #12]
 8005a62:	06d2      	lsls	r2, r2, #27
 8005a64:	430a      	orrs	r2, r1
 8005a66:	492a      	ldr	r1, [pc, #168]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
 8005a6c:	e027      	b.n	8005abe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d112      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a74:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6892      	ldr	r2, [r2, #8]
 8005a84:	0211      	lsls	r1, r2, #8
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6912      	ldr	r2, [r2, #16]
 8005a8a:	0852      	lsrs	r2, r2, #1
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0552      	lsls	r2, r2, #21
 8005a90:	430a      	orrs	r2, r1
 8005a92:	491f      	ldr	r1, [pc, #124]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
 8005a98:	e011      	b.n	8005abe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005aa2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6892      	ldr	r2, [r2, #8]
 8005aaa:	0211      	lsls	r1, r2, #8
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6952      	ldr	r2, [r2, #20]
 8005ab0:	0852      	lsrs	r2, r2, #1
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	0652      	lsls	r2, r2, #25
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	4915      	ldr	r1, [pc, #84]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005abe:	4b14      	ldr	r3, [pc, #80]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ac8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fc fad1 	bl	8002070 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ad0:	e009      	b.n	8005ae6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad2:	f7fc facd 	bl	8002070 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d902      	bls.n	8005ae6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae4:	e005      	b.n	8005af2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ef      	beq.n	8005ad2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005af8:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	4903      	ldr	r1, [pc, #12]	@ (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000

08005b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e049      	b.n	8005bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb ffd0 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f000 fcd8 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d001      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e03b      	b.n	8005c54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x4e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d004      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x4e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d115      	bne.n	8005c3e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b06      	cmp	r3, #6
 8005c22:	d015      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x8c>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2a:	d011      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3c:	e008      	b.n	8005c50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e000      	b.n	8005c52 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40014000 	.word	0x40014000
 8005c68:	00010007 	.word	0x00010007

08005c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e049      	b.n	8005d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f841 	bl	8005d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f000 fc2c 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_TIM_PWM_Start+0x24>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e03c      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d109      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x3e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e02f      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d109      	bne.n	8005d88 <HAL_TIM_PWM_Start+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e022      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d109      	bne.n	8005da2 <HAL_TIM_PWM_Start+0x72>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e015      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d109      	bne.n	8005dbc <HAL_TIM_PWM_Start+0x8c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e008      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07e      	b.n	8005ed4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_PWM_Start+0xb6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de4:	e023      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0xc6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df4:	e01b      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_PWM_Start+0xd6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e04:	e013      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	d104      	bne.n	8005e16 <HAL_TIM_PWM_Start+0xe6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e14:	e00b      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_PWM_Start+0xf6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e24:	e003      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2201      	movs	r2, #1
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 feee 	bl	8006c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <HAL_TIM_PWM_Start+0x1ac>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_TIM_PWM_Start+0x12a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a25      	ldr	r2, [pc, #148]	@ (8005ee0 <HAL_TIM_PWM_Start+0x1b0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIM_PWM_Start+0x12a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a23      	ldr	r2, [pc, #140]	@ (8005ee4 <HAL_TIM_PWM_Start+0x1b4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_PWM_Start+0x12e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <HAL_TIM_PWM_Start+0x130>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a18      	ldr	r2, [pc, #96]	@ (8005edc <HAL_TIM_PWM_Start+0x1ac>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIM_PWM_Start+0x162>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e86:	d004      	beq.n	8005e92 <HAL_TIM_PWM_Start+0x162>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <HAL_TIM_PWM_Start+0x1b0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d115      	bne.n	8005ebe <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <HAL_TIM_PWM_Start+0x1b8>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	d015      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x1a0>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eaa:	d011      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebc:	e008      	b.n	8005ed0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e000      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	00010007 	.word	0x00010007

08005eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fac7 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fab9 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 faca 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0204 	mvn.w	r2, #4
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 faa1 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa93 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 faa4 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d020      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0208 	mvn.w	r2, #8
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa7b 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa6d 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa7e 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0210 	mvn.w	r2, #16
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2208      	movs	r2, #8
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa55 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa47 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa58 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0201 	mvn.w	r2, #1
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb f822 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fed7 	bl	8006e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fecf 	bl	8006e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa12 	bl	80064f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00c      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0220 	mvn.w	r2, #32
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fe97 	bl	8006e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006116:	2302      	movs	r3, #2
 8006118:	e0ff      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	f200 80f0 	bhi.w	800630a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006185 	.word	0x08006185
 8006134:	0800630b 	.word	0x0800630b
 8006138:	0800630b 	.word	0x0800630b
 800613c:	0800630b 	.word	0x0800630b
 8006140:	080061c5 	.word	0x080061c5
 8006144:	0800630b 	.word	0x0800630b
 8006148:	0800630b 	.word	0x0800630b
 800614c:	0800630b 	.word	0x0800630b
 8006150:	08006207 	.word	0x08006207
 8006154:	0800630b 	.word	0x0800630b
 8006158:	0800630b 	.word	0x0800630b
 800615c:	0800630b 	.word	0x0800630b
 8006160:	08006247 	.word	0x08006247
 8006164:	0800630b 	.word	0x0800630b
 8006168:	0800630b 	.word	0x0800630b
 800616c:	0800630b 	.word	0x0800630b
 8006170:	08006289 	.word	0x08006289
 8006174:	0800630b 	.word	0x0800630b
 8006178:	0800630b 	.word	0x0800630b
 800617c:	0800630b 	.word	0x0800630b
 8006180:	080062c9 	.word	0x080062c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa2c 	bl	80065e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
      break;
 80061c2:	e0a5      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fa88 	bl	80066e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
      break;
 8006204:	e084      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fae1 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
      break;
 8006244:	e064      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fb39 	bl	80068c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	61da      	str	r2, [r3, #28]
      break;
 8006286:	e043      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fb76 	bl	8006980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062c6:	e023      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fbae 	bl	8006a30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006308:	e002      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
      break;
 800630e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIM_ConfigClockSource+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e0b6      	b.n	80064ae <HAL_TIM_ConfigClockSource+0x18a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800636a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800637c:	d03e      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0xd8>
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006382:	f200 8087 	bhi.w	8006494 <HAL_TIM_ConfigClockSource+0x170>
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638a:	f000 8086 	beq.w	800649a <HAL_TIM_ConfigClockSource+0x176>
 800638e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006392:	d87f      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 8006394:	2b70      	cmp	r3, #112	@ 0x70
 8006396:	d01a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0xaa>
 8006398:	2b70      	cmp	r3, #112	@ 0x70
 800639a:	d87b      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 800639c:	2b60      	cmp	r3, #96	@ 0x60
 800639e:	d050      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x11e>
 80063a0:	2b60      	cmp	r3, #96	@ 0x60
 80063a2:	d877      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 80063a4:	2b50      	cmp	r3, #80	@ 0x50
 80063a6:	d03c      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xfe>
 80063a8:	2b50      	cmp	r3, #80	@ 0x50
 80063aa:	d873      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	d058      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x13e>
 80063b0:	2b40      	cmp	r3, #64	@ 0x40
 80063b2:	d86f      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 80063b4:	2b30      	cmp	r3, #48	@ 0x30
 80063b6:	d064      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x15e>
 80063b8:	2b30      	cmp	r3, #48	@ 0x30
 80063ba:	d86b      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d060      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x15e>
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d867      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05c      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x15e>
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d05a      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x15e>
 80063cc:	e062      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063de:	f000 fbfb 	bl	8006bd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	609a      	str	r2, [r3, #8]
      break;
 80063fa:	e04f      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800640c:	f000 fbe4 	bl	8006bd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800641e:	609a      	str	r2, [r3, #8]
      break;
 8006420:	e03c      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	461a      	mov	r2, r3
 8006430:	f000 fb58 	bl	8006ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2150      	movs	r1, #80	@ 0x50
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fbb1 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006440:	e02c      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	461a      	mov	r2, r3
 8006450:	f000 fb77 	bl	8006b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2160      	movs	r1, #96	@ 0x60
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fba1 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006460:	e01c      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	461a      	mov	r2, r3
 8006470:	f000 fb38 	bl	8006ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2140      	movs	r1, #64	@ 0x40
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fb91 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006480:	e00c      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f000 fb88 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006492:	e003      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      break;
 8006498:	e000      	b.n	800649c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800649a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <TIM_Base_SetConfig+0xd4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_Base_SetConfig+0x20>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006526:	d108      	bne.n	800653a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a27      	ldr	r2, [pc, #156]	@ (80065dc <TIM_Base_SetConfig+0xd4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00b      	beq.n	800655a <TIM_Base_SetConfig+0x52>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006548:	d007      	beq.n	800655a <TIM_Base_SetConfig+0x52>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a24      	ldr	r2, [pc, #144]	@ (80065e0 <TIM_Base_SetConfig+0xd8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_Base_SetConfig+0x52>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a23      	ldr	r2, [pc, #140]	@ (80065e4 <TIM_Base_SetConfig+0xdc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d108      	bne.n	800656c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a12      	ldr	r2, [pc, #72]	@ (80065dc <TIM_Base_SetConfig+0xd4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0xa0>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a11      	ldr	r2, [pc, #68]	@ (80065e0 <TIM_Base_SetConfig+0xd8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0xa0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a10      	ldr	r2, [pc, #64]	@ (80065e4 <TIM_Base_SetConfig+0xdc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d103      	bne.n	80065b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]
  }
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400

080065e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f023 0201 	bic.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 0302 	bic.w	r3, r3, #2
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <TIM_OC1_SetConfig+0xec>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC1_SetConfig+0x70>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a23      	ldr	r2, [pc, #140]	@ (80066d8 <TIM_OC1_SetConfig+0xf0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC1_SetConfig+0x70>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a22      	ldr	r2, [pc, #136]	@ (80066dc <TIM_OC1_SetConfig+0xf4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10c      	bne.n	8006672 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0308 	bic.w	r3, r3, #8
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 0304 	bic.w	r3, r3, #4
 8006670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a17      	ldr	r2, [pc, #92]	@ (80066d4 <TIM_OC1_SetConfig+0xec>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC1_SetConfig+0xa2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <TIM_OC1_SetConfig+0xf0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <TIM_OC1_SetConfig+0xf4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400

080066e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0210 	bic.w	r2, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a22      	ldr	r2, [pc, #136]	@ (80067c8 <TIM_OC2_SetConfig+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d10d      	bne.n	8006760 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800675e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a19      	ldr	r2, [pc, #100]	@ (80067c8 <TIM_OC2_SetConfig+0xe8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_OC2_SetConfig+0x98>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <TIM_OC2_SetConfig+0xec>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x98>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <TIM_OC2_SetConfig+0xf0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d113      	bne.n	80067a0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a21      	ldr	r2, [pc, #132]	@ (80068b8 <TIM_OC3_SetConfig+0xe4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10d      	bne.n	8006852 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a18      	ldr	r2, [pc, #96]	@ (80068b8 <TIM_OC3_SetConfig+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_OC3_SetConfig+0x96>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <TIM_OC3_SetConfig+0xe8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0x96>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a16      	ldr	r2, [pc, #88]	@ (80068c0 <TIM_OC3_SetConfig+0xec>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d113      	bne.n	8006892 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400

080068c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <TIM_OC4_SetConfig+0xb0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <TIM_OC4_SetConfig+0x74>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <TIM_OC4_SetConfig+0xb4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_OC4_SetConfig+0x74>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a12      	ldr	r2, [pc, #72]	@ (800697c <TIM_OC4_SetConfig+0xb8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d109      	bne.n	800694c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800693e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	019b      	lsls	r3, r3, #6
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400

08006980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <TIM_OC5_SetConfig+0xa4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_OC5_SetConfig+0x6a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a12      	ldr	r2, [pc, #72]	@ (8006a28 <TIM_OC5_SetConfig+0xa8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC5_SetConfig+0x6a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a11      	ldr	r2, [pc, #68]	@ (8006a2c <TIM_OC5_SetConfig+0xac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d109      	bne.n	80069fe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400

08006a30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	051b      	lsls	r3, r3, #20
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a14      	ldr	r2, [pc, #80]	@ (8006ad8 <TIM_OC6_SetConfig+0xa8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_OC6_SetConfig+0x6c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a13      	ldr	r2, [pc, #76]	@ (8006adc <TIM_OC6_SetConfig+0xac>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC6_SetConfig+0x6c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a12      	ldr	r2, [pc, #72]	@ (8006ae0 <TIM_OC6_SetConfig+0xb0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d109      	bne.n	8006ab0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400

08006ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 030a 	bic.w	r3, r3, #10
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f023 0210 	bic.w	r2, r3, #16
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f043 0307 	orr.w	r3, r3, #7
 8006bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	021a      	lsls	r2, r3, #8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e04f      	b.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a10      	ldr	r2, [pc, #64]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10c      	bne.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40014000 	.word	0x40014000

08006d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e060      	b.n	8006e0e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d115      	bne.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	051b      	lsls	r3, r3, #20
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40012c00 	.word	0x40012c00

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e040      	b.n	8006ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fa fee0 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2224      	movs	r2, #36	@ 0x24
 8006e88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fade 	bl	8007464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8af 	bl	800700c <UART_SetConfig>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e01b      	b.n	8006ef0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb5d 	bl	80075a8 <UART_CheckIdleState>
 8006eee:	4603      	mov	r3, r0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d177      	bne.n	8007000 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_UART_Transmit+0x24>
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e070      	b.n	8007002 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2221      	movs	r2, #33	@ 0x21
 8006f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f2e:	f7fb f89f 	bl	8002070 <HAL_GetTick>
 8006f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f4c:	d108      	bne.n	8006f60 <HAL_UART_Transmit+0x68>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e003      	b.n	8006f68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f68:	e02f      	b.n	8006fca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	2180      	movs	r1, #128	@ 0x80
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fbbf 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e03b      	b.n	8007002 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	881a      	ldrh	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9c:	b292      	uxth	r2, r2
 8006f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e007      	b.n	8006fb8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1c9      	bne.n	8006f6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2140      	movs	r1, #64	@ 0x40
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fb89 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e005      	b.n	8007002 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007000:	2302      	movs	r3, #2
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800700c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007010:	b08a      	sub	sp, #40	@ 0x28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	431a      	orrs	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	4313      	orrs	r3, r2
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4bb4      	ldr	r3, [pc, #720]	@ (800730c <UART_SetConfig+0x300>)
 800703c:	4013      	ands	r3, r2
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007044:	430b      	orrs	r3, r1
 8007046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4aa9      	ldr	r2, [pc, #676]	@ (8007310 <UART_SetConfig+0x304>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007074:	4313      	orrs	r3, r2
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007088:	430a      	orrs	r2, r1
 800708a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4aa0      	ldr	r2, [pc, #640]	@ (8007314 <UART_SetConfig+0x308>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d126      	bne.n	80070e4 <UART_SetConfig+0xd8>
 8007096:	4ba0      	ldr	r3, [pc, #640]	@ (8007318 <UART_SetConfig+0x30c>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d81b      	bhi.n	80070dc <UART_SetConfig+0xd0>
 80070a4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <UART_SetConfig+0xa0>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e080      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e07c      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e078      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e074      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e070      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a8c      	ldr	r2, [pc, #560]	@ (800731c <UART_SetConfig+0x310>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d138      	bne.n	8007160 <UART_SetConfig+0x154>
 80070ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007318 <UART_SetConfig+0x30c>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f4:	f003 030c 	and.w	r3, r3, #12
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d82d      	bhi.n	8007158 <UART_SetConfig+0x14c>
 80070fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0xf8>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007139 	.word	0x08007139
 8007108:	08007159 	.word	0x08007159
 800710c:	08007159 	.word	0x08007159
 8007110:	08007159 	.word	0x08007159
 8007114:	08007149 	.word	0x08007149
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
 8007124:	08007141 	.word	0x08007141
 8007128:	08007159 	.word	0x08007159
 800712c:	08007159 	.word	0x08007159
 8007130:	08007159 	.word	0x08007159
 8007134:	08007151 	.word	0x08007151
 8007138:	2300      	movs	r3, #0
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713e:	e042      	b.n	80071c6 <UART_SetConfig+0x1ba>
 8007140:	2302      	movs	r3, #2
 8007142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007146:	e03e      	b.n	80071c6 <UART_SetConfig+0x1ba>
 8007148:	2304      	movs	r3, #4
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714e:	e03a      	b.n	80071c6 <UART_SetConfig+0x1ba>
 8007150:	2308      	movs	r3, #8
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007156:	e036      	b.n	80071c6 <UART_SetConfig+0x1ba>
 8007158:	2310      	movs	r3, #16
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715e:	e032      	b.n	80071c6 <UART_SetConfig+0x1ba>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a6a      	ldr	r2, [pc, #424]	@ (8007310 <UART_SetConfig+0x304>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d12a      	bne.n	80071c0 <UART_SetConfig+0x1b4>
 800716a:	4b6b      	ldr	r3, [pc, #428]	@ (8007318 <UART_SetConfig+0x30c>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007178:	d01a      	beq.n	80071b0 <UART_SetConfig+0x1a4>
 800717a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800717e:	d81b      	bhi.n	80071b8 <UART_SetConfig+0x1ac>
 8007180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007184:	d00c      	beq.n	80071a0 <UART_SetConfig+0x194>
 8007186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718a:	d815      	bhi.n	80071b8 <UART_SetConfig+0x1ac>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <UART_SetConfig+0x18c>
 8007190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007194:	d008      	beq.n	80071a8 <UART_SetConfig+0x19c>
 8007196:	e00f      	b.n	80071b8 <UART_SetConfig+0x1ac>
 8007198:	2300      	movs	r3, #0
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719e:	e012      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071a0:	2302      	movs	r3, #2
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a6:	e00e      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ae:	e00a      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b6:	e006      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071be:	e002      	b.n	80071c6 <UART_SetConfig+0x1ba>
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a51      	ldr	r2, [pc, #324]	@ (8007310 <UART_SetConfig+0x304>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d17a      	bne.n	80072c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d824      	bhi.n	8007222 <UART_SetConfig+0x216>
 80071d8:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x1d4>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	08007205 	.word	0x08007205
 80071e4:	08007223 	.word	0x08007223
 80071e8:	0800720d 	.word	0x0800720d
 80071ec:	08007223 	.word	0x08007223
 80071f0:	08007213 	.word	0x08007213
 80071f4:	08007223 	.word	0x08007223
 80071f8:	08007223 	.word	0x08007223
 80071fc:	08007223 	.word	0x08007223
 8007200:	0800721b 	.word	0x0800721b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fe f902 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8007208:	61f8      	str	r0, [r7, #28]
        break;
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800720c:	4b44      	ldr	r3, [pc, #272]	@ (8007320 <UART_SetConfig+0x314>)
 800720e:	61fb      	str	r3, [r7, #28]
        break;
 8007210:	e00d      	b.n	800722e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007212:	f7fe f863 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8007216:	61f8      	str	r0, [r7, #28]
        break;
 8007218:	e009      	b.n	800722e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	61fb      	str	r3, [r7, #28]
        break;
 8007220:	e005      	b.n	800722e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800722c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8107 	beq.w	8007444 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	4413      	add	r3, r2
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	429a      	cmp	r2, r3
 8007244:	d305      	bcc.n	8007252 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	429a      	cmp	r2, r3
 8007250:	d903      	bls.n	800725a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007258:	e0f4      	b.n	8007444 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2200      	movs	r2, #0
 800725e:	461c      	mov	r4, r3
 8007260:	4615      	mov	r5, r2
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	022b      	lsls	r3, r5, #8
 800726c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007270:	0222      	lsls	r2, r4, #8
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	6849      	ldr	r1, [r1, #4]
 8007276:	0849      	lsrs	r1, r1, #1
 8007278:	2000      	movs	r0, #0
 800727a:	4688      	mov	r8, r1
 800727c:	4681      	mov	r9, r0
 800727e:	eb12 0a08 	adds.w	sl, r2, r8
 8007282:	eb43 0b09 	adc.w	fp, r3, r9
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007294:	4650      	mov	r0, sl
 8007296:	4659      	mov	r1, fp
 8007298:	f7f9 fcf6 	bl	8000c88 <__aeabi_uldivmod>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4613      	mov	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072aa:	d308      	bcc.n	80072be <UART_SetConfig+0x2b2>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072b2:	d204      	bcs.n	80072be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	60da      	str	r2, [r3, #12]
 80072bc:	e0c2      	b.n	8007444 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072c4:	e0be      	b.n	8007444 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ce:	d16a      	bne.n	80073a6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80072d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d834      	bhi.n	8007342 <UART_SetConfig+0x336>
 80072d8:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x2d4>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	08007305 	.word	0x08007305
 80072e4:	08007325 	.word	0x08007325
 80072e8:	0800732d 	.word	0x0800732d
 80072ec:	08007343 	.word	0x08007343
 80072f0:	08007333 	.word	0x08007333
 80072f4:	08007343 	.word	0x08007343
 80072f8:	08007343 	.word	0x08007343
 80072fc:	08007343 	.word	0x08007343
 8007300:	0800733b 	.word	0x0800733b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007304:	f7fe f882 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8007308:	61f8      	str	r0, [r7, #28]
        break;
 800730a:	e020      	b.n	800734e <UART_SetConfig+0x342>
 800730c:	efff69f3 	.word	0xefff69f3
 8007310:	40008000 	.word	0x40008000
 8007314:	40013800 	.word	0x40013800
 8007318:	40021000 	.word	0x40021000
 800731c:	40004400 	.word	0x40004400
 8007320:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fe f888 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8007328:	61f8      	str	r0, [r7, #28]
        break;
 800732a:	e010      	b.n	800734e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800732c:	4b4c      	ldr	r3, [pc, #304]	@ (8007460 <UART_SetConfig+0x454>)
 800732e:	61fb      	str	r3, [r7, #28]
        break;
 8007330:	e00d      	b.n	800734e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007332:	f7fd ffd3 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8007336:	61f8      	str	r0, [r7, #28]
        break;
 8007338:	e009      	b.n	800734e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800733e:	61fb      	str	r3, [r7, #28]
        break;
 8007340:	e005      	b.n	800734e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800734c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d077      	beq.n	8007444 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	005a      	lsls	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	441a      	add	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b0f      	cmp	r3, #15
 800736e:	d916      	bls.n	800739e <UART_SetConfig+0x392>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007376:	d212      	bcs.n	800739e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f023 030f 	bic.w	r3, r3, #15
 8007380:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	b29b      	uxth	r3, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	b29a      	uxth	r2, r3
 800738e:	8afb      	ldrh	r3, [r7, #22]
 8007390:	4313      	orrs	r3, r2
 8007392:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	8afa      	ldrh	r2, [r7, #22]
 800739a:	60da      	str	r2, [r3, #12]
 800739c:	e052      	b.n	8007444 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073a4:	e04e      	b.n	8007444 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d827      	bhi.n	80073fe <UART_SetConfig+0x3f2>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <UART_SetConfig+0x3a8>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073e9 	.word	0x080073e9
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073ff 	.word	0x080073ff
 80073cc:	080073ff 	.word	0x080073ff
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	080073f7 	.word	0x080073f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fe f818 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 80073dc:	61f8      	str	r0, [r7, #28]
        break;
 80073de:	e014      	b.n	800740a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e0:	f7fe f82a 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 80073e4:	61f8      	str	r0, [r7, #28]
        break;
 80073e6:	e010      	b.n	800740a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007460 <UART_SetConfig+0x454>)
 80073ea:	61fb      	str	r3, [r7, #28]
        break;
 80073ec:	e00d      	b.n	800740a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ee:	f7fd ff75 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80073f2:	61f8      	str	r0, [r7, #28]
        break;
 80073f4:	e009      	b.n	800740a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073fa:	61fb      	str	r3, [r7, #28]
        break;
 80073fc:	e005      	b.n	800740a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007408:	bf00      	nop
    }

    if (pclk != 0U)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d019      	beq.n	8007444 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	085a      	lsrs	r2, r3, #1
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007422:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b0f      	cmp	r3, #15
 8007428:	d909      	bls.n	800743e <UART_SetConfig+0x432>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007430:	d205      	bcs.n	800743e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60da      	str	r2, [r3, #12]
 800743c:	e002      	b.n	8007444 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007450:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007454:	4618      	mov	r0, r3
 8007456:	3728      	adds	r7, #40	@ 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745e:	bf00      	nop
 8007460:	00f42400 	.word	0x00f42400

08007464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01a      	beq.n	800757a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007562:	d10a      	bne.n	800757a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b098      	sub	sp, #96	@ 0x60
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075b8:	f7fa fd5a 	bl	8002070 <HAL_GetTick>
 80075bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d12e      	bne.n	800762a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d4:	2200      	movs	r2, #0
 80075d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f88c 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d021      	beq.n	800762a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007604:	647b      	str	r3, [r7, #68]	@ 0x44
 8007606:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800760a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e062      	b.n	80076f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b04      	cmp	r3, #4
 8007636:	d149      	bne.n	80076cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007640:	2200      	movs	r2, #0
 8007642:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f856 	bl	80076f8 <UART_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d03c      	beq.n	80076cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	623b      	str	r3, [r7, #32]
   return(result);
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007670:	633b      	str	r3, [r7, #48]	@ 0x30
 8007672:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	60fb      	str	r3, [r7, #12]
   return(result);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a4:	61fa      	str	r2, [r7, #28]
 80076a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	69b9      	ldr	r1, [r7, #24]
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	617b      	str	r3, [r7, #20]
   return(result);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e5      	bne.n	8007684 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e011      	b.n	80076f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3758      	adds	r7, #88	@ 0x58
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007708:	e04f      	b.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d04b      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007712:	f7fa fcad 	bl	8002070 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	429a      	cmp	r2, r3
 8007720:	d302      	bcc.n	8007728 <UART_WaitOnFlagUntilTimeout+0x30>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e04e      	b.n	80077ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d037      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b80      	cmp	r3, #128	@ 0x80
 800773e:	d034      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b40      	cmp	r3, #64	@ 0x40
 8007744:	d031      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b08      	cmp	r3, #8
 8007752:	d110      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2208      	movs	r2, #8
 800775a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f838 	bl	80077d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2208      	movs	r2, #8
 8007766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e029      	b.n	80077ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007784:	d111      	bne.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800778e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f81e 	bl	80077d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e00f      	b.n	80077ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4013      	ands	r3, r2
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bf0c      	ite	eq
 80077ba:	2301      	moveq	r3, #1
 80077bc:	2300      	movne	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d0a0      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b095      	sub	sp, #84	@ 0x54
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e6      	bne.n	80077da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	61fb      	str	r3, [r7, #28]
   return(result);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800782c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007844:	2b01      	cmp	r3, #1
 8007846:	d118      	bne.n	800787a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	60bb      	str	r3, [r7, #8]
   return(result);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f023 0310 	bic.w	r3, r3, #16
 800785c:	647b      	str	r3, [r7, #68]	@ 0x44
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6979      	ldr	r1, [r7, #20]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	613b      	str	r3, [r7, #16]
   return(result);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e6      	bne.n	8007848 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800788e:	bf00      	nop
 8007890:	3754      	adds	r7, #84	@ 0x54
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <__cvt>:
 800789a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789e:	ec57 6b10 	vmov	r6, r7, d0
 80078a2:	2f00      	cmp	r7, #0
 80078a4:	460c      	mov	r4, r1
 80078a6:	4619      	mov	r1, r3
 80078a8:	463b      	mov	r3, r7
 80078aa:	bfbb      	ittet	lt
 80078ac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078b0:	461f      	movlt	r7, r3
 80078b2:	2300      	movge	r3, #0
 80078b4:	232d      	movlt	r3, #45	@ 0x2d
 80078b6:	700b      	strb	r3, [r1, #0]
 80078b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078ba:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80078be:	4691      	mov	r9, r2
 80078c0:	f023 0820 	bic.w	r8, r3, #32
 80078c4:	bfbc      	itt	lt
 80078c6:	4632      	movlt	r2, r6
 80078c8:	4616      	movlt	r6, r2
 80078ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078ce:	d005      	beq.n	80078dc <__cvt+0x42>
 80078d0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80078d4:	d100      	bne.n	80078d8 <__cvt+0x3e>
 80078d6:	3401      	adds	r4, #1
 80078d8:	2102      	movs	r1, #2
 80078da:	e000      	b.n	80078de <__cvt+0x44>
 80078dc:	2103      	movs	r1, #3
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	ab02      	add	r3, sp, #8
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	ec47 6b10 	vmov	d0, r6, r7
 80078ea:	4653      	mov	r3, sl
 80078ec:	4622      	mov	r2, r4
 80078ee:	f001 f86f 	bl	80089d0 <_dtoa_r>
 80078f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078f6:	4605      	mov	r5, r0
 80078f8:	d119      	bne.n	800792e <__cvt+0x94>
 80078fa:	f019 0f01 	tst.w	r9, #1
 80078fe:	d00e      	beq.n	800791e <__cvt+0x84>
 8007900:	eb00 0904 	add.w	r9, r0, r4
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f9 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007910:	b108      	cbz	r0, 8007916 <__cvt+0x7c>
 8007912:	f8cd 900c 	str.w	r9, [sp, #12]
 8007916:	2230      	movs	r2, #48	@ 0x30
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	454b      	cmp	r3, r9
 800791c:	d31e      	bcc.n	800795c <__cvt+0xc2>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007922:	1b5b      	subs	r3, r3, r5
 8007924:	4628      	mov	r0, r5
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	b004      	add	sp, #16
 800792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007932:	eb00 0904 	add.w	r9, r0, r4
 8007936:	d1e5      	bne.n	8007904 <__cvt+0x6a>
 8007938:	7803      	ldrb	r3, [r0, #0]
 800793a:	2b30      	cmp	r3, #48	@ 0x30
 800793c:	d10a      	bne.n	8007954 <__cvt+0xba>
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800794a:	b918      	cbnz	r0, 8007954 <__cvt+0xba>
 800794c:	f1c4 0401 	rsb	r4, r4, #1
 8007950:	f8ca 4000 	str.w	r4, [sl]
 8007954:	f8da 3000 	ldr.w	r3, [sl]
 8007958:	4499      	add	r9, r3
 800795a:	e7d3      	b.n	8007904 <__cvt+0x6a>
 800795c:	1c59      	adds	r1, r3, #1
 800795e:	9103      	str	r1, [sp, #12]
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e7d9      	b.n	8007918 <__cvt+0x7e>

08007964 <__exponent>:
 8007964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007966:	2900      	cmp	r1, #0
 8007968:	bfba      	itte	lt
 800796a:	4249      	neglt	r1, r1
 800796c:	232d      	movlt	r3, #45	@ 0x2d
 800796e:	232b      	movge	r3, #43	@ 0x2b
 8007970:	2909      	cmp	r1, #9
 8007972:	7002      	strb	r2, [r0, #0]
 8007974:	7043      	strb	r3, [r0, #1]
 8007976:	dd29      	ble.n	80079cc <__exponent+0x68>
 8007978:	f10d 0307 	add.w	r3, sp, #7
 800797c:	461d      	mov	r5, r3
 800797e:	270a      	movs	r7, #10
 8007980:	461a      	mov	r2, r3
 8007982:	fbb1 f6f7 	udiv	r6, r1, r7
 8007986:	fb07 1416 	mls	r4, r7, r6, r1
 800798a:	3430      	adds	r4, #48	@ 0x30
 800798c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007990:	460c      	mov	r4, r1
 8007992:	2c63      	cmp	r4, #99	@ 0x63
 8007994:	f103 33ff 	add.w	r3, r3, #4294967295
 8007998:	4631      	mov	r1, r6
 800799a:	dcf1      	bgt.n	8007980 <__exponent+0x1c>
 800799c:	3130      	adds	r1, #48	@ 0x30
 800799e:	1e94      	subs	r4, r2, #2
 80079a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079a4:	1c41      	adds	r1, r0, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	42ab      	cmp	r3, r5
 80079aa:	d30a      	bcc.n	80079c2 <__exponent+0x5e>
 80079ac:	f10d 0309 	add.w	r3, sp, #9
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	42ac      	cmp	r4, r5
 80079b4:	bf88      	it	hi
 80079b6:	2300      	movhi	r3, #0
 80079b8:	3302      	adds	r3, #2
 80079ba:	4403      	add	r3, r0
 80079bc:	1a18      	subs	r0, r3, r0
 80079be:	b003      	add	sp, #12
 80079c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80079c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079ca:	e7ed      	b.n	80079a8 <__exponent+0x44>
 80079cc:	2330      	movs	r3, #48	@ 0x30
 80079ce:	3130      	adds	r1, #48	@ 0x30
 80079d0:	7083      	strb	r3, [r0, #2]
 80079d2:	70c1      	strb	r1, [r0, #3]
 80079d4:	1d03      	adds	r3, r0, #4
 80079d6:	e7f1      	b.n	80079bc <__exponent+0x58>

080079d8 <_printf_float>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	b08d      	sub	sp, #52	@ 0x34
 80079de:	460c      	mov	r4, r1
 80079e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80079e4:	4616      	mov	r6, r2
 80079e6:	461f      	mov	r7, r3
 80079e8:	4605      	mov	r5, r0
 80079ea:	f000 fee9 	bl	80087c0 <_localeconv_r>
 80079ee:	6803      	ldr	r3, [r0, #0]
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f8 fc3c 	bl	8000270 <strlen>
 80079f8:	2300      	movs	r3, #0
 80079fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80079fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007a00:	9005      	str	r0, [sp, #20]
 8007a02:	3307      	adds	r3, #7
 8007a04:	f023 0307 	bic.w	r3, r3, #7
 8007a08:	f103 0208 	add.w	r2, r3, #8
 8007a0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a10:	f8d4 b000 	ldr.w	fp, [r4]
 8007a14:	f8c8 2000 	str.w	r2, [r8]
 8007a18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a20:	9307      	str	r3, [sp, #28]
 8007a22:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ca0 <_printf_float+0x2c8>)
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	f7f9 f87a 	bl	8000b2c <__aeabi_dcmpun>
 8007a38:	bb70      	cbnz	r0, 8007a98 <_printf_float+0xc0>
 8007a3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a3e:	4b98      	ldr	r3, [pc, #608]	@ (8007ca0 <_printf_float+0x2c8>)
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	f7f9 f854 	bl	8000af0 <__aeabi_dcmple>
 8007a48:	bb30      	cbnz	r0, 8007a98 <_printf_float+0xc0>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f9 f843 	bl	8000adc <__aeabi_dcmplt>
 8007a56:	b110      	cbz	r0, 8007a5e <_printf_float+0x86>
 8007a58:	232d      	movs	r3, #45	@ 0x2d
 8007a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5e:	4a91      	ldr	r2, [pc, #580]	@ (8007ca4 <_printf_float+0x2cc>)
 8007a60:	4b91      	ldr	r3, [pc, #580]	@ (8007ca8 <_printf_float+0x2d0>)
 8007a62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a66:	bf8c      	ite	hi
 8007a68:	4690      	movhi	r8, r2
 8007a6a:	4698      	movls	r8, r3
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	f02b 0304 	bic.w	r3, fp, #4
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	9700      	str	r7, [sp, #0]
 8007a7c:	4633      	mov	r3, r6
 8007a7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a80:	4621      	mov	r1, r4
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f9d2 	bl	8007e2c <_printf_common>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f040 808d 	bne.w	8007ba8 <_printf_float+0x1d0>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b00d      	add	sp, #52	@ 0x34
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f9 f844 	bl	8000b2c <__aeabi_dcmpun>
 8007aa4:	b140      	cbz	r0, 8007ab8 <_printf_float+0xe0>
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfbc      	itt	lt
 8007aac:	232d      	movlt	r3, #45	@ 0x2d
 8007aae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8007cac <_printf_float+0x2d4>)
 8007ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8007cb0 <_printf_float+0x2d8>)
 8007ab6:	e7d4      	b.n	8007a62 <_printf_float+0x8a>
 8007ab8:	6863      	ldr	r3, [r4, #4]
 8007aba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007abe:	9206      	str	r2, [sp, #24]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	d13b      	bne.n	8007b3c <_printf_float+0x164>
 8007ac4:	2306      	movs	r3, #6
 8007ac6:	6063      	str	r3, [r4, #4]
 8007ac8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007acc:	2300      	movs	r3, #0
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ad4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ad8:	ab09      	add	r3, sp, #36	@ 0x24
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	6861      	ldr	r1, [r4, #4]
 8007ade:	ec49 8b10 	vmov	d0, r8, r9
 8007ae2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7ff fed7 	bl	800789a <__cvt>
 8007aec:	9b06      	ldr	r3, [sp, #24]
 8007aee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007af0:	2b47      	cmp	r3, #71	@ 0x47
 8007af2:	4680      	mov	r8, r0
 8007af4:	d129      	bne.n	8007b4a <_printf_float+0x172>
 8007af6:	1cc8      	adds	r0, r1, #3
 8007af8:	db02      	blt.n	8007b00 <_printf_float+0x128>
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	4299      	cmp	r1, r3
 8007afe:	dd41      	ble.n	8007b84 <_printf_float+0x1ac>
 8007b00:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b04:	fa5f fa8a 	uxtb.w	sl, sl
 8007b08:	3901      	subs	r1, #1
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b10:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b12:	f7ff ff27 	bl	8007964 <__exponent>
 8007b16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b18:	1813      	adds	r3, r2, r0
 8007b1a:	2a01      	cmp	r2, #1
 8007b1c:	4681      	mov	r9, r0
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	dc02      	bgt.n	8007b28 <_printf_float+0x150>
 8007b22:	6822      	ldr	r2, [r4, #0]
 8007b24:	07d2      	lsls	r2, r2, #31
 8007b26:	d501      	bpl.n	8007b2c <_printf_float+0x154>
 8007b28:	3301      	adds	r3, #1
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0a2      	beq.n	8007a7a <_printf_float+0xa2>
 8007b34:	232d      	movs	r3, #45	@ 0x2d
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b3a:	e79e      	b.n	8007a7a <_printf_float+0xa2>
 8007b3c:	9a06      	ldr	r2, [sp, #24]
 8007b3e:	2a47      	cmp	r2, #71	@ 0x47
 8007b40:	d1c2      	bne.n	8007ac8 <_printf_float+0xf0>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1c0      	bne.n	8007ac8 <_printf_float+0xf0>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7bd      	b.n	8007ac6 <_printf_float+0xee>
 8007b4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b4e:	d9db      	bls.n	8007b08 <_printf_float+0x130>
 8007b50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b54:	d118      	bne.n	8007b88 <_printf_float+0x1b0>
 8007b56:	2900      	cmp	r1, #0
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	dd0b      	ble.n	8007b74 <_printf_float+0x19c>
 8007b5c:	6121      	str	r1, [r4, #16]
 8007b5e:	b913      	cbnz	r3, 8007b66 <_printf_float+0x18e>
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	07d0      	lsls	r0, r2, #31
 8007b64:	d502      	bpl.n	8007b6c <_printf_float+0x194>
 8007b66:	3301      	adds	r3, #1
 8007b68:	440b      	add	r3, r1
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	e7db      	b.n	8007b2c <_printf_float+0x154>
 8007b74:	b913      	cbnz	r3, 8007b7c <_printf_float+0x1a4>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	07d2      	lsls	r2, r2, #31
 8007b7a:	d501      	bpl.n	8007b80 <_printf_float+0x1a8>
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	e7f4      	b.n	8007b6a <_printf_float+0x192>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e7f2      	b.n	8007b6a <_printf_float+0x192>
 8007b84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8a:	4299      	cmp	r1, r3
 8007b8c:	db05      	blt.n	8007b9a <_printf_float+0x1c2>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	6121      	str	r1, [r4, #16]
 8007b92:	07d8      	lsls	r0, r3, #31
 8007b94:	d5ea      	bpl.n	8007b6c <_printf_float+0x194>
 8007b96:	1c4b      	adds	r3, r1, #1
 8007b98:	e7e7      	b.n	8007b6a <_printf_float+0x192>
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	bfd4      	ite	le
 8007b9e:	f1c1 0202 	rsble	r2, r1, #2
 8007ba2:	2201      	movgt	r2, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	e7e0      	b.n	8007b6a <_printf_float+0x192>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	055a      	lsls	r2, r3, #21
 8007bac:	d407      	bmi.n	8007bbe <_printf_float+0x1e6>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d12b      	bne.n	8007c14 <_printf_float+0x23c>
 8007bbc:	e767      	b.n	8007a8e <_printf_float+0xb6>
 8007bbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bc2:	f240 80dd 	bls.w	8007d80 <_printf_float+0x3a8>
 8007bc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f7f8 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d033      	beq.n	8007c3e <_printf_float+0x266>
 8007bd6:	4a37      	ldr	r2, [pc, #220]	@ (8007cb4 <_printf_float+0x2dc>)
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f af54 	beq.w	8007a8e <_printf_float+0xb6>
 8007be6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007bea:	4543      	cmp	r3, r8
 8007bec:	db02      	blt.n	8007bf4 <_printf_float+0x21c>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	07d8      	lsls	r0, r3, #31
 8007bf2:	d50f      	bpl.n	8007c14 <_printf_float+0x23c>
 8007bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f af45 	beq.w	8007a8e <_printf_float+0xb6>
 8007c04:	f04f 0900 	mov.w	r9, #0
 8007c08:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c0c:	f104 0a1a 	add.w	sl, r4, #26
 8007c10:	45c8      	cmp	r8, r9
 8007c12:	dc09      	bgt.n	8007c28 <_printf_float+0x250>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	f100 8103 	bmi.w	8007e22 <_printf_float+0x44a>
 8007c1c:	68e0      	ldr	r0, [r4, #12]
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c20:	4298      	cmp	r0, r3
 8007c22:	bfb8      	it	lt
 8007c24:	4618      	movlt	r0, r3
 8007c26:	e734      	b.n	8007a92 <_printf_float+0xba>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f af2b 	beq.w	8007a8e <_printf_float+0xb6>
 8007c38:	f109 0901 	add.w	r9, r9, #1
 8007c3c:	e7e8      	b.n	8007c10 <_printf_float+0x238>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc39      	bgt.n	8007cb8 <_printf_float+0x2e0>
 8007c44:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <_printf_float+0x2dc>)
 8007c46:	2301      	movs	r3, #1
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af1d 	beq.w	8007a8e <_printf_float+0xb6>
 8007c54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c58:	ea59 0303 	orrs.w	r3, r9, r3
 8007c5c:	d102      	bne.n	8007c64 <_printf_float+0x28c>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d5d7      	bpl.n	8007c14 <_printf_float+0x23c>
 8007c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af0d 	beq.w	8007a8e <_printf_float+0xb6>
 8007c74:	f04f 0a00 	mov.w	sl, #0
 8007c78:	f104 0b1a 	add.w	fp, r4, #26
 8007c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c7e:	425b      	negs	r3, r3
 8007c80:	4553      	cmp	r3, sl
 8007c82:	dc01      	bgt.n	8007c88 <_printf_float+0x2b0>
 8007c84:	464b      	mov	r3, r9
 8007c86:	e793      	b.n	8007bb0 <_printf_float+0x1d8>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	465a      	mov	r2, fp
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f aefb 	beq.w	8007a8e <_printf_float+0xb6>
 8007c98:	f10a 0a01 	add.w	sl, sl, #1
 8007c9c:	e7ee      	b.n	8007c7c <_printf_float+0x2a4>
 8007c9e:	bf00      	nop
 8007ca0:	7fefffff 	.word	0x7fefffff
 8007ca4:	0800bfcc 	.word	0x0800bfcc
 8007ca8:	0800bfc8 	.word	0x0800bfc8
 8007cac:	0800bfd4 	.word	0x0800bfd4
 8007cb0:	0800bfd0 	.word	0x0800bfd0
 8007cb4:	0800bfd8 	.word	0x0800bfd8
 8007cb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cbe:	4553      	cmp	r3, sl
 8007cc0:	bfa8      	it	ge
 8007cc2:	4653      	movge	r3, sl
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	dc36      	bgt.n	8007d38 <_printf_float+0x360>
 8007cca:	f04f 0b00 	mov.w	fp, #0
 8007cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cd2:	f104 021a 	add.w	r2, r4, #26
 8007cd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cd8:	9306      	str	r3, [sp, #24]
 8007cda:	eba3 0309 	sub.w	r3, r3, r9
 8007cde:	455b      	cmp	r3, fp
 8007ce0:	dc31      	bgt.n	8007d46 <_printf_float+0x36e>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce4:	459a      	cmp	sl, r3
 8007ce6:	dc3a      	bgt.n	8007d5e <_printf_float+0x386>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d437      	bmi.n	8007d5e <_printf_float+0x386>
 8007cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf0:	ebaa 0903 	sub.w	r9, sl, r3
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	ebaa 0303 	sub.w	r3, sl, r3
 8007cfa:	4599      	cmp	r9, r3
 8007cfc:	bfa8      	it	ge
 8007cfe:	4699      	movge	r9, r3
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	dc33      	bgt.n	8007d6e <_printf_float+0x396>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d0e:	f104 0b1a 	add.w	fp, r4, #26
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	ebaa 0303 	sub.w	r3, sl, r3
 8007d18:	eba3 0309 	sub.w	r3, r3, r9
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	f77f af79 	ble.w	8007c14 <_printf_float+0x23c>
 8007d22:	2301      	movs	r3, #1
 8007d24:	465a      	mov	r2, fp
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f aeae 	beq.w	8007a8e <_printf_float+0xb6>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	e7ec      	b.n	8007d12 <_printf_float+0x33a>
 8007d38:	4642      	mov	r2, r8
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	d1c2      	bne.n	8007cca <_printf_float+0x2f2>
 8007d44:	e6a3      	b.n	8007a8e <_printf_float+0xb6>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	9206      	str	r2, [sp, #24]
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	f43f ae9c 	beq.w	8007a8e <_printf_float+0xb6>
 8007d56:	9a06      	ldr	r2, [sp, #24]
 8007d58:	f10b 0b01 	add.w	fp, fp, #1
 8007d5c:	e7bb      	b.n	8007cd6 <_printf_float+0x2fe>
 8007d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d1c0      	bne.n	8007cee <_printf_float+0x316>
 8007d6c:	e68f      	b.n	8007a8e <_printf_float+0xb6>
 8007d6e:	9a06      	ldr	r2, [sp, #24]
 8007d70:	464b      	mov	r3, r9
 8007d72:	4442      	add	r2, r8
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d1c3      	bne.n	8007d06 <_printf_float+0x32e>
 8007d7e:	e686      	b.n	8007a8e <_printf_float+0xb6>
 8007d80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d84:	f1ba 0f01 	cmp.w	sl, #1
 8007d88:	dc01      	bgt.n	8007d8e <_printf_float+0x3b6>
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d536      	bpl.n	8007dfc <_printf_float+0x424>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4642      	mov	r2, r8
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae78 	beq.w	8007a8e <_printf_float+0xb6>
 8007d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	f43f ae70 	beq.w	8007a8e <_printf_float+0xb6>
 8007dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007db2:	2200      	movs	r2, #0
 8007db4:	2300      	movs	r3, #0
 8007db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dba:	f7f8 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbe:	b9c0      	cbnz	r0, 8007df2 <_printf_float+0x41a>
 8007dc0:	4653      	mov	r3, sl
 8007dc2:	f108 0201 	add.w	r2, r8, #1
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d10c      	bne.n	8007dea <_printf_float+0x412>
 8007dd0:	e65d      	b.n	8007a8e <_printf_float+0xb6>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	465a      	mov	r2, fp
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae56 	beq.w	8007a8e <_printf_float+0xb6>
 8007de2:	f108 0801 	add.w	r8, r8, #1
 8007de6:	45d0      	cmp	r8, sl
 8007de8:	dbf3      	blt.n	8007dd2 <_printf_float+0x3fa>
 8007dea:	464b      	mov	r3, r9
 8007dec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007df0:	e6df      	b.n	8007bb2 <_printf_float+0x1da>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	f104 0b1a 	add.w	fp, r4, #26
 8007dfa:	e7f4      	b.n	8007de6 <_printf_float+0x40e>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4642      	mov	r2, r8
 8007e00:	e7e1      	b.n	8007dc6 <_printf_float+0x3ee>
 8007e02:	2301      	movs	r3, #1
 8007e04:	464a      	mov	r2, r9
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae3e 	beq.w	8007a8e <_printf_float+0xb6>
 8007e12:	f108 0801 	add.w	r8, r8, #1
 8007e16:	68e3      	ldr	r3, [r4, #12]
 8007e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e1a:	1a5b      	subs	r3, r3, r1
 8007e1c:	4543      	cmp	r3, r8
 8007e1e:	dcf0      	bgt.n	8007e02 <_printf_float+0x42a>
 8007e20:	e6fc      	b.n	8007c1c <_printf_float+0x244>
 8007e22:	f04f 0800 	mov.w	r8, #0
 8007e26:	f104 0919 	add.w	r9, r4, #25
 8007e2a:	e7f4      	b.n	8007e16 <_printf_float+0x43e>

08007e2c <_printf_common>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	4616      	mov	r6, r2
 8007e32:	4698      	mov	r8, r3
 8007e34:	688a      	ldr	r2, [r1, #8]
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	bfb8      	it	lt
 8007e40:	4613      	movlt	r3, r2
 8007e42:	6033      	str	r3, [r6, #0]
 8007e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e48:	4607      	mov	r7, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b10a      	cbz	r2, 8007e52 <_printf_common+0x26>
 8007e4e:	3301      	adds	r3, #1
 8007e50:	6033      	str	r3, [r6, #0]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	0699      	lsls	r1, r3, #26
 8007e56:	bf42      	ittt	mi
 8007e58:	6833      	ldrmi	r3, [r6, #0]
 8007e5a:	3302      	addmi	r3, #2
 8007e5c:	6033      	strmi	r3, [r6, #0]
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	f015 0506 	ands.w	r5, r5, #6
 8007e64:	d106      	bne.n	8007e74 <_printf_common+0x48>
 8007e66:	f104 0a19 	add.w	sl, r4, #25
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	6832      	ldr	r2, [r6, #0]
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dc26      	bgt.n	8007ec2 <_printf_common+0x96>
 8007e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e78:	6822      	ldr	r2, [r4, #0]
 8007e7a:	3b00      	subs	r3, #0
 8007e7c:	bf18      	it	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	0692      	lsls	r2, r2, #26
 8007e82:	d42b      	bmi.n	8007edc <_printf_common+0xb0>
 8007e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c8      	blx	r9
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d01e      	beq.n	8007ed0 <_printf_common+0xa4>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	f003 0306 	and.w	r3, r3, #6
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	bf02      	ittt	eq
 8007e9e:	68e5      	ldreq	r5, [r4, #12]
 8007ea0:	6833      	ldreq	r3, [r6, #0]
 8007ea2:	1aed      	subeq	r5, r5, r3
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	bf0c      	ite	eq
 8007ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eac:	2500      	movne	r5, #0
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	bfc4      	itt	gt
 8007eb2:	1a9b      	subgt	r3, r3, r2
 8007eb4:	18ed      	addgt	r5, r5, r3
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	341a      	adds	r4, #26
 8007eba:	42b5      	cmp	r5, r6
 8007ebc:	d11a      	bne.n	8007ef4 <_printf_common+0xc8>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e008      	b.n	8007ed4 <_printf_common+0xa8>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	4638      	mov	r0, r7
 8007eca:	47c8      	blx	r9
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d103      	bne.n	8007ed8 <_printf_common+0xac>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed8:	3501      	adds	r5, #1
 8007eda:	e7c6      	b.n	8007e6a <_printf_common+0x3e>
 8007edc:	18e1      	adds	r1, r4, r3
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	2030      	movs	r0, #48	@ 0x30
 8007ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ee6:	4422      	add	r2, r4
 8007ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	e7c7      	b.n	8007e84 <_printf_common+0x58>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	4641      	mov	r1, r8
 8007efa:	4638      	mov	r0, r7
 8007efc:	47c8      	blx	r9
 8007efe:	3001      	adds	r0, #1
 8007f00:	d0e6      	beq.n	8007ed0 <_printf_common+0xa4>
 8007f02:	3601      	adds	r6, #1
 8007f04:	e7d9      	b.n	8007eba <_printf_common+0x8e>
	...

08007f08 <_printf_i>:
 8007f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	7e0f      	ldrb	r7, [r1, #24]
 8007f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f10:	2f78      	cmp	r7, #120	@ 0x78
 8007f12:	4691      	mov	r9, r2
 8007f14:	4680      	mov	r8, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f1e:	d807      	bhi.n	8007f30 <_printf_i+0x28>
 8007f20:	2f62      	cmp	r7, #98	@ 0x62
 8007f22:	d80a      	bhi.n	8007f3a <_printf_i+0x32>
 8007f24:	2f00      	cmp	r7, #0
 8007f26:	f000 80d1 	beq.w	80080cc <_printf_i+0x1c4>
 8007f2a:	2f58      	cmp	r7, #88	@ 0x58
 8007f2c:	f000 80b8 	beq.w	80080a0 <_printf_i+0x198>
 8007f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f38:	e03a      	b.n	8007fb0 <_printf_i+0xa8>
 8007f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f3e:	2b15      	cmp	r3, #21
 8007f40:	d8f6      	bhi.n	8007f30 <_printf_i+0x28>
 8007f42:	a101      	add	r1, pc, #4	@ (adr r1, 8007f48 <_printf_i+0x40>)
 8007f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f48:	08007fa1 	.word	0x08007fa1
 8007f4c:	08007fb5 	.word	0x08007fb5
 8007f50:	08007f31 	.word	0x08007f31
 8007f54:	08007f31 	.word	0x08007f31
 8007f58:	08007f31 	.word	0x08007f31
 8007f5c:	08007f31 	.word	0x08007f31
 8007f60:	08007fb5 	.word	0x08007fb5
 8007f64:	08007f31 	.word	0x08007f31
 8007f68:	08007f31 	.word	0x08007f31
 8007f6c:	08007f31 	.word	0x08007f31
 8007f70:	08007f31 	.word	0x08007f31
 8007f74:	080080b3 	.word	0x080080b3
 8007f78:	08007fdf 	.word	0x08007fdf
 8007f7c:	0800806d 	.word	0x0800806d
 8007f80:	08007f31 	.word	0x08007f31
 8007f84:	08007f31 	.word	0x08007f31
 8007f88:	080080d5 	.word	0x080080d5
 8007f8c:	08007f31 	.word	0x08007f31
 8007f90:	08007fdf 	.word	0x08007fdf
 8007f94:	08007f31 	.word	0x08007f31
 8007f98:	08007f31 	.word	0x08007f31
 8007f9c:	08008075 	.word	0x08008075
 8007fa0:	6833      	ldr	r3, [r6, #0]
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6032      	str	r2, [r6, #0]
 8007fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e09c      	b.n	80080ee <_printf_i+0x1e6>
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	6820      	ldr	r0, [r4, #0]
 8007fb8:	1d19      	adds	r1, r3, #4
 8007fba:	6031      	str	r1, [r6, #0]
 8007fbc:	0606      	lsls	r6, r0, #24
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0xbc>
 8007fc0:	681d      	ldr	r5, [r3, #0]
 8007fc2:	e003      	b.n	8007fcc <_printf_i+0xc4>
 8007fc4:	0645      	lsls	r5, r0, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0xb8>
 8007fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	da03      	bge.n	8007fd8 <_printf_i+0xd0>
 8007fd0:	232d      	movs	r3, #45	@ 0x2d
 8007fd2:	426d      	negs	r5, r5
 8007fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fd8:	4858      	ldr	r0, [pc, #352]	@ (800813c <_printf_i+0x234>)
 8007fda:	230a      	movs	r3, #10
 8007fdc:	e011      	b.n	8008002 <_printf_i+0xfa>
 8007fde:	6821      	ldr	r1, [r4, #0]
 8007fe0:	6833      	ldr	r3, [r6, #0]
 8007fe2:	0608      	lsls	r0, r1, #24
 8007fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fe8:	d402      	bmi.n	8007ff0 <_printf_i+0xe8>
 8007fea:	0649      	lsls	r1, r1, #25
 8007fec:	bf48      	it	mi
 8007fee:	b2ad      	uxthmi	r5, r5
 8007ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ff2:	4852      	ldr	r0, [pc, #328]	@ (800813c <_printf_i+0x234>)
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	bf14      	ite	ne
 8007ff8:	230a      	movne	r3, #10
 8007ffa:	2308      	moveq	r3, #8
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008002:	6866      	ldr	r6, [r4, #4]
 8008004:	60a6      	str	r6, [r4, #8]
 8008006:	2e00      	cmp	r6, #0
 8008008:	db05      	blt.n	8008016 <_printf_i+0x10e>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	432e      	orrs	r6, r5
 800800e:	f021 0104 	bic.w	r1, r1, #4
 8008012:	6021      	str	r1, [r4, #0]
 8008014:	d04b      	beq.n	80080ae <_printf_i+0x1a6>
 8008016:	4616      	mov	r6, r2
 8008018:	fbb5 f1f3 	udiv	r1, r5, r3
 800801c:	fb03 5711 	mls	r7, r3, r1, r5
 8008020:	5dc7      	ldrb	r7, [r0, r7]
 8008022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008026:	462f      	mov	r7, r5
 8008028:	42bb      	cmp	r3, r7
 800802a:	460d      	mov	r5, r1
 800802c:	d9f4      	bls.n	8008018 <_printf_i+0x110>
 800802e:	2b08      	cmp	r3, #8
 8008030:	d10b      	bne.n	800804a <_printf_i+0x142>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	07df      	lsls	r7, r3, #31
 8008036:	d508      	bpl.n	800804a <_printf_i+0x142>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	6861      	ldr	r1, [r4, #4]
 800803c:	4299      	cmp	r1, r3
 800803e:	bfde      	ittt	le
 8008040:	2330      	movle	r3, #48	@ 0x30
 8008042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800804a:	1b92      	subs	r2, r2, r6
 800804c:	6122      	str	r2, [r4, #16]
 800804e:	f8cd a000 	str.w	sl, [sp]
 8008052:	464b      	mov	r3, r9
 8008054:	aa03      	add	r2, sp, #12
 8008056:	4621      	mov	r1, r4
 8008058:	4640      	mov	r0, r8
 800805a:	f7ff fee7 	bl	8007e2c <_printf_common>
 800805e:	3001      	adds	r0, #1
 8008060:	d14a      	bne.n	80080f8 <_printf_i+0x1f0>
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	b004      	add	sp, #16
 8008068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	f043 0320 	orr.w	r3, r3, #32
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	4832      	ldr	r0, [pc, #200]	@ (8008140 <_printf_i+0x238>)
 8008076:	2778      	movs	r7, #120	@ 0x78
 8008078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	6831      	ldr	r1, [r6, #0]
 8008080:	061f      	lsls	r7, r3, #24
 8008082:	f851 5b04 	ldr.w	r5, [r1], #4
 8008086:	d402      	bmi.n	800808e <_printf_i+0x186>
 8008088:	065f      	lsls	r7, r3, #25
 800808a:	bf48      	it	mi
 800808c:	b2ad      	uxthmi	r5, r5
 800808e:	6031      	str	r1, [r6, #0]
 8008090:	07d9      	lsls	r1, r3, #31
 8008092:	bf44      	itt	mi
 8008094:	f043 0320 	orrmi.w	r3, r3, #32
 8008098:	6023      	strmi	r3, [r4, #0]
 800809a:	b11d      	cbz	r5, 80080a4 <_printf_i+0x19c>
 800809c:	2310      	movs	r3, #16
 800809e:	e7ad      	b.n	8007ffc <_printf_i+0xf4>
 80080a0:	4826      	ldr	r0, [pc, #152]	@ (800813c <_printf_i+0x234>)
 80080a2:	e7e9      	b.n	8008078 <_printf_i+0x170>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	f023 0320 	bic.w	r3, r3, #32
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	e7f6      	b.n	800809c <_printf_i+0x194>
 80080ae:	4616      	mov	r6, r2
 80080b0:	e7bd      	b.n	800802e <_printf_i+0x126>
 80080b2:	6833      	ldr	r3, [r6, #0]
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	6961      	ldr	r1, [r4, #20]
 80080b8:	1d18      	adds	r0, r3, #4
 80080ba:	6030      	str	r0, [r6, #0]
 80080bc:	062e      	lsls	r6, r5, #24
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	d501      	bpl.n	80080c6 <_printf_i+0x1be>
 80080c2:	6019      	str	r1, [r3, #0]
 80080c4:	e002      	b.n	80080cc <_printf_i+0x1c4>
 80080c6:	0668      	lsls	r0, r5, #25
 80080c8:	d5fb      	bpl.n	80080c2 <_printf_i+0x1ba>
 80080ca:	8019      	strh	r1, [r3, #0]
 80080cc:	2300      	movs	r3, #0
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	4616      	mov	r6, r2
 80080d2:	e7bc      	b.n	800804e <_printf_i+0x146>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	6032      	str	r2, [r6, #0]
 80080da:	681e      	ldr	r6, [r3, #0]
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	2100      	movs	r1, #0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7f8 f875 	bl	80001d0 <memchr>
 80080e6:	b108      	cbz	r0, 80080ec <_printf_i+0x1e4>
 80080e8:	1b80      	subs	r0, r0, r6
 80080ea:	6060      	str	r0, [r4, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	2300      	movs	r3, #0
 80080f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f6:	e7aa      	b.n	800804e <_printf_i+0x146>
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	4632      	mov	r2, r6
 80080fc:	4649      	mov	r1, r9
 80080fe:	4640      	mov	r0, r8
 8008100:	47d0      	blx	sl
 8008102:	3001      	adds	r0, #1
 8008104:	d0ad      	beq.n	8008062 <_printf_i+0x15a>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	079b      	lsls	r3, r3, #30
 800810a:	d413      	bmi.n	8008134 <_printf_i+0x22c>
 800810c:	68e0      	ldr	r0, [r4, #12]
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	4298      	cmp	r0, r3
 8008112:	bfb8      	it	lt
 8008114:	4618      	movlt	r0, r3
 8008116:	e7a6      	b.n	8008066 <_printf_i+0x15e>
 8008118:	2301      	movs	r3, #1
 800811a:	4632      	mov	r2, r6
 800811c:	4649      	mov	r1, r9
 800811e:	4640      	mov	r0, r8
 8008120:	47d0      	blx	sl
 8008122:	3001      	adds	r0, #1
 8008124:	d09d      	beq.n	8008062 <_printf_i+0x15a>
 8008126:	3501      	adds	r5, #1
 8008128:	68e3      	ldr	r3, [r4, #12]
 800812a:	9903      	ldr	r1, [sp, #12]
 800812c:	1a5b      	subs	r3, r3, r1
 800812e:	42ab      	cmp	r3, r5
 8008130:	dcf2      	bgt.n	8008118 <_printf_i+0x210>
 8008132:	e7eb      	b.n	800810c <_printf_i+0x204>
 8008134:	2500      	movs	r5, #0
 8008136:	f104 0619 	add.w	r6, r4, #25
 800813a:	e7f5      	b.n	8008128 <_printf_i+0x220>
 800813c:	0800bfda 	.word	0x0800bfda
 8008140:	0800bfeb 	.word	0x0800bfeb

08008144 <_scanf_float>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	b087      	sub	sp, #28
 800814a:	4691      	mov	r9, r2
 800814c:	9303      	str	r3, [sp, #12]
 800814e:	688b      	ldr	r3, [r1, #8]
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008156:	bf81      	itttt	hi
 8008158:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800815c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008160:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008164:	608b      	strhi	r3, [r1, #8]
 8008166:	680b      	ldr	r3, [r1, #0]
 8008168:	460a      	mov	r2, r1
 800816a:	f04f 0500 	mov.w	r5, #0
 800816e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008172:	f842 3b1c 	str.w	r3, [r2], #28
 8008176:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800817a:	4680      	mov	r8, r0
 800817c:	460c      	mov	r4, r1
 800817e:	bf98      	it	ls
 8008180:	f04f 0b00 	movls.w	fp, #0
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	4616      	mov	r6, r2
 8008188:	46aa      	mov	sl, r5
 800818a:	462f      	mov	r7, r5
 800818c:	9502      	str	r5, [sp, #8]
 800818e:	68a2      	ldr	r2, [r4, #8]
 8008190:	b15a      	cbz	r2, 80081aa <_scanf_float+0x66>
 8008192:	f8d9 3000 	ldr.w	r3, [r9]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b4e      	cmp	r3, #78	@ 0x4e
 800819a:	d863      	bhi.n	8008264 <_scanf_float+0x120>
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d83b      	bhi.n	8008218 <_scanf_float+0xd4>
 80081a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081a4:	b2c8      	uxtb	r0, r1
 80081a6:	280e      	cmp	r0, #14
 80081a8:	d939      	bls.n	800821e <_scanf_float+0xda>
 80081aa:	b11f      	cbz	r7, 80081b4 <_scanf_float+0x70>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081b8:	f1ba 0f01 	cmp.w	sl, #1
 80081bc:	f200 8114 	bhi.w	80083e8 <_scanf_float+0x2a4>
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	429e      	cmp	r6, r3
 80081c4:	f200 8105 	bhi.w	80083d2 <_scanf_float+0x28e>
 80081c8:	2001      	movs	r0, #1
 80081ca:	b007      	add	sp, #28
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80081d4:	2a0d      	cmp	r2, #13
 80081d6:	d8e8      	bhi.n	80081aa <_scanf_float+0x66>
 80081d8:	a101      	add	r1, pc, #4	@ (adr r1, 80081e0 <_scanf_float+0x9c>)
 80081da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081de:	bf00      	nop
 80081e0:	08008329 	.word	0x08008329
 80081e4:	080081ab 	.word	0x080081ab
 80081e8:	080081ab 	.word	0x080081ab
 80081ec:	080081ab 	.word	0x080081ab
 80081f0:	08008385 	.word	0x08008385
 80081f4:	0800835f 	.word	0x0800835f
 80081f8:	080081ab 	.word	0x080081ab
 80081fc:	080081ab 	.word	0x080081ab
 8008200:	08008337 	.word	0x08008337
 8008204:	080081ab 	.word	0x080081ab
 8008208:	080081ab 	.word	0x080081ab
 800820c:	080081ab 	.word	0x080081ab
 8008210:	080081ab 	.word	0x080081ab
 8008214:	080082f3 	.word	0x080082f3
 8008218:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800821c:	e7da      	b.n	80081d4 <_scanf_float+0x90>
 800821e:	290e      	cmp	r1, #14
 8008220:	d8c3      	bhi.n	80081aa <_scanf_float+0x66>
 8008222:	a001      	add	r0, pc, #4	@ (adr r0, 8008228 <_scanf_float+0xe4>)
 8008224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008228:	080082e3 	.word	0x080082e3
 800822c:	080081ab 	.word	0x080081ab
 8008230:	080082e3 	.word	0x080082e3
 8008234:	08008373 	.word	0x08008373
 8008238:	080081ab 	.word	0x080081ab
 800823c:	08008285 	.word	0x08008285
 8008240:	080082c9 	.word	0x080082c9
 8008244:	080082c9 	.word	0x080082c9
 8008248:	080082c9 	.word	0x080082c9
 800824c:	080082c9 	.word	0x080082c9
 8008250:	080082c9 	.word	0x080082c9
 8008254:	080082c9 	.word	0x080082c9
 8008258:	080082c9 	.word	0x080082c9
 800825c:	080082c9 	.word	0x080082c9
 8008260:	080082c9 	.word	0x080082c9
 8008264:	2b6e      	cmp	r3, #110	@ 0x6e
 8008266:	d809      	bhi.n	800827c <_scanf_float+0x138>
 8008268:	2b60      	cmp	r3, #96	@ 0x60
 800826a:	d8b1      	bhi.n	80081d0 <_scanf_float+0x8c>
 800826c:	2b54      	cmp	r3, #84	@ 0x54
 800826e:	d07b      	beq.n	8008368 <_scanf_float+0x224>
 8008270:	2b59      	cmp	r3, #89	@ 0x59
 8008272:	d19a      	bne.n	80081aa <_scanf_float+0x66>
 8008274:	2d07      	cmp	r5, #7
 8008276:	d198      	bne.n	80081aa <_scanf_float+0x66>
 8008278:	2508      	movs	r5, #8
 800827a:	e02f      	b.n	80082dc <_scanf_float+0x198>
 800827c:	2b74      	cmp	r3, #116	@ 0x74
 800827e:	d073      	beq.n	8008368 <_scanf_float+0x224>
 8008280:	2b79      	cmp	r3, #121	@ 0x79
 8008282:	e7f6      	b.n	8008272 <_scanf_float+0x12e>
 8008284:	6821      	ldr	r1, [r4, #0]
 8008286:	05c8      	lsls	r0, r1, #23
 8008288:	d51e      	bpl.n	80082c8 <_scanf_float+0x184>
 800828a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800828e:	6021      	str	r1, [r4, #0]
 8008290:	3701      	adds	r7, #1
 8008292:	f1bb 0f00 	cmp.w	fp, #0
 8008296:	d003      	beq.n	80082a0 <_scanf_float+0x15c>
 8008298:	3201      	adds	r2, #1
 800829a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800829e:	60a2      	str	r2, [r4, #8]
 80082a0:	68a3      	ldr	r3, [r4, #8]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	60a3      	str	r3, [r4, #8]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80082b8:	f340 8082 	ble.w	80083c0 <_scanf_float+0x27c>
 80082bc:	f8d9 3000 	ldr.w	r3, [r9]
 80082c0:	3301      	adds	r3, #1
 80082c2:	f8c9 3000 	str.w	r3, [r9]
 80082c6:	e762      	b.n	800818e <_scanf_float+0x4a>
 80082c8:	eb1a 0105 	adds.w	r1, sl, r5
 80082cc:	f47f af6d 	bne.w	80081aa <_scanf_float+0x66>
 80082d0:	6822      	ldr	r2, [r4, #0]
 80082d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80082d6:	6022      	str	r2, [r4, #0]
 80082d8:	460d      	mov	r5, r1
 80082da:	468a      	mov	sl, r1
 80082dc:	f806 3b01 	strb.w	r3, [r6], #1
 80082e0:	e7de      	b.n	80082a0 <_scanf_float+0x15c>
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	0610      	lsls	r0, r2, #24
 80082e6:	f57f af60 	bpl.w	80081aa <_scanf_float+0x66>
 80082ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	e7f4      	b.n	80082dc <_scanf_float+0x198>
 80082f2:	f1ba 0f00 	cmp.w	sl, #0
 80082f6:	d10c      	bne.n	8008312 <_scanf_float+0x1ce>
 80082f8:	b977      	cbnz	r7, 8008318 <_scanf_float+0x1d4>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008300:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008304:	d108      	bne.n	8008318 <_scanf_float+0x1d4>
 8008306:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	f04f 0a01 	mov.w	sl, #1
 8008310:	e7e4      	b.n	80082dc <_scanf_float+0x198>
 8008312:	f1ba 0f02 	cmp.w	sl, #2
 8008316:	d050      	beq.n	80083ba <_scanf_float+0x276>
 8008318:	2d01      	cmp	r5, #1
 800831a:	d002      	beq.n	8008322 <_scanf_float+0x1de>
 800831c:	2d04      	cmp	r5, #4
 800831e:	f47f af44 	bne.w	80081aa <_scanf_float+0x66>
 8008322:	3501      	adds	r5, #1
 8008324:	b2ed      	uxtb	r5, r5
 8008326:	e7d9      	b.n	80082dc <_scanf_float+0x198>
 8008328:	f1ba 0f01 	cmp.w	sl, #1
 800832c:	f47f af3d 	bne.w	80081aa <_scanf_float+0x66>
 8008330:	f04f 0a02 	mov.w	sl, #2
 8008334:	e7d2      	b.n	80082dc <_scanf_float+0x198>
 8008336:	b975      	cbnz	r5, 8008356 <_scanf_float+0x212>
 8008338:	2f00      	cmp	r7, #0
 800833a:	f47f af37 	bne.w	80081ac <_scanf_float+0x68>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008344:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008348:	f040 8103 	bne.w	8008552 <_scanf_float+0x40e>
 800834c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008350:	6022      	str	r2, [r4, #0]
 8008352:	2501      	movs	r5, #1
 8008354:	e7c2      	b.n	80082dc <_scanf_float+0x198>
 8008356:	2d03      	cmp	r5, #3
 8008358:	d0e3      	beq.n	8008322 <_scanf_float+0x1de>
 800835a:	2d05      	cmp	r5, #5
 800835c:	e7df      	b.n	800831e <_scanf_float+0x1da>
 800835e:	2d02      	cmp	r5, #2
 8008360:	f47f af23 	bne.w	80081aa <_scanf_float+0x66>
 8008364:	2503      	movs	r5, #3
 8008366:	e7b9      	b.n	80082dc <_scanf_float+0x198>
 8008368:	2d06      	cmp	r5, #6
 800836a:	f47f af1e 	bne.w	80081aa <_scanf_float+0x66>
 800836e:	2507      	movs	r5, #7
 8008370:	e7b4      	b.n	80082dc <_scanf_float+0x198>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	0591      	lsls	r1, r2, #22
 8008376:	f57f af18 	bpl.w	80081aa <_scanf_float+0x66>
 800837a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	9702      	str	r7, [sp, #8]
 8008382:	e7ab      	b.n	80082dc <_scanf_float+0x198>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800838a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800838e:	d005      	beq.n	800839c <_scanf_float+0x258>
 8008390:	0550      	lsls	r0, r2, #21
 8008392:	f57f af0a 	bpl.w	80081aa <_scanf_float+0x66>
 8008396:	2f00      	cmp	r7, #0
 8008398:	f000 80db 	beq.w	8008552 <_scanf_float+0x40e>
 800839c:	0591      	lsls	r1, r2, #22
 800839e:	bf58      	it	pl
 80083a0:	9902      	ldrpl	r1, [sp, #8]
 80083a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083a6:	bf58      	it	pl
 80083a8:	1a79      	subpl	r1, r7, r1
 80083aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083ae:	bf58      	it	pl
 80083b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	2700      	movs	r7, #0
 80083b8:	e790      	b.n	80082dc <_scanf_float+0x198>
 80083ba:	f04f 0a03 	mov.w	sl, #3
 80083be:	e78d      	b.n	80082dc <_scanf_float+0x198>
 80083c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80083c4:	4649      	mov	r1, r9
 80083c6:	4640      	mov	r0, r8
 80083c8:	4798      	blx	r3
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f43f aedf 	beq.w	800818e <_scanf_float+0x4a>
 80083d0:	e6eb      	b.n	80081aa <_scanf_float+0x66>
 80083d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083da:	464a      	mov	r2, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	4798      	blx	r3
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	e6eb      	b.n	80081c0 <_scanf_float+0x7c>
 80083e8:	1e6b      	subs	r3, r5, #1
 80083ea:	2b06      	cmp	r3, #6
 80083ec:	d824      	bhi.n	8008438 <_scanf_float+0x2f4>
 80083ee:	2d02      	cmp	r5, #2
 80083f0:	d836      	bhi.n	8008460 <_scanf_float+0x31c>
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	429e      	cmp	r6, r3
 80083f6:	f67f aee7 	bls.w	80081c8 <_scanf_float+0x84>
 80083fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008402:	464a      	mov	r2, r9
 8008404:	4640      	mov	r0, r8
 8008406:	4798      	blx	r3
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	3b01      	subs	r3, #1
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	e7f0      	b.n	80083f2 <_scanf_float+0x2ae>
 8008410:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008414:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008418:	464a      	mov	r2, r9
 800841a:	4640      	mov	r0, r8
 800841c:	4798      	blx	r3
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	3b01      	subs	r3, #1
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008428:	fa5f fa8a 	uxtb.w	sl, sl
 800842c:	f1ba 0f02 	cmp.w	sl, #2
 8008430:	d1ee      	bne.n	8008410 <_scanf_float+0x2cc>
 8008432:	3d03      	subs	r5, #3
 8008434:	b2ed      	uxtb	r5, r5
 8008436:	1b76      	subs	r6, r6, r5
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	05da      	lsls	r2, r3, #23
 800843c:	d530      	bpl.n	80084a0 <_scanf_float+0x35c>
 800843e:	055b      	lsls	r3, r3, #21
 8008440:	d511      	bpl.n	8008466 <_scanf_float+0x322>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	429e      	cmp	r6, r3
 8008446:	f67f aebf 	bls.w	80081c8 <_scanf_float+0x84>
 800844a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800844e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008452:	464a      	mov	r2, r9
 8008454:	4640      	mov	r0, r8
 8008456:	4798      	blx	r3
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	3b01      	subs	r3, #1
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	e7f0      	b.n	8008442 <_scanf_float+0x2fe>
 8008460:	46aa      	mov	sl, r5
 8008462:	46b3      	mov	fp, r6
 8008464:	e7de      	b.n	8008424 <_scanf_float+0x2e0>
 8008466:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	2965      	cmp	r1, #101	@ 0x65
 800846e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008472:	f106 35ff 	add.w	r5, r6, #4294967295
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	d00c      	beq.n	8008494 <_scanf_float+0x350>
 800847a:	2945      	cmp	r1, #69	@ 0x45
 800847c:	d00a      	beq.n	8008494 <_scanf_float+0x350>
 800847e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008482:	464a      	mov	r2, r9
 8008484:	4640      	mov	r0, r8
 8008486:	4798      	blx	r3
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800848e:	3b01      	subs	r3, #1
 8008490:	1eb5      	subs	r5, r6, #2
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008498:	464a      	mov	r2, r9
 800849a:	4640      	mov	r0, r8
 800849c:	4798      	blx	r3
 800849e:	462e      	mov	r6, r5
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	f012 0210 	ands.w	r2, r2, #16
 80084a6:	d001      	beq.n	80084ac <_scanf_float+0x368>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e68e      	b.n	80081ca <_scanf_float+0x86>
 80084ac:	7032      	strb	r2, [r6, #0]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b8:	d125      	bne.n	8008506 <_scanf_float+0x3c2>
 80084ba:	9b02      	ldr	r3, [sp, #8]
 80084bc:	429f      	cmp	r7, r3
 80084be:	d00a      	beq.n	80084d6 <_scanf_float+0x392>
 80084c0:	1bda      	subs	r2, r3, r7
 80084c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80084c6:	429e      	cmp	r6, r3
 80084c8:	bf28      	it	cs
 80084ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80084ce:	4922      	ldr	r1, [pc, #136]	@ (8008558 <_scanf_float+0x414>)
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f907 	bl	80086e4 <siprintf>
 80084d6:	9901      	ldr	r1, [sp, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	4640      	mov	r0, r8
 80084dc:	f002 fbf4 	bl	800acc8 <_strtod_r>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	6821      	ldr	r1, [r4, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f011 0f02 	tst.w	r1, #2
 80084ea:	ec57 6b10 	vmov	r6, r7, d0
 80084ee:	f103 0204 	add.w	r2, r3, #4
 80084f2:	d015      	beq.n	8008520 <_scanf_float+0x3dc>
 80084f4:	9903      	ldr	r1, [sp, #12]
 80084f6:	600a      	str	r2, [r1, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	e9c3 6700 	strd	r6, r7, [r3]
 80084fe:	68e3      	ldr	r3, [r4, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60e3      	str	r3, [r4, #12]
 8008504:	e7d0      	b.n	80084a8 <_scanf_float+0x364>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0e4      	beq.n	80084d6 <_scanf_float+0x392>
 800850c:	9905      	ldr	r1, [sp, #20]
 800850e:	230a      	movs	r3, #10
 8008510:	3101      	adds	r1, #1
 8008512:	4640      	mov	r0, r8
 8008514:	f002 fc58 	bl	800adc8 <_strtol_r>
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	9e05      	ldr	r6, [sp, #20]
 800851c:	1ac2      	subs	r2, r0, r3
 800851e:	e7d0      	b.n	80084c2 <_scanf_float+0x37e>
 8008520:	f011 0f04 	tst.w	r1, #4
 8008524:	9903      	ldr	r1, [sp, #12]
 8008526:	600a      	str	r2, [r1, #0]
 8008528:	d1e6      	bne.n	80084f8 <_scanf_float+0x3b4>
 800852a:	681d      	ldr	r5, [r3, #0]
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f8 fafa 	bl	8000b2c <__aeabi_dcmpun>
 8008538:	b128      	cbz	r0, 8008546 <_scanf_float+0x402>
 800853a:	4808      	ldr	r0, [pc, #32]	@ (800855c <_scanf_float+0x418>)
 800853c:	f000 f9b8 	bl	80088b0 <nanf>
 8008540:	ed85 0a00 	vstr	s0, [r5]
 8008544:	e7db      	b.n	80084fe <_scanf_float+0x3ba>
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f8 fb4d 	bl	8000be8 <__aeabi_d2f>
 800854e:	6028      	str	r0, [r5, #0]
 8008550:	e7d5      	b.n	80084fe <_scanf_float+0x3ba>
 8008552:	2700      	movs	r7, #0
 8008554:	e62e      	b.n	80081b4 <_scanf_float+0x70>
 8008556:	bf00      	nop
 8008558:	0800bffc 	.word	0x0800bffc
 800855c:	0800c13d 	.word	0x0800c13d

08008560 <std>:
 8008560:	2300      	movs	r3, #0
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	e9c0 3300 	strd	r3, r3, [r0]
 800856a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856e:	6083      	str	r3, [r0, #8]
 8008570:	8181      	strh	r1, [r0, #12]
 8008572:	6643      	str	r3, [r0, #100]	@ 0x64
 8008574:	81c2      	strh	r2, [r0, #14]
 8008576:	6183      	str	r3, [r0, #24]
 8008578:	4619      	mov	r1, r3
 800857a:	2208      	movs	r2, #8
 800857c:	305c      	adds	r0, #92	@ 0x5c
 800857e:	f000 f916 	bl	80087ae <memset>
 8008582:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <std+0x58>)
 8008584:	6263      	str	r3, [r4, #36]	@ 0x24
 8008586:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <std+0x5c>)
 8008588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <std+0x60>)
 800858c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800858e:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <std+0x64>)
 8008590:	6323      	str	r3, [r4, #48]	@ 0x30
 8008592:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <std+0x68>)
 8008594:	6224      	str	r4, [r4, #32]
 8008596:	429c      	cmp	r4, r3
 8008598:	d006      	beq.n	80085a8 <std+0x48>
 800859a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800859e:	4294      	cmp	r4, r2
 80085a0:	d002      	beq.n	80085a8 <std+0x48>
 80085a2:	33d0      	adds	r3, #208	@ 0xd0
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d105      	bne.n	80085b4 <std+0x54>
 80085a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b0:	f000 b97a 	b.w	80088a8 <__retarget_lock_init_recursive>
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	08008729 	.word	0x08008729
 80085bc:	0800874b 	.word	0x0800874b
 80085c0:	08008783 	.word	0x08008783
 80085c4:	080087a7 	.word	0x080087a7
 80085c8:	20000488 	.word	0x20000488

080085cc <stdio_exit_handler>:
 80085cc:	4a02      	ldr	r2, [pc, #8]	@ (80085d8 <stdio_exit_handler+0xc>)
 80085ce:	4903      	ldr	r1, [pc, #12]	@ (80085dc <stdio_exit_handler+0x10>)
 80085d0:	4803      	ldr	r0, [pc, #12]	@ (80085e0 <stdio_exit_handler+0x14>)
 80085d2:	f000 b869 	b.w	80086a8 <_fwalk_sglue>
 80085d6:	bf00      	nop
 80085d8:	20000010 	.word	0x20000010
 80085dc:	0800b185 	.word	0x0800b185
 80085e0:	20000020 	.word	0x20000020

080085e4 <cleanup_stdio>:
 80085e4:	6841      	ldr	r1, [r0, #4]
 80085e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <cleanup_stdio+0x34>)
 80085e8:	4299      	cmp	r1, r3
 80085ea:	b510      	push	{r4, lr}
 80085ec:	4604      	mov	r4, r0
 80085ee:	d001      	beq.n	80085f4 <cleanup_stdio+0x10>
 80085f0:	f002 fdc8 	bl	800b184 <_fflush_r>
 80085f4:	68a1      	ldr	r1, [r4, #8]
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <cleanup_stdio+0x38>)
 80085f8:	4299      	cmp	r1, r3
 80085fa:	d002      	beq.n	8008602 <cleanup_stdio+0x1e>
 80085fc:	4620      	mov	r0, r4
 80085fe:	f002 fdc1 	bl	800b184 <_fflush_r>
 8008602:	68e1      	ldr	r1, [r4, #12]
 8008604:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <cleanup_stdio+0x3c>)
 8008606:	4299      	cmp	r1, r3
 8008608:	d004      	beq.n	8008614 <cleanup_stdio+0x30>
 800860a:	4620      	mov	r0, r4
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	f002 bdb8 	b.w	800b184 <_fflush_r>
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	20000488 	.word	0x20000488
 800861c:	200004f0 	.word	0x200004f0
 8008620:	20000558 	.word	0x20000558

08008624 <global_stdio_init.part.0>:
 8008624:	b510      	push	{r4, lr}
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <global_stdio_init.part.0+0x30>)
 8008628:	4c0b      	ldr	r4, [pc, #44]	@ (8008658 <global_stdio_init.part.0+0x34>)
 800862a:	4a0c      	ldr	r2, [pc, #48]	@ (800865c <global_stdio_init.part.0+0x38>)
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	4620      	mov	r0, r4
 8008630:	2200      	movs	r2, #0
 8008632:	2104      	movs	r1, #4
 8008634:	f7ff ff94 	bl	8008560 <std>
 8008638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800863c:	2201      	movs	r2, #1
 800863e:	2109      	movs	r1, #9
 8008640:	f7ff ff8e 	bl	8008560 <std>
 8008644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008648:	2202      	movs	r2, #2
 800864a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864e:	2112      	movs	r1, #18
 8008650:	f7ff bf86 	b.w	8008560 <std>
 8008654:	200005c0 	.word	0x200005c0
 8008658:	20000488 	.word	0x20000488
 800865c:	080085cd 	.word	0x080085cd

08008660 <__sfp_lock_acquire>:
 8008660:	4801      	ldr	r0, [pc, #4]	@ (8008668 <__sfp_lock_acquire+0x8>)
 8008662:	f000 b922 	b.w	80088aa <__retarget_lock_acquire_recursive>
 8008666:	bf00      	nop
 8008668:	200005c9 	.word	0x200005c9

0800866c <__sfp_lock_release>:
 800866c:	4801      	ldr	r0, [pc, #4]	@ (8008674 <__sfp_lock_release+0x8>)
 800866e:	f000 b91d 	b.w	80088ac <__retarget_lock_release_recursive>
 8008672:	bf00      	nop
 8008674:	200005c9 	.word	0x200005c9

08008678 <__sinit>:
 8008678:	b510      	push	{r4, lr}
 800867a:	4604      	mov	r4, r0
 800867c:	f7ff fff0 	bl	8008660 <__sfp_lock_acquire>
 8008680:	6a23      	ldr	r3, [r4, #32]
 8008682:	b11b      	cbz	r3, 800868c <__sinit+0x14>
 8008684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008688:	f7ff bff0 	b.w	800866c <__sfp_lock_release>
 800868c:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <__sinit+0x28>)
 800868e:	6223      	str	r3, [r4, #32]
 8008690:	4b04      	ldr	r3, [pc, #16]	@ (80086a4 <__sinit+0x2c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f5      	bne.n	8008684 <__sinit+0xc>
 8008698:	f7ff ffc4 	bl	8008624 <global_stdio_init.part.0>
 800869c:	e7f2      	b.n	8008684 <__sinit+0xc>
 800869e:	bf00      	nop
 80086a0:	080085e5 	.word	0x080085e5
 80086a4:	200005c0 	.word	0x200005c0

080086a8 <_fwalk_sglue>:
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ac:	4607      	mov	r7, r0
 80086ae:	4688      	mov	r8, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	2600      	movs	r6, #0
 80086b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086b8:	f1b9 0901 	subs.w	r9, r9, #1
 80086bc:	d505      	bpl.n	80086ca <_fwalk_sglue+0x22>
 80086be:	6824      	ldr	r4, [r4, #0]
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	d1f7      	bne.n	80086b4 <_fwalk_sglue+0xc>
 80086c4:	4630      	mov	r0, r6
 80086c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d907      	bls.n	80086e0 <_fwalk_sglue+0x38>
 80086d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d4:	3301      	adds	r3, #1
 80086d6:	d003      	beq.n	80086e0 <_fwalk_sglue+0x38>
 80086d8:	4629      	mov	r1, r5
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	4306      	orrs	r6, r0
 80086e0:	3568      	adds	r5, #104	@ 0x68
 80086e2:	e7e9      	b.n	80086b8 <_fwalk_sglue+0x10>

080086e4 <siprintf>:
 80086e4:	b40e      	push	{r1, r2, r3}
 80086e6:	b510      	push	{r4, lr}
 80086e8:	b09d      	sub	sp, #116	@ 0x74
 80086ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80086ec:	9002      	str	r0, [sp, #8]
 80086ee:	9006      	str	r0, [sp, #24]
 80086f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086f4:	480a      	ldr	r0, [pc, #40]	@ (8008720 <siprintf+0x3c>)
 80086f6:	9107      	str	r1, [sp, #28]
 80086f8:	9104      	str	r1, [sp, #16]
 80086fa:	490a      	ldr	r1, [pc, #40]	@ (8008724 <siprintf+0x40>)
 80086fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008700:	9105      	str	r1, [sp, #20]
 8008702:	2400      	movs	r4, #0
 8008704:	a902      	add	r1, sp, #8
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800870c:	f002 fbba 	bl	800ae84 <_svfiprintf_r>
 8008710:	9b02      	ldr	r3, [sp, #8]
 8008712:	701c      	strb	r4, [r3, #0]
 8008714:	b01d      	add	sp, #116	@ 0x74
 8008716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871a:	b003      	add	sp, #12
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	2000001c 	.word	0x2000001c
 8008724:	ffff0208 	.word	0xffff0208

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f000 f86c 	bl	800880c <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f840 	bl	80087e8 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 b857 	b.w	8008830 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 f82d 	bl	80087e8 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 b80d 	b.w	80087c8 <_close_r>

080087ae <memset>:
 80087ae:	4402      	add	r2, r0
 80087b0:	4603      	mov	r3, r0
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d100      	bne.n	80087b8 <memset+0xa>
 80087b6:	4770      	bx	lr
 80087b8:	f803 1b01 	strb.w	r1, [r3], #1
 80087bc:	e7f9      	b.n	80087b2 <memset+0x4>
	...

080087c0 <_localeconv_r>:
 80087c0:	4800      	ldr	r0, [pc, #0]	@ (80087c4 <_localeconv_r+0x4>)
 80087c2:	4770      	bx	lr
 80087c4:	2000015c 	.word	0x2000015c

080087c8 <_close_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	@ (80087e4 <_close_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f9 fb3e 	bl	8001e54 <_close>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_close_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_close_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	200005c4 	.word	0x200005c4

080087e8 <_lseek_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	@ (8008808 <_lseek_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f9 fb53 	bl	8001ea2 <_lseek>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_lseek_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_lseek_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	200005c4 	.word	0x200005c4

0800880c <_read_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	@ (800882c <_read_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f9 fafd 	bl	8001e1a <_read>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_read_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_read_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200005c4 	.word	0x200005c4

08008830 <_write_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	@ (8008850 <_write_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7f8 fbee 	bl	8001020 <_write>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_write_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_write_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200005c4 	.word	0x200005c4

08008854 <__errno>:
 8008854:	4b01      	ldr	r3, [pc, #4]	@ (800885c <__errno+0x8>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	2000001c 	.word	0x2000001c

08008860 <__libc_init_array>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4d0d      	ldr	r5, [pc, #52]	@ (8008898 <__libc_init_array+0x38>)
 8008864:	4c0d      	ldr	r4, [pc, #52]	@ (800889c <__libc_init_array+0x3c>)
 8008866:	1b64      	subs	r4, r4, r5
 8008868:	10a4      	asrs	r4, r4, #2
 800886a:	2600      	movs	r6, #0
 800886c:	42a6      	cmp	r6, r4
 800886e:	d109      	bne.n	8008884 <__libc_init_array+0x24>
 8008870:	4d0b      	ldr	r5, [pc, #44]	@ (80088a0 <__libc_init_array+0x40>)
 8008872:	4c0c      	ldr	r4, [pc, #48]	@ (80088a4 <__libc_init_array+0x44>)
 8008874:	f003 fb76 	bl	800bf64 <_init>
 8008878:	1b64      	subs	r4, r4, r5
 800887a:	10a4      	asrs	r4, r4, #2
 800887c:	2600      	movs	r6, #0
 800887e:	42a6      	cmp	r6, r4
 8008880:	d105      	bne.n	800888e <__libc_init_array+0x2e>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	f855 3b04 	ldr.w	r3, [r5], #4
 8008888:	4798      	blx	r3
 800888a:	3601      	adds	r6, #1
 800888c:	e7ee      	b.n	800886c <__libc_init_array+0xc>
 800888e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008892:	4798      	blx	r3
 8008894:	3601      	adds	r6, #1
 8008896:	e7f2      	b.n	800887e <__libc_init_array+0x1e>
 8008898:	0800c3fc 	.word	0x0800c3fc
 800889c:	0800c3fc 	.word	0x0800c3fc
 80088a0:	0800c3fc 	.word	0x0800c3fc
 80088a4:	0800c400 	.word	0x0800c400

080088a8 <__retarget_lock_init_recursive>:
 80088a8:	4770      	bx	lr

080088aa <__retarget_lock_acquire_recursive>:
 80088aa:	4770      	bx	lr

080088ac <__retarget_lock_release_recursive>:
 80088ac:	4770      	bx	lr
	...

080088b0 <nanf>:
 80088b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80088b8 <nanf+0x8>
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	7fc00000 	.word	0x7fc00000

080088bc <quorem>:
 80088bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	6903      	ldr	r3, [r0, #16]
 80088c2:	690c      	ldr	r4, [r1, #16]
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	4607      	mov	r7, r0
 80088c8:	db7e      	blt.n	80089c8 <quorem+0x10c>
 80088ca:	3c01      	subs	r4, #1
 80088cc:	f101 0814 	add.w	r8, r1, #20
 80088d0:	00a3      	lsls	r3, r4, #2
 80088d2:	f100 0514 	add.w	r5, r0, #20
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088e6:	3301      	adds	r3, #1
 80088e8:	429a      	cmp	r2, r3
 80088ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80088f2:	d32e      	bcc.n	8008952 <quorem+0x96>
 80088f4:	f04f 0a00 	mov.w	sl, #0
 80088f8:	46c4      	mov	ip, r8
 80088fa:	46ae      	mov	lr, r5
 80088fc:	46d3      	mov	fp, sl
 80088fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008902:	b298      	uxth	r0, r3
 8008904:	fb06 a000 	mla	r0, r6, r0, sl
 8008908:	0c02      	lsrs	r2, r0, #16
 800890a:	0c1b      	lsrs	r3, r3, #16
 800890c:	fb06 2303 	mla	r3, r6, r3, r2
 8008910:	f8de 2000 	ldr.w	r2, [lr]
 8008914:	b280      	uxth	r0, r0
 8008916:	b292      	uxth	r2, r2
 8008918:	1a12      	subs	r2, r2, r0
 800891a:	445a      	add	r2, fp
 800891c:	f8de 0000 	ldr.w	r0, [lr]
 8008920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008924:	b29b      	uxth	r3, r3
 8008926:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800892a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800892e:	b292      	uxth	r2, r2
 8008930:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008934:	45e1      	cmp	r9, ip
 8008936:	f84e 2b04 	str.w	r2, [lr], #4
 800893a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800893e:	d2de      	bcs.n	80088fe <quorem+0x42>
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	58eb      	ldr	r3, [r5, r3]
 8008944:	b92b      	cbnz	r3, 8008952 <quorem+0x96>
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	3b04      	subs	r3, #4
 800894a:	429d      	cmp	r5, r3
 800894c:	461a      	mov	r2, r3
 800894e:	d32f      	bcc.n	80089b0 <quorem+0xf4>
 8008950:	613c      	str	r4, [r7, #16]
 8008952:	4638      	mov	r0, r7
 8008954:	f001 f9c8 	bl	8009ce8 <__mcmp>
 8008958:	2800      	cmp	r0, #0
 800895a:	db25      	blt.n	80089a8 <quorem+0xec>
 800895c:	4629      	mov	r1, r5
 800895e:	2000      	movs	r0, #0
 8008960:	f858 2b04 	ldr.w	r2, [r8], #4
 8008964:	f8d1 c000 	ldr.w	ip, [r1]
 8008968:	fa1f fe82 	uxth.w	lr, r2
 800896c:	fa1f f38c 	uxth.w	r3, ip
 8008970:	eba3 030e 	sub.w	r3, r3, lr
 8008974:	4403      	add	r3, r0
 8008976:	0c12      	lsrs	r2, r2, #16
 8008978:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800897c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008980:	b29b      	uxth	r3, r3
 8008982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008986:	45c1      	cmp	r9, r8
 8008988:	f841 3b04 	str.w	r3, [r1], #4
 800898c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008990:	d2e6      	bcs.n	8008960 <quorem+0xa4>
 8008992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800899a:	b922      	cbnz	r2, 80089a6 <quorem+0xea>
 800899c:	3b04      	subs	r3, #4
 800899e:	429d      	cmp	r5, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	d30b      	bcc.n	80089bc <quorem+0x100>
 80089a4:	613c      	str	r4, [r7, #16]
 80089a6:	3601      	adds	r6, #1
 80089a8:	4630      	mov	r0, r6
 80089aa:	b003      	add	sp, #12
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	3b04      	subs	r3, #4
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	d1cb      	bne.n	8008950 <quorem+0x94>
 80089b8:	3c01      	subs	r4, #1
 80089ba:	e7c6      	b.n	800894a <quorem+0x8e>
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	3b04      	subs	r3, #4
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	d1ef      	bne.n	80089a4 <quorem+0xe8>
 80089c4:	3c01      	subs	r4, #1
 80089c6:	e7ea      	b.n	800899e <quorem+0xe2>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7ee      	b.n	80089aa <quorem+0xee>
 80089cc:	0000      	movs	r0, r0
	...

080089d0 <_dtoa_r>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	69c7      	ldr	r7, [r0, #28]
 80089d6:	b097      	sub	sp, #92	@ 0x5c
 80089d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80089dc:	ec55 4b10 	vmov	r4, r5, d0
 80089e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80089e2:	9107      	str	r1, [sp, #28]
 80089e4:	4681      	mov	r9, r0
 80089e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80089e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089ea:	b97f      	cbnz	r7, 8008a0c <_dtoa_r+0x3c>
 80089ec:	2010      	movs	r0, #16
 80089ee:	f000 fe09 	bl	8009604 <malloc>
 80089f2:	4602      	mov	r2, r0
 80089f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80089f8:	b920      	cbnz	r0, 8008a04 <_dtoa_r+0x34>
 80089fa:	4ba9      	ldr	r3, [pc, #676]	@ (8008ca0 <_dtoa_r+0x2d0>)
 80089fc:	21ef      	movs	r1, #239	@ 0xef
 80089fe:	48a9      	ldr	r0, [pc, #676]	@ (8008ca4 <_dtoa_r+0x2d4>)
 8008a00:	f002 fc3a 	bl	800b278 <__assert_func>
 8008a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a08:	6007      	str	r7, [r0, #0]
 8008a0a:	60c7      	str	r7, [r0, #12]
 8008a0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a10:	6819      	ldr	r1, [r3, #0]
 8008a12:	b159      	cbz	r1, 8008a2c <_dtoa_r+0x5c>
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	604a      	str	r2, [r1, #4]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4093      	lsls	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
 8008a1e:	4648      	mov	r0, r9
 8008a20:	f000 fee6 	bl	80097f0 <_Bfree>
 8008a24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	1e2b      	subs	r3, r5, #0
 8008a2e:	bfb9      	ittee	lt
 8008a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a34:	9305      	strlt	r3, [sp, #20]
 8008a36:	2300      	movge	r3, #0
 8008a38:	6033      	strge	r3, [r6, #0]
 8008a3a:	9f05      	ldr	r7, [sp, #20]
 8008a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8008ca8 <_dtoa_r+0x2d8>)
 8008a3e:	bfbc      	itt	lt
 8008a40:	2201      	movlt	r2, #1
 8008a42:	6032      	strlt	r2, [r6, #0]
 8008a44:	43bb      	bics	r3, r7
 8008a46:	d112      	bne.n	8008a6e <_dtoa_r+0x9e>
 8008a48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a54:	4323      	orrs	r3, r4
 8008a56:	f000 855a 	beq.w	800950e <_dtoa_r+0xb3e>
 8008a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008cbc <_dtoa_r+0x2ec>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 855c 	beq.w	800951e <_dtoa_r+0xb4e>
 8008a66:	f10a 0303 	add.w	r3, sl, #3
 8008a6a:	f000 bd56 	b.w	800951a <_dtoa_r+0xb4a>
 8008a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a72:	2200      	movs	r2, #0
 8008a74:	ec51 0b17 	vmov	r0, r1, d7
 8008a78:	2300      	movs	r3, #0
 8008a7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008a7e:	f7f8 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a82:	4680      	mov	r8, r0
 8008a84:	b158      	cbz	r0, 8008a9e <_dtoa_r+0xce>
 8008a86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a88:	2301      	movs	r3, #1
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a8e:	b113      	cbz	r3, 8008a96 <_dtoa_r+0xc6>
 8008a90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a92:	4b86      	ldr	r3, [pc, #536]	@ (8008cac <_dtoa_r+0x2dc>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008cc0 <_dtoa_r+0x2f0>
 8008a9a:	f000 bd40 	b.w	800951e <_dtoa_r+0xb4e>
 8008a9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008aa2:	aa14      	add	r2, sp, #80	@ 0x50
 8008aa4:	a915      	add	r1, sp, #84	@ 0x54
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f001 fa3e 	bl	8009f28 <__d2b>
 8008aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ab0:	9002      	str	r0, [sp, #8]
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	d078      	beq.n	8008ba8 <_dtoa_r+0x1d8>
 8008ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b76      	ldr	r3, [pc, #472]	@ (8008cb0 <_dtoa_r+0x2e0>)
 8008ad6:	f7f7 fbd7 	bl	8000288 <__aeabi_dsub>
 8008ada:	a36b      	add	r3, pc, #428	@ (adr r3, 8008c88 <_dtoa_r+0x2b8>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fd8a 	bl	80005f8 <__aeabi_dmul>
 8008ae4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008c90 <_dtoa_r+0x2c0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fbcf 	bl	800028c <__adddf3>
 8008aee:	4604      	mov	r4, r0
 8008af0:	4630      	mov	r0, r6
 8008af2:	460d      	mov	r5, r1
 8008af4:	f7f7 fd16 	bl	8000524 <__aeabi_i2d>
 8008af8:	a367      	add	r3, pc, #412	@ (adr r3, 8008c98 <_dtoa_r+0x2c8>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fd7b 	bl	80005f8 <__aeabi_dmul>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fbbf 	bl	800028c <__adddf3>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	460d      	mov	r5, r1
 8008b12:	f7f8 f821 	bl	8000b58 <__aeabi_d2iz>
 8008b16:	2200      	movs	r2, #0
 8008b18:	4607      	mov	r7, r0
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8008b24:	b140      	cbz	r0, 8008b38 <_dtoa_r+0x168>
 8008b26:	4638      	mov	r0, r7
 8008b28:	f7f7 fcfc 	bl	8000524 <__aeabi_i2d>
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	462b      	mov	r3, r5
 8008b30:	f7f7 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b34:	b900      	cbnz	r0, 8008b38 <_dtoa_r+0x168>
 8008b36:	3f01      	subs	r7, #1
 8008b38:	2f16      	cmp	r7, #22
 8008b3a:	d852      	bhi.n	8008be2 <_dtoa_r+0x212>
 8008b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8008cb4 <_dtoa_r+0x2e4>)
 8008b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b4a:	f7f7 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d049      	beq.n	8008be6 <_dtoa_r+0x216>
 8008b52:	3f01      	subs	r7, #1
 8008b54:	2300      	movs	r3, #0
 8008b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b5a:	1b9b      	subs	r3, r3, r6
 8008b5c:	1e5a      	subs	r2, r3, #1
 8008b5e:	bf45      	ittet	mi
 8008b60:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b64:	9300      	strmi	r3, [sp, #0]
 8008b66:	2300      	movpl	r3, #0
 8008b68:	2300      	movmi	r3, #0
 8008b6a:	9206      	str	r2, [sp, #24]
 8008b6c:	bf54      	ite	pl
 8008b6e:	9300      	strpl	r3, [sp, #0]
 8008b70:	9306      	strmi	r3, [sp, #24]
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	db39      	blt.n	8008bea <_dtoa_r+0x21a>
 8008b76:	9b06      	ldr	r3, [sp, #24]
 8008b78:	970d      	str	r7, [sp, #52]	@ 0x34
 8008b7a:	443b      	add	r3, r7
 8008b7c:	9306      	str	r3, [sp, #24]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	9b07      	ldr	r3, [sp, #28]
 8008b84:	2b09      	cmp	r3, #9
 8008b86:	d863      	bhi.n	8008c50 <_dtoa_r+0x280>
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	bfc4      	itt	gt
 8008b8c:	3b04      	subgt	r3, #4
 8008b8e:	9307      	strgt	r3, [sp, #28]
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	f1a3 0302 	sub.w	r3, r3, #2
 8008b96:	bfcc      	ite	gt
 8008b98:	2400      	movgt	r4, #0
 8008b9a:	2401      	movle	r4, #1
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d863      	bhi.n	8008c68 <_dtoa_r+0x298>
 8008ba0:	e8df f003 	tbb	[pc, r3]
 8008ba4:	2b375452 	.word	0x2b375452
 8008ba8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008bac:	441e      	add	r6, r3
 8008bae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	bfc1      	itttt	gt
 8008bb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008bba:	409f      	lslgt	r7, r3
 8008bbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008bc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008bc4:	bfd6      	itet	le
 8008bc6:	f1c3 0320 	rsble	r3, r3, #32
 8008bca:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bce:	fa04 f003 	lslle.w	r0, r4, r3
 8008bd2:	f7f7 fc97 	bl	8000504 <__aeabi_ui2d>
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bdc:	3e01      	subs	r6, #1
 8008bde:	9212      	str	r2, [sp, #72]	@ 0x48
 8008be0:	e776      	b.n	8008ad0 <_dtoa_r+0x100>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e7b7      	b.n	8008b56 <_dtoa_r+0x186>
 8008be6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008be8:	e7b6      	b.n	8008b58 <_dtoa_r+0x188>
 8008bea:	9b00      	ldr	r3, [sp, #0]
 8008bec:	1bdb      	subs	r3, r3, r7
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	427b      	negs	r3, r7
 8008bf2:	9308      	str	r3, [sp, #32]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bf8:	e7c3      	b.n	8008b82 <_dtoa_r+0x1b2>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c00:	eb07 0b03 	add.w	fp, r7, r3
 8008c04:	f10b 0301 	add.w	r3, fp, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	9303      	str	r3, [sp, #12]
 8008c0c:	bfb8      	it	lt
 8008c0e:	2301      	movlt	r3, #1
 8008c10:	e006      	b.n	8008c20 <_dtoa_r+0x250>
 8008c12:	2301      	movs	r3, #1
 8008c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dd28      	ble.n	8008c6e <_dtoa_r+0x29e>
 8008c1c:	469b      	mov	fp, r3
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008c24:	2100      	movs	r1, #0
 8008c26:	2204      	movs	r2, #4
 8008c28:	f102 0514 	add.w	r5, r2, #20
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	d926      	bls.n	8008c7e <_dtoa_r+0x2ae>
 8008c30:	6041      	str	r1, [r0, #4]
 8008c32:	4648      	mov	r0, r9
 8008c34:	f000 fd9c 	bl	8009770 <_Balloc>
 8008c38:	4682      	mov	sl, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d142      	bne.n	8008cc4 <_dtoa_r+0x2f4>
 8008c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb8 <_dtoa_r+0x2e8>)
 8008c40:	4602      	mov	r2, r0
 8008c42:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c46:	e6da      	b.n	80089fe <_dtoa_r+0x2e>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e7e3      	b.n	8008c14 <_dtoa_r+0x244>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7d5      	b.n	8008bfc <_dtoa_r+0x22c>
 8008c50:	2401      	movs	r4, #1
 8008c52:	2300      	movs	r3, #0
 8008c54:	9307      	str	r3, [sp, #28]
 8008c56:	9409      	str	r4, [sp, #36]	@ 0x24
 8008c58:	f04f 3bff 	mov.w	fp, #4294967295
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c62:	2312      	movs	r3, #18
 8008c64:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c66:	e7db      	b.n	8008c20 <_dtoa_r+0x250>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6c:	e7f4      	b.n	8008c58 <_dtoa_r+0x288>
 8008c6e:	f04f 0b01 	mov.w	fp, #1
 8008c72:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c76:	465b      	mov	r3, fp
 8008c78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008c7c:	e7d0      	b.n	8008c20 <_dtoa_r+0x250>
 8008c7e:	3101      	adds	r1, #1
 8008c80:	0052      	lsls	r2, r2, #1
 8008c82:	e7d1      	b.n	8008c28 <_dtoa_r+0x258>
 8008c84:	f3af 8000 	nop.w
 8008c88:	636f4361 	.word	0x636f4361
 8008c8c:	3fd287a7 	.word	0x3fd287a7
 8008c90:	8b60c8b3 	.word	0x8b60c8b3
 8008c94:	3fc68a28 	.word	0x3fc68a28
 8008c98:	509f79fb 	.word	0x509f79fb
 8008c9c:	3fd34413 	.word	0x3fd34413
 8008ca0:	0800c00e 	.word	0x0800c00e
 8008ca4:	0800c025 	.word	0x0800c025
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	0800bfd9 	.word	0x0800bfd9
 8008cb0:	3ff80000 	.word	0x3ff80000
 8008cb4:	0800c1d8 	.word	0x0800c1d8
 8008cb8:	0800c07d 	.word	0x0800c07d
 8008cbc:	0800c00a 	.word	0x0800c00a
 8008cc0:	0800bfd8 	.word	0x0800bfd8
 8008cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008cc8:	6018      	str	r0, [r3, #0]
 8008cca:	9b03      	ldr	r3, [sp, #12]
 8008ccc:	2b0e      	cmp	r3, #14
 8008cce:	f200 80a1 	bhi.w	8008e14 <_dtoa_r+0x444>
 8008cd2:	2c00      	cmp	r4, #0
 8008cd4:	f000 809e 	beq.w	8008e14 <_dtoa_r+0x444>
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	dd33      	ble.n	8008d44 <_dtoa_r+0x374>
 8008cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8008f50 <_dtoa_r+0x580>)
 8008cde:	f007 020f 	and.w	r2, r7, #15
 8008ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce6:	ed93 7b00 	vldr	d7, [r3]
 8008cea:	05f8      	lsls	r0, r7, #23
 8008cec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cf4:	d516      	bpl.n	8008d24 <_dtoa_r+0x354>
 8008cf6:	4b97      	ldr	r3, [pc, #604]	@ (8008f54 <_dtoa_r+0x584>)
 8008cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d00:	f7f7 fda4 	bl	800084c <__aeabi_ddiv>
 8008d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d08:	f004 040f 	and.w	r4, r4, #15
 8008d0c:	2603      	movs	r6, #3
 8008d0e:	4d91      	ldr	r5, [pc, #580]	@ (8008f54 <_dtoa_r+0x584>)
 8008d10:	b954      	cbnz	r4, 8008d28 <_dtoa_r+0x358>
 8008d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d1a:	f7f7 fd97 	bl	800084c <__aeabi_ddiv>
 8008d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d22:	e028      	b.n	8008d76 <_dtoa_r+0x3a6>
 8008d24:	2602      	movs	r6, #2
 8008d26:	e7f2      	b.n	8008d0e <_dtoa_r+0x33e>
 8008d28:	07e1      	lsls	r1, r4, #31
 8008d2a:	d508      	bpl.n	8008d3e <_dtoa_r+0x36e>
 8008d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d3c:	3601      	adds	r6, #1
 8008d3e:	1064      	asrs	r4, r4, #1
 8008d40:	3508      	adds	r5, #8
 8008d42:	e7e5      	b.n	8008d10 <_dtoa_r+0x340>
 8008d44:	f000 80af 	beq.w	8008ea6 <_dtoa_r+0x4d6>
 8008d48:	427c      	negs	r4, r7
 8008d4a:	4b81      	ldr	r3, [pc, #516]	@ (8008f50 <_dtoa_r+0x580>)
 8008d4c:	4d81      	ldr	r5, [pc, #516]	@ (8008f54 <_dtoa_r+0x584>)
 8008d4e:	f004 020f 	and.w	r2, r4, #15
 8008d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d5e:	f7f7 fc4b 	bl	80005f8 <__aeabi_dmul>
 8008d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d66:	1124      	asrs	r4, r4, #4
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2602      	movs	r6, #2
 8008d6c:	2c00      	cmp	r4, #0
 8008d6e:	f040 808f 	bne.w	8008e90 <_dtoa_r+0x4c0>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1d3      	bne.n	8008d1e <_dtoa_r+0x34e>
 8008d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8094 	beq.w	8008eaa <_dtoa_r+0x4da>
 8008d82:	4b75      	ldr	r3, [pc, #468]	@ (8008f58 <_dtoa_r+0x588>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fea7 	bl	8000adc <__aeabi_dcmplt>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f000 808b 	beq.w	8008eaa <_dtoa_r+0x4da>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 8087 	beq.w	8008eaa <_dtoa_r+0x4da>
 8008d9c:	f1bb 0f00 	cmp.w	fp, #0
 8008da0:	dd34      	ble.n	8008e0c <_dtoa_r+0x43c>
 8008da2:	4620      	mov	r0, r4
 8008da4:	4b6d      	ldr	r3, [pc, #436]	@ (8008f5c <_dtoa_r+0x58c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f7 fc25 	bl	80005f8 <__aeabi_dmul>
 8008dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db2:	f107 38ff 	add.w	r8, r7, #4294967295
 8008db6:	3601      	adds	r6, #1
 8008db8:	465c      	mov	r4, fp
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7f7 fbb2 	bl	8000524 <__aeabi_i2d>
 8008dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dc4:	f7f7 fc18 	bl	80005f8 <__aeabi_dmul>
 8008dc8:	4b65      	ldr	r3, [pc, #404]	@ (8008f60 <_dtoa_r+0x590>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fa5e 	bl	800028c <__adddf3>
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d16a      	bne.n	8008eb0 <_dtoa_r+0x4e0>
 8008dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dde:	4b61      	ldr	r3, [pc, #388]	@ (8008f64 <_dtoa_r+0x594>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	f7f7 fa51 	bl	8000288 <__aeabi_dsub>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4633      	mov	r3, r6
 8008df2:	f7f7 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8298 	bne.w	800932c <_dtoa_r+0x95c>
 8008dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e00:	462a      	mov	r2, r5
 8008e02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e06:	f7f7 fe69 	bl	8000adc <__aeabi_dcmplt>
 8008e0a:	bb38      	cbnz	r0, 8008e5c <_dtoa_r+0x48c>
 8008e0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f2c0 8157 	blt.w	80090ca <_dtoa_r+0x6fa>
 8008e1c:	2f0e      	cmp	r7, #14
 8008e1e:	f300 8154 	bgt.w	80090ca <_dtoa_r+0x6fa>
 8008e22:	4b4b      	ldr	r3, [pc, #300]	@ (8008f50 <_dtoa_r+0x580>)
 8008e24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e28:	ed93 7b00 	vldr	d7, [r3]
 8008e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	ed8d 7b00 	vstr	d7, [sp]
 8008e34:	f280 80e5 	bge.w	8009002 <_dtoa_r+0x632>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f300 80e1 	bgt.w	8009002 <_dtoa_r+0x632>
 8008e40:	d10c      	bne.n	8008e5c <_dtoa_r+0x48c>
 8008e42:	4b48      	ldr	r3, [pc, #288]	@ (8008f64 <_dtoa_r+0x594>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	ec51 0b17 	vmov	r0, r1, d7
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e52:	f7f7 fe57 	bl	8000b04 <__aeabi_dcmpge>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f000 8266 	beq.w	8009328 <_dtoa_r+0x958>
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	4625      	mov	r5, r4
 8008e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e62:	4656      	mov	r6, sl
 8008e64:	ea6f 0803 	mvn.w	r8, r3
 8008e68:	2700      	movs	r7, #0
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4648      	mov	r0, r9
 8008e6e:	f000 fcbf 	bl	80097f0 <_Bfree>
 8008e72:	2d00      	cmp	r5, #0
 8008e74:	f000 80bd 	beq.w	8008ff2 <_dtoa_r+0x622>
 8008e78:	b12f      	cbz	r7, 8008e86 <_dtoa_r+0x4b6>
 8008e7a:	42af      	cmp	r7, r5
 8008e7c:	d003      	beq.n	8008e86 <_dtoa_r+0x4b6>
 8008e7e:	4639      	mov	r1, r7
 8008e80:	4648      	mov	r0, r9
 8008e82:	f000 fcb5 	bl	80097f0 <_Bfree>
 8008e86:	4629      	mov	r1, r5
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f000 fcb1 	bl	80097f0 <_Bfree>
 8008e8e:	e0b0      	b.n	8008ff2 <_dtoa_r+0x622>
 8008e90:	07e2      	lsls	r2, r4, #31
 8008e92:	d505      	bpl.n	8008ea0 <_dtoa_r+0x4d0>
 8008e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e98:	f7f7 fbae 	bl	80005f8 <__aeabi_dmul>
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	1064      	asrs	r4, r4, #1
 8008ea2:	3508      	adds	r5, #8
 8008ea4:	e762      	b.n	8008d6c <_dtoa_r+0x39c>
 8008ea6:	2602      	movs	r6, #2
 8008ea8:	e765      	b.n	8008d76 <_dtoa_r+0x3a6>
 8008eaa:	9c03      	ldr	r4, [sp, #12]
 8008eac:	46b8      	mov	r8, r7
 8008eae:	e784      	b.n	8008dba <_dtoa_r+0x3ea>
 8008eb0:	4b27      	ldr	r3, [pc, #156]	@ (8008f50 <_dtoa_r+0x580>)
 8008eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ebc:	4454      	add	r4, sl
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d054      	beq.n	8008f6c <_dtoa_r+0x59c>
 8008ec2:	4929      	ldr	r1, [pc, #164]	@ (8008f68 <_dtoa_r+0x598>)
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7f7 fcc1 	bl	800084c <__aeabi_ddiv>
 8008eca:	4633      	mov	r3, r6
 8008ecc:	462a      	mov	r2, r5
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ed6:	4656      	mov	r6, sl
 8008ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008edc:	f7f7 fe3c 	bl	8000b58 <__aeabi_d2iz>
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	f7f7 fb1f 	bl	8000524 <__aeabi_i2d>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eee:	f7f7 f9cb 	bl	8000288 <__aeabi_dsub>
 8008ef2:	3530      	adds	r5, #48	@ 0x30
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008efc:	f806 5b01 	strb.w	r5, [r6], #1
 8008f00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f04:	f7f7 fdea 	bl	8000adc <__aeabi_dcmplt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d172      	bne.n	8008ff2 <_dtoa_r+0x622>
 8008f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f10:	4911      	ldr	r1, [pc, #68]	@ (8008f58 <_dtoa_r+0x588>)
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7f7 f9b8 	bl	8000288 <__aeabi_dsub>
 8008f18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f1c:	f7f7 fdde 	bl	8000adc <__aeabi_dcmplt>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f040 80b4 	bne.w	800908e <_dtoa_r+0x6be>
 8008f26:	42a6      	cmp	r6, r4
 8008f28:	f43f af70 	beq.w	8008e0c <_dtoa_r+0x43c>
 8008f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <_dtoa_r+0x58c>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	4b08      	ldr	r3, [pc, #32]	@ (8008f5c <_dtoa_r+0x58c>)
 8008f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f3e:	2200      	movs	r2, #0
 8008f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f44:	f7f7 fb58 	bl	80005f8 <__aeabi_dmul>
 8008f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f4c:	e7c4      	b.n	8008ed8 <_dtoa_r+0x508>
 8008f4e:	bf00      	nop
 8008f50:	0800c1d8 	.word	0x0800c1d8
 8008f54:	0800c1b0 	.word	0x0800c1b0
 8008f58:	3ff00000 	.word	0x3ff00000
 8008f5c:	40240000 	.word	0x40240000
 8008f60:	401c0000 	.word	0x401c0000
 8008f64:	40140000 	.word	0x40140000
 8008f68:	3fe00000 	.word	0x3fe00000
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f7a:	4656      	mov	r6, sl
 8008f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f80:	f7f7 fdea 	bl	8000b58 <__aeabi_d2iz>
 8008f84:	4605      	mov	r5, r0
 8008f86:	f7f7 facd 	bl	8000524 <__aeabi_i2d>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f92:	f7f7 f979 	bl	8000288 <__aeabi_dsub>
 8008f96:	3530      	adds	r5, #48	@ 0x30
 8008f98:	f806 5b01 	strb.w	r5, [r6], #1
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	42a6      	cmp	r6, r4
 8008fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fa6:	f04f 0200 	mov.w	r2, #0
 8008faa:	d124      	bne.n	8008ff6 <_dtoa_r+0x626>
 8008fac:	4baf      	ldr	r3, [pc, #700]	@ (800926c <_dtoa_r+0x89c>)
 8008fae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008fb2:	f7f7 f96b 	bl	800028c <__adddf3>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fbe:	f7f7 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d163      	bne.n	800908e <_dtoa_r+0x6be>
 8008fc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fca:	49a8      	ldr	r1, [pc, #672]	@ (800926c <_dtoa_r+0x89c>)
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f7f7 f95b 	bl	8000288 <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fda:	f7f7 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f43f af14 	beq.w	8008e0c <_dtoa_r+0x43c>
 8008fe4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008fe6:	1e73      	subs	r3, r6, #1
 8008fe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fee:	2b30      	cmp	r3, #48	@ 0x30
 8008ff0:	d0f8      	beq.n	8008fe4 <_dtoa_r+0x614>
 8008ff2:	4647      	mov	r7, r8
 8008ff4:	e03b      	b.n	800906e <_dtoa_r+0x69e>
 8008ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8009270 <_dtoa_r+0x8a0>)
 8008ff8:	f7f7 fafe 	bl	80005f8 <__aeabi_dmul>
 8008ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009000:	e7bc      	b.n	8008f7c <_dtoa_r+0x5ac>
 8009002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009006:	4656      	mov	r6, sl
 8009008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800900c:	4620      	mov	r0, r4
 800900e:	4629      	mov	r1, r5
 8009010:	f7f7 fc1c 	bl	800084c <__aeabi_ddiv>
 8009014:	f7f7 fda0 	bl	8000b58 <__aeabi_d2iz>
 8009018:	4680      	mov	r8, r0
 800901a:	f7f7 fa83 	bl	8000524 <__aeabi_i2d>
 800901e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009022:	f7f7 fae9 	bl	80005f8 <__aeabi_dmul>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4620      	mov	r0, r4
 800902c:	4629      	mov	r1, r5
 800902e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009032:	f7f7 f929 	bl	8000288 <__aeabi_dsub>
 8009036:	f806 4b01 	strb.w	r4, [r6], #1
 800903a:	9d03      	ldr	r5, [sp, #12]
 800903c:	eba6 040a 	sub.w	r4, r6, sl
 8009040:	42a5      	cmp	r5, r4
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	d133      	bne.n	80090b0 <_dtoa_r+0x6e0>
 8009048:	f7f7 f920 	bl	800028c <__adddf3>
 800904c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009050:	4604      	mov	r4, r0
 8009052:	460d      	mov	r5, r1
 8009054:	f7f7 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8009058:	b9c0      	cbnz	r0, 800908c <_dtoa_r+0x6bc>
 800905a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800905e:	4620      	mov	r0, r4
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009066:	b110      	cbz	r0, 800906e <_dtoa_r+0x69e>
 8009068:	f018 0f01 	tst.w	r8, #1
 800906c:	d10e      	bne.n	800908c <_dtoa_r+0x6bc>
 800906e:	9902      	ldr	r1, [sp, #8]
 8009070:	4648      	mov	r0, r9
 8009072:	f000 fbbd 	bl	80097f0 <_Bfree>
 8009076:	2300      	movs	r3, #0
 8009078:	7033      	strb	r3, [r6, #0]
 800907a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800907c:	3701      	adds	r7, #1
 800907e:	601f      	str	r7, [r3, #0]
 8009080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 824b 	beq.w	800951e <_dtoa_r+0xb4e>
 8009088:	601e      	str	r6, [r3, #0]
 800908a:	e248      	b.n	800951e <_dtoa_r+0xb4e>
 800908c:	46b8      	mov	r8, r7
 800908e:	4633      	mov	r3, r6
 8009090:	461e      	mov	r6, r3
 8009092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009096:	2a39      	cmp	r2, #57	@ 0x39
 8009098:	d106      	bne.n	80090a8 <_dtoa_r+0x6d8>
 800909a:	459a      	cmp	sl, r3
 800909c:	d1f8      	bne.n	8009090 <_dtoa_r+0x6c0>
 800909e:	2230      	movs	r2, #48	@ 0x30
 80090a0:	f108 0801 	add.w	r8, r8, #1
 80090a4:	f88a 2000 	strb.w	r2, [sl]
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	3201      	adds	r2, #1
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	e7a0      	b.n	8008ff2 <_dtoa_r+0x622>
 80090b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009270 <_dtoa_r+0x8a0>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	f7f7 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d09f      	beq.n	8009008 <_dtoa_r+0x638>
 80090c8:	e7d1      	b.n	800906e <_dtoa_r+0x69e>
 80090ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	f000 80ea 	beq.w	80092a6 <_dtoa_r+0x8d6>
 80090d2:	9a07      	ldr	r2, [sp, #28]
 80090d4:	2a01      	cmp	r2, #1
 80090d6:	f300 80cd 	bgt.w	8009274 <_dtoa_r+0x8a4>
 80090da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 80c1 	beq.w	8009264 <_dtoa_r+0x894>
 80090e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090e6:	9c08      	ldr	r4, [sp, #32]
 80090e8:	9e00      	ldr	r6, [sp, #0]
 80090ea:	9a00      	ldr	r2, [sp, #0]
 80090ec:	441a      	add	r2, r3
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	2101      	movs	r1, #1
 80090f4:	441a      	add	r2, r3
 80090f6:	4648      	mov	r0, r9
 80090f8:	9206      	str	r2, [sp, #24]
 80090fa:	f000 fc77 	bl	80099ec <__i2b>
 80090fe:	4605      	mov	r5, r0
 8009100:	b166      	cbz	r6, 800911c <_dtoa_r+0x74c>
 8009102:	9b06      	ldr	r3, [sp, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	dd09      	ble.n	800911c <_dtoa_r+0x74c>
 8009108:	42b3      	cmp	r3, r6
 800910a:	9a00      	ldr	r2, [sp, #0]
 800910c:	bfa8      	it	ge
 800910e:	4633      	movge	r3, r6
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	9200      	str	r2, [sp, #0]
 8009114:	9a06      	ldr	r2, [sp, #24]
 8009116:	1af6      	subs	r6, r6, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	b30b      	cbz	r3, 8009164 <_dtoa_r+0x794>
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80c6 	beq.w	80092b4 <_dtoa_r+0x8e4>
 8009128:	2c00      	cmp	r4, #0
 800912a:	f000 80c0 	beq.w	80092ae <_dtoa_r+0x8de>
 800912e:	4629      	mov	r1, r5
 8009130:	4622      	mov	r2, r4
 8009132:	4648      	mov	r0, r9
 8009134:	f000 fd12 	bl	8009b5c <__pow5mult>
 8009138:	9a02      	ldr	r2, [sp, #8]
 800913a:	4601      	mov	r1, r0
 800913c:	4605      	mov	r5, r0
 800913e:	4648      	mov	r0, r9
 8009140:	f000 fc6a 	bl	8009a18 <__multiply>
 8009144:	9902      	ldr	r1, [sp, #8]
 8009146:	4680      	mov	r8, r0
 8009148:	4648      	mov	r0, r9
 800914a:	f000 fb51 	bl	80097f0 <_Bfree>
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	1b1b      	subs	r3, r3, r4
 8009152:	9308      	str	r3, [sp, #32]
 8009154:	f000 80b1 	beq.w	80092ba <_dtoa_r+0x8ea>
 8009158:	9a08      	ldr	r2, [sp, #32]
 800915a:	4641      	mov	r1, r8
 800915c:	4648      	mov	r0, r9
 800915e:	f000 fcfd 	bl	8009b5c <__pow5mult>
 8009162:	9002      	str	r0, [sp, #8]
 8009164:	2101      	movs	r1, #1
 8009166:	4648      	mov	r0, r9
 8009168:	f000 fc40 	bl	80099ec <__i2b>
 800916c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800916e:	4604      	mov	r4, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 81d8 	beq.w	8009526 <_dtoa_r+0xb56>
 8009176:	461a      	mov	r2, r3
 8009178:	4601      	mov	r1, r0
 800917a:	4648      	mov	r0, r9
 800917c:	f000 fcee 	bl	8009b5c <__pow5mult>
 8009180:	9b07      	ldr	r3, [sp, #28]
 8009182:	2b01      	cmp	r3, #1
 8009184:	4604      	mov	r4, r0
 8009186:	f300 809f 	bgt.w	80092c8 <_dtoa_r+0x8f8>
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8097 	bne.w	80092c0 <_dtoa_r+0x8f0>
 8009192:	9b05      	ldr	r3, [sp, #20]
 8009194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009198:	2b00      	cmp	r3, #0
 800919a:	f040 8093 	bne.w	80092c4 <_dtoa_r+0x8f4>
 800919e:	9b05      	ldr	r3, [sp, #20]
 80091a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091a4:	0d1b      	lsrs	r3, r3, #20
 80091a6:	051b      	lsls	r3, r3, #20
 80091a8:	b133      	cbz	r3, 80091b8 <_dtoa_r+0x7e8>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	3301      	adds	r3, #1
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	2301      	movs	r3, #1
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 81b8 	beq.w	8009532 <_dtoa_r+0xb62>
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091c8:	6918      	ldr	r0, [r3, #16]
 80091ca:	f000 fbc3 	bl	8009954 <__hi0bits>
 80091ce:	f1c0 0020 	rsb	r0, r0, #32
 80091d2:	9b06      	ldr	r3, [sp, #24]
 80091d4:	4418      	add	r0, r3
 80091d6:	f010 001f 	ands.w	r0, r0, #31
 80091da:	f000 8082 	beq.w	80092e2 <_dtoa_r+0x912>
 80091de:	f1c0 0320 	rsb	r3, r0, #32
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	dd73      	ble.n	80092ce <_dtoa_r+0x8fe>
 80091e6:	9b00      	ldr	r3, [sp, #0]
 80091e8:	f1c0 001c 	rsb	r0, r0, #28
 80091ec:	4403      	add	r3, r0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	9b06      	ldr	r3, [sp, #24]
 80091f2:	4403      	add	r3, r0
 80091f4:	4406      	add	r6, r0
 80091f6:	9306      	str	r3, [sp, #24]
 80091f8:	9b00      	ldr	r3, [sp, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dd05      	ble.n	800920a <_dtoa_r+0x83a>
 80091fe:	9902      	ldr	r1, [sp, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	4648      	mov	r0, r9
 8009204:	f000 fd04 	bl	8009c10 <__lshift>
 8009208:	9002      	str	r0, [sp, #8]
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd05      	ble.n	800921c <_dtoa_r+0x84c>
 8009210:	4621      	mov	r1, r4
 8009212:	461a      	mov	r2, r3
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fcfb 	bl	8009c10 <__lshift>
 800921a:	4604      	mov	r4, r0
 800921c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	d061      	beq.n	80092e6 <_dtoa_r+0x916>
 8009222:	9802      	ldr	r0, [sp, #8]
 8009224:	4621      	mov	r1, r4
 8009226:	f000 fd5f 	bl	8009ce8 <__mcmp>
 800922a:	2800      	cmp	r0, #0
 800922c:	da5b      	bge.n	80092e6 <_dtoa_r+0x916>
 800922e:	2300      	movs	r3, #0
 8009230:	9902      	ldr	r1, [sp, #8]
 8009232:	220a      	movs	r2, #10
 8009234:	4648      	mov	r0, r9
 8009236:	f000 fafd 	bl	8009834 <__multadd>
 800923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923c:	9002      	str	r0, [sp, #8]
 800923e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8177 	beq.w	8009536 <_dtoa_r+0xb66>
 8009248:	4629      	mov	r1, r5
 800924a:	2300      	movs	r3, #0
 800924c:	220a      	movs	r2, #10
 800924e:	4648      	mov	r0, r9
 8009250:	f000 faf0 	bl	8009834 <__multadd>
 8009254:	f1bb 0f00 	cmp.w	fp, #0
 8009258:	4605      	mov	r5, r0
 800925a:	dc6f      	bgt.n	800933c <_dtoa_r+0x96c>
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	2b02      	cmp	r3, #2
 8009260:	dc49      	bgt.n	80092f6 <_dtoa_r+0x926>
 8009262:	e06b      	b.n	800933c <_dtoa_r+0x96c>
 8009264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800926a:	e73c      	b.n	80090e6 <_dtoa_r+0x716>
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	40240000 	.word	0x40240000
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1e5c      	subs	r4, r3, #1
 8009278:	9b08      	ldr	r3, [sp, #32]
 800927a:	42a3      	cmp	r3, r4
 800927c:	db09      	blt.n	8009292 <_dtoa_r+0x8c2>
 800927e:	1b1c      	subs	r4, r3, r4
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f6bf af30 	bge.w	80090e8 <_dtoa_r+0x718>
 8009288:	9b00      	ldr	r3, [sp, #0]
 800928a:	9a03      	ldr	r2, [sp, #12]
 800928c:	1a9e      	subs	r6, r3, r2
 800928e:	2300      	movs	r3, #0
 8009290:	e72b      	b.n	80090ea <_dtoa_r+0x71a>
 8009292:	9b08      	ldr	r3, [sp, #32]
 8009294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009296:	9408      	str	r4, [sp, #32]
 8009298:	1ae3      	subs	r3, r4, r3
 800929a:	441a      	add	r2, r3
 800929c:	9e00      	ldr	r6, [sp, #0]
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80092a2:	2400      	movs	r4, #0
 80092a4:	e721      	b.n	80090ea <_dtoa_r+0x71a>
 80092a6:	9c08      	ldr	r4, [sp, #32]
 80092a8:	9e00      	ldr	r6, [sp, #0]
 80092aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80092ac:	e728      	b.n	8009100 <_dtoa_r+0x730>
 80092ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80092b2:	e751      	b.n	8009158 <_dtoa_r+0x788>
 80092b4:	9a08      	ldr	r2, [sp, #32]
 80092b6:	9902      	ldr	r1, [sp, #8]
 80092b8:	e750      	b.n	800915c <_dtoa_r+0x78c>
 80092ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80092be:	e751      	b.n	8009164 <_dtoa_r+0x794>
 80092c0:	2300      	movs	r3, #0
 80092c2:	e779      	b.n	80091b8 <_dtoa_r+0x7e8>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	e777      	b.n	80091b8 <_dtoa_r+0x7e8>
 80092c8:	2300      	movs	r3, #0
 80092ca:	9308      	str	r3, [sp, #32]
 80092cc:	e779      	b.n	80091c2 <_dtoa_r+0x7f2>
 80092ce:	d093      	beq.n	80091f8 <_dtoa_r+0x828>
 80092d0:	9a00      	ldr	r2, [sp, #0]
 80092d2:	331c      	adds	r3, #28
 80092d4:	441a      	add	r2, r3
 80092d6:	9200      	str	r2, [sp, #0]
 80092d8:	9a06      	ldr	r2, [sp, #24]
 80092da:	441a      	add	r2, r3
 80092dc:	441e      	add	r6, r3
 80092de:	9206      	str	r2, [sp, #24]
 80092e0:	e78a      	b.n	80091f8 <_dtoa_r+0x828>
 80092e2:	4603      	mov	r3, r0
 80092e4:	e7f4      	b.n	80092d0 <_dtoa_r+0x900>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	46b8      	mov	r8, r7
 80092ec:	dc20      	bgt.n	8009330 <_dtoa_r+0x960>
 80092ee:	469b      	mov	fp, r3
 80092f0:	9b07      	ldr	r3, [sp, #28]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	dd1e      	ble.n	8009334 <_dtoa_r+0x964>
 80092f6:	f1bb 0f00 	cmp.w	fp, #0
 80092fa:	f47f adb1 	bne.w	8008e60 <_dtoa_r+0x490>
 80092fe:	4621      	mov	r1, r4
 8009300:	465b      	mov	r3, fp
 8009302:	2205      	movs	r2, #5
 8009304:	4648      	mov	r0, r9
 8009306:	f000 fa95 	bl	8009834 <__multadd>
 800930a:	4601      	mov	r1, r0
 800930c:	4604      	mov	r4, r0
 800930e:	9802      	ldr	r0, [sp, #8]
 8009310:	f000 fcea 	bl	8009ce8 <__mcmp>
 8009314:	2800      	cmp	r0, #0
 8009316:	f77f ada3 	ble.w	8008e60 <_dtoa_r+0x490>
 800931a:	4656      	mov	r6, sl
 800931c:	2331      	movs	r3, #49	@ 0x31
 800931e:	f806 3b01 	strb.w	r3, [r6], #1
 8009322:	f108 0801 	add.w	r8, r8, #1
 8009326:	e59f      	b.n	8008e68 <_dtoa_r+0x498>
 8009328:	9c03      	ldr	r4, [sp, #12]
 800932a:	46b8      	mov	r8, r7
 800932c:	4625      	mov	r5, r4
 800932e:	e7f4      	b.n	800931a <_dtoa_r+0x94a>
 8009330:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 8101 	beq.w	800953e <_dtoa_r+0xb6e>
 800933c:	2e00      	cmp	r6, #0
 800933e:	dd05      	ble.n	800934c <_dtoa_r+0x97c>
 8009340:	4629      	mov	r1, r5
 8009342:	4632      	mov	r2, r6
 8009344:	4648      	mov	r0, r9
 8009346:	f000 fc63 	bl	8009c10 <__lshift>
 800934a:	4605      	mov	r5, r0
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d05c      	beq.n	800940c <_dtoa_r+0xa3c>
 8009352:	6869      	ldr	r1, [r5, #4]
 8009354:	4648      	mov	r0, r9
 8009356:	f000 fa0b 	bl	8009770 <_Balloc>
 800935a:	4606      	mov	r6, r0
 800935c:	b928      	cbnz	r0, 800936a <_dtoa_r+0x99a>
 800935e:	4b82      	ldr	r3, [pc, #520]	@ (8009568 <_dtoa_r+0xb98>)
 8009360:	4602      	mov	r2, r0
 8009362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009366:	f7ff bb4a 	b.w	80089fe <_dtoa_r+0x2e>
 800936a:	692a      	ldr	r2, [r5, #16]
 800936c:	3202      	adds	r2, #2
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	f105 010c 	add.w	r1, r5, #12
 8009374:	300c      	adds	r0, #12
 8009376:	f001 ff69 	bl	800b24c <memcpy>
 800937a:	2201      	movs	r2, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4648      	mov	r0, r9
 8009380:	f000 fc46 	bl	8009c10 <__lshift>
 8009384:	f10a 0301 	add.w	r3, sl, #1
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	eb0a 030b 	add.w	r3, sl, fp
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	462f      	mov	r7, r5
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	4605      	mov	r5, r0
 800939c:	9b00      	ldr	r3, [sp, #0]
 800939e:	9802      	ldr	r0, [sp, #8]
 80093a0:	4621      	mov	r1, r4
 80093a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80093a6:	f7ff fa89 	bl	80088bc <quorem>
 80093aa:	4603      	mov	r3, r0
 80093ac:	3330      	adds	r3, #48	@ 0x30
 80093ae:	9003      	str	r0, [sp, #12]
 80093b0:	4639      	mov	r1, r7
 80093b2:	9802      	ldr	r0, [sp, #8]
 80093b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b6:	f000 fc97 	bl	8009ce8 <__mcmp>
 80093ba:	462a      	mov	r2, r5
 80093bc:	9004      	str	r0, [sp, #16]
 80093be:	4621      	mov	r1, r4
 80093c0:	4648      	mov	r0, r9
 80093c2:	f000 fcad 	bl	8009d20 <__mdiff>
 80093c6:	68c2      	ldr	r2, [r0, #12]
 80093c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ca:	4606      	mov	r6, r0
 80093cc:	bb02      	cbnz	r2, 8009410 <_dtoa_r+0xa40>
 80093ce:	4601      	mov	r1, r0
 80093d0:	9802      	ldr	r0, [sp, #8]
 80093d2:	f000 fc89 	bl	8009ce8 <__mcmp>
 80093d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d8:	4602      	mov	r2, r0
 80093da:	4631      	mov	r1, r6
 80093dc:	4648      	mov	r0, r9
 80093de:	920c      	str	r2, [sp, #48]	@ 0x30
 80093e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e2:	f000 fa05 	bl	80097f0 <_Bfree>
 80093e6:	9b07      	ldr	r3, [sp, #28]
 80093e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093ea:	9e00      	ldr	r6, [sp, #0]
 80093ec:	ea42 0103 	orr.w	r1, r2, r3
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	4319      	orrs	r1, r3
 80093f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f6:	d10d      	bne.n	8009414 <_dtoa_r+0xa44>
 80093f8:	2b39      	cmp	r3, #57	@ 0x39
 80093fa:	d027      	beq.n	800944c <_dtoa_r+0xa7c>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	2a00      	cmp	r2, #0
 8009400:	dd01      	ble.n	8009406 <_dtoa_r+0xa36>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	3331      	adds	r3, #49	@ 0x31
 8009406:	f88b 3000 	strb.w	r3, [fp]
 800940a:	e52e      	b.n	8008e6a <_dtoa_r+0x49a>
 800940c:	4628      	mov	r0, r5
 800940e:	e7b9      	b.n	8009384 <_dtoa_r+0x9b4>
 8009410:	2201      	movs	r2, #1
 8009412:	e7e2      	b.n	80093da <_dtoa_r+0xa0a>
 8009414:	9904      	ldr	r1, [sp, #16]
 8009416:	2900      	cmp	r1, #0
 8009418:	db04      	blt.n	8009424 <_dtoa_r+0xa54>
 800941a:	9807      	ldr	r0, [sp, #28]
 800941c:	4301      	orrs	r1, r0
 800941e:	9806      	ldr	r0, [sp, #24]
 8009420:	4301      	orrs	r1, r0
 8009422:	d120      	bne.n	8009466 <_dtoa_r+0xa96>
 8009424:	2a00      	cmp	r2, #0
 8009426:	ddee      	ble.n	8009406 <_dtoa_r+0xa36>
 8009428:	9902      	ldr	r1, [sp, #8]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2201      	movs	r2, #1
 800942e:	4648      	mov	r0, r9
 8009430:	f000 fbee 	bl	8009c10 <__lshift>
 8009434:	4621      	mov	r1, r4
 8009436:	9002      	str	r0, [sp, #8]
 8009438:	f000 fc56 	bl	8009ce8 <__mcmp>
 800943c:	2800      	cmp	r0, #0
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	dc02      	bgt.n	8009448 <_dtoa_r+0xa78>
 8009442:	d1e0      	bne.n	8009406 <_dtoa_r+0xa36>
 8009444:	07da      	lsls	r2, r3, #31
 8009446:	d5de      	bpl.n	8009406 <_dtoa_r+0xa36>
 8009448:	2b39      	cmp	r3, #57	@ 0x39
 800944a:	d1da      	bne.n	8009402 <_dtoa_r+0xa32>
 800944c:	2339      	movs	r3, #57	@ 0x39
 800944e:	f88b 3000 	strb.w	r3, [fp]
 8009452:	4633      	mov	r3, r6
 8009454:	461e      	mov	r6, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800945c:	2a39      	cmp	r2, #57	@ 0x39
 800945e:	d04e      	beq.n	80094fe <_dtoa_r+0xb2e>
 8009460:	3201      	adds	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	e501      	b.n	8008e6a <_dtoa_r+0x49a>
 8009466:	2a00      	cmp	r2, #0
 8009468:	dd03      	ble.n	8009472 <_dtoa_r+0xaa2>
 800946a:	2b39      	cmp	r3, #57	@ 0x39
 800946c:	d0ee      	beq.n	800944c <_dtoa_r+0xa7c>
 800946e:	3301      	adds	r3, #1
 8009470:	e7c9      	b.n	8009406 <_dtoa_r+0xa36>
 8009472:	9a00      	ldr	r2, [sp, #0]
 8009474:	9908      	ldr	r1, [sp, #32]
 8009476:	f802 3c01 	strb.w	r3, [r2, #-1]
 800947a:	428a      	cmp	r2, r1
 800947c:	d028      	beq.n	80094d0 <_dtoa_r+0xb00>
 800947e:	9902      	ldr	r1, [sp, #8]
 8009480:	2300      	movs	r3, #0
 8009482:	220a      	movs	r2, #10
 8009484:	4648      	mov	r0, r9
 8009486:	f000 f9d5 	bl	8009834 <__multadd>
 800948a:	42af      	cmp	r7, r5
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	f04f 020a 	mov.w	r2, #10
 8009496:	4639      	mov	r1, r7
 8009498:	4648      	mov	r0, r9
 800949a:	d107      	bne.n	80094ac <_dtoa_r+0xadc>
 800949c:	f000 f9ca 	bl	8009834 <__multadd>
 80094a0:	4607      	mov	r7, r0
 80094a2:	4605      	mov	r5, r0
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	3301      	adds	r3, #1
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	e777      	b.n	800939c <_dtoa_r+0x9cc>
 80094ac:	f000 f9c2 	bl	8009834 <__multadd>
 80094b0:	4629      	mov	r1, r5
 80094b2:	4607      	mov	r7, r0
 80094b4:	2300      	movs	r3, #0
 80094b6:	220a      	movs	r2, #10
 80094b8:	4648      	mov	r0, r9
 80094ba:	f000 f9bb 	bl	8009834 <__multadd>
 80094be:	4605      	mov	r5, r0
 80094c0:	e7f0      	b.n	80094a4 <_dtoa_r+0xad4>
 80094c2:	f1bb 0f00 	cmp.w	fp, #0
 80094c6:	bfcc      	ite	gt
 80094c8:	465e      	movgt	r6, fp
 80094ca:	2601      	movle	r6, #1
 80094cc:	4456      	add	r6, sl
 80094ce:	2700      	movs	r7, #0
 80094d0:	9902      	ldr	r1, [sp, #8]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2201      	movs	r2, #1
 80094d6:	4648      	mov	r0, r9
 80094d8:	f000 fb9a 	bl	8009c10 <__lshift>
 80094dc:	4621      	mov	r1, r4
 80094de:	9002      	str	r0, [sp, #8]
 80094e0:	f000 fc02 	bl	8009ce8 <__mcmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	dcb4      	bgt.n	8009452 <_dtoa_r+0xa82>
 80094e8:	d102      	bne.n	80094f0 <_dtoa_r+0xb20>
 80094ea:	9b00      	ldr	r3, [sp, #0]
 80094ec:	07db      	lsls	r3, r3, #31
 80094ee:	d4b0      	bmi.n	8009452 <_dtoa_r+0xa82>
 80094f0:	4633      	mov	r3, r6
 80094f2:	461e      	mov	r6, r3
 80094f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094f8:	2a30      	cmp	r2, #48	@ 0x30
 80094fa:	d0fa      	beq.n	80094f2 <_dtoa_r+0xb22>
 80094fc:	e4b5      	b.n	8008e6a <_dtoa_r+0x49a>
 80094fe:	459a      	cmp	sl, r3
 8009500:	d1a8      	bne.n	8009454 <_dtoa_r+0xa84>
 8009502:	2331      	movs	r3, #49	@ 0x31
 8009504:	f108 0801 	add.w	r8, r8, #1
 8009508:	f88a 3000 	strb.w	r3, [sl]
 800950c:	e4ad      	b.n	8008e6a <_dtoa_r+0x49a>
 800950e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009510:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800956c <_dtoa_r+0xb9c>
 8009514:	b11b      	cbz	r3, 800951e <_dtoa_r+0xb4e>
 8009516:	f10a 0308 	add.w	r3, sl, #8
 800951a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	4650      	mov	r0, sl
 8009520:	b017      	add	sp, #92	@ 0x5c
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	9b07      	ldr	r3, [sp, #28]
 8009528:	2b01      	cmp	r3, #1
 800952a:	f77f ae2e 	ble.w	800918a <_dtoa_r+0x7ba>
 800952e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	2001      	movs	r0, #1
 8009534:	e64d      	b.n	80091d2 <_dtoa_r+0x802>
 8009536:	f1bb 0f00 	cmp.w	fp, #0
 800953a:	f77f aed9 	ble.w	80092f0 <_dtoa_r+0x920>
 800953e:	4656      	mov	r6, sl
 8009540:	9802      	ldr	r0, [sp, #8]
 8009542:	4621      	mov	r1, r4
 8009544:	f7ff f9ba 	bl	80088bc <quorem>
 8009548:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800954c:	f806 3b01 	strb.w	r3, [r6], #1
 8009550:	eba6 020a 	sub.w	r2, r6, sl
 8009554:	4593      	cmp	fp, r2
 8009556:	ddb4      	ble.n	80094c2 <_dtoa_r+0xaf2>
 8009558:	9902      	ldr	r1, [sp, #8]
 800955a:	2300      	movs	r3, #0
 800955c:	220a      	movs	r2, #10
 800955e:	4648      	mov	r0, r9
 8009560:	f000 f968 	bl	8009834 <__multadd>
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	e7eb      	b.n	8009540 <_dtoa_r+0xb70>
 8009568:	0800c07d 	.word	0x0800c07d
 800956c:	0800c001 	.word	0x0800c001

08009570 <_free_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	2900      	cmp	r1, #0
 8009576:	d041      	beq.n	80095fc <_free_r+0x8c>
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f0c      	subs	r4, r1, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	18e4      	addlt	r4, r4, r3
 8009584:	f000 f8e8 	bl	8009758 <__malloc_lock>
 8009588:	4a1d      	ldr	r2, [pc, #116]	@ (8009600 <_free_r+0x90>)
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	b933      	cbnz	r3, 800959c <_free_r+0x2c>
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	6014      	str	r4, [r2, #0]
 8009592:	4628      	mov	r0, r5
 8009594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009598:	f000 b8e4 	b.w	8009764 <__malloc_unlock>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d908      	bls.n	80095b2 <_free_r+0x42>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	1821      	adds	r1, r4, r0
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf01      	itttt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	e7ed      	b.n	800958e <_free_r+0x1e>
 80095b2:	461a      	mov	r2, r3
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	b10b      	cbz	r3, 80095bc <_free_r+0x4c>
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d9fa      	bls.n	80095b2 <_free_r+0x42>
 80095bc:	6811      	ldr	r1, [r2, #0]
 80095be:	1850      	adds	r0, r2, r1
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d10b      	bne.n	80095dc <_free_r+0x6c>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	4401      	add	r1, r0
 80095c8:	1850      	adds	r0, r2, r1
 80095ca:	4283      	cmp	r3, r0
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	d1e0      	bne.n	8009592 <_free_r+0x22>
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	6053      	str	r3, [r2, #4]
 80095d6:	4408      	add	r0, r1
 80095d8:	6010      	str	r0, [r2, #0]
 80095da:	e7da      	b.n	8009592 <_free_r+0x22>
 80095dc:	d902      	bls.n	80095e4 <_free_r+0x74>
 80095de:	230c      	movs	r3, #12
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	e7d6      	b.n	8009592 <_free_r+0x22>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf04      	itt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	6063      	str	r3, [r4, #4]
 80095f2:	bf04      	itt	eq
 80095f4:	1809      	addeq	r1, r1, r0
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	6054      	str	r4, [r2, #4]
 80095fa:	e7ca      	b.n	8009592 <_free_r+0x22>
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	200005d0 	.word	0x200005d0

08009604 <malloc>:
 8009604:	4b02      	ldr	r3, [pc, #8]	@ (8009610 <malloc+0xc>)
 8009606:	4601      	mov	r1, r0
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	f000 b825 	b.w	8009658 <_malloc_r>
 800960e:	bf00      	nop
 8009610:	2000001c 	.word	0x2000001c

08009614 <sbrk_aligned>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	4e0f      	ldr	r6, [pc, #60]	@ (8009654 <sbrk_aligned+0x40>)
 8009618:	460c      	mov	r4, r1
 800961a:	6831      	ldr	r1, [r6, #0]
 800961c:	4605      	mov	r5, r0
 800961e:	b911      	cbnz	r1, 8009626 <sbrk_aligned+0x12>
 8009620:	f001 fe04 	bl	800b22c <_sbrk_r>
 8009624:	6030      	str	r0, [r6, #0]
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	f001 fdff 	bl	800b22c <_sbrk_r>
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	d103      	bne.n	800963a <sbrk_aligned+0x26>
 8009632:	f04f 34ff 	mov.w	r4, #4294967295
 8009636:	4620      	mov	r0, r4
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d0f8      	beq.n	8009636 <sbrk_aligned+0x22>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4628      	mov	r0, r5
 8009648:	f001 fdf0 	bl	800b22c <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d1f2      	bne.n	8009636 <sbrk_aligned+0x22>
 8009650:	e7ef      	b.n	8009632 <sbrk_aligned+0x1e>
 8009652:	bf00      	nop
 8009654:	200005cc 	.word	0x200005cc

08009658 <_malloc_r>:
 8009658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965c:	1ccd      	adds	r5, r1, #3
 800965e:	f025 0503 	bic.w	r5, r5, #3
 8009662:	3508      	adds	r5, #8
 8009664:	2d0c      	cmp	r5, #12
 8009666:	bf38      	it	cc
 8009668:	250c      	movcc	r5, #12
 800966a:	2d00      	cmp	r5, #0
 800966c:	4606      	mov	r6, r0
 800966e:	db01      	blt.n	8009674 <_malloc_r+0x1c>
 8009670:	42a9      	cmp	r1, r5
 8009672:	d904      	bls.n	800967e <_malloc_r+0x26>
 8009674:	230c      	movs	r3, #12
 8009676:	6033      	str	r3, [r6, #0]
 8009678:	2000      	movs	r0, #0
 800967a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009754 <_malloc_r+0xfc>
 8009682:	f000 f869 	bl	8009758 <__malloc_lock>
 8009686:	f8d8 3000 	ldr.w	r3, [r8]
 800968a:	461c      	mov	r4, r3
 800968c:	bb44      	cbnz	r4, 80096e0 <_malloc_r+0x88>
 800968e:	4629      	mov	r1, r5
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff ffbf 	bl	8009614 <sbrk_aligned>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	4604      	mov	r4, r0
 800969a:	d158      	bne.n	800974e <_malloc_r+0xf6>
 800969c:	f8d8 4000 	ldr.w	r4, [r8]
 80096a0:	4627      	mov	r7, r4
 80096a2:	2f00      	cmp	r7, #0
 80096a4:	d143      	bne.n	800972e <_malloc_r+0xd6>
 80096a6:	2c00      	cmp	r4, #0
 80096a8:	d04b      	beq.n	8009742 <_malloc_r+0xea>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	4639      	mov	r1, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	eb04 0903 	add.w	r9, r4, r3
 80096b4:	f001 fdba 	bl	800b22c <_sbrk_r>
 80096b8:	4581      	cmp	r9, r0
 80096ba:	d142      	bne.n	8009742 <_malloc_r+0xea>
 80096bc:	6821      	ldr	r1, [r4, #0]
 80096be:	1a6d      	subs	r5, r5, r1
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffa6 	bl	8009614 <sbrk_aligned>
 80096c8:	3001      	adds	r0, #1
 80096ca:	d03a      	beq.n	8009742 <_malloc_r+0xea>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	442b      	add	r3, r5
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	f8d8 3000 	ldr.w	r3, [r8]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	bb62      	cbnz	r2, 8009734 <_malloc_r+0xdc>
 80096da:	f8c8 7000 	str.w	r7, [r8]
 80096de:	e00f      	b.n	8009700 <_malloc_r+0xa8>
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	1b52      	subs	r2, r2, r5
 80096e4:	d420      	bmi.n	8009728 <_malloc_r+0xd0>
 80096e6:	2a0b      	cmp	r2, #11
 80096e8:	d917      	bls.n	800971a <_malloc_r+0xc2>
 80096ea:	1961      	adds	r1, r4, r5
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	6025      	str	r5, [r4, #0]
 80096f0:	bf18      	it	ne
 80096f2:	6059      	strne	r1, [r3, #4]
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	bf08      	it	eq
 80096f8:	f8c8 1000 	streq.w	r1, [r8]
 80096fc:	5162      	str	r2, [r4, r5]
 80096fe:	604b      	str	r3, [r1, #4]
 8009700:	4630      	mov	r0, r6
 8009702:	f000 f82f 	bl	8009764 <__malloc_unlock>
 8009706:	f104 000b 	add.w	r0, r4, #11
 800970a:	1d23      	adds	r3, r4, #4
 800970c:	f020 0007 	bic.w	r0, r0, #7
 8009710:	1ac2      	subs	r2, r0, r3
 8009712:	bf1c      	itt	ne
 8009714:	1a1b      	subne	r3, r3, r0
 8009716:	50a3      	strne	r3, [r4, r2]
 8009718:	e7af      	b.n	800967a <_malloc_r+0x22>
 800971a:	6862      	ldr	r2, [r4, #4]
 800971c:	42a3      	cmp	r3, r4
 800971e:	bf0c      	ite	eq
 8009720:	f8c8 2000 	streq.w	r2, [r8]
 8009724:	605a      	strne	r2, [r3, #4]
 8009726:	e7eb      	b.n	8009700 <_malloc_r+0xa8>
 8009728:	4623      	mov	r3, r4
 800972a:	6864      	ldr	r4, [r4, #4]
 800972c:	e7ae      	b.n	800968c <_malloc_r+0x34>
 800972e:	463c      	mov	r4, r7
 8009730:	687f      	ldr	r7, [r7, #4]
 8009732:	e7b6      	b.n	80096a2 <_malloc_r+0x4a>
 8009734:	461a      	mov	r2, r3
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	42a3      	cmp	r3, r4
 800973a:	d1fb      	bne.n	8009734 <_malloc_r+0xdc>
 800973c:	2300      	movs	r3, #0
 800973e:	6053      	str	r3, [r2, #4]
 8009740:	e7de      	b.n	8009700 <_malloc_r+0xa8>
 8009742:	230c      	movs	r3, #12
 8009744:	6033      	str	r3, [r6, #0]
 8009746:	4630      	mov	r0, r6
 8009748:	f000 f80c 	bl	8009764 <__malloc_unlock>
 800974c:	e794      	b.n	8009678 <_malloc_r+0x20>
 800974e:	6005      	str	r5, [r0, #0]
 8009750:	e7d6      	b.n	8009700 <_malloc_r+0xa8>
 8009752:	bf00      	nop
 8009754:	200005d0 	.word	0x200005d0

08009758 <__malloc_lock>:
 8009758:	4801      	ldr	r0, [pc, #4]	@ (8009760 <__malloc_lock+0x8>)
 800975a:	f7ff b8a6 	b.w	80088aa <__retarget_lock_acquire_recursive>
 800975e:	bf00      	nop
 8009760:	200005c8 	.word	0x200005c8

08009764 <__malloc_unlock>:
 8009764:	4801      	ldr	r0, [pc, #4]	@ (800976c <__malloc_unlock+0x8>)
 8009766:	f7ff b8a1 	b.w	80088ac <__retarget_lock_release_recursive>
 800976a:	bf00      	nop
 800976c:	200005c8 	.word	0x200005c8

08009770 <_Balloc>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	69c6      	ldr	r6, [r0, #28]
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	b976      	cbnz	r6, 8009798 <_Balloc+0x28>
 800977a:	2010      	movs	r0, #16
 800977c:	f7ff ff42 	bl	8009604 <malloc>
 8009780:	4602      	mov	r2, r0
 8009782:	61e0      	str	r0, [r4, #28]
 8009784:	b920      	cbnz	r0, 8009790 <_Balloc+0x20>
 8009786:	4b18      	ldr	r3, [pc, #96]	@ (80097e8 <_Balloc+0x78>)
 8009788:	4818      	ldr	r0, [pc, #96]	@ (80097ec <_Balloc+0x7c>)
 800978a:	216b      	movs	r1, #107	@ 0x6b
 800978c:	f001 fd74 	bl	800b278 <__assert_func>
 8009790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009794:	6006      	str	r6, [r0, #0]
 8009796:	60c6      	str	r6, [r0, #12]
 8009798:	69e6      	ldr	r6, [r4, #28]
 800979a:	68f3      	ldr	r3, [r6, #12]
 800979c:	b183      	cbz	r3, 80097c0 <_Balloc+0x50>
 800979e:	69e3      	ldr	r3, [r4, #28]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097a6:	b9b8      	cbnz	r0, 80097d8 <_Balloc+0x68>
 80097a8:	2101      	movs	r1, #1
 80097aa:	fa01 f605 	lsl.w	r6, r1, r5
 80097ae:	1d72      	adds	r2, r6, #5
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	4620      	mov	r0, r4
 80097b4:	f001 fd7e 	bl	800b2b4 <_calloc_r>
 80097b8:	b160      	cbz	r0, 80097d4 <_Balloc+0x64>
 80097ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097be:	e00e      	b.n	80097de <_Balloc+0x6e>
 80097c0:	2221      	movs	r2, #33	@ 0x21
 80097c2:	2104      	movs	r1, #4
 80097c4:	4620      	mov	r0, r4
 80097c6:	f001 fd75 	bl	800b2b4 <_calloc_r>
 80097ca:	69e3      	ldr	r3, [r4, #28]
 80097cc:	60f0      	str	r0, [r6, #12]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e4      	bne.n	800979e <_Balloc+0x2e>
 80097d4:	2000      	movs	r0, #0
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	6802      	ldr	r2, [r0, #0]
 80097da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097de:	2300      	movs	r3, #0
 80097e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097e4:	e7f7      	b.n	80097d6 <_Balloc+0x66>
 80097e6:	bf00      	nop
 80097e8:	0800c00e 	.word	0x0800c00e
 80097ec:	0800c08e 	.word	0x0800c08e

080097f0 <_Bfree>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	69c6      	ldr	r6, [r0, #28]
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b976      	cbnz	r6, 8009818 <_Bfree+0x28>
 80097fa:	2010      	movs	r0, #16
 80097fc:	f7ff ff02 	bl	8009604 <malloc>
 8009800:	4602      	mov	r2, r0
 8009802:	61e8      	str	r0, [r5, #28]
 8009804:	b920      	cbnz	r0, 8009810 <_Bfree+0x20>
 8009806:	4b09      	ldr	r3, [pc, #36]	@ (800982c <_Bfree+0x3c>)
 8009808:	4809      	ldr	r0, [pc, #36]	@ (8009830 <_Bfree+0x40>)
 800980a:	218f      	movs	r1, #143	@ 0x8f
 800980c:	f001 fd34 	bl	800b278 <__assert_func>
 8009810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009814:	6006      	str	r6, [r0, #0]
 8009816:	60c6      	str	r6, [r0, #12]
 8009818:	b13c      	cbz	r4, 800982a <_Bfree+0x3a>
 800981a:	69eb      	ldr	r3, [r5, #28]
 800981c:	6862      	ldr	r2, [r4, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009824:	6021      	str	r1, [r4, #0]
 8009826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	0800c00e 	.word	0x0800c00e
 8009830:	0800c08e 	.word	0x0800c08e

08009834 <__multadd>:
 8009834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009838:	690d      	ldr	r5, [r1, #16]
 800983a:	4607      	mov	r7, r0
 800983c:	460c      	mov	r4, r1
 800983e:	461e      	mov	r6, r3
 8009840:	f101 0c14 	add.w	ip, r1, #20
 8009844:	2000      	movs	r0, #0
 8009846:	f8dc 3000 	ldr.w	r3, [ip]
 800984a:	b299      	uxth	r1, r3
 800984c:	fb02 6101 	mla	r1, r2, r1, r6
 8009850:	0c1e      	lsrs	r6, r3, #16
 8009852:	0c0b      	lsrs	r3, r1, #16
 8009854:	fb02 3306 	mla	r3, r2, r6, r3
 8009858:	b289      	uxth	r1, r1
 800985a:	3001      	adds	r0, #1
 800985c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009860:	4285      	cmp	r5, r0
 8009862:	f84c 1b04 	str.w	r1, [ip], #4
 8009866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800986a:	dcec      	bgt.n	8009846 <__multadd+0x12>
 800986c:	b30e      	cbz	r6, 80098b2 <__multadd+0x7e>
 800986e:	68a3      	ldr	r3, [r4, #8]
 8009870:	42ab      	cmp	r3, r5
 8009872:	dc19      	bgt.n	80098a8 <__multadd+0x74>
 8009874:	6861      	ldr	r1, [r4, #4]
 8009876:	4638      	mov	r0, r7
 8009878:	3101      	adds	r1, #1
 800987a:	f7ff ff79 	bl	8009770 <_Balloc>
 800987e:	4680      	mov	r8, r0
 8009880:	b928      	cbnz	r0, 800988e <__multadd+0x5a>
 8009882:	4602      	mov	r2, r0
 8009884:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <__multadd+0x84>)
 8009886:	480d      	ldr	r0, [pc, #52]	@ (80098bc <__multadd+0x88>)
 8009888:	21ba      	movs	r1, #186	@ 0xba
 800988a:	f001 fcf5 	bl	800b278 <__assert_func>
 800988e:	6922      	ldr	r2, [r4, #16]
 8009890:	3202      	adds	r2, #2
 8009892:	f104 010c 	add.w	r1, r4, #12
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	300c      	adds	r0, #12
 800989a:	f001 fcd7 	bl	800b24c <memcpy>
 800989e:	4621      	mov	r1, r4
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ffa5 	bl	80097f0 <_Bfree>
 80098a6:	4644      	mov	r4, r8
 80098a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098ac:	3501      	adds	r5, #1
 80098ae:	615e      	str	r6, [r3, #20]
 80098b0:	6125      	str	r5, [r4, #16]
 80098b2:	4620      	mov	r0, r4
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	0800c07d 	.word	0x0800c07d
 80098bc:	0800c08e 	.word	0x0800c08e

080098c0 <__s2b>:
 80098c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c4:	460c      	mov	r4, r1
 80098c6:	4615      	mov	r5, r2
 80098c8:	461f      	mov	r7, r3
 80098ca:	2209      	movs	r2, #9
 80098cc:	3308      	adds	r3, #8
 80098ce:	4606      	mov	r6, r0
 80098d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d4:	2100      	movs	r1, #0
 80098d6:	2201      	movs	r2, #1
 80098d8:	429a      	cmp	r2, r3
 80098da:	db09      	blt.n	80098f0 <__s2b+0x30>
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ff47 	bl	8009770 <_Balloc>
 80098e2:	b940      	cbnz	r0, 80098f6 <__s2b+0x36>
 80098e4:	4602      	mov	r2, r0
 80098e6:	4b19      	ldr	r3, [pc, #100]	@ (800994c <__s2b+0x8c>)
 80098e8:	4819      	ldr	r0, [pc, #100]	@ (8009950 <__s2b+0x90>)
 80098ea:	21d3      	movs	r1, #211	@ 0xd3
 80098ec:	f001 fcc4 	bl	800b278 <__assert_func>
 80098f0:	0052      	lsls	r2, r2, #1
 80098f2:	3101      	adds	r1, #1
 80098f4:	e7f0      	b.n	80098d8 <__s2b+0x18>
 80098f6:	9b08      	ldr	r3, [sp, #32]
 80098f8:	6143      	str	r3, [r0, #20]
 80098fa:	2d09      	cmp	r5, #9
 80098fc:	f04f 0301 	mov.w	r3, #1
 8009900:	6103      	str	r3, [r0, #16]
 8009902:	dd16      	ble.n	8009932 <__s2b+0x72>
 8009904:	f104 0909 	add.w	r9, r4, #9
 8009908:	46c8      	mov	r8, r9
 800990a:	442c      	add	r4, r5
 800990c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009910:	4601      	mov	r1, r0
 8009912:	3b30      	subs	r3, #48	@ 0x30
 8009914:	220a      	movs	r2, #10
 8009916:	4630      	mov	r0, r6
 8009918:	f7ff ff8c 	bl	8009834 <__multadd>
 800991c:	45a0      	cmp	r8, r4
 800991e:	d1f5      	bne.n	800990c <__s2b+0x4c>
 8009920:	f1a5 0408 	sub.w	r4, r5, #8
 8009924:	444c      	add	r4, r9
 8009926:	1b2d      	subs	r5, r5, r4
 8009928:	1963      	adds	r3, r4, r5
 800992a:	42bb      	cmp	r3, r7
 800992c:	db04      	blt.n	8009938 <__s2b+0x78>
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	340a      	adds	r4, #10
 8009934:	2509      	movs	r5, #9
 8009936:	e7f6      	b.n	8009926 <__s2b+0x66>
 8009938:	f814 3b01 	ldrb.w	r3, [r4], #1
 800993c:	4601      	mov	r1, r0
 800993e:	3b30      	subs	r3, #48	@ 0x30
 8009940:	220a      	movs	r2, #10
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ff76 	bl	8009834 <__multadd>
 8009948:	e7ee      	b.n	8009928 <__s2b+0x68>
 800994a:	bf00      	nop
 800994c:	0800c07d 	.word	0x0800c07d
 8009950:	0800c08e 	.word	0x0800c08e

08009954 <__hi0bits>:
 8009954:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009958:	4603      	mov	r3, r0
 800995a:	bf36      	itet	cc
 800995c:	0403      	lslcc	r3, r0, #16
 800995e:	2000      	movcs	r0, #0
 8009960:	2010      	movcc	r0, #16
 8009962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009966:	bf3c      	itt	cc
 8009968:	021b      	lslcc	r3, r3, #8
 800996a:	3008      	addcc	r0, #8
 800996c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009970:	bf3c      	itt	cc
 8009972:	011b      	lslcc	r3, r3, #4
 8009974:	3004      	addcc	r0, #4
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800997a:	bf3c      	itt	cc
 800997c:	009b      	lslcc	r3, r3, #2
 800997e:	3002      	addcc	r0, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	db05      	blt.n	8009990 <__hi0bits+0x3c>
 8009984:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009988:	f100 0001 	add.w	r0, r0, #1
 800998c:	bf08      	it	eq
 800998e:	2020      	moveq	r0, #32
 8009990:	4770      	bx	lr

08009992 <__lo0bits>:
 8009992:	6803      	ldr	r3, [r0, #0]
 8009994:	4602      	mov	r2, r0
 8009996:	f013 0007 	ands.w	r0, r3, #7
 800999a:	d00b      	beq.n	80099b4 <__lo0bits+0x22>
 800999c:	07d9      	lsls	r1, r3, #31
 800999e:	d421      	bmi.n	80099e4 <__lo0bits+0x52>
 80099a0:	0798      	lsls	r0, r3, #30
 80099a2:	bf49      	itett	mi
 80099a4:	085b      	lsrmi	r3, r3, #1
 80099a6:	089b      	lsrpl	r3, r3, #2
 80099a8:	2001      	movmi	r0, #1
 80099aa:	6013      	strmi	r3, [r2, #0]
 80099ac:	bf5c      	itt	pl
 80099ae:	6013      	strpl	r3, [r2, #0]
 80099b0:	2002      	movpl	r0, #2
 80099b2:	4770      	bx	lr
 80099b4:	b299      	uxth	r1, r3
 80099b6:	b909      	cbnz	r1, 80099bc <__lo0bits+0x2a>
 80099b8:	0c1b      	lsrs	r3, r3, #16
 80099ba:	2010      	movs	r0, #16
 80099bc:	b2d9      	uxtb	r1, r3
 80099be:	b909      	cbnz	r1, 80099c4 <__lo0bits+0x32>
 80099c0:	3008      	adds	r0, #8
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	0719      	lsls	r1, r3, #28
 80099c6:	bf04      	itt	eq
 80099c8:	091b      	lsreq	r3, r3, #4
 80099ca:	3004      	addeq	r0, #4
 80099cc:	0799      	lsls	r1, r3, #30
 80099ce:	bf04      	itt	eq
 80099d0:	089b      	lsreq	r3, r3, #2
 80099d2:	3002      	addeq	r0, #2
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d403      	bmi.n	80099e0 <__lo0bits+0x4e>
 80099d8:	085b      	lsrs	r3, r3, #1
 80099da:	f100 0001 	add.w	r0, r0, #1
 80099de:	d003      	beq.n	80099e8 <__lo0bits+0x56>
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	4770      	bx	lr
 80099e4:	2000      	movs	r0, #0
 80099e6:	4770      	bx	lr
 80099e8:	2020      	movs	r0, #32
 80099ea:	4770      	bx	lr

080099ec <__i2b>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	460c      	mov	r4, r1
 80099f0:	2101      	movs	r1, #1
 80099f2:	f7ff febd 	bl	8009770 <_Balloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__i2b+0x1a>
 80099fa:	4b05      	ldr	r3, [pc, #20]	@ (8009a10 <__i2b+0x24>)
 80099fc:	4805      	ldr	r0, [pc, #20]	@ (8009a14 <__i2b+0x28>)
 80099fe:	f240 1145 	movw	r1, #325	@ 0x145
 8009a02:	f001 fc39 	bl	800b278 <__assert_func>
 8009a06:	2301      	movs	r3, #1
 8009a08:	6144      	str	r4, [r0, #20]
 8009a0a:	6103      	str	r3, [r0, #16]
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop
 8009a10:	0800c07d 	.word	0x0800c07d
 8009a14:	0800c08e 	.word	0x0800c08e

08009a18 <__multiply>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4617      	mov	r7, r2
 8009a1e:	690a      	ldr	r2, [r1, #16]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	bfa8      	it	ge
 8009a26:	463b      	movge	r3, r7
 8009a28:	4689      	mov	r9, r1
 8009a2a:	bfa4      	itt	ge
 8009a2c:	460f      	movge	r7, r1
 8009a2e:	4699      	movge	r9, r3
 8009a30:	693d      	ldr	r5, [r7, #16]
 8009a32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	eb05 060a 	add.w	r6, r5, sl
 8009a3e:	42b3      	cmp	r3, r6
 8009a40:	b085      	sub	sp, #20
 8009a42:	bfb8      	it	lt
 8009a44:	3101      	addlt	r1, #1
 8009a46:	f7ff fe93 	bl	8009770 <_Balloc>
 8009a4a:	b930      	cbnz	r0, 8009a5a <__multiply+0x42>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	4b41      	ldr	r3, [pc, #260]	@ (8009b54 <__multiply+0x13c>)
 8009a50:	4841      	ldr	r0, [pc, #260]	@ (8009b58 <__multiply+0x140>)
 8009a52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a56:	f001 fc0f 	bl	800b278 <__assert_func>
 8009a5a:	f100 0414 	add.w	r4, r0, #20
 8009a5e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009a62:	4623      	mov	r3, r4
 8009a64:	2200      	movs	r2, #0
 8009a66:	4573      	cmp	r3, lr
 8009a68:	d320      	bcc.n	8009aac <__multiply+0x94>
 8009a6a:	f107 0814 	add.w	r8, r7, #20
 8009a6e:	f109 0114 	add.w	r1, r9, #20
 8009a72:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009a76:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	1beb      	subs	r3, r5, r7
 8009a7e:	3b15      	subs	r3, #21
 8009a80:	f023 0303 	bic.w	r3, r3, #3
 8009a84:	3304      	adds	r3, #4
 8009a86:	3715      	adds	r7, #21
 8009a88:	42bd      	cmp	r5, r7
 8009a8a:	bf38      	it	cc
 8009a8c:	2304      	movcc	r3, #4
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	9103      	str	r1, [sp, #12]
 8009a94:	428b      	cmp	r3, r1
 8009a96:	d80c      	bhi.n	8009ab2 <__multiply+0x9a>
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	dd03      	ble.n	8009aa4 <__multiply+0x8c>
 8009a9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d055      	beq.n	8009b50 <__multiply+0x138>
 8009aa4:	6106      	str	r6, [r0, #16]
 8009aa6:	b005      	add	sp, #20
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	f843 2b04 	str.w	r2, [r3], #4
 8009ab0:	e7d9      	b.n	8009a66 <__multiply+0x4e>
 8009ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ab6:	f1ba 0f00 	cmp.w	sl, #0
 8009aba:	d01f      	beq.n	8009afc <__multiply+0xe4>
 8009abc:	46c4      	mov	ip, r8
 8009abe:	46a1      	mov	r9, r4
 8009ac0:	2700      	movs	r7, #0
 8009ac2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ac6:	f8d9 3000 	ldr.w	r3, [r9]
 8009aca:	fa1f fb82 	uxth.w	fp, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ad4:	443b      	add	r3, r7
 8009ad6:	f8d9 7000 	ldr.w	r7, [r9]
 8009ada:	0c12      	lsrs	r2, r2, #16
 8009adc:	0c3f      	lsrs	r7, r7, #16
 8009ade:	fb0a 7202 	mla	r2, sl, r2, r7
 8009ae2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aec:	4565      	cmp	r5, ip
 8009aee:	f849 3b04 	str.w	r3, [r9], #4
 8009af2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009af6:	d8e4      	bhi.n	8009ac2 <__multiply+0xaa>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	50e7      	str	r7, [r4, r3]
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b02:	3104      	adds	r1, #4
 8009b04:	f1b9 0f00 	cmp.w	r9, #0
 8009b08:	d020      	beq.n	8009b4c <__multiply+0x134>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	4647      	mov	r7, r8
 8009b0e:	46a4      	mov	ip, r4
 8009b10:	f04f 0a00 	mov.w	sl, #0
 8009b14:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b18:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b1c:	fb09 220b 	mla	r2, r9, fp, r2
 8009b20:	4452      	add	r2, sl
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b28:	f84c 3b04 	str.w	r3, [ip], #4
 8009b2c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b34:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b38:	fb09 330a 	mla	r3, r9, sl, r3
 8009b3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b40:	42bd      	cmp	r5, r7
 8009b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b46:	d8e5      	bhi.n	8009b14 <__multiply+0xfc>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	50a3      	str	r3, [r4, r2]
 8009b4c:	3404      	adds	r4, #4
 8009b4e:	e79f      	b.n	8009a90 <__multiply+0x78>
 8009b50:	3e01      	subs	r6, #1
 8009b52:	e7a1      	b.n	8009a98 <__multiply+0x80>
 8009b54:	0800c07d 	.word	0x0800c07d
 8009b58:	0800c08e 	.word	0x0800c08e

08009b5c <__pow5mult>:
 8009b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b60:	4615      	mov	r5, r2
 8009b62:	f012 0203 	ands.w	r2, r2, #3
 8009b66:	4607      	mov	r7, r0
 8009b68:	460e      	mov	r6, r1
 8009b6a:	d007      	beq.n	8009b7c <__pow5mult+0x20>
 8009b6c:	4c25      	ldr	r4, [pc, #148]	@ (8009c04 <__pow5mult+0xa8>)
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	2300      	movs	r3, #0
 8009b72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b76:	f7ff fe5d 	bl	8009834 <__multadd>
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	10ad      	asrs	r5, r5, #2
 8009b7e:	d03d      	beq.n	8009bfc <__pow5mult+0xa0>
 8009b80:	69fc      	ldr	r4, [r7, #28]
 8009b82:	b97c      	cbnz	r4, 8009ba4 <__pow5mult+0x48>
 8009b84:	2010      	movs	r0, #16
 8009b86:	f7ff fd3d 	bl	8009604 <malloc>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	61f8      	str	r0, [r7, #28]
 8009b8e:	b928      	cbnz	r0, 8009b9c <__pow5mult+0x40>
 8009b90:	4b1d      	ldr	r3, [pc, #116]	@ (8009c08 <__pow5mult+0xac>)
 8009b92:	481e      	ldr	r0, [pc, #120]	@ (8009c0c <__pow5mult+0xb0>)
 8009b94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b98:	f001 fb6e 	bl	800b278 <__assert_func>
 8009b9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ba0:	6004      	str	r4, [r0, #0]
 8009ba2:	60c4      	str	r4, [r0, #12]
 8009ba4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bac:	b94c      	cbnz	r4, 8009bc2 <__pow5mult+0x66>
 8009bae:	f240 2171 	movw	r1, #625	@ 0x271
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	f7ff ff1a 	bl	80099ec <__i2b>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	f04f 0900 	mov.w	r9, #0
 8009bc6:	07eb      	lsls	r3, r5, #31
 8009bc8:	d50a      	bpl.n	8009be0 <__pow5mult+0x84>
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f7ff ff22 	bl	8009a18 <__multiply>
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff fe09 	bl	80097f0 <_Bfree>
 8009bde:	4646      	mov	r6, r8
 8009be0:	106d      	asrs	r5, r5, #1
 8009be2:	d00b      	beq.n	8009bfc <__pow5mult+0xa0>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	b938      	cbnz	r0, 8009bf8 <__pow5mult+0x9c>
 8009be8:	4622      	mov	r2, r4
 8009bea:	4621      	mov	r1, r4
 8009bec:	4638      	mov	r0, r7
 8009bee:	f7ff ff13 	bl	8009a18 <__multiply>
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	f8c0 9000 	str.w	r9, [r0]
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	e7e4      	b.n	8009bc6 <__pow5mult+0x6a>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c02:	bf00      	nop
 8009c04:	0800c1a0 	.word	0x0800c1a0
 8009c08:	0800c00e 	.word	0x0800c00e
 8009c0c:	0800c08e 	.word	0x0800c08e

08009c10 <__lshift>:
 8009c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	460c      	mov	r4, r1
 8009c16:	6849      	ldr	r1, [r1, #4]
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	4607      	mov	r7, r0
 8009c22:	4691      	mov	r9, r2
 8009c24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c28:	f108 0601 	add.w	r6, r8, #1
 8009c2c:	42b3      	cmp	r3, r6
 8009c2e:	db0b      	blt.n	8009c48 <__lshift+0x38>
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff fd9d 	bl	8009770 <_Balloc>
 8009c36:	4605      	mov	r5, r0
 8009c38:	b948      	cbnz	r0, 8009c4e <__lshift+0x3e>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	4b28      	ldr	r3, [pc, #160]	@ (8009ce0 <__lshift+0xd0>)
 8009c3e:	4829      	ldr	r0, [pc, #164]	@ (8009ce4 <__lshift+0xd4>)
 8009c40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c44:	f001 fb18 	bl	800b278 <__assert_func>
 8009c48:	3101      	adds	r1, #1
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	e7ee      	b.n	8009c2c <__lshift+0x1c>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f100 0114 	add.w	r1, r0, #20
 8009c54:	f100 0210 	add.w	r2, r0, #16
 8009c58:	4618      	mov	r0, r3
 8009c5a:	4553      	cmp	r3, sl
 8009c5c:	db33      	blt.n	8009cc6 <__lshift+0xb6>
 8009c5e:	6920      	ldr	r0, [r4, #16]
 8009c60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c64:	f104 0314 	add.w	r3, r4, #20
 8009c68:	f019 091f 	ands.w	r9, r9, #31
 8009c6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c74:	d02b      	beq.n	8009cce <__lshift+0xbe>
 8009c76:	f1c9 0e20 	rsb	lr, r9, #32
 8009c7a:	468a      	mov	sl, r1
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	fa00 f009 	lsl.w	r0, r0, r9
 8009c84:	4310      	orrs	r0, r2
 8009c86:	f84a 0b04 	str.w	r0, [sl], #4
 8009c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c8e:	459c      	cmp	ip, r3
 8009c90:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c94:	d8f3      	bhi.n	8009c7e <__lshift+0x6e>
 8009c96:	ebac 0304 	sub.w	r3, ip, r4
 8009c9a:	3b15      	subs	r3, #21
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	f104 0015 	add.w	r0, r4, #21
 8009ca6:	4560      	cmp	r0, ip
 8009ca8:	bf88      	it	hi
 8009caa:	2304      	movhi	r3, #4
 8009cac:	50ca      	str	r2, [r1, r3]
 8009cae:	b10a      	cbz	r2, 8009cb4 <__lshift+0xa4>
 8009cb0:	f108 0602 	add.w	r6, r8, #2
 8009cb4:	3e01      	subs	r6, #1
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	612e      	str	r6, [r5, #16]
 8009cba:	4621      	mov	r1, r4
 8009cbc:	f7ff fd98 	bl	80097f0 <_Bfree>
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cca:	3301      	adds	r3, #1
 8009ccc:	e7c5      	b.n	8009c5a <__lshift+0x4a>
 8009cce:	3904      	subs	r1, #4
 8009cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd8:	459c      	cmp	ip, r3
 8009cda:	d8f9      	bhi.n	8009cd0 <__lshift+0xc0>
 8009cdc:	e7ea      	b.n	8009cb4 <__lshift+0xa4>
 8009cde:	bf00      	nop
 8009ce0:	0800c07d 	.word	0x0800c07d
 8009ce4:	0800c08e 	.word	0x0800c08e

08009ce8 <__mcmp>:
 8009ce8:	690a      	ldr	r2, [r1, #16]
 8009cea:	4603      	mov	r3, r0
 8009cec:	6900      	ldr	r0, [r0, #16]
 8009cee:	1a80      	subs	r0, r0, r2
 8009cf0:	b530      	push	{r4, r5, lr}
 8009cf2:	d10e      	bne.n	8009d12 <__mcmp+0x2a>
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	3114      	adds	r1, #20
 8009cf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d08:	4295      	cmp	r5, r2
 8009d0a:	d003      	beq.n	8009d14 <__mcmp+0x2c>
 8009d0c:	d205      	bcs.n	8009d1a <__mcmp+0x32>
 8009d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d12:	bd30      	pop	{r4, r5, pc}
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d3f3      	bcc.n	8009d00 <__mcmp+0x18>
 8009d18:	e7fb      	b.n	8009d12 <__mcmp+0x2a>
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	e7f9      	b.n	8009d12 <__mcmp+0x2a>
	...

08009d20 <__mdiff>:
 8009d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	4689      	mov	r9, r1
 8009d26:	4606      	mov	r6, r0
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4648      	mov	r0, r9
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	f7ff ffdb 	bl	8009ce8 <__mcmp>
 8009d32:	1e05      	subs	r5, r0, #0
 8009d34:	d112      	bne.n	8009d5c <__mdiff+0x3c>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff fd19 	bl	8009770 <_Balloc>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	b928      	cbnz	r0, 8009d4e <__mdiff+0x2e>
 8009d42:	4b3f      	ldr	r3, [pc, #252]	@ (8009e40 <__mdiff+0x120>)
 8009d44:	f240 2137 	movw	r1, #567	@ 0x237
 8009d48:	483e      	ldr	r0, [pc, #248]	@ (8009e44 <__mdiff+0x124>)
 8009d4a:	f001 fa95 	bl	800b278 <__assert_func>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d54:	4610      	mov	r0, r2
 8009d56:	b003      	add	sp, #12
 8009d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	bfbc      	itt	lt
 8009d5e:	464b      	movlt	r3, r9
 8009d60:	46a1      	movlt	r9, r4
 8009d62:	4630      	mov	r0, r6
 8009d64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d68:	bfba      	itte	lt
 8009d6a:	461c      	movlt	r4, r3
 8009d6c:	2501      	movlt	r5, #1
 8009d6e:	2500      	movge	r5, #0
 8009d70:	f7ff fcfe 	bl	8009770 <_Balloc>
 8009d74:	4602      	mov	r2, r0
 8009d76:	b918      	cbnz	r0, 8009d80 <__mdiff+0x60>
 8009d78:	4b31      	ldr	r3, [pc, #196]	@ (8009e40 <__mdiff+0x120>)
 8009d7a:	f240 2145 	movw	r1, #581	@ 0x245
 8009d7e:	e7e3      	b.n	8009d48 <__mdiff+0x28>
 8009d80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d84:	6926      	ldr	r6, [r4, #16]
 8009d86:	60c5      	str	r5, [r0, #12]
 8009d88:	f109 0310 	add.w	r3, r9, #16
 8009d8c:	f109 0514 	add.w	r5, r9, #20
 8009d90:	f104 0e14 	add.w	lr, r4, #20
 8009d94:	f100 0b14 	add.w	fp, r0, #20
 8009d98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	46d9      	mov	r9, fp
 8009da4:	f04f 0c00 	mov.w	ip, #0
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009dae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	fa1f f38a 	uxth.w	r3, sl
 8009db8:	4619      	mov	r1, r3
 8009dba:	b283      	uxth	r3, r0
 8009dbc:	1acb      	subs	r3, r1, r3
 8009dbe:	0c00      	lsrs	r0, r0, #16
 8009dc0:	4463      	add	r3, ip
 8009dc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dd0:	4576      	cmp	r6, lr
 8009dd2:	f849 3b04 	str.w	r3, [r9], #4
 8009dd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dda:	d8e5      	bhi.n	8009da8 <__mdiff+0x88>
 8009ddc:	1b33      	subs	r3, r6, r4
 8009dde:	3b15      	subs	r3, #21
 8009de0:	f023 0303 	bic.w	r3, r3, #3
 8009de4:	3415      	adds	r4, #21
 8009de6:	3304      	adds	r3, #4
 8009de8:	42a6      	cmp	r6, r4
 8009dea:	bf38      	it	cc
 8009dec:	2304      	movcc	r3, #4
 8009dee:	441d      	add	r5, r3
 8009df0:	445b      	add	r3, fp
 8009df2:	461e      	mov	r6, r3
 8009df4:	462c      	mov	r4, r5
 8009df6:	4544      	cmp	r4, r8
 8009df8:	d30e      	bcc.n	8009e18 <__mdiff+0xf8>
 8009dfa:	f108 0103 	add.w	r1, r8, #3
 8009dfe:	1b49      	subs	r1, r1, r5
 8009e00:	f021 0103 	bic.w	r1, r1, #3
 8009e04:	3d03      	subs	r5, #3
 8009e06:	45a8      	cmp	r8, r5
 8009e08:	bf38      	it	cc
 8009e0a:	2100      	movcc	r1, #0
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e12:	b191      	cbz	r1, 8009e3a <__mdiff+0x11a>
 8009e14:	6117      	str	r7, [r2, #16]
 8009e16:	e79d      	b.n	8009d54 <__mdiff+0x34>
 8009e18:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e1c:	46e6      	mov	lr, ip
 8009e1e:	0c08      	lsrs	r0, r1, #16
 8009e20:	fa1c fc81 	uxtah	ip, ip, r1
 8009e24:	4471      	add	r1, lr
 8009e26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e2a:	b289      	uxth	r1, r1
 8009e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e30:	f846 1b04 	str.w	r1, [r6], #4
 8009e34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e38:	e7dd      	b.n	8009df6 <__mdiff+0xd6>
 8009e3a:	3f01      	subs	r7, #1
 8009e3c:	e7e7      	b.n	8009e0e <__mdiff+0xee>
 8009e3e:	bf00      	nop
 8009e40:	0800c07d 	.word	0x0800c07d
 8009e44:	0800c08e 	.word	0x0800c08e

08009e48 <__ulp>:
 8009e48:	b082      	sub	sp, #8
 8009e4a:	ed8d 0b00 	vstr	d0, [sp]
 8009e4e:	9a01      	ldr	r2, [sp, #4]
 8009e50:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <__ulp+0x48>)
 8009e52:	4013      	ands	r3, r2
 8009e54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dc08      	bgt.n	8009e6e <__ulp+0x26>
 8009e5c:	425b      	negs	r3, r3
 8009e5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e66:	da04      	bge.n	8009e72 <__ulp+0x2a>
 8009e68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e6c:	4113      	asrs	r3, r2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	e008      	b.n	8009e84 <__ulp+0x3c>
 8009e72:	f1a2 0314 	sub.w	r3, r2, #20
 8009e76:	2b1e      	cmp	r3, #30
 8009e78:	bfda      	itte	le
 8009e7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e7e:	40da      	lsrle	r2, r3
 8009e80:	2201      	movgt	r2, #1
 8009e82:	2300      	movs	r3, #0
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	ec41 0b10 	vmov	d0, r0, r1
 8009e8c:	b002      	add	sp, #8
 8009e8e:	4770      	bx	lr
 8009e90:	7ff00000 	.word	0x7ff00000

08009e94 <__b2d>:
 8009e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e98:	6906      	ldr	r6, [r0, #16]
 8009e9a:	f100 0814 	add.w	r8, r0, #20
 8009e9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ea2:	1f37      	subs	r7, r6, #4
 8009ea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7ff fd53 	bl	8009954 <__hi0bits>
 8009eae:	f1c0 0320 	rsb	r3, r0, #32
 8009eb2:	280a      	cmp	r0, #10
 8009eb4:	600b      	str	r3, [r1, #0]
 8009eb6:	491b      	ldr	r1, [pc, #108]	@ (8009f24 <__b2d+0x90>)
 8009eb8:	dc15      	bgt.n	8009ee6 <__b2d+0x52>
 8009eba:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ebe:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ec2:	45b8      	cmp	r8, r7
 8009ec4:	ea43 0501 	orr.w	r5, r3, r1
 8009ec8:	bf34      	ite	cc
 8009eca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ece:	2300      	movcs	r3, #0
 8009ed0:	3015      	adds	r0, #21
 8009ed2:	fa02 f000 	lsl.w	r0, r2, r0
 8009ed6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009eda:	4303      	orrs	r3, r0
 8009edc:	461c      	mov	r4, r3
 8009ede:	ec45 4b10 	vmov	d0, r4, r5
 8009ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee6:	45b8      	cmp	r8, r7
 8009ee8:	bf3a      	itte	cc
 8009eea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eee:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ef2:	2300      	movcs	r3, #0
 8009ef4:	380b      	subs	r0, #11
 8009ef6:	d012      	beq.n	8009f1e <__b2d+0x8a>
 8009ef8:	f1c0 0120 	rsb	r1, r0, #32
 8009efc:	fa23 f401 	lsr.w	r4, r3, r1
 8009f00:	4082      	lsls	r2, r0
 8009f02:	4322      	orrs	r2, r4
 8009f04:	4547      	cmp	r7, r8
 8009f06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f0a:	bf8c      	ite	hi
 8009f0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f10:	2200      	movls	r2, #0
 8009f12:	4083      	lsls	r3, r0
 8009f14:	40ca      	lsrs	r2, r1
 8009f16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	e7de      	b.n	8009edc <__b2d+0x48>
 8009f1e:	ea42 0501 	orr.w	r5, r2, r1
 8009f22:	e7db      	b.n	8009edc <__b2d+0x48>
 8009f24:	3ff00000 	.word	0x3ff00000

08009f28 <__d2b>:
 8009f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	2101      	movs	r1, #1
 8009f30:	ec59 8b10 	vmov	r8, r9, d0
 8009f34:	4616      	mov	r6, r2
 8009f36:	f7ff fc1b 	bl	8009770 <_Balloc>
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	b930      	cbnz	r0, 8009f4c <__d2b+0x24>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	4b23      	ldr	r3, [pc, #140]	@ (8009fd0 <__d2b+0xa8>)
 8009f42:	4824      	ldr	r0, [pc, #144]	@ (8009fd4 <__d2b+0xac>)
 8009f44:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f48:	f001 f996 	bl	800b278 <__assert_func>
 8009f4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f54:	b10d      	cbz	r5, 8009f5a <__d2b+0x32>
 8009f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	f1b8 0300 	subs.w	r3, r8, #0
 8009f60:	d023      	beq.n	8009faa <__d2b+0x82>
 8009f62:	4668      	mov	r0, sp
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	f7ff fd14 	bl	8009992 <__lo0bits>
 8009f6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f6e:	b1d0      	cbz	r0, 8009fa6 <__d2b+0x7e>
 8009f70:	f1c0 0320 	rsb	r3, r0, #32
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	40c2      	lsrs	r2, r0
 8009f7c:	6163      	str	r3, [r4, #20]
 8009f7e:	9201      	str	r2, [sp, #4]
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	61a3      	str	r3, [r4, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bf0c      	ite	eq
 8009f88:	2201      	moveq	r2, #1
 8009f8a:	2202      	movne	r2, #2
 8009f8c:	6122      	str	r2, [r4, #16]
 8009f8e:	b1a5      	cbz	r5, 8009fba <__d2b+0x92>
 8009f90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f94:	4405      	add	r5, r0
 8009f96:	603d      	str	r5, [r7, #0]
 8009f98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	b003      	add	sp, #12
 8009fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fa6:	6161      	str	r1, [r4, #20]
 8009fa8:	e7ea      	b.n	8009f80 <__d2b+0x58>
 8009faa:	a801      	add	r0, sp, #4
 8009fac:	f7ff fcf1 	bl	8009992 <__lo0bits>
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	3020      	adds	r0, #32
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	e7e8      	b.n	8009f8c <__d2b+0x64>
 8009fba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fc2:	6038      	str	r0, [r7, #0]
 8009fc4:	6918      	ldr	r0, [r3, #16]
 8009fc6:	f7ff fcc5 	bl	8009954 <__hi0bits>
 8009fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fce:	e7e5      	b.n	8009f9c <__d2b+0x74>
 8009fd0:	0800c07d 	.word	0x0800c07d
 8009fd4:	0800c08e 	.word	0x0800c08e

08009fd8 <__ratio>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	e9cd 1000 	strd	r1, r0, [sp]
 8009fe2:	a902      	add	r1, sp, #8
 8009fe4:	f7ff ff56 	bl	8009e94 <__b2d>
 8009fe8:	9800      	ldr	r0, [sp, #0]
 8009fea:	a903      	add	r1, sp, #12
 8009fec:	ec55 4b10 	vmov	r4, r5, d0
 8009ff0:	f7ff ff50 	bl	8009e94 <__b2d>
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	6919      	ldr	r1, [r3, #16]
 8009ff8:	9b00      	ldr	r3, [sp, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	1ac9      	subs	r1, r1, r3
 8009ffe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	ec5b ab10 	vmov	sl, fp, d0
 800a008:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	bfce      	itee	gt
 800a010:	462a      	movgt	r2, r5
 800a012:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a016:	465a      	movle	r2, fp
 800a018:	462f      	mov	r7, r5
 800a01a:	46d9      	mov	r9, fp
 800a01c:	bfcc      	ite	gt
 800a01e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a022:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a026:	464b      	mov	r3, r9
 800a028:	4652      	mov	r2, sl
 800a02a:	4620      	mov	r0, r4
 800a02c:	4639      	mov	r1, r7
 800a02e:	f7f6 fc0d 	bl	800084c <__aeabi_ddiv>
 800a032:	ec41 0b10 	vmov	d0, r0, r1
 800a036:	b005      	add	sp, #20
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a03c <__copybits>:
 800a03c:	3901      	subs	r1, #1
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	1149      	asrs	r1, r1, #5
 800a042:	6914      	ldr	r4, [r2, #16]
 800a044:	3101      	adds	r1, #1
 800a046:	f102 0314 	add.w	r3, r2, #20
 800a04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a052:	1f05      	subs	r5, r0, #4
 800a054:	42a3      	cmp	r3, r4
 800a056:	d30c      	bcc.n	800a072 <__copybits+0x36>
 800a058:	1aa3      	subs	r3, r4, r2
 800a05a:	3b11      	subs	r3, #17
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	3211      	adds	r2, #17
 800a062:	42a2      	cmp	r2, r4
 800a064:	bf88      	it	hi
 800a066:	2300      	movhi	r3, #0
 800a068:	4418      	add	r0, r3
 800a06a:	2300      	movs	r3, #0
 800a06c:	4288      	cmp	r0, r1
 800a06e:	d305      	bcc.n	800a07c <__copybits+0x40>
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	f853 6b04 	ldr.w	r6, [r3], #4
 800a076:	f845 6f04 	str.w	r6, [r5, #4]!
 800a07a:	e7eb      	b.n	800a054 <__copybits+0x18>
 800a07c:	f840 3b04 	str.w	r3, [r0], #4
 800a080:	e7f4      	b.n	800a06c <__copybits+0x30>

0800a082 <__any_on>:
 800a082:	f100 0214 	add.w	r2, r0, #20
 800a086:	6900      	ldr	r0, [r0, #16]
 800a088:	114b      	asrs	r3, r1, #5
 800a08a:	4298      	cmp	r0, r3
 800a08c:	b510      	push	{r4, lr}
 800a08e:	db11      	blt.n	800a0b4 <__any_on+0x32>
 800a090:	dd0a      	ble.n	800a0a8 <__any_on+0x26>
 800a092:	f011 011f 	ands.w	r1, r1, #31
 800a096:	d007      	beq.n	800a0a8 <__any_on+0x26>
 800a098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a09c:	fa24 f001 	lsr.w	r0, r4, r1
 800a0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800a0a4:	428c      	cmp	r4, r1
 800a0a6:	d10b      	bne.n	800a0c0 <__any_on+0x3e>
 800a0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d803      	bhi.n	800a0b8 <__any_on+0x36>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	bd10      	pop	{r4, pc}
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	e7f7      	b.n	800a0a8 <__any_on+0x26>
 800a0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d0f5      	beq.n	800a0ac <__any_on+0x2a>
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	e7f6      	b.n	800a0b2 <__any_on+0x30>

0800a0c4 <sulp>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	ec45 4b10 	vmov	d0, r4, r5
 800a0ce:	4616      	mov	r6, r2
 800a0d0:	f7ff feba 	bl	8009e48 <__ulp>
 800a0d4:	ec51 0b10 	vmov	r0, r1, d0
 800a0d8:	b17e      	cbz	r6, 800a0fa <sulp+0x36>
 800a0da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dd09      	ble.n	800a0fa <sulp+0x36>
 800a0e6:	051b      	lsls	r3, r3, #20
 800a0e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a0ec:	2400      	movs	r4, #0
 800a0ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	ec41 0b10 	vmov	d0, r0, r1
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}

0800a100 <_strtod_l>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	b09f      	sub	sp, #124	@ 0x7c
 800a106:	460c      	mov	r4, r1
 800a108:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a10a:	2200      	movs	r2, #0
 800a10c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a10e:	9005      	str	r0, [sp, #20]
 800a110:	f04f 0a00 	mov.w	sl, #0
 800a114:	f04f 0b00 	mov.w	fp, #0
 800a118:	460a      	mov	r2, r1
 800a11a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a11c:	7811      	ldrb	r1, [r2, #0]
 800a11e:	292b      	cmp	r1, #43	@ 0x2b
 800a120:	d04a      	beq.n	800a1b8 <_strtod_l+0xb8>
 800a122:	d838      	bhi.n	800a196 <_strtod_l+0x96>
 800a124:	290d      	cmp	r1, #13
 800a126:	d832      	bhi.n	800a18e <_strtod_l+0x8e>
 800a128:	2908      	cmp	r1, #8
 800a12a:	d832      	bhi.n	800a192 <_strtod_l+0x92>
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d03b      	beq.n	800a1a8 <_strtod_l+0xa8>
 800a130:	2200      	movs	r2, #0
 800a132:	920e      	str	r2, [sp, #56]	@ 0x38
 800a134:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a136:	782a      	ldrb	r2, [r5, #0]
 800a138:	2a30      	cmp	r2, #48	@ 0x30
 800a13a:	f040 80b2 	bne.w	800a2a2 <_strtod_l+0x1a2>
 800a13e:	786a      	ldrb	r2, [r5, #1]
 800a140:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a144:	2a58      	cmp	r2, #88	@ 0x58
 800a146:	d16e      	bne.n	800a226 <_strtod_l+0x126>
 800a148:	9302      	str	r3, [sp, #8]
 800a14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4a8f      	ldr	r2, [pc, #572]	@ (800a390 <_strtod_l+0x290>)
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a158:	a919      	add	r1, sp, #100	@ 0x64
 800a15a:	f001 f927 	bl	800b3ac <__gethex>
 800a15e:	f010 060f 	ands.w	r6, r0, #15
 800a162:	4604      	mov	r4, r0
 800a164:	d005      	beq.n	800a172 <_strtod_l+0x72>
 800a166:	2e06      	cmp	r6, #6
 800a168:	d128      	bne.n	800a1bc <_strtod_l+0xbc>
 800a16a:	3501      	adds	r5, #1
 800a16c:	2300      	movs	r3, #0
 800a16e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a170:	930e      	str	r3, [sp, #56]	@ 0x38
 800a172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f040 858e 	bne.w	800ac96 <_strtod_l+0xb96>
 800a17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a17c:	b1cb      	cbz	r3, 800a1b2 <_strtod_l+0xb2>
 800a17e:	4652      	mov	r2, sl
 800a180:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a184:	ec43 2b10 	vmov	d0, r2, r3
 800a188:	b01f      	add	sp, #124	@ 0x7c
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	2920      	cmp	r1, #32
 800a190:	d1ce      	bne.n	800a130 <_strtod_l+0x30>
 800a192:	3201      	adds	r2, #1
 800a194:	e7c1      	b.n	800a11a <_strtod_l+0x1a>
 800a196:	292d      	cmp	r1, #45	@ 0x2d
 800a198:	d1ca      	bne.n	800a130 <_strtod_l+0x30>
 800a19a:	2101      	movs	r1, #1
 800a19c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a19e:	1c51      	adds	r1, r2, #1
 800a1a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1a2:	7852      	ldrb	r2, [r2, #1]
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	d1c5      	bne.n	800a134 <_strtod_l+0x34>
 800a1a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8570 	bne.w	800ac92 <_strtod_l+0xb92>
 800a1b2:	4652      	mov	r2, sl
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	e7e5      	b.n	800a184 <_strtod_l+0x84>
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	e7ef      	b.n	800a19c <_strtod_l+0x9c>
 800a1bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1be:	b13a      	cbz	r2, 800a1d0 <_strtod_l+0xd0>
 800a1c0:	2135      	movs	r1, #53	@ 0x35
 800a1c2:	a81c      	add	r0, sp, #112	@ 0x70
 800a1c4:	f7ff ff3a 	bl	800a03c <__copybits>
 800a1c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1ca:	9805      	ldr	r0, [sp, #20]
 800a1cc:	f7ff fb10 	bl	80097f0 <_Bfree>
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a1d4:	2e04      	cmp	r6, #4
 800a1d6:	d806      	bhi.n	800a1e6 <_strtod_l+0xe6>
 800a1d8:	e8df f006 	tbb	[pc, r6]
 800a1dc:	201d0314 	.word	0x201d0314
 800a1e0:	14          	.byte	0x14
 800a1e1:	00          	.byte	0x00
 800a1e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a1e6:	05e1      	lsls	r1, r4, #23
 800a1e8:	bf48      	it	mi
 800a1ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1f2:	0d1b      	lsrs	r3, r3, #20
 800a1f4:	051b      	lsls	r3, r3, #20
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1bb      	bne.n	800a172 <_strtod_l+0x72>
 800a1fa:	f7fe fb2b 	bl	8008854 <__errno>
 800a1fe:	2322      	movs	r3, #34	@ 0x22
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	e7b6      	b.n	800a172 <_strtod_l+0x72>
 800a204:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a208:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a20c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a210:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a214:	e7e7      	b.n	800a1e6 <_strtod_l+0xe6>
 800a216:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a398 <_strtod_l+0x298>
 800a21a:	e7e4      	b.n	800a1e6 <_strtod_l+0xe6>
 800a21c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a220:	f04f 3aff 	mov.w	sl, #4294967295
 800a224:	e7df      	b.n	800a1e6 <_strtod_l+0xe6>
 800a226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2b30      	cmp	r3, #48	@ 0x30
 800a230:	d0f9      	beq.n	800a226 <_strtod_l+0x126>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d09d      	beq.n	800a172 <_strtod_l+0x72>
 800a236:	2301      	movs	r3, #1
 800a238:	2700      	movs	r7, #0
 800a23a:	9308      	str	r3, [sp, #32]
 800a23c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a23e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a240:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a242:	46b9      	mov	r9, r7
 800a244:	220a      	movs	r2, #10
 800a246:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a248:	7805      	ldrb	r5, [r0, #0]
 800a24a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a24e:	b2d9      	uxtb	r1, r3
 800a250:	2909      	cmp	r1, #9
 800a252:	d928      	bls.n	800a2a6 <_strtod_l+0x1a6>
 800a254:	494f      	ldr	r1, [pc, #316]	@ (800a394 <_strtod_l+0x294>)
 800a256:	2201      	movs	r2, #1
 800a258:	f000 ffd6 	bl	800b208 <strncmp>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d032      	beq.n	800a2c6 <_strtod_l+0x1c6>
 800a260:	2000      	movs	r0, #0
 800a262:	462a      	mov	r2, r5
 800a264:	900a      	str	r0, [sp, #40]	@ 0x28
 800a266:	464d      	mov	r5, r9
 800a268:	4603      	mov	r3, r0
 800a26a:	2a65      	cmp	r2, #101	@ 0x65
 800a26c:	d001      	beq.n	800a272 <_strtod_l+0x172>
 800a26e:	2a45      	cmp	r2, #69	@ 0x45
 800a270:	d114      	bne.n	800a29c <_strtod_l+0x19c>
 800a272:	b91d      	cbnz	r5, 800a27c <_strtod_l+0x17c>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	4302      	orrs	r2, r0
 800a278:	d096      	beq.n	800a1a8 <_strtod_l+0xa8>
 800a27a:	2500      	movs	r5, #0
 800a27c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a27e:	1c62      	adds	r2, r4, #1
 800a280:	9219      	str	r2, [sp, #100]	@ 0x64
 800a282:	7862      	ldrb	r2, [r4, #1]
 800a284:	2a2b      	cmp	r2, #43	@ 0x2b
 800a286:	d07a      	beq.n	800a37e <_strtod_l+0x27e>
 800a288:	2a2d      	cmp	r2, #45	@ 0x2d
 800a28a:	d07e      	beq.n	800a38a <_strtod_l+0x28a>
 800a28c:	f04f 0c00 	mov.w	ip, #0
 800a290:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a294:	2909      	cmp	r1, #9
 800a296:	f240 8085 	bls.w	800a3a4 <_strtod_l+0x2a4>
 800a29a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a29c:	f04f 0800 	mov.w	r8, #0
 800a2a0:	e0a5      	b.n	800a3ee <_strtod_l+0x2ee>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e7c8      	b.n	800a238 <_strtod_l+0x138>
 800a2a6:	f1b9 0f08 	cmp.w	r9, #8
 800a2aa:	bfd8      	it	le
 800a2ac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a2ae:	f100 0001 	add.w	r0, r0, #1
 800a2b2:	bfda      	itte	le
 800a2b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a2ba:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a2be:	f109 0901 	add.w	r9, r9, #1
 800a2c2:	9019      	str	r0, [sp, #100]	@ 0x64
 800a2c4:	e7bf      	b.n	800a246 <_strtod_l+0x146>
 800a2c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2cc:	785a      	ldrb	r2, [r3, #1]
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
 800a2d2:	d03b      	beq.n	800a34c <_strtod_l+0x24c>
 800a2d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2d6:	464d      	mov	r5, r9
 800a2d8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a2dc:	2b09      	cmp	r3, #9
 800a2de:	d912      	bls.n	800a306 <_strtod_l+0x206>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7c2      	b.n	800a26a <_strtod_l+0x16a>
 800a2e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2ea:	785a      	ldrb	r2, [r3, #1]
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	2a30      	cmp	r2, #48	@ 0x30
 800a2f0:	d0f8      	beq.n	800a2e4 <_strtod_l+0x1e4>
 800a2f2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	f200 84d2 	bhi.w	800aca0 <_strtod_l+0xba0>
 800a2fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800a300:	2000      	movs	r0, #0
 800a302:	930c      	str	r3, [sp, #48]	@ 0x30
 800a304:	4605      	mov	r5, r0
 800a306:	3a30      	subs	r2, #48	@ 0x30
 800a308:	f100 0301 	add.w	r3, r0, #1
 800a30c:	d018      	beq.n	800a340 <_strtod_l+0x240>
 800a30e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a310:	4419      	add	r1, r3
 800a312:	910a      	str	r1, [sp, #40]	@ 0x28
 800a314:	462e      	mov	r6, r5
 800a316:	f04f 0e0a 	mov.w	lr, #10
 800a31a:	1c71      	adds	r1, r6, #1
 800a31c:	eba1 0c05 	sub.w	ip, r1, r5
 800a320:	4563      	cmp	r3, ip
 800a322:	dc15      	bgt.n	800a350 <_strtod_l+0x250>
 800a324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a328:	182b      	adds	r3, r5, r0
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	f105 0501 	add.w	r5, r5, #1
 800a330:	4405      	add	r5, r0
 800a332:	dc1a      	bgt.n	800a36a <_strtod_l+0x26a>
 800a334:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a336:	230a      	movs	r3, #10
 800a338:	fb03 2301 	mla	r3, r3, r1, r2
 800a33c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33e:	2300      	movs	r3, #0
 800a340:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a342:	1c51      	adds	r1, r2, #1
 800a344:	9119      	str	r1, [sp, #100]	@ 0x64
 800a346:	7852      	ldrb	r2, [r2, #1]
 800a348:	4618      	mov	r0, r3
 800a34a:	e7c5      	b.n	800a2d8 <_strtod_l+0x1d8>
 800a34c:	4648      	mov	r0, r9
 800a34e:	e7ce      	b.n	800a2ee <_strtod_l+0x1ee>
 800a350:	2e08      	cmp	r6, #8
 800a352:	dc05      	bgt.n	800a360 <_strtod_l+0x260>
 800a354:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a356:	fb0e f606 	mul.w	r6, lr, r6
 800a35a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a35c:	460e      	mov	r6, r1
 800a35e:	e7dc      	b.n	800a31a <_strtod_l+0x21a>
 800a360:	2910      	cmp	r1, #16
 800a362:	bfd8      	it	le
 800a364:	fb0e f707 	mulle.w	r7, lr, r7
 800a368:	e7f8      	b.n	800a35c <_strtod_l+0x25c>
 800a36a:	2b0f      	cmp	r3, #15
 800a36c:	bfdc      	itt	le
 800a36e:	230a      	movle	r3, #10
 800a370:	fb03 2707 	mlale	r7, r3, r7, r2
 800a374:	e7e3      	b.n	800a33e <_strtod_l+0x23e>
 800a376:	2300      	movs	r3, #0
 800a378:	930a      	str	r3, [sp, #40]	@ 0x28
 800a37a:	2301      	movs	r3, #1
 800a37c:	e77a      	b.n	800a274 <_strtod_l+0x174>
 800a37e:	f04f 0c00 	mov.w	ip, #0
 800a382:	1ca2      	adds	r2, r4, #2
 800a384:	9219      	str	r2, [sp, #100]	@ 0x64
 800a386:	78a2      	ldrb	r2, [r4, #2]
 800a388:	e782      	b.n	800a290 <_strtod_l+0x190>
 800a38a:	f04f 0c01 	mov.w	ip, #1
 800a38e:	e7f8      	b.n	800a382 <_strtod_l+0x282>
 800a390:	0800c2b4 	.word	0x0800c2b4
 800a394:	0800c0e7 	.word	0x0800c0e7
 800a398:	7ff00000 	.word	0x7ff00000
 800a39c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a39e:	1c51      	adds	r1, r2, #1
 800a3a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3a2:	7852      	ldrb	r2, [r2, #1]
 800a3a4:	2a30      	cmp	r2, #48	@ 0x30
 800a3a6:	d0f9      	beq.n	800a39c <_strtod_l+0x29c>
 800a3a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3ac:	2908      	cmp	r1, #8
 800a3ae:	f63f af75 	bhi.w	800a29c <_strtod_l+0x19c>
 800a3b2:	3a30      	subs	r2, #48	@ 0x30
 800a3b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a3ba:	f04f 080a 	mov.w	r8, #10
 800a3be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3c0:	1c56      	adds	r6, r2, #1
 800a3c2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a3c4:	7852      	ldrb	r2, [r2, #1]
 800a3c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a3ca:	f1be 0f09 	cmp.w	lr, #9
 800a3ce:	d939      	bls.n	800a444 <_strtod_l+0x344>
 800a3d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a3d2:	1a76      	subs	r6, r6, r1
 800a3d4:	2e08      	cmp	r6, #8
 800a3d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a3da:	dc03      	bgt.n	800a3e4 <_strtod_l+0x2e4>
 800a3dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3de:	4588      	cmp	r8, r1
 800a3e0:	bfa8      	it	ge
 800a3e2:	4688      	movge	r8, r1
 800a3e4:	f1bc 0f00 	cmp.w	ip, #0
 800a3e8:	d001      	beq.n	800a3ee <_strtod_l+0x2ee>
 800a3ea:	f1c8 0800 	rsb	r8, r8, #0
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	d14e      	bne.n	800a490 <_strtod_l+0x390>
 800a3f2:	9908      	ldr	r1, [sp, #32]
 800a3f4:	4308      	orrs	r0, r1
 800a3f6:	f47f aebc 	bne.w	800a172 <_strtod_l+0x72>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f aed4 	bne.w	800a1a8 <_strtod_l+0xa8>
 800a400:	2a69      	cmp	r2, #105	@ 0x69
 800a402:	d028      	beq.n	800a456 <_strtod_l+0x356>
 800a404:	dc25      	bgt.n	800a452 <_strtod_l+0x352>
 800a406:	2a49      	cmp	r2, #73	@ 0x49
 800a408:	d025      	beq.n	800a456 <_strtod_l+0x356>
 800a40a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a40c:	f47f aecc 	bne.w	800a1a8 <_strtod_l+0xa8>
 800a410:	499a      	ldr	r1, [pc, #616]	@ (800a67c <_strtod_l+0x57c>)
 800a412:	a819      	add	r0, sp, #100	@ 0x64
 800a414:	f001 f9ec 	bl	800b7f0 <__match>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f43f aec5 	beq.w	800a1a8 <_strtod_l+0xa8>
 800a41e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b28      	cmp	r3, #40	@ 0x28
 800a424:	d12e      	bne.n	800a484 <_strtod_l+0x384>
 800a426:	4996      	ldr	r1, [pc, #600]	@ (800a680 <_strtod_l+0x580>)
 800a428:	aa1c      	add	r2, sp, #112	@ 0x70
 800a42a:	a819      	add	r0, sp, #100	@ 0x64
 800a42c:	f001 f9f4 	bl	800b818 <__hexnan>
 800a430:	2805      	cmp	r0, #5
 800a432:	d127      	bne.n	800a484 <_strtod_l+0x384>
 800a434:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a436:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a43a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a43e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a442:	e696      	b.n	800a172 <_strtod_l+0x72>
 800a444:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a446:	fb08 2101 	mla	r1, r8, r1, r2
 800a44a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a44e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a450:	e7b5      	b.n	800a3be <_strtod_l+0x2be>
 800a452:	2a6e      	cmp	r2, #110	@ 0x6e
 800a454:	e7da      	b.n	800a40c <_strtod_l+0x30c>
 800a456:	498b      	ldr	r1, [pc, #556]	@ (800a684 <_strtod_l+0x584>)
 800a458:	a819      	add	r0, sp, #100	@ 0x64
 800a45a:	f001 f9c9 	bl	800b7f0 <__match>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f aea2 	beq.w	800a1a8 <_strtod_l+0xa8>
 800a464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a466:	4988      	ldr	r1, [pc, #544]	@ (800a688 <_strtod_l+0x588>)
 800a468:	3b01      	subs	r3, #1
 800a46a:	a819      	add	r0, sp, #100	@ 0x64
 800a46c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a46e:	f001 f9bf 	bl	800b7f0 <__match>
 800a472:	b910      	cbnz	r0, 800a47a <_strtod_l+0x37a>
 800a474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a476:	3301      	adds	r3, #1
 800a478:	9319      	str	r3, [sp, #100]	@ 0x64
 800a47a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a698 <_strtod_l+0x598>
 800a47e:	f04f 0a00 	mov.w	sl, #0
 800a482:	e676      	b.n	800a172 <_strtod_l+0x72>
 800a484:	4881      	ldr	r0, [pc, #516]	@ (800a68c <_strtod_l+0x58c>)
 800a486:	f000 feef 	bl	800b268 <nan>
 800a48a:	ec5b ab10 	vmov	sl, fp, d0
 800a48e:	e670      	b.n	800a172 <_strtod_l+0x72>
 800a490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a492:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a494:	eba8 0303 	sub.w	r3, r8, r3
 800a498:	f1b9 0f00 	cmp.w	r9, #0
 800a49c:	bf08      	it	eq
 800a49e:	46a9      	moveq	r9, r5
 800a4a0:	2d10      	cmp	r5, #16
 800a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a4:	462c      	mov	r4, r5
 800a4a6:	bfa8      	it	ge
 800a4a8:	2410      	movge	r4, #16
 800a4aa:	f7f6 f82b 	bl	8000504 <__aeabi_ui2d>
 800a4ae:	2d09      	cmp	r5, #9
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	dc13      	bgt.n	800a4de <_strtod_l+0x3de>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f43f ae5a 	beq.w	800a172 <_strtod_l+0x72>
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	dd78      	ble.n	800a5b4 <_strtod_l+0x4b4>
 800a4c2:	2b16      	cmp	r3, #22
 800a4c4:	dc5f      	bgt.n	800a586 <_strtod_l+0x486>
 800a4c6:	4972      	ldr	r1, [pc, #456]	@ (800a690 <_strtod_l+0x590>)
 800a4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	4682      	mov	sl, r0
 800a4da:	468b      	mov	fp, r1
 800a4dc:	e649      	b.n	800a172 <_strtod_l+0x72>
 800a4de:	4b6c      	ldr	r3, [pc, #432]	@ (800a690 <_strtod_l+0x590>)
 800a4e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	468b      	mov	fp, r1
 800a4f2:	f7f6 f807 	bl	8000504 <__aeabi_ui2d>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f7f5 fec5 	bl	800028c <__adddf3>
 800a502:	2d0f      	cmp	r5, #15
 800a504:	4682      	mov	sl, r0
 800a506:	468b      	mov	fp, r1
 800a508:	ddd5      	ble.n	800a4b6 <_strtod_l+0x3b6>
 800a50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50c:	1b2c      	subs	r4, r5, r4
 800a50e:	441c      	add	r4, r3
 800a510:	2c00      	cmp	r4, #0
 800a512:	f340 8093 	ble.w	800a63c <_strtod_l+0x53c>
 800a516:	f014 030f 	ands.w	r3, r4, #15
 800a51a:	d00a      	beq.n	800a532 <_strtod_l+0x432>
 800a51c:	495c      	ldr	r1, [pc, #368]	@ (800a690 <_strtod_l+0x590>)
 800a51e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a522:	4652      	mov	r2, sl
 800a524:	465b      	mov	r3, fp
 800a526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	4682      	mov	sl, r0
 800a530:	468b      	mov	fp, r1
 800a532:	f034 040f 	bics.w	r4, r4, #15
 800a536:	d073      	beq.n	800a620 <_strtod_l+0x520>
 800a538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a53c:	dd49      	ble.n	800a5d2 <_strtod_l+0x4d2>
 800a53e:	2400      	movs	r4, #0
 800a540:	46a0      	mov	r8, r4
 800a542:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a544:	46a1      	mov	r9, r4
 800a546:	9a05      	ldr	r2, [sp, #20]
 800a548:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a698 <_strtod_l+0x598>
 800a54c:	2322      	movs	r3, #34	@ 0x22
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	f04f 0a00 	mov.w	sl, #0
 800a554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a556:	2b00      	cmp	r3, #0
 800a558:	f43f ae0b 	beq.w	800a172 <_strtod_l+0x72>
 800a55c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a55e:	9805      	ldr	r0, [sp, #20]
 800a560:	f7ff f946 	bl	80097f0 <_Bfree>
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	4649      	mov	r1, r9
 800a568:	f7ff f942 	bl	80097f0 <_Bfree>
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	4641      	mov	r1, r8
 800a570:	f7ff f93e 	bl	80097f0 <_Bfree>
 800a574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a576:	9805      	ldr	r0, [sp, #20]
 800a578:	f7ff f93a 	bl	80097f0 <_Bfree>
 800a57c:	9805      	ldr	r0, [sp, #20]
 800a57e:	4621      	mov	r1, r4
 800a580:	f7ff f936 	bl	80097f0 <_Bfree>
 800a584:	e5f5      	b.n	800a172 <_strtod_l+0x72>
 800a586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a58c:	4293      	cmp	r3, r2
 800a58e:	dbbc      	blt.n	800a50a <_strtod_l+0x40a>
 800a590:	4c3f      	ldr	r4, [pc, #252]	@ (800a690 <_strtod_l+0x590>)
 800a592:	f1c5 050f 	rsb	r5, r5, #15
 800a596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a59a:	4652      	mov	r2, sl
 800a59c:	465b      	mov	r3, fp
 800a59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a2:	f7f6 f829 	bl	80005f8 <__aeabi_dmul>
 800a5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a8:	1b5d      	subs	r5, r3, r5
 800a5aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5b2:	e78f      	b.n	800a4d4 <_strtod_l+0x3d4>
 800a5b4:	3316      	adds	r3, #22
 800a5b6:	dba8      	blt.n	800a50a <_strtod_l+0x40a>
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	eba3 0808 	sub.w	r8, r3, r8
 800a5be:	4b34      	ldr	r3, [pc, #208]	@ (800a690 <_strtod_l+0x590>)
 800a5c0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a5c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	f7f6 f93e 	bl	800084c <__aeabi_ddiv>
 800a5d0:	e782      	b.n	800a4d8 <_strtod_l+0x3d8>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4f2f      	ldr	r7, [pc, #188]	@ (800a694 <_strtod_l+0x594>)
 800a5d6:	1124      	asrs	r4, r4, #4
 800a5d8:	4650      	mov	r0, sl
 800a5da:	4659      	mov	r1, fp
 800a5dc:	461e      	mov	r6, r3
 800a5de:	2c01      	cmp	r4, #1
 800a5e0:	dc21      	bgt.n	800a626 <_strtod_l+0x526>
 800a5e2:	b10b      	cbz	r3, 800a5e8 <_strtod_l+0x4e8>
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	468b      	mov	fp, r1
 800a5e8:	492a      	ldr	r1, [pc, #168]	@ (800a694 <_strtod_l+0x594>)
 800a5ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a5f2:	4652      	mov	r2, sl
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fa:	f7f5 fffd 	bl	80005f8 <__aeabi_dmul>
 800a5fe:	4b26      	ldr	r3, [pc, #152]	@ (800a698 <_strtod_l+0x598>)
 800a600:	460a      	mov	r2, r1
 800a602:	400b      	ands	r3, r1
 800a604:	4925      	ldr	r1, [pc, #148]	@ (800a69c <_strtod_l+0x59c>)
 800a606:	428b      	cmp	r3, r1
 800a608:	4682      	mov	sl, r0
 800a60a:	d898      	bhi.n	800a53e <_strtod_l+0x43e>
 800a60c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a610:	428b      	cmp	r3, r1
 800a612:	bf86      	itte	hi
 800a614:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a6a0 <_strtod_l+0x5a0>
 800a618:	f04f 3aff 	movhi.w	sl, #4294967295
 800a61c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a620:	2300      	movs	r3, #0
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	e076      	b.n	800a714 <_strtod_l+0x614>
 800a626:	07e2      	lsls	r2, r4, #31
 800a628:	d504      	bpl.n	800a634 <_strtod_l+0x534>
 800a62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a62e:	f7f5 ffe3 	bl	80005f8 <__aeabi_dmul>
 800a632:	2301      	movs	r3, #1
 800a634:	3601      	adds	r6, #1
 800a636:	1064      	asrs	r4, r4, #1
 800a638:	3708      	adds	r7, #8
 800a63a:	e7d0      	b.n	800a5de <_strtod_l+0x4de>
 800a63c:	d0f0      	beq.n	800a620 <_strtod_l+0x520>
 800a63e:	4264      	negs	r4, r4
 800a640:	f014 020f 	ands.w	r2, r4, #15
 800a644:	d00a      	beq.n	800a65c <_strtod_l+0x55c>
 800a646:	4b12      	ldr	r3, [pc, #72]	@ (800a690 <_strtod_l+0x590>)
 800a648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a64c:	4650      	mov	r0, sl
 800a64e:	4659      	mov	r1, fp
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f6 f8fa 	bl	800084c <__aeabi_ddiv>
 800a658:	4682      	mov	sl, r0
 800a65a:	468b      	mov	fp, r1
 800a65c:	1124      	asrs	r4, r4, #4
 800a65e:	d0df      	beq.n	800a620 <_strtod_l+0x520>
 800a660:	2c1f      	cmp	r4, #31
 800a662:	dd1f      	ble.n	800a6a4 <_strtod_l+0x5a4>
 800a664:	2400      	movs	r4, #0
 800a666:	46a0      	mov	r8, r4
 800a668:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a66a:	46a1      	mov	r9, r4
 800a66c:	9a05      	ldr	r2, [sp, #20]
 800a66e:	2322      	movs	r3, #34	@ 0x22
 800a670:	f04f 0a00 	mov.w	sl, #0
 800a674:	f04f 0b00 	mov.w	fp, #0
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	e76b      	b.n	800a554 <_strtod_l+0x454>
 800a67c:	0800bfd5 	.word	0x0800bfd5
 800a680:	0800c2a0 	.word	0x0800c2a0
 800a684:	0800bfcd 	.word	0x0800bfcd
 800a688:	0800c004 	.word	0x0800c004
 800a68c:	0800c13d 	.word	0x0800c13d
 800a690:	0800c1d8 	.word	0x0800c1d8
 800a694:	0800c1b0 	.word	0x0800c1b0
 800a698:	7ff00000 	.word	0x7ff00000
 800a69c:	7ca00000 	.word	0x7ca00000
 800a6a0:	7fefffff 	.word	0x7fefffff
 800a6a4:	f014 0310 	ands.w	r3, r4, #16
 800a6a8:	bf18      	it	ne
 800a6aa:	236a      	movne	r3, #106	@ 0x6a
 800a6ac:	4ea9      	ldr	r6, [pc, #676]	@ (800a954 <_strtod_l+0x854>)
 800a6ae:	9308      	str	r3, [sp, #32]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	07e7      	lsls	r7, r4, #31
 800a6b8:	d504      	bpl.n	800a6c4 <_strtod_l+0x5c4>
 800a6ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	1064      	asrs	r4, r4, #1
 800a6c6:	f106 0608 	add.w	r6, r6, #8
 800a6ca:	d1f4      	bne.n	800a6b6 <_strtod_l+0x5b6>
 800a6cc:	b10b      	cbz	r3, 800a6d2 <_strtod_l+0x5d2>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	9b08      	ldr	r3, [sp, #32]
 800a6d4:	b1b3      	cbz	r3, 800a704 <_strtod_l+0x604>
 800a6d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a6da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	4659      	mov	r1, fp
 800a6e2:	dd0f      	ble.n	800a704 <_strtod_l+0x604>
 800a6e4:	2b1f      	cmp	r3, #31
 800a6e6:	dd56      	ble.n	800a796 <_strtod_l+0x696>
 800a6e8:	2b34      	cmp	r3, #52	@ 0x34
 800a6ea:	bfde      	ittt	le
 800a6ec:	f04f 33ff 	movle.w	r3, #4294967295
 800a6f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a6f4:	4093      	lslle	r3, r2
 800a6f6:	f04f 0a00 	mov.w	sl, #0
 800a6fa:	bfcc      	ite	gt
 800a6fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a700:	ea03 0b01 	andle.w	fp, r3, r1
 800a704:	2200      	movs	r2, #0
 800a706:	2300      	movs	r3, #0
 800a708:	4650      	mov	r0, sl
 800a70a:	4659      	mov	r1, fp
 800a70c:	f7f6 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a710:	2800      	cmp	r0, #0
 800a712:	d1a7      	bne.n	800a664 <_strtod_l+0x564>
 800a714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a71a:	9805      	ldr	r0, [sp, #20]
 800a71c:	462b      	mov	r3, r5
 800a71e:	464a      	mov	r2, r9
 800a720:	f7ff f8ce 	bl	80098c0 <__s2b>
 800a724:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a726:	2800      	cmp	r0, #0
 800a728:	f43f af09 	beq.w	800a53e <_strtod_l+0x43e>
 800a72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a72e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a730:	2a00      	cmp	r2, #0
 800a732:	eba3 0308 	sub.w	r3, r3, r8
 800a736:	bfa8      	it	ge
 800a738:	2300      	movge	r3, #0
 800a73a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a73c:	2400      	movs	r4, #0
 800a73e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a742:	9316      	str	r3, [sp, #88]	@ 0x58
 800a744:	46a0      	mov	r8, r4
 800a746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	6859      	ldr	r1, [r3, #4]
 800a74c:	f7ff f810 	bl	8009770 <_Balloc>
 800a750:	4681      	mov	r9, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	f43f aef7 	beq.w	800a546 <_strtod_l+0x446>
 800a758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	3202      	adds	r2, #2
 800a75e:	f103 010c 	add.w	r1, r3, #12
 800a762:	0092      	lsls	r2, r2, #2
 800a764:	300c      	adds	r0, #12
 800a766:	f000 fd71 	bl	800b24c <memcpy>
 800a76a:	ec4b ab10 	vmov	d0, sl, fp
 800a76e:	9805      	ldr	r0, [sp, #20]
 800a770:	aa1c      	add	r2, sp, #112	@ 0x70
 800a772:	a91b      	add	r1, sp, #108	@ 0x6c
 800a774:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a778:	f7ff fbd6 	bl	8009f28 <__d2b>
 800a77c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a77e:	2800      	cmp	r0, #0
 800a780:	f43f aee1 	beq.w	800a546 <_strtod_l+0x446>
 800a784:	9805      	ldr	r0, [sp, #20]
 800a786:	2101      	movs	r1, #1
 800a788:	f7ff f930 	bl	80099ec <__i2b>
 800a78c:	4680      	mov	r8, r0
 800a78e:	b948      	cbnz	r0, 800a7a4 <_strtod_l+0x6a4>
 800a790:	f04f 0800 	mov.w	r8, #0
 800a794:	e6d7      	b.n	800a546 <_strtod_l+0x446>
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	fa02 f303 	lsl.w	r3, r2, r3
 800a79e:	ea03 0a0a 	and.w	sl, r3, sl
 800a7a2:	e7af      	b.n	800a704 <_strtod_l+0x604>
 800a7a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a7a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	bfab      	itete	ge
 800a7ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a7ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a7b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a7b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a7b4:	bfac      	ite	ge
 800a7b6:	18ef      	addge	r7, r5, r3
 800a7b8:	1b5e      	sublt	r6, r3, r5
 800a7ba:	9b08      	ldr	r3, [sp, #32]
 800a7bc:	1aed      	subs	r5, r5, r3
 800a7be:	4415      	add	r5, r2
 800a7c0:	4b65      	ldr	r3, [pc, #404]	@ (800a958 <_strtod_l+0x858>)
 800a7c2:	3d01      	subs	r5, #1
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7ca:	da50      	bge.n	800a86e <_strtod_l+0x76e>
 800a7cc:	1b5b      	subs	r3, r3, r5
 800a7ce:	2b1f      	cmp	r3, #31
 800a7d0:	eba2 0203 	sub.w	r2, r2, r3
 800a7d4:	f04f 0101 	mov.w	r1, #1
 800a7d8:	dc3d      	bgt.n	800a856 <_strtod_l+0x756>
 800a7da:	fa01 f303 	lsl.w	r3, r1, r3
 800a7de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7e4:	18bd      	adds	r5, r7, r2
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	42af      	cmp	r7, r5
 800a7ea:	4416      	add	r6, r2
 800a7ec:	441e      	add	r6, r3
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	bfa8      	it	ge
 800a7f2:	462b      	movge	r3, r5
 800a7f4:	42b3      	cmp	r3, r6
 800a7f6:	bfa8      	it	ge
 800a7f8:	4633      	movge	r3, r6
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	bfc2      	ittt	gt
 800a7fe:	1aed      	subgt	r5, r5, r3
 800a800:	1af6      	subgt	r6, r6, r3
 800a802:	1aff      	subgt	r7, r7, r3
 800a804:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a806:	2b00      	cmp	r3, #0
 800a808:	dd16      	ble.n	800a838 <_strtod_l+0x738>
 800a80a:	4641      	mov	r1, r8
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7ff f9a4 	bl	8009b5c <__pow5mult>
 800a814:	4680      	mov	r8, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	d0ba      	beq.n	800a790 <_strtod_l+0x690>
 800a81a:	4601      	mov	r1, r0
 800a81c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a81e:	9805      	ldr	r0, [sp, #20]
 800a820:	f7ff f8fa 	bl	8009a18 <__multiply>
 800a824:	900a      	str	r0, [sp, #40]	@ 0x28
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f ae8d 	beq.w	800a546 <_strtod_l+0x446>
 800a82c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a82e:	9805      	ldr	r0, [sp, #20]
 800a830:	f7fe ffde 	bl	80097f0 <_Bfree>
 800a834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a836:	931a      	str	r3, [sp, #104]	@ 0x68
 800a838:	2d00      	cmp	r5, #0
 800a83a:	dc1d      	bgt.n	800a878 <_strtod_l+0x778>
 800a83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd23      	ble.n	800a88a <_strtod_l+0x78a>
 800a842:	4649      	mov	r1, r9
 800a844:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a846:	9805      	ldr	r0, [sp, #20]
 800a848:	f7ff f988 	bl	8009b5c <__pow5mult>
 800a84c:	4681      	mov	r9, r0
 800a84e:	b9e0      	cbnz	r0, 800a88a <_strtod_l+0x78a>
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	e677      	b.n	800a546 <_strtod_l+0x446>
 800a856:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a85a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a85e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a862:	35e2      	adds	r5, #226	@ 0xe2
 800a864:	fa01 f305 	lsl.w	r3, r1, r5
 800a868:	9310      	str	r3, [sp, #64]	@ 0x40
 800a86a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a86c:	e7ba      	b.n	800a7e4 <_strtod_l+0x6e4>
 800a86e:	2300      	movs	r3, #0
 800a870:	9310      	str	r3, [sp, #64]	@ 0x40
 800a872:	2301      	movs	r3, #1
 800a874:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a876:	e7b5      	b.n	800a7e4 <_strtod_l+0x6e4>
 800a878:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a87a:	9805      	ldr	r0, [sp, #20]
 800a87c:	462a      	mov	r2, r5
 800a87e:	f7ff f9c7 	bl	8009c10 <__lshift>
 800a882:	901a      	str	r0, [sp, #104]	@ 0x68
 800a884:	2800      	cmp	r0, #0
 800a886:	d1d9      	bne.n	800a83c <_strtod_l+0x73c>
 800a888:	e65d      	b.n	800a546 <_strtod_l+0x446>
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	dd07      	ble.n	800a89e <_strtod_l+0x79e>
 800a88e:	4649      	mov	r1, r9
 800a890:	9805      	ldr	r0, [sp, #20]
 800a892:	4632      	mov	r2, r6
 800a894:	f7ff f9bc 	bl	8009c10 <__lshift>
 800a898:	4681      	mov	r9, r0
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d0d8      	beq.n	800a850 <_strtod_l+0x750>
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	dd08      	ble.n	800a8b4 <_strtod_l+0x7b4>
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	9805      	ldr	r0, [sp, #20]
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	f7ff f9b2 	bl	8009c10 <__lshift>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f ae49 	beq.w	800a546 <_strtod_l+0x446>
 800a8b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8b6:	9805      	ldr	r0, [sp, #20]
 800a8b8:	464a      	mov	r2, r9
 800a8ba:	f7ff fa31 	bl	8009d20 <__mdiff>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f ae40 	beq.w	800a546 <_strtod_l+0x446>
 800a8c6:	68c3      	ldr	r3, [r0, #12]
 800a8c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60c3      	str	r3, [r0, #12]
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	f7ff fa0a 	bl	8009ce8 <__mcmp>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	da45      	bge.n	800a964 <_strtod_l+0x864>
 800a8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8da:	ea53 030a 	orrs.w	r3, r3, sl
 800a8de:	d16b      	bne.n	800a9b8 <_strtod_l+0x8b8>
 800a8e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d167      	bne.n	800a9b8 <_strtod_l+0x8b8>
 800a8e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8ec:	0d1b      	lsrs	r3, r3, #20
 800a8ee:	051b      	lsls	r3, r3, #20
 800a8f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8f4:	d960      	bls.n	800a9b8 <_strtod_l+0x8b8>
 800a8f6:	6963      	ldr	r3, [r4, #20]
 800a8f8:	b913      	cbnz	r3, 800a900 <_strtod_l+0x800>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	dd5b      	ble.n	800a9b8 <_strtod_l+0x8b8>
 800a900:	4621      	mov	r1, r4
 800a902:	2201      	movs	r2, #1
 800a904:	9805      	ldr	r0, [sp, #20]
 800a906:	f7ff f983 	bl	8009c10 <__lshift>
 800a90a:	4641      	mov	r1, r8
 800a90c:	4604      	mov	r4, r0
 800a90e:	f7ff f9eb 	bl	8009ce8 <__mcmp>
 800a912:	2800      	cmp	r0, #0
 800a914:	dd50      	ble.n	800a9b8 <_strtod_l+0x8b8>
 800a916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a91a:	9a08      	ldr	r2, [sp, #32]
 800a91c:	0d1b      	lsrs	r3, r3, #20
 800a91e:	051b      	lsls	r3, r3, #20
 800a920:	2a00      	cmp	r2, #0
 800a922:	d06a      	beq.n	800a9fa <_strtod_l+0x8fa>
 800a924:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a928:	d867      	bhi.n	800a9fa <_strtod_l+0x8fa>
 800a92a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a92e:	f67f ae9d 	bls.w	800a66c <_strtod_l+0x56c>
 800a932:	4b0a      	ldr	r3, [pc, #40]	@ (800a95c <_strtod_l+0x85c>)
 800a934:	4650      	mov	r0, sl
 800a936:	4659      	mov	r1, fp
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fe5d 	bl	80005f8 <__aeabi_dmul>
 800a93e:	4b08      	ldr	r3, [pc, #32]	@ (800a960 <_strtod_l+0x860>)
 800a940:	400b      	ands	r3, r1
 800a942:	4682      	mov	sl, r0
 800a944:	468b      	mov	fp, r1
 800a946:	2b00      	cmp	r3, #0
 800a948:	f47f ae08 	bne.w	800a55c <_strtod_l+0x45c>
 800a94c:	9a05      	ldr	r2, [sp, #20]
 800a94e:	2322      	movs	r3, #34	@ 0x22
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e603      	b.n	800a55c <_strtod_l+0x45c>
 800a954:	0800c2c8 	.word	0x0800c2c8
 800a958:	fffffc02 	.word	0xfffffc02
 800a95c:	39500000 	.word	0x39500000
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a968:	d165      	bne.n	800aa36 <_strtod_l+0x936>
 800a96a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a96c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a970:	b35a      	cbz	r2, 800a9ca <_strtod_l+0x8ca>
 800a972:	4a9f      	ldr	r2, [pc, #636]	@ (800abf0 <_strtod_l+0xaf0>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d12b      	bne.n	800a9d0 <_strtod_l+0x8d0>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	4651      	mov	r1, sl
 800a97c:	b303      	cbz	r3, 800a9c0 <_strtod_l+0x8c0>
 800a97e:	4b9d      	ldr	r3, [pc, #628]	@ (800abf4 <_strtod_l+0xaf4>)
 800a980:	465a      	mov	r2, fp
 800a982:	4013      	ands	r3, r2
 800a984:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a988:	f04f 32ff 	mov.w	r2, #4294967295
 800a98c:	d81b      	bhi.n	800a9c6 <_strtod_l+0x8c6>
 800a98e:	0d1b      	lsrs	r3, r3, #20
 800a990:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	4299      	cmp	r1, r3
 800a99a:	d119      	bne.n	800a9d0 <_strtod_l+0x8d0>
 800a99c:	4b96      	ldr	r3, [pc, #600]	@ (800abf8 <_strtod_l+0xaf8>)
 800a99e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d102      	bne.n	800a9aa <_strtod_l+0x8aa>
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f43f adce 	beq.w	800a546 <_strtod_l+0x446>
 800a9aa:	4b92      	ldr	r3, [pc, #584]	@ (800abf4 <_strtod_l+0xaf4>)
 800a9ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9ae:	401a      	ands	r2, r3
 800a9b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a9b4:	f04f 0a00 	mov.w	sl, #0
 800a9b8:	9b08      	ldr	r3, [sp, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1b9      	bne.n	800a932 <_strtod_l+0x832>
 800a9be:	e5cd      	b.n	800a55c <_strtod_l+0x45c>
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	e7e8      	b.n	800a998 <_strtod_l+0x898>
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	e7e6      	b.n	800a998 <_strtod_l+0x898>
 800a9ca:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ce:	d0a2      	beq.n	800a916 <_strtod_l+0x816>
 800a9d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9d2:	b1db      	cbz	r3, 800aa0c <_strtod_l+0x90c>
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9d6:	4213      	tst	r3, r2
 800a9d8:	d0ee      	beq.n	800a9b8 <_strtod_l+0x8b8>
 800a9da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	4650      	mov	r0, sl
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	b1bb      	cbz	r3, 800aa14 <_strtod_l+0x914>
 800a9e4:	f7ff fb6e 	bl	800a0c4 <sulp>
 800a9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ec:	ec53 2b10 	vmov	r2, r3, d0
 800a9f0:	f7f5 fc4c 	bl	800028c <__adddf3>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	468b      	mov	fp, r1
 800a9f8:	e7de      	b.n	800a9b8 <_strtod_l+0x8b8>
 800a9fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa06:	f04f 3aff 	mov.w	sl, #4294967295
 800aa0a:	e7d5      	b.n	800a9b8 <_strtod_l+0x8b8>
 800aa0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa0e:	ea13 0f0a 	tst.w	r3, sl
 800aa12:	e7e1      	b.n	800a9d8 <_strtod_l+0x8d8>
 800aa14:	f7ff fb56 	bl	800a0c4 <sulp>
 800aa18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa1c:	ec53 2b10 	vmov	r2, r3, d0
 800aa20:	f7f5 fc32 	bl	8000288 <__aeabi_dsub>
 800aa24:	2200      	movs	r2, #0
 800aa26:	2300      	movs	r3, #0
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	f7f6 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d0c1      	beq.n	800a9b8 <_strtod_l+0x8b8>
 800aa34:	e61a      	b.n	800a66c <_strtod_l+0x56c>
 800aa36:	4641      	mov	r1, r8
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7ff facd 	bl	8009fd8 <__ratio>
 800aa3e:	ec57 6b10 	vmov	r6, r7, d0
 800aa42:	2200      	movs	r2, #0
 800aa44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f6 f850 	bl	8000af0 <__aeabi_dcmple>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d06f      	beq.n	800ab34 <_strtod_l+0xa34>
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d17a      	bne.n	800ab50 <_strtod_l+0xa50>
 800aa5a:	f1ba 0f00 	cmp.w	sl, #0
 800aa5e:	d158      	bne.n	800ab12 <_strtod_l+0xa12>
 800aa60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d15a      	bne.n	800ab20 <_strtod_l+0xa20>
 800aa6a:	4b64      	ldr	r3, [pc, #400]	@ (800abfc <_strtod_l+0xafc>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f6 f833 	bl	8000adc <__aeabi_dcmplt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d159      	bne.n	800ab2e <_strtod_l+0xa2e>
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4b60      	ldr	r3, [pc, #384]	@ (800ac00 <_strtod_l+0xb00>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	f7f5 fdb9 	bl	80005f8 <__aeabi_dmul>
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa8e:	9606      	str	r6, [sp, #24]
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa96:	4d57      	ldr	r5, [pc, #348]	@ (800abf4 <_strtod_l+0xaf4>)
 800aa98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	401d      	ands	r5, r3
 800aaa0:	4b58      	ldr	r3, [pc, #352]	@ (800ac04 <_strtod_l+0xb04>)
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	f040 80b2 	bne.w	800ac0c <_strtod_l+0xb0c>
 800aaa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aaae:	ec4b ab10 	vmov	d0, sl, fp
 800aab2:	f7ff f9c9 	bl	8009e48 <__ulp>
 800aab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaba:	ec51 0b10 	vmov	r0, r1, d0
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f5 fbe1 	bl	800028c <__adddf3>
 800aaca:	460b      	mov	r3, r1
 800aacc:	4949      	ldr	r1, [pc, #292]	@ (800abf4 <_strtod_l+0xaf4>)
 800aace:	4a4e      	ldr	r2, [pc, #312]	@ (800ac08 <_strtod_l+0xb08>)
 800aad0:	4019      	ands	r1, r3
 800aad2:	4291      	cmp	r1, r2
 800aad4:	4682      	mov	sl, r0
 800aad6:	d942      	bls.n	800ab5e <_strtod_l+0xa5e>
 800aad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aada:	4b47      	ldr	r3, [pc, #284]	@ (800abf8 <_strtod_l+0xaf8>)
 800aadc:	429a      	cmp	r2, r3
 800aade:	d103      	bne.n	800aae8 <_strtod_l+0x9e8>
 800aae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aae2:	3301      	adds	r3, #1
 800aae4:	f43f ad2f 	beq.w	800a546 <_strtod_l+0x446>
 800aae8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800abf8 <_strtod_l+0xaf8>
 800aaec:	f04f 3aff 	mov.w	sl, #4294967295
 800aaf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaf2:	9805      	ldr	r0, [sp, #20]
 800aaf4:	f7fe fe7c 	bl	80097f0 <_Bfree>
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7fe fe78 	bl	80097f0 <_Bfree>
 800ab00:	9805      	ldr	r0, [sp, #20]
 800ab02:	4641      	mov	r1, r8
 800ab04:	f7fe fe74 	bl	80097f0 <_Bfree>
 800ab08:	9805      	ldr	r0, [sp, #20]
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	f7fe fe70 	bl	80097f0 <_Bfree>
 800ab10:	e619      	b.n	800a746 <_strtod_l+0x646>
 800ab12:	f1ba 0f01 	cmp.w	sl, #1
 800ab16:	d103      	bne.n	800ab20 <_strtod_l+0xa20>
 800ab18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f43f ada6 	beq.w	800a66c <_strtod_l+0x56c>
 800ab20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800abd0 <_strtod_l+0xad0>
 800ab24:	4f35      	ldr	r7, [pc, #212]	@ (800abfc <_strtod_l+0xafc>)
 800ab26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	e7b1      	b.n	800aa92 <_strtod_l+0x992>
 800ab2e:	4f34      	ldr	r7, [pc, #208]	@ (800ac00 <_strtod_l+0xb00>)
 800ab30:	2600      	movs	r6, #0
 800ab32:	e7aa      	b.n	800aa8a <_strtod_l+0x98a>
 800ab34:	4b32      	ldr	r3, [pc, #200]	@ (800ac00 <_strtod_l+0xb00>)
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f7f5 fd5c 	bl	80005f8 <__aeabi_dmul>
 800ab40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab42:	4606      	mov	r6, r0
 800ab44:	460f      	mov	r7, r1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d09f      	beq.n	800aa8a <_strtod_l+0x98a>
 800ab4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab4e:	e7a0      	b.n	800aa92 <_strtod_l+0x992>
 800ab50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800abd8 <_strtod_l+0xad8>
 800ab54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab58:	ec57 6b17 	vmov	r6, r7, d7
 800ab5c:	e799      	b.n	800aa92 <_strtod_l+0x992>
 800ab5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1c1      	bne.n	800aaf0 <_strtod_l+0x9f0>
 800ab6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab70:	0d1b      	lsrs	r3, r3, #20
 800ab72:	051b      	lsls	r3, r3, #20
 800ab74:	429d      	cmp	r5, r3
 800ab76:	d1bb      	bne.n	800aaf0 <_strtod_l+0x9f0>
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f6 f89c 	bl	8000cb8 <__aeabi_d2lz>
 800ab80:	f7f5 fd0c 	bl	800059c <__aeabi_l2d>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 fb7c 	bl	8000288 <__aeabi_dsub>
 800ab90:	460b      	mov	r3, r1
 800ab92:	4602      	mov	r2, r0
 800ab94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab9e:	ea46 060a 	orr.w	r6, r6, sl
 800aba2:	431e      	orrs	r6, r3
 800aba4:	d06f      	beq.n	800ac86 <_strtod_l+0xb86>
 800aba6:	a30e      	add	r3, pc, #56	@ (adr r3, 800abe0 <_strtod_l+0xae0>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f7f5 ff96 	bl	8000adc <__aeabi_dcmplt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f47f acd3 	bne.w	800a55c <_strtod_l+0x45c>
 800abb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800abe8 <_strtod_l+0xae8>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abc0:	f7f5 ffaa 	bl	8000b18 <__aeabi_dcmpgt>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d093      	beq.n	800aaf0 <_strtod_l+0x9f0>
 800abc8:	e4c8      	b.n	800a55c <_strtod_l+0x45c>
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	00000000 	.word	0x00000000
 800abd4:	bff00000 	.word	0xbff00000
 800abd8:	00000000 	.word	0x00000000
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	94a03595 	.word	0x94a03595
 800abe4:	3fdfffff 	.word	0x3fdfffff
 800abe8:	35afe535 	.word	0x35afe535
 800abec:	3fe00000 	.word	0x3fe00000
 800abf0:	000fffff 	.word	0x000fffff
 800abf4:	7ff00000 	.word	0x7ff00000
 800abf8:	7fefffff 	.word	0x7fefffff
 800abfc:	3ff00000 	.word	0x3ff00000
 800ac00:	3fe00000 	.word	0x3fe00000
 800ac04:	7fe00000 	.word	0x7fe00000
 800ac08:	7c9fffff 	.word	0x7c9fffff
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	b323      	cbz	r3, 800ac5a <_strtod_l+0xb5a>
 800ac10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac14:	d821      	bhi.n	800ac5a <_strtod_l+0xb5a>
 800ac16:	a328      	add	r3, pc, #160	@ (adr r3, 800acb8 <_strtod_l+0xbb8>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 ff66 	bl	8000af0 <__aeabi_dcmple>
 800ac24:	b1a0      	cbz	r0, 800ac50 <_strtod_l+0xb50>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7f5 ffbd 	bl	8000ba8 <__aeabi_d2uiz>
 800ac2e:	2801      	cmp	r0, #1
 800ac30:	bf38      	it	cc
 800ac32:	2001      	movcc	r0, #1
 800ac34:	f7f5 fc66 	bl	8000504 <__aeabi_ui2d>
 800ac38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	b9fb      	cbnz	r3, 800ac80 <_strtod_l+0xb80>
 800ac40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac44:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac46:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac56:	1b5b      	subs	r3, r3, r5
 800ac58:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac62:	f7ff f8f1 	bl	8009e48 <__ulp>
 800ac66:	4650      	mov	r0, sl
 800ac68:	ec53 2b10 	vmov	r2, r3, d0
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	f7f5 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ac72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac76:	f7f5 fb09 	bl	800028c <__adddf3>
 800ac7a:	4682      	mov	sl, r0
 800ac7c:	468b      	mov	fp, r1
 800ac7e:	e770      	b.n	800ab62 <_strtod_l+0xa62>
 800ac80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac84:	e7e0      	b.n	800ac48 <_strtod_l+0xb48>
 800ac86:	a30e      	add	r3, pc, #56	@ (adr r3, 800acc0 <_strtod_l+0xbc0>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 ff26 	bl	8000adc <__aeabi_dcmplt>
 800ac90:	e798      	b.n	800abc4 <_strtod_l+0xac4>
 800ac92:	2300      	movs	r3, #0
 800ac94:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	f7ff ba6d 	b.w	800a17a <_strtod_l+0x7a>
 800aca0:	2a65      	cmp	r2, #101	@ 0x65
 800aca2:	f43f ab68 	beq.w	800a376 <_strtod_l+0x276>
 800aca6:	2a45      	cmp	r2, #69	@ 0x45
 800aca8:	f43f ab65 	beq.w	800a376 <_strtod_l+0x276>
 800acac:	2301      	movs	r3, #1
 800acae:	f7ff bba0 	b.w	800a3f2 <_strtod_l+0x2f2>
 800acb2:	bf00      	nop
 800acb4:	f3af 8000 	nop.w
 800acb8:	ffc00000 	.word	0xffc00000
 800acbc:	41dfffff 	.word	0x41dfffff
 800acc0:	94a03595 	.word	0x94a03595
 800acc4:	3fcfffff 	.word	0x3fcfffff

0800acc8 <_strtod_r>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	@ (800acd0 <_strtod_r+0x8>)
 800acca:	f7ff ba19 	b.w	800a100 <_strtod_l>
 800acce:	bf00      	nop
 800acd0:	2000006c 	.word	0x2000006c

0800acd4 <_strtol_l.isra.0>:
 800acd4:	2b24      	cmp	r3, #36	@ 0x24
 800acd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acda:	4686      	mov	lr, r0
 800acdc:	4690      	mov	r8, r2
 800acde:	d801      	bhi.n	800ace4 <_strtol_l.isra.0+0x10>
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d106      	bne.n	800acf2 <_strtol_l.isra.0+0x1e>
 800ace4:	f7fd fdb6 	bl	8008854 <__errno>
 800ace8:	2316      	movs	r3, #22
 800acea:	6003      	str	r3, [r0, #0]
 800acec:	2000      	movs	r0, #0
 800acee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf2:	4834      	ldr	r0, [pc, #208]	@ (800adc4 <_strtol_l.isra.0+0xf0>)
 800acf4:	460d      	mov	r5, r1
 800acf6:	462a      	mov	r2, r5
 800acf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acfc:	5d06      	ldrb	r6, [r0, r4]
 800acfe:	f016 0608 	ands.w	r6, r6, #8
 800ad02:	d1f8      	bne.n	800acf6 <_strtol_l.isra.0+0x22>
 800ad04:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad06:	d110      	bne.n	800ad2a <_strtol_l.isra.0+0x56>
 800ad08:	782c      	ldrb	r4, [r5, #0]
 800ad0a:	2601      	movs	r6, #1
 800ad0c:	1c95      	adds	r5, r2, #2
 800ad0e:	f033 0210 	bics.w	r2, r3, #16
 800ad12:	d115      	bne.n	800ad40 <_strtol_l.isra.0+0x6c>
 800ad14:	2c30      	cmp	r4, #48	@ 0x30
 800ad16:	d10d      	bne.n	800ad34 <_strtol_l.isra.0+0x60>
 800ad18:	782a      	ldrb	r2, [r5, #0]
 800ad1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad1e:	2a58      	cmp	r2, #88	@ 0x58
 800ad20:	d108      	bne.n	800ad34 <_strtol_l.isra.0+0x60>
 800ad22:	786c      	ldrb	r4, [r5, #1]
 800ad24:	3502      	adds	r5, #2
 800ad26:	2310      	movs	r3, #16
 800ad28:	e00a      	b.n	800ad40 <_strtol_l.isra.0+0x6c>
 800ad2a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad2c:	bf04      	itt	eq
 800ad2e:	782c      	ldrbeq	r4, [r5, #0]
 800ad30:	1c95      	addeq	r5, r2, #2
 800ad32:	e7ec      	b.n	800ad0e <_strtol_l.isra.0+0x3a>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1f6      	bne.n	800ad26 <_strtol_l.isra.0+0x52>
 800ad38:	2c30      	cmp	r4, #48	@ 0x30
 800ad3a:	bf14      	ite	ne
 800ad3c:	230a      	movne	r3, #10
 800ad3e:	2308      	moveq	r3, #8
 800ad40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad48:	2200      	movs	r2, #0
 800ad4a:	fbbc f9f3 	udiv	r9, ip, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad58:	2f09      	cmp	r7, #9
 800ad5a:	d80f      	bhi.n	800ad7c <_strtol_l.isra.0+0xa8>
 800ad5c:	463c      	mov	r4, r7
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	dd1b      	ble.n	800ad9a <_strtol_l.isra.0+0xc6>
 800ad62:	1c57      	adds	r7, r2, #1
 800ad64:	d007      	beq.n	800ad76 <_strtol_l.isra.0+0xa2>
 800ad66:	4581      	cmp	r9, r0
 800ad68:	d314      	bcc.n	800ad94 <_strtol_l.isra.0+0xc0>
 800ad6a:	d101      	bne.n	800ad70 <_strtol_l.isra.0+0x9c>
 800ad6c:	45a2      	cmp	sl, r4
 800ad6e:	db11      	blt.n	800ad94 <_strtol_l.isra.0+0xc0>
 800ad70:	fb00 4003 	mla	r0, r0, r3, r4
 800ad74:	2201      	movs	r2, #1
 800ad76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad7a:	e7eb      	b.n	800ad54 <_strtol_l.isra.0+0x80>
 800ad7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad80:	2f19      	cmp	r7, #25
 800ad82:	d801      	bhi.n	800ad88 <_strtol_l.isra.0+0xb4>
 800ad84:	3c37      	subs	r4, #55	@ 0x37
 800ad86:	e7ea      	b.n	800ad5e <_strtol_l.isra.0+0x8a>
 800ad88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad8c:	2f19      	cmp	r7, #25
 800ad8e:	d804      	bhi.n	800ad9a <_strtol_l.isra.0+0xc6>
 800ad90:	3c57      	subs	r4, #87	@ 0x57
 800ad92:	e7e4      	b.n	800ad5e <_strtol_l.isra.0+0x8a>
 800ad94:	f04f 32ff 	mov.w	r2, #4294967295
 800ad98:	e7ed      	b.n	800ad76 <_strtol_l.isra.0+0xa2>
 800ad9a:	1c53      	adds	r3, r2, #1
 800ad9c:	d108      	bne.n	800adb0 <_strtol_l.isra.0+0xdc>
 800ad9e:	2322      	movs	r3, #34	@ 0x22
 800ada0:	f8ce 3000 	str.w	r3, [lr]
 800ada4:	4660      	mov	r0, ip
 800ada6:	f1b8 0f00 	cmp.w	r8, #0
 800adaa:	d0a0      	beq.n	800acee <_strtol_l.isra.0+0x1a>
 800adac:	1e69      	subs	r1, r5, #1
 800adae:	e006      	b.n	800adbe <_strtol_l.isra.0+0xea>
 800adb0:	b106      	cbz	r6, 800adb4 <_strtol_l.isra.0+0xe0>
 800adb2:	4240      	negs	r0, r0
 800adb4:	f1b8 0f00 	cmp.w	r8, #0
 800adb8:	d099      	beq.n	800acee <_strtol_l.isra.0+0x1a>
 800adba:	2a00      	cmp	r2, #0
 800adbc:	d1f6      	bne.n	800adac <_strtol_l.isra.0+0xd8>
 800adbe:	f8c8 1000 	str.w	r1, [r8]
 800adc2:	e794      	b.n	800acee <_strtol_l.isra.0+0x1a>
 800adc4:	0800c2f1 	.word	0x0800c2f1

0800adc8 <_strtol_r>:
 800adc8:	f7ff bf84 	b.w	800acd4 <_strtol_l.isra.0>

0800adcc <__ssputs_r>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	688e      	ldr	r6, [r1, #8]
 800add2:	461f      	mov	r7, r3
 800add4:	42be      	cmp	r6, r7
 800add6:	680b      	ldr	r3, [r1, #0]
 800add8:	4682      	mov	sl, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4690      	mov	r8, r2
 800adde:	d82d      	bhi.n	800ae3c <__ssputs_r+0x70>
 800ade0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ade4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ade8:	d026      	beq.n	800ae38 <__ssputs_r+0x6c>
 800adea:	6965      	ldr	r5, [r4, #20]
 800adec:	6909      	ldr	r1, [r1, #16]
 800adee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf2:	eba3 0901 	sub.w	r9, r3, r1
 800adf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adfa:	1c7b      	adds	r3, r7, #1
 800adfc:	444b      	add	r3, r9
 800adfe:	106d      	asrs	r5, r5, #1
 800ae00:	429d      	cmp	r5, r3
 800ae02:	bf38      	it	cc
 800ae04:	461d      	movcc	r5, r3
 800ae06:	0553      	lsls	r3, r2, #21
 800ae08:	d527      	bpl.n	800ae5a <__ssputs_r+0x8e>
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	f7fe fc24 	bl	8009658 <_malloc_r>
 800ae10:	4606      	mov	r6, r0
 800ae12:	b360      	cbz	r0, 800ae6e <__ssputs_r+0xa2>
 800ae14:	6921      	ldr	r1, [r4, #16]
 800ae16:	464a      	mov	r2, r9
 800ae18:	f000 fa18 	bl	800b24c <memcpy>
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	6126      	str	r6, [r4, #16]
 800ae2a:	6165      	str	r5, [r4, #20]
 800ae2c:	444e      	add	r6, r9
 800ae2e:	eba5 0509 	sub.w	r5, r5, r9
 800ae32:	6026      	str	r6, [r4, #0]
 800ae34:	60a5      	str	r5, [r4, #8]
 800ae36:	463e      	mov	r6, r7
 800ae38:	42be      	cmp	r6, r7
 800ae3a:	d900      	bls.n	800ae3e <__ssputs_r+0x72>
 800ae3c:	463e      	mov	r6, r7
 800ae3e:	6820      	ldr	r0, [r4, #0]
 800ae40:	4632      	mov	r2, r6
 800ae42:	4641      	mov	r1, r8
 800ae44:	f000 f9c6 	bl	800b1d4 <memmove>
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	1b9b      	subs	r3, r3, r6
 800ae4c:	60a3      	str	r3, [r4, #8]
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	4433      	add	r3, r6
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	2000      	movs	r0, #0
 800ae56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	f000 fd89 	bl	800b972 <_realloc_r>
 800ae60:	4606      	mov	r6, r0
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d1e0      	bne.n	800ae28 <__ssputs_r+0x5c>
 800ae66:	6921      	ldr	r1, [r4, #16]
 800ae68:	4650      	mov	r0, sl
 800ae6a:	f7fe fb81 	bl	8009570 <_free_r>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	f8ca 3000 	str.w	r3, [sl]
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	e7e9      	b.n	800ae56 <__ssputs_r+0x8a>
	...

0800ae84 <_svfiprintf_r>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4698      	mov	r8, r3
 800ae8a:	898b      	ldrh	r3, [r1, #12]
 800ae8c:	061b      	lsls	r3, r3, #24
 800ae8e:	b09d      	sub	sp, #116	@ 0x74
 800ae90:	4607      	mov	r7, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	4614      	mov	r4, r2
 800ae96:	d510      	bpl.n	800aeba <_svfiprintf_r+0x36>
 800ae98:	690b      	ldr	r3, [r1, #16]
 800ae9a:	b973      	cbnz	r3, 800aeba <_svfiprintf_r+0x36>
 800ae9c:	2140      	movs	r1, #64	@ 0x40
 800ae9e:	f7fe fbdb 	bl	8009658 <_malloc_r>
 800aea2:	6028      	str	r0, [r5, #0]
 800aea4:	6128      	str	r0, [r5, #16]
 800aea6:	b930      	cbnz	r0, 800aeb6 <_svfiprintf_r+0x32>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	b01d      	add	sp, #116	@ 0x74
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	2340      	movs	r3, #64	@ 0x40
 800aeb8:	616b      	str	r3, [r5, #20]
 800aeba:	2300      	movs	r3, #0
 800aebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aebe:	2320      	movs	r3, #32
 800aec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec8:	2330      	movs	r3, #48	@ 0x30
 800aeca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b068 <_svfiprintf_r+0x1e4>
 800aece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aed2:	f04f 0901 	mov.w	r9, #1
 800aed6:	4623      	mov	r3, r4
 800aed8:	469a      	mov	sl, r3
 800aeda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aede:	b10a      	cbz	r2, 800aee4 <_svfiprintf_r+0x60>
 800aee0:	2a25      	cmp	r2, #37	@ 0x25
 800aee2:	d1f9      	bne.n	800aed8 <_svfiprintf_r+0x54>
 800aee4:	ebba 0b04 	subs.w	fp, sl, r4
 800aee8:	d00b      	beq.n	800af02 <_svfiprintf_r+0x7e>
 800aeea:	465b      	mov	r3, fp
 800aeec:	4622      	mov	r2, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff ff6b 	bl	800adcc <__ssputs_r>
 800aef6:	3001      	adds	r0, #1
 800aef8:	f000 80a7 	beq.w	800b04a <_svfiprintf_r+0x1c6>
 800aefc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aefe:	445a      	add	r2, fp
 800af00:	9209      	str	r2, [sp, #36]	@ 0x24
 800af02:	f89a 3000 	ldrb.w	r3, [sl]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 809f 	beq.w	800b04a <_svfiprintf_r+0x1c6>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f04f 32ff 	mov.w	r2, #4294967295
 800af12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af16:	f10a 0a01 	add.w	sl, sl, #1
 800af1a:	9304      	str	r3, [sp, #16]
 800af1c:	9307      	str	r3, [sp, #28]
 800af1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af22:	931a      	str	r3, [sp, #104]	@ 0x68
 800af24:	4654      	mov	r4, sl
 800af26:	2205      	movs	r2, #5
 800af28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2c:	484e      	ldr	r0, [pc, #312]	@ (800b068 <_svfiprintf_r+0x1e4>)
 800af2e:	f7f5 f94f 	bl	80001d0 <memchr>
 800af32:	9a04      	ldr	r2, [sp, #16]
 800af34:	b9d8      	cbnz	r0, 800af6e <_svfiprintf_r+0xea>
 800af36:	06d0      	lsls	r0, r2, #27
 800af38:	bf44      	itt	mi
 800af3a:	2320      	movmi	r3, #32
 800af3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af40:	0711      	lsls	r1, r2, #28
 800af42:	bf44      	itt	mi
 800af44:	232b      	movmi	r3, #43	@ 0x2b
 800af46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af4a:	f89a 3000 	ldrb.w	r3, [sl]
 800af4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af50:	d015      	beq.n	800af7e <_svfiprintf_r+0xfa>
 800af52:	9a07      	ldr	r2, [sp, #28]
 800af54:	4654      	mov	r4, sl
 800af56:	2000      	movs	r0, #0
 800af58:	f04f 0c0a 	mov.w	ip, #10
 800af5c:	4621      	mov	r1, r4
 800af5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af62:	3b30      	subs	r3, #48	@ 0x30
 800af64:	2b09      	cmp	r3, #9
 800af66:	d94b      	bls.n	800b000 <_svfiprintf_r+0x17c>
 800af68:	b1b0      	cbz	r0, 800af98 <_svfiprintf_r+0x114>
 800af6a:	9207      	str	r2, [sp, #28]
 800af6c:	e014      	b.n	800af98 <_svfiprintf_r+0x114>
 800af6e:	eba0 0308 	sub.w	r3, r0, r8
 800af72:	fa09 f303 	lsl.w	r3, r9, r3
 800af76:	4313      	orrs	r3, r2
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	46a2      	mov	sl, r4
 800af7c:	e7d2      	b.n	800af24 <_svfiprintf_r+0xa0>
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	1d19      	adds	r1, r3, #4
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	9103      	str	r1, [sp, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	bfbb      	ittet	lt
 800af8a:	425b      	neglt	r3, r3
 800af8c:	f042 0202 	orrlt.w	r2, r2, #2
 800af90:	9307      	strge	r3, [sp, #28]
 800af92:	9307      	strlt	r3, [sp, #28]
 800af94:	bfb8      	it	lt
 800af96:	9204      	strlt	r2, [sp, #16]
 800af98:	7823      	ldrb	r3, [r4, #0]
 800af9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af9c:	d10a      	bne.n	800afb4 <_svfiprintf_r+0x130>
 800af9e:	7863      	ldrb	r3, [r4, #1]
 800afa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa2:	d132      	bne.n	800b00a <_svfiprintf_r+0x186>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	1d1a      	adds	r2, r3, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	9203      	str	r2, [sp, #12]
 800afac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afb0:	3402      	adds	r4, #2
 800afb2:	9305      	str	r3, [sp, #20]
 800afb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b078 <_svfiprintf_r+0x1f4>
 800afb8:	7821      	ldrb	r1, [r4, #0]
 800afba:	2203      	movs	r2, #3
 800afbc:	4650      	mov	r0, sl
 800afbe:	f7f5 f907 	bl	80001d0 <memchr>
 800afc2:	b138      	cbz	r0, 800afd4 <_svfiprintf_r+0x150>
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	eba0 000a 	sub.w	r0, r0, sl
 800afca:	2240      	movs	r2, #64	@ 0x40
 800afcc:	4082      	lsls	r2, r0
 800afce:	4313      	orrs	r3, r2
 800afd0:	3401      	adds	r4, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd8:	4824      	ldr	r0, [pc, #144]	@ (800b06c <_svfiprintf_r+0x1e8>)
 800afda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afde:	2206      	movs	r2, #6
 800afe0:	f7f5 f8f6 	bl	80001d0 <memchr>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d036      	beq.n	800b056 <_svfiprintf_r+0x1d2>
 800afe8:	4b21      	ldr	r3, [pc, #132]	@ (800b070 <_svfiprintf_r+0x1ec>)
 800afea:	bb1b      	cbnz	r3, 800b034 <_svfiprintf_r+0x1b0>
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	3307      	adds	r3, #7
 800aff0:	f023 0307 	bic.w	r3, r3, #7
 800aff4:	3308      	adds	r3, #8
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affa:	4433      	add	r3, r6
 800affc:	9309      	str	r3, [sp, #36]	@ 0x24
 800affe:	e76a      	b.n	800aed6 <_svfiprintf_r+0x52>
 800b000:	fb0c 3202 	mla	r2, ip, r2, r3
 800b004:	460c      	mov	r4, r1
 800b006:	2001      	movs	r0, #1
 800b008:	e7a8      	b.n	800af5c <_svfiprintf_r+0xd8>
 800b00a:	2300      	movs	r3, #0
 800b00c:	3401      	adds	r4, #1
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	4619      	mov	r1, r3
 800b012:	f04f 0c0a 	mov.w	ip, #10
 800b016:	4620      	mov	r0, r4
 800b018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01c:	3a30      	subs	r2, #48	@ 0x30
 800b01e:	2a09      	cmp	r2, #9
 800b020:	d903      	bls.n	800b02a <_svfiprintf_r+0x1a6>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0c6      	beq.n	800afb4 <_svfiprintf_r+0x130>
 800b026:	9105      	str	r1, [sp, #20]
 800b028:	e7c4      	b.n	800afb4 <_svfiprintf_r+0x130>
 800b02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02e:	4604      	mov	r4, r0
 800b030:	2301      	movs	r3, #1
 800b032:	e7f0      	b.n	800b016 <_svfiprintf_r+0x192>
 800b034:	ab03      	add	r3, sp, #12
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	462a      	mov	r2, r5
 800b03a:	4b0e      	ldr	r3, [pc, #56]	@ (800b074 <_svfiprintf_r+0x1f0>)
 800b03c:	a904      	add	r1, sp, #16
 800b03e:	4638      	mov	r0, r7
 800b040:	f7fc fcca 	bl	80079d8 <_printf_float>
 800b044:	1c42      	adds	r2, r0, #1
 800b046:	4606      	mov	r6, r0
 800b048:	d1d6      	bne.n	800aff8 <_svfiprintf_r+0x174>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	065b      	lsls	r3, r3, #25
 800b04e:	f53f af2d 	bmi.w	800aeac <_svfiprintf_r+0x28>
 800b052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b054:	e72c      	b.n	800aeb0 <_svfiprintf_r+0x2c>
 800b056:	ab03      	add	r3, sp, #12
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	462a      	mov	r2, r5
 800b05c:	4b05      	ldr	r3, [pc, #20]	@ (800b074 <_svfiprintf_r+0x1f0>)
 800b05e:	a904      	add	r1, sp, #16
 800b060:	4638      	mov	r0, r7
 800b062:	f7fc ff51 	bl	8007f08 <_printf_i>
 800b066:	e7ed      	b.n	800b044 <_svfiprintf_r+0x1c0>
 800b068:	0800c0e9 	.word	0x0800c0e9
 800b06c:	0800c0f3 	.word	0x0800c0f3
 800b070:	080079d9 	.word	0x080079d9
 800b074:	0800adcd 	.word	0x0800adcd
 800b078:	0800c0ef 	.word	0x0800c0ef

0800b07c <__sflush_r>:
 800b07c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	0716      	lsls	r6, r2, #28
 800b086:	4605      	mov	r5, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	d454      	bmi.n	800b136 <__sflush_r+0xba>
 800b08c:	684b      	ldr	r3, [r1, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dc02      	bgt.n	800b098 <__sflush_r+0x1c>
 800b092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	dd48      	ble.n	800b12a <__sflush_r+0xae>
 800b098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d045      	beq.n	800b12a <__sflush_r+0xae>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0a4:	682f      	ldr	r7, [r5, #0]
 800b0a6:	6a21      	ldr	r1, [r4, #32]
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	d030      	beq.n	800b10e <__sflush_r+0x92>
 800b0ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	0759      	lsls	r1, r3, #29
 800b0b2:	d505      	bpl.n	800b0c0 <__sflush_r+0x44>
 800b0b4:	6863      	ldr	r3, [r4, #4]
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0ba:	b10b      	cbz	r3, 800b0c0 <__sflush_r+0x44>
 800b0bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0be:	1ad2      	subs	r2, r2, r3
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0c4:	6a21      	ldr	r1, [r4, #32]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	47b0      	blx	r6
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	d106      	bne.n	800b0de <__sflush_r+0x62>
 800b0d0:	6829      	ldr	r1, [r5, #0]
 800b0d2:	291d      	cmp	r1, #29
 800b0d4:	d82b      	bhi.n	800b12e <__sflush_r+0xb2>
 800b0d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b180 <__sflush_r+0x104>)
 800b0d8:	40ca      	lsrs	r2, r1
 800b0da:	07d6      	lsls	r6, r2, #31
 800b0dc:	d527      	bpl.n	800b12e <__sflush_r+0xb2>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6062      	str	r2, [r4, #4]
 800b0e2:	04d9      	lsls	r1, r3, #19
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	6022      	str	r2, [r4, #0]
 800b0e8:	d504      	bpl.n	800b0f4 <__sflush_r+0x78>
 800b0ea:	1c42      	adds	r2, r0, #1
 800b0ec:	d101      	bne.n	800b0f2 <__sflush_r+0x76>
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	b903      	cbnz	r3, 800b0f4 <__sflush_r+0x78>
 800b0f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f6:	602f      	str	r7, [r5, #0]
 800b0f8:	b1b9      	cbz	r1, 800b12a <__sflush_r+0xae>
 800b0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0fe:	4299      	cmp	r1, r3
 800b100:	d002      	beq.n	800b108 <__sflush_r+0x8c>
 800b102:	4628      	mov	r0, r5
 800b104:	f7fe fa34 	bl	8009570 <_free_r>
 800b108:	2300      	movs	r3, #0
 800b10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b10c:	e00d      	b.n	800b12a <__sflush_r+0xae>
 800b10e:	2301      	movs	r3, #1
 800b110:	4628      	mov	r0, r5
 800b112:	47b0      	blx	r6
 800b114:	4602      	mov	r2, r0
 800b116:	1c50      	adds	r0, r2, #1
 800b118:	d1c9      	bne.n	800b0ae <__sflush_r+0x32>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0c6      	beq.n	800b0ae <__sflush_r+0x32>
 800b120:	2b1d      	cmp	r3, #29
 800b122:	d001      	beq.n	800b128 <__sflush_r+0xac>
 800b124:	2b16      	cmp	r3, #22
 800b126:	d11e      	bne.n	800b166 <__sflush_r+0xea>
 800b128:	602f      	str	r7, [r5, #0]
 800b12a:	2000      	movs	r0, #0
 800b12c:	e022      	b.n	800b174 <__sflush_r+0xf8>
 800b12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b132:	b21b      	sxth	r3, r3
 800b134:	e01b      	b.n	800b16e <__sflush_r+0xf2>
 800b136:	690f      	ldr	r7, [r1, #16]
 800b138:	2f00      	cmp	r7, #0
 800b13a:	d0f6      	beq.n	800b12a <__sflush_r+0xae>
 800b13c:	0793      	lsls	r3, r2, #30
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	bf08      	it	eq
 800b142:	694b      	ldreq	r3, [r1, #20]
 800b144:	600f      	str	r7, [r1, #0]
 800b146:	bf18      	it	ne
 800b148:	2300      	movne	r3, #0
 800b14a:	eba6 0807 	sub.w	r8, r6, r7
 800b14e:	608b      	str	r3, [r1, #8]
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	dde9      	ble.n	800b12a <__sflush_r+0xae>
 800b156:	6a21      	ldr	r1, [r4, #32]
 800b158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b15a:	4643      	mov	r3, r8
 800b15c:	463a      	mov	r2, r7
 800b15e:	4628      	mov	r0, r5
 800b160:	47b0      	blx	r6
 800b162:	2800      	cmp	r0, #0
 800b164:	dc08      	bgt.n	800b178 <__sflush_r+0xfc>
 800b166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b178:	4407      	add	r7, r0
 800b17a:	eba8 0800 	sub.w	r8, r8, r0
 800b17e:	e7e7      	b.n	800b150 <__sflush_r+0xd4>
 800b180:	20400001 	.word	0x20400001

0800b184 <_fflush_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	690b      	ldr	r3, [r1, #16]
 800b188:	4605      	mov	r5, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	b913      	cbnz	r3, 800b194 <_fflush_r+0x10>
 800b18e:	2500      	movs	r5, #0
 800b190:	4628      	mov	r0, r5
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	b118      	cbz	r0, 800b19e <_fflush_r+0x1a>
 800b196:	6a03      	ldr	r3, [r0, #32]
 800b198:	b90b      	cbnz	r3, 800b19e <_fflush_r+0x1a>
 800b19a:	f7fd fa6d 	bl	8008678 <__sinit>
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0f3      	beq.n	800b18e <_fflush_r+0xa>
 800b1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1a8:	07d0      	lsls	r0, r2, #31
 800b1aa:	d404      	bmi.n	800b1b6 <_fflush_r+0x32>
 800b1ac:	0599      	lsls	r1, r3, #22
 800b1ae:	d402      	bmi.n	800b1b6 <_fflush_r+0x32>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1b2:	f7fd fb7a 	bl	80088aa <__retarget_lock_acquire_recursive>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	f7ff ff5f 	bl	800b07c <__sflush_r>
 800b1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1c0:	07da      	lsls	r2, r3, #31
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	d4e4      	bmi.n	800b190 <_fflush_r+0xc>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	059b      	lsls	r3, r3, #22
 800b1ca:	d4e1      	bmi.n	800b190 <_fflush_r+0xc>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ce:	f7fd fb6d 	bl	80088ac <__retarget_lock_release_recursive>
 800b1d2:	e7dd      	b.n	800b190 <_fflush_r+0xc>

0800b1d4 <memmove>:
 800b1d4:	4288      	cmp	r0, r1
 800b1d6:	b510      	push	{r4, lr}
 800b1d8:	eb01 0402 	add.w	r4, r1, r2
 800b1dc:	d902      	bls.n	800b1e4 <memmove+0x10>
 800b1de:	4284      	cmp	r4, r0
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	d807      	bhi.n	800b1f4 <memmove+0x20>
 800b1e4:	1e43      	subs	r3, r0, #1
 800b1e6:	42a1      	cmp	r1, r4
 800b1e8:	d008      	beq.n	800b1fc <memmove+0x28>
 800b1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1f2:	e7f8      	b.n	800b1e6 <memmove+0x12>
 800b1f4:	4402      	add	r2, r0
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	428a      	cmp	r2, r1
 800b1fa:	d100      	bne.n	800b1fe <memmove+0x2a>
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b206:	e7f7      	b.n	800b1f8 <memmove+0x24>

0800b208 <strncmp>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	b16a      	cbz	r2, 800b228 <strncmp+0x20>
 800b20c:	3901      	subs	r1, #1
 800b20e:	1884      	adds	r4, r0, r2
 800b210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b214:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b218:	429a      	cmp	r2, r3
 800b21a:	d103      	bne.n	800b224 <strncmp+0x1c>
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	d001      	beq.n	800b224 <strncmp+0x1c>
 800b220:	2a00      	cmp	r2, #0
 800b222:	d1f5      	bne.n	800b210 <strncmp+0x8>
 800b224:	1ad0      	subs	r0, r2, r3
 800b226:	bd10      	pop	{r4, pc}
 800b228:	4610      	mov	r0, r2
 800b22a:	e7fc      	b.n	800b226 <strncmp+0x1e>

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d06      	ldr	r5, [pc, #24]	@ (800b248 <_sbrk_r+0x1c>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fe40 	bl	8001ebc <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	200005c4 	.word	0x200005c4

0800b24c <memcpy>:
 800b24c:	440a      	add	r2, r1
 800b24e:	4291      	cmp	r1, r2
 800b250:	f100 33ff 	add.w	r3, r0, #4294967295
 800b254:	d100      	bne.n	800b258 <memcpy+0xc>
 800b256:	4770      	bx	lr
 800b258:	b510      	push	{r4, lr}
 800b25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b262:	4291      	cmp	r1, r2
 800b264:	d1f9      	bne.n	800b25a <memcpy+0xe>
 800b266:	bd10      	pop	{r4, pc}

0800b268 <nan>:
 800b268:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b270 <nan+0x8>
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	00000000 	.word	0x00000000
 800b274:	7ff80000 	.word	0x7ff80000

0800b278 <__assert_func>:
 800b278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b27a:	4614      	mov	r4, r2
 800b27c:	461a      	mov	r2, r3
 800b27e:	4b09      	ldr	r3, [pc, #36]	@ (800b2a4 <__assert_func+0x2c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4605      	mov	r5, r0
 800b284:	68d8      	ldr	r0, [r3, #12]
 800b286:	b14c      	cbz	r4, 800b29c <__assert_func+0x24>
 800b288:	4b07      	ldr	r3, [pc, #28]	@ (800b2a8 <__assert_func+0x30>)
 800b28a:	9100      	str	r1, [sp, #0]
 800b28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b290:	4906      	ldr	r1, [pc, #24]	@ (800b2ac <__assert_func+0x34>)
 800b292:	462b      	mov	r3, r5
 800b294:	f000 fba8 	bl	800b9e8 <fiprintf>
 800b298:	f000 fbb8 	bl	800ba0c <abort>
 800b29c:	4b04      	ldr	r3, [pc, #16]	@ (800b2b0 <__assert_func+0x38>)
 800b29e:	461c      	mov	r4, r3
 800b2a0:	e7f3      	b.n	800b28a <__assert_func+0x12>
 800b2a2:	bf00      	nop
 800b2a4:	2000001c 	.word	0x2000001c
 800b2a8:	0800c102 	.word	0x0800c102
 800b2ac:	0800c10f 	.word	0x0800c10f
 800b2b0:	0800c13d 	.word	0x0800c13d

0800b2b4 <_calloc_r>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	fba1 5402 	umull	r5, r4, r1, r2
 800b2ba:	b934      	cbnz	r4, 800b2ca <_calloc_r+0x16>
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f7fe f9cb 	bl	8009658 <_malloc_r>
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	b928      	cbnz	r0, 800b2d2 <_calloc_r+0x1e>
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	220c      	movs	r2, #12
 800b2cc:	6002      	str	r2, [r0, #0]
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	e7f9      	b.n	800b2c6 <_calloc_r+0x12>
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	f7fd fa6a 	bl	80087ae <memset>
 800b2da:	e7f4      	b.n	800b2c6 <_calloc_r+0x12>

0800b2dc <rshift>:
 800b2dc:	6903      	ldr	r3, [r0, #16]
 800b2de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2ea:	f100 0414 	add.w	r4, r0, #20
 800b2ee:	dd45      	ble.n	800b37c <rshift+0xa0>
 800b2f0:	f011 011f 	ands.w	r1, r1, #31
 800b2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2fc:	d10c      	bne.n	800b318 <rshift+0x3c>
 800b2fe:	f100 0710 	add.w	r7, r0, #16
 800b302:	4629      	mov	r1, r5
 800b304:	42b1      	cmp	r1, r6
 800b306:	d334      	bcc.n	800b372 <rshift+0x96>
 800b308:	1a9b      	subs	r3, r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	1eea      	subs	r2, r5, #3
 800b30e:	4296      	cmp	r6, r2
 800b310:	bf38      	it	cc
 800b312:	2300      	movcc	r3, #0
 800b314:	4423      	add	r3, r4
 800b316:	e015      	b.n	800b344 <rshift+0x68>
 800b318:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b31c:	f1c1 0820 	rsb	r8, r1, #32
 800b320:	40cf      	lsrs	r7, r1
 800b322:	f105 0e04 	add.w	lr, r5, #4
 800b326:	46a1      	mov	r9, r4
 800b328:	4576      	cmp	r6, lr
 800b32a:	46f4      	mov	ip, lr
 800b32c:	d815      	bhi.n	800b35a <rshift+0x7e>
 800b32e:	1a9a      	subs	r2, r3, r2
 800b330:	0092      	lsls	r2, r2, #2
 800b332:	3a04      	subs	r2, #4
 800b334:	3501      	adds	r5, #1
 800b336:	42ae      	cmp	r6, r5
 800b338:	bf38      	it	cc
 800b33a:	2200      	movcc	r2, #0
 800b33c:	18a3      	adds	r3, r4, r2
 800b33e:	50a7      	str	r7, [r4, r2]
 800b340:	b107      	cbz	r7, 800b344 <rshift+0x68>
 800b342:	3304      	adds	r3, #4
 800b344:	1b1a      	subs	r2, r3, r4
 800b346:	42a3      	cmp	r3, r4
 800b348:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b34c:	bf08      	it	eq
 800b34e:	2300      	moveq	r3, #0
 800b350:	6102      	str	r2, [r0, #16]
 800b352:	bf08      	it	eq
 800b354:	6143      	streq	r3, [r0, #20]
 800b356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b35a:	f8dc c000 	ldr.w	ip, [ip]
 800b35e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b362:	ea4c 0707 	orr.w	r7, ip, r7
 800b366:	f849 7b04 	str.w	r7, [r9], #4
 800b36a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b36e:	40cf      	lsrs	r7, r1
 800b370:	e7da      	b.n	800b328 <rshift+0x4c>
 800b372:	f851 cb04 	ldr.w	ip, [r1], #4
 800b376:	f847 cf04 	str.w	ip, [r7, #4]!
 800b37a:	e7c3      	b.n	800b304 <rshift+0x28>
 800b37c:	4623      	mov	r3, r4
 800b37e:	e7e1      	b.n	800b344 <rshift+0x68>

0800b380 <__hexdig_fun>:
 800b380:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b384:	2b09      	cmp	r3, #9
 800b386:	d802      	bhi.n	800b38e <__hexdig_fun+0xe>
 800b388:	3820      	subs	r0, #32
 800b38a:	b2c0      	uxtb	r0, r0
 800b38c:	4770      	bx	lr
 800b38e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b392:	2b05      	cmp	r3, #5
 800b394:	d801      	bhi.n	800b39a <__hexdig_fun+0x1a>
 800b396:	3847      	subs	r0, #71	@ 0x47
 800b398:	e7f7      	b.n	800b38a <__hexdig_fun+0xa>
 800b39a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d801      	bhi.n	800b3a6 <__hexdig_fun+0x26>
 800b3a2:	3827      	subs	r0, #39	@ 0x27
 800b3a4:	e7f1      	b.n	800b38a <__hexdig_fun+0xa>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	4770      	bx	lr
	...

0800b3ac <__gethex>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	468a      	mov	sl, r1
 800b3b4:	9302      	str	r3, [sp, #8]
 800b3b6:	680b      	ldr	r3, [r1, #0]
 800b3b8:	9001      	str	r0, [sp, #4]
 800b3ba:	4690      	mov	r8, r2
 800b3bc:	1c9c      	adds	r4, r3, #2
 800b3be:	46a1      	mov	r9, r4
 800b3c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3c4:	2830      	cmp	r0, #48	@ 0x30
 800b3c6:	d0fa      	beq.n	800b3be <__gethex+0x12>
 800b3c8:	eba9 0303 	sub.w	r3, r9, r3
 800b3cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800b3d0:	f7ff ffd6 	bl	800b380 <__hexdig_fun>
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d168      	bne.n	800b4ac <__gethex+0x100>
 800b3da:	49a0      	ldr	r1, [pc, #640]	@ (800b65c <__gethex+0x2b0>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f7ff ff12 	bl	800b208 <strncmp>
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d167      	bne.n	800b4ba <__gethex+0x10e>
 800b3ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b3ee:	4626      	mov	r6, r4
 800b3f0:	f7ff ffc6 	bl	800b380 <__hexdig_fun>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d062      	beq.n	800b4be <__gethex+0x112>
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	7818      	ldrb	r0, [r3, #0]
 800b3fc:	2830      	cmp	r0, #48	@ 0x30
 800b3fe:	4699      	mov	r9, r3
 800b400:	f103 0301 	add.w	r3, r3, #1
 800b404:	d0f9      	beq.n	800b3fa <__gethex+0x4e>
 800b406:	f7ff ffbb 	bl	800b380 <__hexdig_fun>
 800b40a:	fab0 f580 	clz	r5, r0
 800b40e:	096d      	lsrs	r5, r5, #5
 800b410:	f04f 0b01 	mov.w	fp, #1
 800b414:	464a      	mov	r2, r9
 800b416:	4616      	mov	r6, r2
 800b418:	3201      	adds	r2, #1
 800b41a:	7830      	ldrb	r0, [r6, #0]
 800b41c:	f7ff ffb0 	bl	800b380 <__hexdig_fun>
 800b420:	2800      	cmp	r0, #0
 800b422:	d1f8      	bne.n	800b416 <__gethex+0x6a>
 800b424:	498d      	ldr	r1, [pc, #564]	@ (800b65c <__gethex+0x2b0>)
 800b426:	2201      	movs	r2, #1
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff feed 	bl	800b208 <strncmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d13f      	bne.n	800b4b2 <__gethex+0x106>
 800b432:	b944      	cbnz	r4, 800b446 <__gethex+0x9a>
 800b434:	1c74      	adds	r4, r6, #1
 800b436:	4622      	mov	r2, r4
 800b438:	4616      	mov	r6, r2
 800b43a:	3201      	adds	r2, #1
 800b43c:	7830      	ldrb	r0, [r6, #0]
 800b43e:	f7ff ff9f 	bl	800b380 <__hexdig_fun>
 800b442:	2800      	cmp	r0, #0
 800b444:	d1f8      	bne.n	800b438 <__gethex+0x8c>
 800b446:	1ba4      	subs	r4, r4, r6
 800b448:	00a7      	lsls	r7, r4, #2
 800b44a:	7833      	ldrb	r3, [r6, #0]
 800b44c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b450:	2b50      	cmp	r3, #80	@ 0x50
 800b452:	d13e      	bne.n	800b4d2 <__gethex+0x126>
 800b454:	7873      	ldrb	r3, [r6, #1]
 800b456:	2b2b      	cmp	r3, #43	@ 0x2b
 800b458:	d033      	beq.n	800b4c2 <__gethex+0x116>
 800b45a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b45c:	d034      	beq.n	800b4c8 <__gethex+0x11c>
 800b45e:	1c71      	adds	r1, r6, #1
 800b460:	2400      	movs	r4, #0
 800b462:	7808      	ldrb	r0, [r1, #0]
 800b464:	f7ff ff8c 	bl	800b380 <__hexdig_fun>
 800b468:	1e43      	subs	r3, r0, #1
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b18      	cmp	r3, #24
 800b46e:	d830      	bhi.n	800b4d2 <__gethex+0x126>
 800b470:	f1a0 0210 	sub.w	r2, r0, #16
 800b474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b478:	f7ff ff82 	bl	800b380 <__hexdig_fun>
 800b47c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b480:	fa5f fc8c 	uxtb.w	ip, ip
 800b484:	f1bc 0f18 	cmp.w	ip, #24
 800b488:	f04f 030a 	mov.w	r3, #10
 800b48c:	d91e      	bls.n	800b4cc <__gethex+0x120>
 800b48e:	b104      	cbz	r4, 800b492 <__gethex+0xe6>
 800b490:	4252      	negs	r2, r2
 800b492:	4417      	add	r7, r2
 800b494:	f8ca 1000 	str.w	r1, [sl]
 800b498:	b1ed      	cbz	r5, 800b4d6 <__gethex+0x12a>
 800b49a:	f1bb 0f00 	cmp.w	fp, #0
 800b49e:	bf0c      	ite	eq
 800b4a0:	2506      	moveq	r5, #6
 800b4a2:	2500      	movne	r5, #0
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	b005      	add	sp, #20
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	2500      	movs	r5, #0
 800b4ae:	462c      	mov	r4, r5
 800b4b0:	e7b0      	b.n	800b414 <__gethex+0x68>
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d1c7      	bne.n	800b446 <__gethex+0x9a>
 800b4b6:	4627      	mov	r7, r4
 800b4b8:	e7c7      	b.n	800b44a <__gethex+0x9e>
 800b4ba:	464e      	mov	r6, r9
 800b4bc:	462f      	mov	r7, r5
 800b4be:	2501      	movs	r5, #1
 800b4c0:	e7c3      	b.n	800b44a <__gethex+0x9e>
 800b4c2:	2400      	movs	r4, #0
 800b4c4:	1cb1      	adds	r1, r6, #2
 800b4c6:	e7cc      	b.n	800b462 <__gethex+0xb6>
 800b4c8:	2401      	movs	r4, #1
 800b4ca:	e7fb      	b.n	800b4c4 <__gethex+0x118>
 800b4cc:	fb03 0002 	mla	r0, r3, r2, r0
 800b4d0:	e7ce      	b.n	800b470 <__gethex+0xc4>
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	e7de      	b.n	800b494 <__gethex+0xe8>
 800b4d6:	eba6 0309 	sub.w	r3, r6, r9
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	4629      	mov	r1, r5
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	dc0a      	bgt.n	800b4f8 <__gethex+0x14c>
 800b4e2:	9801      	ldr	r0, [sp, #4]
 800b4e4:	f7fe f944 	bl	8009770 <_Balloc>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b940      	cbnz	r0, 800b4fe <__gethex+0x152>
 800b4ec:	4b5c      	ldr	r3, [pc, #368]	@ (800b660 <__gethex+0x2b4>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	21e4      	movs	r1, #228	@ 0xe4
 800b4f2:	485c      	ldr	r0, [pc, #368]	@ (800b664 <__gethex+0x2b8>)
 800b4f4:	f7ff fec0 	bl	800b278 <__assert_func>
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	105b      	asrs	r3, r3, #1
 800b4fc:	e7ef      	b.n	800b4de <__gethex+0x132>
 800b4fe:	f100 0a14 	add.w	sl, r0, #20
 800b502:	2300      	movs	r3, #0
 800b504:	4655      	mov	r5, sl
 800b506:	469b      	mov	fp, r3
 800b508:	45b1      	cmp	r9, r6
 800b50a:	d337      	bcc.n	800b57c <__gethex+0x1d0>
 800b50c:	f845 bb04 	str.w	fp, [r5], #4
 800b510:	eba5 050a 	sub.w	r5, r5, sl
 800b514:	10ad      	asrs	r5, r5, #2
 800b516:	6125      	str	r5, [r4, #16]
 800b518:	4658      	mov	r0, fp
 800b51a:	f7fe fa1b 	bl	8009954 <__hi0bits>
 800b51e:	016d      	lsls	r5, r5, #5
 800b520:	f8d8 6000 	ldr.w	r6, [r8]
 800b524:	1a2d      	subs	r5, r5, r0
 800b526:	42b5      	cmp	r5, r6
 800b528:	dd54      	ble.n	800b5d4 <__gethex+0x228>
 800b52a:	1bad      	subs	r5, r5, r6
 800b52c:	4629      	mov	r1, r5
 800b52e:	4620      	mov	r0, r4
 800b530:	f7fe fda7 	bl	800a082 <__any_on>
 800b534:	4681      	mov	r9, r0
 800b536:	b178      	cbz	r0, 800b558 <__gethex+0x1ac>
 800b538:	1e6b      	subs	r3, r5, #1
 800b53a:	1159      	asrs	r1, r3, #5
 800b53c:	f003 021f 	and.w	r2, r3, #31
 800b540:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b544:	f04f 0901 	mov.w	r9, #1
 800b548:	fa09 f202 	lsl.w	r2, r9, r2
 800b54c:	420a      	tst	r2, r1
 800b54e:	d003      	beq.n	800b558 <__gethex+0x1ac>
 800b550:	454b      	cmp	r3, r9
 800b552:	dc36      	bgt.n	800b5c2 <__gethex+0x216>
 800b554:	f04f 0902 	mov.w	r9, #2
 800b558:	4629      	mov	r1, r5
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7ff febe 	bl	800b2dc <rshift>
 800b560:	442f      	add	r7, r5
 800b562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b566:	42bb      	cmp	r3, r7
 800b568:	da42      	bge.n	800b5f0 <__gethex+0x244>
 800b56a:	9801      	ldr	r0, [sp, #4]
 800b56c:	4621      	mov	r1, r4
 800b56e:	f7fe f93f 	bl	80097f0 <_Bfree>
 800b572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b574:	2300      	movs	r3, #0
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	25a3      	movs	r5, #163	@ 0xa3
 800b57a:	e793      	b.n	800b4a4 <__gethex+0xf8>
 800b57c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b580:	2a2e      	cmp	r2, #46	@ 0x2e
 800b582:	d012      	beq.n	800b5aa <__gethex+0x1fe>
 800b584:	2b20      	cmp	r3, #32
 800b586:	d104      	bne.n	800b592 <__gethex+0x1e6>
 800b588:	f845 bb04 	str.w	fp, [r5], #4
 800b58c:	f04f 0b00 	mov.w	fp, #0
 800b590:	465b      	mov	r3, fp
 800b592:	7830      	ldrb	r0, [r6, #0]
 800b594:	9303      	str	r3, [sp, #12]
 800b596:	f7ff fef3 	bl	800b380 <__hexdig_fun>
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	f000 000f 	and.w	r0, r0, #15
 800b5a0:	4098      	lsls	r0, r3
 800b5a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	e7ae      	b.n	800b508 <__gethex+0x15c>
 800b5aa:	45b1      	cmp	r9, r6
 800b5ac:	d8ea      	bhi.n	800b584 <__gethex+0x1d8>
 800b5ae:	492b      	ldr	r1, [pc, #172]	@ (800b65c <__gethex+0x2b0>)
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff fe27 	bl	800b208 <strncmp>
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1e1      	bne.n	800b584 <__gethex+0x1d8>
 800b5c0:	e7a2      	b.n	800b508 <__gethex+0x15c>
 800b5c2:	1ea9      	subs	r1, r5, #2
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f7fe fd5c 	bl	800a082 <__any_on>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0c2      	beq.n	800b554 <__gethex+0x1a8>
 800b5ce:	f04f 0903 	mov.w	r9, #3
 800b5d2:	e7c1      	b.n	800b558 <__gethex+0x1ac>
 800b5d4:	da09      	bge.n	800b5ea <__gethex+0x23e>
 800b5d6:	1b75      	subs	r5, r6, r5
 800b5d8:	4621      	mov	r1, r4
 800b5da:	9801      	ldr	r0, [sp, #4]
 800b5dc:	462a      	mov	r2, r5
 800b5de:	f7fe fb17 	bl	8009c10 <__lshift>
 800b5e2:	1b7f      	subs	r7, r7, r5
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	f100 0a14 	add.w	sl, r0, #20
 800b5ea:	f04f 0900 	mov.w	r9, #0
 800b5ee:	e7b8      	b.n	800b562 <__gethex+0x1b6>
 800b5f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5f4:	42bd      	cmp	r5, r7
 800b5f6:	dd6f      	ble.n	800b6d8 <__gethex+0x32c>
 800b5f8:	1bed      	subs	r5, r5, r7
 800b5fa:	42ae      	cmp	r6, r5
 800b5fc:	dc34      	bgt.n	800b668 <__gethex+0x2bc>
 800b5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d022      	beq.n	800b64c <__gethex+0x2a0>
 800b606:	2b03      	cmp	r3, #3
 800b608:	d024      	beq.n	800b654 <__gethex+0x2a8>
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d115      	bne.n	800b63a <__gethex+0x28e>
 800b60e:	42ae      	cmp	r6, r5
 800b610:	d113      	bne.n	800b63a <__gethex+0x28e>
 800b612:	2e01      	cmp	r6, #1
 800b614:	d10b      	bne.n	800b62e <__gethex+0x282>
 800b616:	9a02      	ldr	r2, [sp, #8]
 800b618:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	2301      	movs	r3, #1
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	f8ca 3000 	str.w	r3, [sl]
 800b626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b628:	2562      	movs	r5, #98	@ 0x62
 800b62a:	601c      	str	r4, [r3, #0]
 800b62c:	e73a      	b.n	800b4a4 <__gethex+0xf8>
 800b62e:	1e71      	subs	r1, r6, #1
 800b630:	4620      	mov	r0, r4
 800b632:	f7fe fd26 	bl	800a082 <__any_on>
 800b636:	2800      	cmp	r0, #0
 800b638:	d1ed      	bne.n	800b616 <__gethex+0x26a>
 800b63a:	9801      	ldr	r0, [sp, #4]
 800b63c:	4621      	mov	r1, r4
 800b63e:	f7fe f8d7 	bl	80097f0 <_Bfree>
 800b642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b644:	2300      	movs	r3, #0
 800b646:	6013      	str	r3, [r2, #0]
 800b648:	2550      	movs	r5, #80	@ 0x50
 800b64a:	e72b      	b.n	800b4a4 <__gethex+0xf8>
 800b64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f3      	bne.n	800b63a <__gethex+0x28e>
 800b652:	e7e0      	b.n	800b616 <__gethex+0x26a>
 800b654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1dd      	bne.n	800b616 <__gethex+0x26a>
 800b65a:	e7ee      	b.n	800b63a <__gethex+0x28e>
 800b65c:	0800c0e7 	.word	0x0800c0e7
 800b660:	0800c07d 	.word	0x0800c07d
 800b664:	0800c13e 	.word	0x0800c13e
 800b668:	1e6f      	subs	r7, r5, #1
 800b66a:	f1b9 0f00 	cmp.w	r9, #0
 800b66e:	d130      	bne.n	800b6d2 <__gethex+0x326>
 800b670:	b127      	cbz	r7, 800b67c <__gethex+0x2d0>
 800b672:	4639      	mov	r1, r7
 800b674:	4620      	mov	r0, r4
 800b676:	f7fe fd04 	bl	800a082 <__any_on>
 800b67a:	4681      	mov	r9, r0
 800b67c:	117a      	asrs	r2, r7, #5
 800b67e:	2301      	movs	r3, #1
 800b680:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b684:	f007 071f 	and.w	r7, r7, #31
 800b688:	40bb      	lsls	r3, r7
 800b68a:	4213      	tst	r3, r2
 800b68c:	4629      	mov	r1, r5
 800b68e:	4620      	mov	r0, r4
 800b690:	bf18      	it	ne
 800b692:	f049 0902 	orrne.w	r9, r9, #2
 800b696:	f7ff fe21 	bl	800b2dc <rshift>
 800b69a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b69e:	1b76      	subs	r6, r6, r5
 800b6a0:	2502      	movs	r5, #2
 800b6a2:	f1b9 0f00 	cmp.w	r9, #0
 800b6a6:	d047      	beq.n	800b738 <__gethex+0x38c>
 800b6a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d015      	beq.n	800b6dc <__gethex+0x330>
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d017      	beq.n	800b6e4 <__gethex+0x338>
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d109      	bne.n	800b6cc <__gethex+0x320>
 800b6b8:	f019 0f02 	tst.w	r9, #2
 800b6bc:	d006      	beq.n	800b6cc <__gethex+0x320>
 800b6be:	f8da 3000 	ldr.w	r3, [sl]
 800b6c2:	ea49 0903 	orr.w	r9, r9, r3
 800b6c6:	f019 0f01 	tst.w	r9, #1
 800b6ca:	d10e      	bne.n	800b6ea <__gethex+0x33e>
 800b6cc:	f045 0510 	orr.w	r5, r5, #16
 800b6d0:	e032      	b.n	800b738 <__gethex+0x38c>
 800b6d2:	f04f 0901 	mov.w	r9, #1
 800b6d6:	e7d1      	b.n	800b67c <__gethex+0x2d0>
 800b6d8:	2501      	movs	r5, #1
 800b6da:	e7e2      	b.n	800b6a2 <__gethex+0x2f6>
 800b6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6de:	f1c3 0301 	rsb	r3, r3, #1
 800b6e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0f0      	beq.n	800b6cc <__gethex+0x320>
 800b6ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6ee:	f104 0314 	add.w	r3, r4, #20
 800b6f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6fa:	f04f 0c00 	mov.w	ip, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f853 2b04 	ldr.w	r2, [r3], #4
 800b704:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b708:	d01b      	beq.n	800b742 <__gethex+0x396>
 800b70a:	3201      	adds	r2, #1
 800b70c:	6002      	str	r2, [r0, #0]
 800b70e:	2d02      	cmp	r5, #2
 800b710:	f104 0314 	add.w	r3, r4, #20
 800b714:	d13c      	bne.n	800b790 <__gethex+0x3e4>
 800b716:	f8d8 2000 	ldr.w	r2, [r8]
 800b71a:	3a01      	subs	r2, #1
 800b71c:	42b2      	cmp	r2, r6
 800b71e:	d109      	bne.n	800b734 <__gethex+0x388>
 800b720:	1171      	asrs	r1, r6, #5
 800b722:	2201      	movs	r2, #1
 800b724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b728:	f006 061f 	and.w	r6, r6, #31
 800b72c:	fa02 f606 	lsl.w	r6, r2, r6
 800b730:	421e      	tst	r6, r3
 800b732:	d13a      	bne.n	800b7aa <__gethex+0x3fe>
 800b734:	f045 0520 	orr.w	r5, r5, #32
 800b738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b73a:	601c      	str	r4, [r3, #0]
 800b73c:	9b02      	ldr	r3, [sp, #8]
 800b73e:	601f      	str	r7, [r3, #0]
 800b740:	e6b0      	b.n	800b4a4 <__gethex+0xf8>
 800b742:	4299      	cmp	r1, r3
 800b744:	f843 cc04 	str.w	ip, [r3, #-4]
 800b748:	d8d9      	bhi.n	800b6fe <__gethex+0x352>
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	459b      	cmp	fp, r3
 800b74e:	db17      	blt.n	800b780 <__gethex+0x3d4>
 800b750:	6861      	ldr	r1, [r4, #4]
 800b752:	9801      	ldr	r0, [sp, #4]
 800b754:	3101      	adds	r1, #1
 800b756:	f7fe f80b 	bl	8009770 <_Balloc>
 800b75a:	4681      	mov	r9, r0
 800b75c:	b918      	cbnz	r0, 800b766 <__gethex+0x3ba>
 800b75e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c8 <__gethex+0x41c>)
 800b760:	4602      	mov	r2, r0
 800b762:	2184      	movs	r1, #132	@ 0x84
 800b764:	e6c5      	b.n	800b4f2 <__gethex+0x146>
 800b766:	6922      	ldr	r2, [r4, #16]
 800b768:	3202      	adds	r2, #2
 800b76a:	f104 010c 	add.w	r1, r4, #12
 800b76e:	0092      	lsls	r2, r2, #2
 800b770:	300c      	adds	r0, #12
 800b772:	f7ff fd6b 	bl	800b24c <memcpy>
 800b776:	4621      	mov	r1, r4
 800b778:	9801      	ldr	r0, [sp, #4]
 800b77a:	f7fe f839 	bl	80097f0 <_Bfree>
 800b77e:	464c      	mov	r4, r9
 800b780:	6923      	ldr	r3, [r4, #16]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b788:	6122      	str	r2, [r4, #16]
 800b78a:	2201      	movs	r2, #1
 800b78c:	615a      	str	r2, [r3, #20]
 800b78e:	e7be      	b.n	800b70e <__gethex+0x362>
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	455a      	cmp	r2, fp
 800b794:	dd0b      	ble.n	800b7ae <__gethex+0x402>
 800b796:	2101      	movs	r1, #1
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff fd9f 	bl	800b2dc <rshift>
 800b79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7a2:	3701      	adds	r7, #1
 800b7a4:	42bb      	cmp	r3, r7
 800b7a6:	f6ff aee0 	blt.w	800b56a <__gethex+0x1be>
 800b7aa:	2501      	movs	r5, #1
 800b7ac:	e7c2      	b.n	800b734 <__gethex+0x388>
 800b7ae:	f016 061f 	ands.w	r6, r6, #31
 800b7b2:	d0fa      	beq.n	800b7aa <__gethex+0x3fe>
 800b7b4:	4453      	add	r3, sl
 800b7b6:	f1c6 0620 	rsb	r6, r6, #32
 800b7ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7be:	f7fe f8c9 	bl	8009954 <__hi0bits>
 800b7c2:	42b0      	cmp	r0, r6
 800b7c4:	dbe7      	blt.n	800b796 <__gethex+0x3ea>
 800b7c6:	e7f0      	b.n	800b7aa <__gethex+0x3fe>
 800b7c8:	0800c07d 	.word	0x0800c07d

0800b7cc <L_shift>:
 800b7cc:	f1c2 0208 	rsb	r2, r2, #8
 800b7d0:	0092      	lsls	r2, r2, #2
 800b7d2:	b570      	push	{r4, r5, r6, lr}
 800b7d4:	f1c2 0620 	rsb	r6, r2, #32
 800b7d8:	6843      	ldr	r3, [r0, #4]
 800b7da:	6804      	ldr	r4, [r0, #0]
 800b7dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b7e0:	432c      	orrs	r4, r5
 800b7e2:	40d3      	lsrs	r3, r2
 800b7e4:	6004      	str	r4, [r0, #0]
 800b7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7ea:	4288      	cmp	r0, r1
 800b7ec:	d3f4      	bcc.n	800b7d8 <L_shift+0xc>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}

0800b7f0 <__match>:
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	6803      	ldr	r3, [r0, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7fa:	b914      	cbnz	r4, 800b802 <__match+0x12>
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	2001      	movs	r0, #1
 800b800:	bd30      	pop	{r4, r5, pc}
 800b802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b806:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b80a:	2d19      	cmp	r5, #25
 800b80c:	bf98      	it	ls
 800b80e:	3220      	addls	r2, #32
 800b810:	42a2      	cmp	r2, r4
 800b812:	d0f0      	beq.n	800b7f6 <__match+0x6>
 800b814:	2000      	movs	r0, #0
 800b816:	e7f3      	b.n	800b800 <__match+0x10>

0800b818 <__hexnan>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	680b      	ldr	r3, [r1, #0]
 800b81e:	6801      	ldr	r1, [r0, #0]
 800b820:	115e      	asrs	r6, r3, #5
 800b822:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b826:	f013 031f 	ands.w	r3, r3, #31
 800b82a:	b087      	sub	sp, #28
 800b82c:	bf18      	it	ne
 800b82e:	3604      	addne	r6, #4
 800b830:	2500      	movs	r5, #0
 800b832:	1f37      	subs	r7, r6, #4
 800b834:	4682      	mov	sl, r0
 800b836:	4690      	mov	r8, r2
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b83e:	46b9      	mov	r9, r7
 800b840:	463c      	mov	r4, r7
 800b842:	9502      	str	r5, [sp, #8]
 800b844:	46ab      	mov	fp, r5
 800b846:	784a      	ldrb	r2, [r1, #1]
 800b848:	1c4b      	adds	r3, r1, #1
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	b342      	cbz	r2, 800b8a0 <__hexnan+0x88>
 800b84e:	4610      	mov	r0, r2
 800b850:	9105      	str	r1, [sp, #20]
 800b852:	9204      	str	r2, [sp, #16]
 800b854:	f7ff fd94 	bl	800b380 <__hexdig_fun>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d151      	bne.n	800b900 <__hexnan+0xe8>
 800b85c:	9a04      	ldr	r2, [sp, #16]
 800b85e:	9905      	ldr	r1, [sp, #20]
 800b860:	2a20      	cmp	r2, #32
 800b862:	d818      	bhi.n	800b896 <__hexnan+0x7e>
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	459b      	cmp	fp, r3
 800b868:	dd13      	ble.n	800b892 <__hexnan+0x7a>
 800b86a:	454c      	cmp	r4, r9
 800b86c:	d206      	bcs.n	800b87c <__hexnan+0x64>
 800b86e:	2d07      	cmp	r5, #7
 800b870:	dc04      	bgt.n	800b87c <__hexnan+0x64>
 800b872:	462a      	mov	r2, r5
 800b874:	4649      	mov	r1, r9
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff ffa8 	bl	800b7cc <L_shift>
 800b87c:	4544      	cmp	r4, r8
 800b87e:	d952      	bls.n	800b926 <__hexnan+0x10e>
 800b880:	2300      	movs	r3, #0
 800b882:	f1a4 0904 	sub.w	r9, r4, #4
 800b886:	f844 3c04 	str.w	r3, [r4, #-4]
 800b88a:	f8cd b008 	str.w	fp, [sp, #8]
 800b88e:	464c      	mov	r4, r9
 800b890:	461d      	mov	r5, r3
 800b892:	9903      	ldr	r1, [sp, #12]
 800b894:	e7d7      	b.n	800b846 <__hexnan+0x2e>
 800b896:	2a29      	cmp	r2, #41	@ 0x29
 800b898:	d157      	bne.n	800b94a <__hexnan+0x132>
 800b89a:	3102      	adds	r1, #2
 800b89c:	f8ca 1000 	str.w	r1, [sl]
 800b8a0:	f1bb 0f00 	cmp.w	fp, #0
 800b8a4:	d051      	beq.n	800b94a <__hexnan+0x132>
 800b8a6:	454c      	cmp	r4, r9
 800b8a8:	d206      	bcs.n	800b8b8 <__hexnan+0xa0>
 800b8aa:	2d07      	cmp	r5, #7
 800b8ac:	dc04      	bgt.n	800b8b8 <__hexnan+0xa0>
 800b8ae:	462a      	mov	r2, r5
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7ff ff8a 	bl	800b7cc <L_shift>
 800b8b8:	4544      	cmp	r4, r8
 800b8ba:	d936      	bls.n	800b92a <__hexnan+0x112>
 800b8bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8ca:	429f      	cmp	r7, r3
 800b8cc:	d2f9      	bcs.n	800b8c2 <__hexnan+0xaa>
 800b8ce:	1b3b      	subs	r3, r7, r4
 800b8d0:	f023 0303 	bic.w	r3, r3, #3
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	3401      	adds	r4, #1
 800b8d8:	3e03      	subs	r6, #3
 800b8da:	42b4      	cmp	r4, r6
 800b8dc:	bf88      	it	hi
 800b8de:	2304      	movhi	r3, #4
 800b8e0:	4443      	add	r3, r8
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f843 2b04 	str.w	r2, [r3], #4
 800b8e8:	429f      	cmp	r7, r3
 800b8ea:	d2fb      	bcs.n	800b8e4 <__hexnan+0xcc>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	b91b      	cbnz	r3, 800b8f8 <__hexnan+0xe0>
 800b8f0:	4547      	cmp	r7, r8
 800b8f2:	d128      	bne.n	800b946 <__hexnan+0x12e>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	2005      	movs	r0, #5
 800b8fa:	b007      	add	sp, #28
 800b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b900:	3501      	adds	r5, #1
 800b902:	2d08      	cmp	r5, #8
 800b904:	f10b 0b01 	add.w	fp, fp, #1
 800b908:	dd06      	ble.n	800b918 <__hexnan+0x100>
 800b90a:	4544      	cmp	r4, r8
 800b90c:	d9c1      	bls.n	800b892 <__hexnan+0x7a>
 800b90e:	2300      	movs	r3, #0
 800b910:	f844 3c04 	str.w	r3, [r4, #-4]
 800b914:	2501      	movs	r5, #1
 800b916:	3c04      	subs	r4, #4
 800b918:	6822      	ldr	r2, [r4, #0]
 800b91a:	f000 000f 	and.w	r0, r0, #15
 800b91e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b922:	6020      	str	r0, [r4, #0]
 800b924:	e7b5      	b.n	800b892 <__hexnan+0x7a>
 800b926:	2508      	movs	r5, #8
 800b928:	e7b3      	b.n	800b892 <__hexnan+0x7a>
 800b92a:	9b01      	ldr	r3, [sp, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0dd      	beq.n	800b8ec <__hexnan+0xd4>
 800b930:	f1c3 0320 	rsb	r3, r3, #32
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	40da      	lsrs	r2, r3
 800b93a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b93e:	4013      	ands	r3, r2
 800b940:	f846 3c04 	str.w	r3, [r6, #-4]
 800b944:	e7d2      	b.n	800b8ec <__hexnan+0xd4>
 800b946:	3f04      	subs	r7, #4
 800b948:	e7d0      	b.n	800b8ec <__hexnan+0xd4>
 800b94a:	2004      	movs	r0, #4
 800b94c:	e7d5      	b.n	800b8fa <__hexnan+0xe2>

0800b94e <__ascii_mbtowc>:
 800b94e:	b082      	sub	sp, #8
 800b950:	b901      	cbnz	r1, 800b954 <__ascii_mbtowc+0x6>
 800b952:	a901      	add	r1, sp, #4
 800b954:	b142      	cbz	r2, 800b968 <__ascii_mbtowc+0x1a>
 800b956:	b14b      	cbz	r3, 800b96c <__ascii_mbtowc+0x1e>
 800b958:	7813      	ldrb	r3, [r2, #0]
 800b95a:	600b      	str	r3, [r1, #0]
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	1e10      	subs	r0, r2, #0
 800b960:	bf18      	it	ne
 800b962:	2001      	movne	r0, #1
 800b964:	b002      	add	sp, #8
 800b966:	4770      	bx	lr
 800b968:	4610      	mov	r0, r2
 800b96a:	e7fb      	b.n	800b964 <__ascii_mbtowc+0x16>
 800b96c:	f06f 0001 	mvn.w	r0, #1
 800b970:	e7f8      	b.n	800b964 <__ascii_mbtowc+0x16>

0800b972 <_realloc_r>:
 800b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b976:	4607      	mov	r7, r0
 800b978:	4614      	mov	r4, r2
 800b97a:	460d      	mov	r5, r1
 800b97c:	b921      	cbnz	r1, 800b988 <_realloc_r+0x16>
 800b97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	4611      	mov	r1, r2
 800b984:	f7fd be68 	b.w	8009658 <_malloc_r>
 800b988:	b92a      	cbnz	r2, 800b996 <_realloc_r+0x24>
 800b98a:	f7fd fdf1 	bl	8009570 <_free_r>
 800b98e:	4625      	mov	r5, r4
 800b990:	4628      	mov	r0, r5
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b996:	f000 f840 	bl	800ba1a <_malloc_usable_size_r>
 800b99a:	4284      	cmp	r4, r0
 800b99c:	4606      	mov	r6, r0
 800b99e:	d802      	bhi.n	800b9a6 <_realloc_r+0x34>
 800b9a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9a4:	d8f4      	bhi.n	800b990 <_realloc_r+0x1e>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7fd fe55 	bl	8009658 <_malloc_r>
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	b908      	cbnz	r0, 800b9b6 <_realloc_r+0x44>
 800b9b2:	4645      	mov	r5, r8
 800b9b4:	e7ec      	b.n	800b990 <_realloc_r+0x1e>
 800b9b6:	42b4      	cmp	r4, r6
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	bf28      	it	cs
 800b9be:	4632      	movcs	r2, r6
 800b9c0:	f7ff fc44 	bl	800b24c <memcpy>
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7fd fdd2 	bl	8009570 <_free_r>
 800b9cc:	e7f1      	b.n	800b9b2 <_realloc_r+0x40>

0800b9ce <__ascii_wctomb>:
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	b141      	cbz	r1, 800b9e6 <__ascii_wctomb+0x18>
 800b9d4:	2aff      	cmp	r2, #255	@ 0xff
 800b9d6:	d904      	bls.n	800b9e2 <__ascii_wctomb+0x14>
 800b9d8:	228a      	movs	r2, #138	@ 0x8a
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	4770      	bx	lr
 800b9e2:	700a      	strb	r2, [r1, #0]
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	4770      	bx	lr

0800b9e8 <fiprintf>:
 800b9e8:	b40e      	push	{r1, r2, r3}
 800b9ea:	b503      	push	{r0, r1, lr}
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	4805      	ldr	r0, [pc, #20]	@ (800ba08 <fiprintf+0x20>)
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	6800      	ldr	r0, [r0, #0]
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	f000 f83f 	bl	800ba7c <_vfiprintf_r>
 800b9fe:	b002      	add	sp, #8
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	2000001c 	.word	0x2000001c

0800ba0c <abort>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	2006      	movs	r0, #6
 800ba10:	f000 fa08 	bl	800be24 <raise>
 800ba14:	2001      	movs	r0, #1
 800ba16:	f7f6 f9f5 	bl	8001e04 <_exit>

0800ba1a <_malloc_usable_size_r>:
 800ba1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1e:	1f18      	subs	r0, r3, #4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfbc      	itt	lt
 800ba24:	580b      	ldrlt	r3, [r1, r0]
 800ba26:	18c0      	addlt	r0, r0, r3
 800ba28:	4770      	bx	lr

0800ba2a <__sfputc_r>:
 800ba2a:	6893      	ldr	r3, [r2, #8]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	b410      	push	{r4}
 800ba32:	6093      	str	r3, [r2, #8]
 800ba34:	da08      	bge.n	800ba48 <__sfputc_r+0x1e>
 800ba36:	6994      	ldr	r4, [r2, #24]
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	db01      	blt.n	800ba40 <__sfputc_r+0x16>
 800ba3c:	290a      	cmp	r1, #10
 800ba3e:	d103      	bne.n	800ba48 <__sfputc_r+0x1e>
 800ba40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba44:	f000 b932 	b.w	800bcac <__swbuf_r>
 800ba48:	6813      	ldr	r3, [r2, #0]
 800ba4a:	1c58      	adds	r0, r3, #1
 800ba4c:	6010      	str	r0, [r2, #0]
 800ba4e:	7019      	strb	r1, [r3, #0]
 800ba50:	4608      	mov	r0, r1
 800ba52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <__sfputs_r>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460f      	mov	r7, r1
 800ba5e:	4614      	mov	r4, r2
 800ba60:	18d5      	adds	r5, r2, r3
 800ba62:	42ac      	cmp	r4, r5
 800ba64:	d101      	bne.n	800ba6a <__sfputs_r+0x12>
 800ba66:	2000      	movs	r0, #0
 800ba68:	e007      	b.n	800ba7a <__sfputs_r+0x22>
 800ba6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6e:	463a      	mov	r2, r7
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff ffda 	bl	800ba2a <__sfputc_r>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	d1f3      	bne.n	800ba62 <__sfputs_r+0xa>
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba7c <_vfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	460d      	mov	r5, r1
 800ba82:	b09d      	sub	sp, #116	@ 0x74
 800ba84:	4614      	mov	r4, r2
 800ba86:	4698      	mov	r8, r3
 800ba88:	4606      	mov	r6, r0
 800ba8a:	b118      	cbz	r0, 800ba94 <_vfiprintf_r+0x18>
 800ba8c:	6a03      	ldr	r3, [r0, #32]
 800ba8e:	b90b      	cbnz	r3, 800ba94 <_vfiprintf_r+0x18>
 800ba90:	f7fc fdf2 	bl	8008678 <__sinit>
 800ba94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	d405      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800baa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baa2:	f7fc ff02 	bl	80088aa <__retarget_lock_acquire_recursive>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	071b      	lsls	r3, r3, #28
 800baaa:	d501      	bpl.n	800bab0 <_vfiprintf_r+0x34>
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	b99b      	cbnz	r3, 800bad8 <_vfiprintf_r+0x5c>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f938 	bl	800bd28 <__swsetup_r>
 800bab8:	b170      	cbz	r0, 800bad8 <_vfiprintf_r+0x5c>
 800baba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800babc:	07dc      	lsls	r4, r3, #31
 800babe:	d504      	bpl.n	800baca <_vfiprintf_r+0x4e>
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	b01d      	add	sp, #116	@ 0x74
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	0598      	lsls	r0, r3, #22
 800bace:	d4f7      	bmi.n	800bac0 <_vfiprintf_r+0x44>
 800bad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad2:	f7fc feeb 	bl	80088ac <__retarget_lock_release_recursive>
 800bad6:	e7f3      	b.n	800bac0 <_vfiprintf_r+0x44>
 800bad8:	2300      	movs	r3, #0
 800bada:	9309      	str	r3, [sp, #36]	@ 0x24
 800badc:	2320      	movs	r3, #32
 800bade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae6:	2330      	movs	r3, #48	@ 0x30
 800bae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc98 <_vfiprintf_r+0x21c>
 800baec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baf0:	f04f 0901 	mov.w	r9, #1
 800baf4:	4623      	mov	r3, r4
 800baf6:	469a      	mov	sl, r3
 800baf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafc:	b10a      	cbz	r2, 800bb02 <_vfiprintf_r+0x86>
 800bafe:	2a25      	cmp	r2, #37	@ 0x25
 800bb00:	d1f9      	bne.n	800baf6 <_vfiprintf_r+0x7a>
 800bb02:	ebba 0b04 	subs.w	fp, sl, r4
 800bb06:	d00b      	beq.n	800bb20 <_vfiprintf_r+0xa4>
 800bb08:	465b      	mov	r3, fp
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ffa2 	bl	800ba58 <__sfputs_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f000 80a7 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1c:	445a      	add	r2, fp
 800bb1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb20:	f89a 3000 	ldrb.w	r3, [sl]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 809f 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb34:	f10a 0a01 	add.w	sl, sl, #1
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	9307      	str	r3, [sp, #28]
 800bb3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb40:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb42:	4654      	mov	r4, sl
 800bb44:	2205      	movs	r2, #5
 800bb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4a:	4853      	ldr	r0, [pc, #332]	@ (800bc98 <_vfiprintf_r+0x21c>)
 800bb4c:	f7f4 fb40 	bl	80001d0 <memchr>
 800bb50:	9a04      	ldr	r2, [sp, #16]
 800bb52:	b9d8      	cbnz	r0, 800bb8c <_vfiprintf_r+0x110>
 800bb54:	06d1      	lsls	r1, r2, #27
 800bb56:	bf44      	itt	mi
 800bb58:	2320      	movmi	r3, #32
 800bb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5e:	0713      	lsls	r3, r2, #28
 800bb60:	bf44      	itt	mi
 800bb62:	232b      	movmi	r3, #43	@ 0x2b
 800bb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb68:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6e:	d015      	beq.n	800bb9c <_vfiprintf_r+0x120>
 800bb70:	9a07      	ldr	r2, [sp, #28]
 800bb72:	4654      	mov	r4, sl
 800bb74:	2000      	movs	r0, #0
 800bb76:	f04f 0c0a 	mov.w	ip, #10
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb80:	3b30      	subs	r3, #48	@ 0x30
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d94b      	bls.n	800bc1e <_vfiprintf_r+0x1a2>
 800bb86:	b1b0      	cbz	r0, 800bbb6 <_vfiprintf_r+0x13a>
 800bb88:	9207      	str	r2, [sp, #28]
 800bb8a:	e014      	b.n	800bbb6 <_vfiprintf_r+0x13a>
 800bb8c:	eba0 0308 	sub.w	r3, r0, r8
 800bb90:	fa09 f303 	lsl.w	r3, r9, r3
 800bb94:	4313      	orrs	r3, r2
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	46a2      	mov	sl, r4
 800bb9a:	e7d2      	b.n	800bb42 <_vfiprintf_r+0xc6>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	1d19      	adds	r1, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9103      	str	r1, [sp, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfbb      	ittet	lt
 800bba8:	425b      	neglt	r3, r3
 800bbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bbae:	9307      	strge	r3, [sp, #28]
 800bbb0:	9307      	strlt	r3, [sp, #28]
 800bbb2:	bfb8      	it	lt
 800bbb4:	9204      	strlt	r2, [sp, #16]
 800bbb6:	7823      	ldrb	r3, [r4, #0]
 800bbb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbba:	d10a      	bne.n	800bbd2 <_vfiprintf_r+0x156>
 800bbbc:	7863      	ldrb	r3, [r4, #1]
 800bbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc0:	d132      	bne.n	800bc28 <_vfiprintf_r+0x1ac>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	1d1a      	adds	r2, r3, #4
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	9203      	str	r2, [sp, #12]
 800bbca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbce:	3402      	adds	r4, #2
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bca8 <_vfiprintf_r+0x22c>
 800bbd6:	7821      	ldrb	r1, [r4, #0]
 800bbd8:	2203      	movs	r2, #3
 800bbda:	4650      	mov	r0, sl
 800bbdc:	f7f4 faf8 	bl	80001d0 <memchr>
 800bbe0:	b138      	cbz	r0, 800bbf2 <_vfiprintf_r+0x176>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	eba0 000a 	sub.w	r0, r0, sl
 800bbe8:	2240      	movs	r2, #64	@ 0x40
 800bbea:	4082      	lsls	r2, r0
 800bbec:	4313      	orrs	r3, r2
 800bbee:	3401      	adds	r4, #1
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	4829      	ldr	r0, [pc, #164]	@ (800bc9c <_vfiprintf_r+0x220>)
 800bbf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbfc:	2206      	movs	r2, #6
 800bbfe:	f7f4 fae7 	bl	80001d0 <memchr>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d03f      	beq.n	800bc86 <_vfiprintf_r+0x20a>
 800bc06:	4b26      	ldr	r3, [pc, #152]	@ (800bca0 <_vfiprintf_r+0x224>)
 800bc08:	bb1b      	cbnz	r3, 800bc52 <_vfiprintf_r+0x1d6>
 800bc0a:	9b03      	ldr	r3, [sp, #12]
 800bc0c:	3307      	adds	r3, #7
 800bc0e:	f023 0307 	bic.w	r3, r3, #7
 800bc12:	3308      	adds	r3, #8
 800bc14:	9303      	str	r3, [sp, #12]
 800bc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc18:	443b      	add	r3, r7
 800bc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1c:	e76a      	b.n	800baf4 <_vfiprintf_r+0x78>
 800bc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc22:	460c      	mov	r4, r1
 800bc24:	2001      	movs	r0, #1
 800bc26:	e7a8      	b.n	800bb7a <_vfiprintf_r+0xfe>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f04f 0c0a 	mov.w	ip, #10
 800bc34:	4620      	mov	r0, r4
 800bc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc3a:	3a30      	subs	r2, #48	@ 0x30
 800bc3c:	2a09      	cmp	r2, #9
 800bc3e:	d903      	bls.n	800bc48 <_vfiprintf_r+0x1cc>
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0c6      	beq.n	800bbd2 <_vfiprintf_r+0x156>
 800bc44:	9105      	str	r1, [sp, #20]
 800bc46:	e7c4      	b.n	800bbd2 <_vfiprintf_r+0x156>
 800bc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e7f0      	b.n	800bc34 <_vfiprintf_r+0x1b8>
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	462a      	mov	r2, r5
 800bc58:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fb febb 	bl	80079d8 <_printf_float>
 800bc62:	4607      	mov	r7, r0
 800bc64:	1c78      	adds	r0, r7, #1
 800bc66:	d1d6      	bne.n	800bc16 <_vfiprintf_r+0x19a>
 800bc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc76:	f7fc fe19 	bl	80088ac <__retarget_lock_release_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	065b      	lsls	r3, r3, #25
 800bc7e:	f53f af1f 	bmi.w	800bac0 <_vfiprintf_r+0x44>
 800bc82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc84:	e71e      	b.n	800bac4 <_vfiprintf_r+0x48>
 800bc86:	ab03      	add	r3, sp, #12
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc8e:	a904      	add	r1, sp, #16
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7fc f939 	bl	8007f08 <_printf_i>
 800bc96:	e7e4      	b.n	800bc62 <_vfiprintf_r+0x1e6>
 800bc98:	0800c0e9 	.word	0x0800c0e9
 800bc9c:	0800c0f3 	.word	0x0800c0f3
 800bca0:	080079d9 	.word	0x080079d9
 800bca4:	0800ba59 	.word	0x0800ba59
 800bca8:	0800c0ef 	.word	0x0800c0ef

0800bcac <__swbuf_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	460e      	mov	r6, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	b118      	cbz	r0, 800bcbe <__swbuf_r+0x12>
 800bcb6:	6a03      	ldr	r3, [r0, #32]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <__swbuf_r+0x12>
 800bcba:	f7fc fcdd 	bl	8008678 <__sinit>
 800bcbe:	69a3      	ldr	r3, [r4, #24]
 800bcc0:	60a3      	str	r3, [r4, #8]
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	071a      	lsls	r2, r3, #28
 800bcc6:	d501      	bpl.n	800bccc <__swbuf_r+0x20>
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	b943      	cbnz	r3, 800bcde <__swbuf_r+0x32>
 800bccc:	4621      	mov	r1, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 f82a 	bl	800bd28 <__swsetup_r>
 800bcd4:	b118      	cbz	r0, 800bcde <__swbuf_r+0x32>
 800bcd6:	f04f 37ff 	mov.w	r7, #4294967295
 800bcda:	4638      	mov	r0, r7
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	6922      	ldr	r2, [r4, #16]
 800bce2:	1a98      	subs	r0, r3, r2
 800bce4:	6963      	ldr	r3, [r4, #20]
 800bce6:	b2f6      	uxtb	r6, r6
 800bce8:	4283      	cmp	r3, r0
 800bcea:	4637      	mov	r7, r6
 800bcec:	dc05      	bgt.n	800bcfa <__swbuf_r+0x4e>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7ff fa47 	bl	800b184 <_fflush_r>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d1ed      	bne.n	800bcd6 <__swbuf_r+0x2a>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	60a3      	str	r3, [r4, #8]
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	6022      	str	r2, [r4, #0]
 800bd06:	701e      	strb	r6, [r3, #0]
 800bd08:	6962      	ldr	r2, [r4, #20]
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d004      	beq.n	800bd1a <__swbuf_r+0x6e>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	07db      	lsls	r3, r3, #31
 800bd14:	d5e1      	bpl.n	800bcda <__swbuf_r+0x2e>
 800bd16:	2e0a      	cmp	r6, #10
 800bd18:	d1df      	bne.n	800bcda <__swbuf_r+0x2e>
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff fa31 	bl	800b184 <_fflush_r>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0d9      	beq.n	800bcda <__swbuf_r+0x2e>
 800bd26:	e7d6      	b.n	800bcd6 <__swbuf_r+0x2a>

0800bd28 <__swsetup_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4b29      	ldr	r3, [pc, #164]	@ (800bdd0 <__swsetup_r+0xa8>)
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	460c      	mov	r4, r1
 800bd32:	b118      	cbz	r0, 800bd3c <__swsetup_r+0x14>
 800bd34:	6a03      	ldr	r3, [r0, #32]
 800bd36:	b90b      	cbnz	r3, 800bd3c <__swsetup_r+0x14>
 800bd38:	f7fc fc9e 	bl	8008678 <__sinit>
 800bd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	d422      	bmi.n	800bd8a <__swsetup_r+0x62>
 800bd44:	06da      	lsls	r2, r3, #27
 800bd46:	d407      	bmi.n	800bd58 <__swsetup_r+0x30>
 800bd48:	2209      	movs	r2, #9
 800bd4a:	602a      	str	r2, [r5, #0]
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	f04f 30ff 	mov.w	r0, #4294967295
 800bd56:	e033      	b.n	800bdc0 <__swsetup_r+0x98>
 800bd58:	0758      	lsls	r0, r3, #29
 800bd5a:	d512      	bpl.n	800bd82 <__swsetup_r+0x5a>
 800bd5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd5e:	b141      	cbz	r1, 800bd72 <__swsetup_r+0x4a>
 800bd60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd64:	4299      	cmp	r1, r3
 800bd66:	d002      	beq.n	800bd6e <__swsetup_r+0x46>
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f7fd fc01 	bl	8009570 <_free_r>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6063      	str	r3, [r4, #4]
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	f043 0308 	orr.w	r3, r3, #8
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	b94b      	cbnz	r3, 800bda2 <__swsetup_r+0x7a>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd98:	d003      	beq.n	800bda2 <__swsetup_r+0x7a>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 f883 	bl	800bea8 <__smakebuf_r>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	f013 0201 	ands.w	r2, r3, #1
 800bdaa:	d00a      	beq.n	800bdc2 <__swsetup_r+0x9a>
 800bdac:	2200      	movs	r2, #0
 800bdae:	60a2      	str	r2, [r4, #8]
 800bdb0:	6962      	ldr	r2, [r4, #20]
 800bdb2:	4252      	negs	r2, r2
 800bdb4:	61a2      	str	r2, [r4, #24]
 800bdb6:	6922      	ldr	r2, [r4, #16]
 800bdb8:	b942      	cbnz	r2, 800bdcc <__swsetup_r+0xa4>
 800bdba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdbe:	d1c5      	bne.n	800bd4c <__swsetup_r+0x24>
 800bdc0:	bd38      	pop	{r3, r4, r5, pc}
 800bdc2:	0799      	lsls	r1, r3, #30
 800bdc4:	bf58      	it	pl
 800bdc6:	6962      	ldrpl	r2, [r4, #20]
 800bdc8:	60a2      	str	r2, [r4, #8]
 800bdca:	e7f4      	b.n	800bdb6 <__swsetup_r+0x8e>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e7f7      	b.n	800bdc0 <__swsetup_r+0x98>
 800bdd0:	2000001c 	.word	0x2000001c

0800bdd4 <_raise_r>:
 800bdd4:	291f      	cmp	r1, #31
 800bdd6:	b538      	push	{r3, r4, r5, lr}
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	d904      	bls.n	800bde8 <_raise_r+0x14>
 800bdde:	2316      	movs	r3, #22
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	f04f 30ff 	mov.w	r0, #4294967295
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdea:	b112      	cbz	r2, 800bdf2 <_raise_r+0x1e>
 800bdec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdf0:	b94b      	cbnz	r3, 800be06 <_raise_r+0x32>
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f000 f830 	bl	800be58 <_getpid_r>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be02:	f000 b817 	b.w	800be34 <_kill_r>
 800be06:	2b01      	cmp	r3, #1
 800be08:	d00a      	beq.n	800be20 <_raise_r+0x4c>
 800be0a:	1c59      	adds	r1, r3, #1
 800be0c:	d103      	bne.n	800be16 <_raise_r+0x42>
 800be0e:	2316      	movs	r3, #22
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	2001      	movs	r0, #1
 800be14:	e7e7      	b.n	800bde6 <_raise_r+0x12>
 800be16:	2100      	movs	r1, #0
 800be18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be1c:	4620      	mov	r0, r4
 800be1e:	4798      	blx	r3
 800be20:	2000      	movs	r0, #0
 800be22:	e7e0      	b.n	800bde6 <_raise_r+0x12>

0800be24 <raise>:
 800be24:	4b02      	ldr	r3, [pc, #8]	@ (800be30 <raise+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f7ff bfd3 	b.w	800bdd4 <_raise_r>
 800be2e:	bf00      	nop
 800be30:	2000001c 	.word	0x2000001c

0800be34 <_kill_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d07      	ldr	r5, [pc, #28]	@ (800be54 <_kill_r+0x20>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	4611      	mov	r1, r2
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	f7f5 ffcf 	bl	8001de4 <_kill>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	d102      	bne.n	800be50 <_kill_r+0x1c>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b103      	cbz	r3, 800be50 <_kill_r+0x1c>
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	200005c4 	.word	0x200005c4

0800be58 <_getpid_r>:
 800be58:	f7f5 bfbc 	b.w	8001dd4 <_getpid>

0800be5c <__swhatbuf_r>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	460c      	mov	r4, r1
 800be60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be64:	2900      	cmp	r1, #0
 800be66:	b096      	sub	sp, #88	@ 0x58
 800be68:	4615      	mov	r5, r2
 800be6a:	461e      	mov	r6, r3
 800be6c:	da0d      	bge.n	800be8a <__swhatbuf_r+0x2e>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be74:	f04f 0100 	mov.w	r1, #0
 800be78:	bf14      	ite	ne
 800be7a:	2340      	movne	r3, #64	@ 0x40
 800be7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be80:	2000      	movs	r0, #0
 800be82:	6031      	str	r1, [r6, #0]
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	b016      	add	sp, #88	@ 0x58
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	466a      	mov	r2, sp
 800be8c:	f000 f848 	bl	800bf20 <_fstat_r>
 800be90:	2800      	cmp	r0, #0
 800be92:	dbec      	blt.n	800be6e <__swhatbuf_r+0x12>
 800be94:	9901      	ldr	r1, [sp, #4]
 800be96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be9e:	4259      	negs	r1, r3
 800bea0:	4159      	adcs	r1, r3
 800bea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bea6:	e7eb      	b.n	800be80 <__swhatbuf_r+0x24>

0800bea8 <__smakebuf_r>:
 800bea8:	898b      	ldrh	r3, [r1, #12]
 800beaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beac:	079d      	lsls	r5, r3, #30
 800beae:	4606      	mov	r6, r0
 800beb0:	460c      	mov	r4, r1
 800beb2:	d507      	bpl.n	800bec4 <__smakebuf_r+0x1c>
 800beb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	6123      	str	r3, [r4, #16]
 800bebc:	2301      	movs	r3, #1
 800bebe:	6163      	str	r3, [r4, #20]
 800bec0:	b003      	add	sp, #12
 800bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec4:	ab01      	add	r3, sp, #4
 800bec6:	466a      	mov	r2, sp
 800bec8:	f7ff ffc8 	bl	800be5c <__swhatbuf_r>
 800becc:	9f00      	ldr	r7, [sp, #0]
 800bece:	4605      	mov	r5, r0
 800bed0:	4639      	mov	r1, r7
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fd fbc0 	bl	8009658 <_malloc_r>
 800bed8:	b948      	cbnz	r0, 800beee <__smakebuf_r+0x46>
 800beda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bede:	059a      	lsls	r2, r3, #22
 800bee0:	d4ee      	bmi.n	800bec0 <__smakebuf_r+0x18>
 800bee2:	f023 0303 	bic.w	r3, r3, #3
 800bee6:	f043 0302 	orr.w	r3, r3, #2
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	e7e2      	b.n	800beb4 <__smakebuf_r+0xc>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	6020      	str	r0, [r4, #0]
 800bef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800befe:	b15b      	cbz	r3, 800bf18 <__smakebuf_r+0x70>
 800bf00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf04:	4630      	mov	r0, r6
 800bf06:	f000 f81d 	bl	800bf44 <_isatty_r>
 800bf0a:	b128      	cbz	r0, 800bf18 <__smakebuf_r+0x70>
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	f023 0303 	bic.w	r3, r3, #3
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	81a3      	strh	r3, [r4, #12]
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	431d      	orrs	r5, r3
 800bf1c:	81a5      	strh	r5, [r4, #12]
 800bf1e:	e7cf      	b.n	800bec0 <__smakebuf_r+0x18>

0800bf20 <_fstat_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	@ (800bf40 <_fstat_r+0x20>)
 800bf24:	2300      	movs	r3, #0
 800bf26:	4604      	mov	r4, r0
 800bf28:	4608      	mov	r0, r1
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	f7f5 ff9d 	bl	8001e6c <_fstat>
 800bf32:	1c43      	adds	r3, r0, #1
 800bf34:	d102      	bne.n	800bf3c <_fstat_r+0x1c>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	b103      	cbz	r3, 800bf3c <_fstat_r+0x1c>
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	bd38      	pop	{r3, r4, r5, pc}
 800bf3e:	bf00      	nop
 800bf40:	200005c4 	.word	0x200005c4

0800bf44 <_isatty_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d06      	ldr	r5, [pc, #24]	@ (800bf60 <_isatty_r+0x1c>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f5 ff9c 	bl	8001e8c <_isatty>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_isatty_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_isatty_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	200005c4 	.word	0x200005c4

0800bf64 <_init>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	bf00      	nop
 800bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	469e      	mov	lr, r3
 800bf6e:	4770      	bx	lr

0800bf70 <_fini>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr
