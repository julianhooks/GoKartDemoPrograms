
CANTestL432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ac  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b80  08003b80  00004b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b88  08003b88  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003b90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000014  08003ba4  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003ba4  00005130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c804  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1c  00000000  00000000  00011848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00013568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080d  00000000  00000000  00013ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f44b  00000000  00000000  000147fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbb7  00000000  00000000  00033c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde0b  00000000  00000000  0003f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd60a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab0  00000000  00000000  000fd650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00100100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b20 	.word	0x08003b20

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08003b20 	.word	0x08003b20

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <split_uint16>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
static inline void split_uint16(uint16_t v, uint8_t *hi, uint8_t *lo) {
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	81fb      	strh	r3, [r7, #14]
    *hi = (uint8_t)(v >> 8);
 8000506:	89fb      	ldrh	r3, [r7, #14]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	b29b      	uxth	r3, r3
 800050c:	b2da      	uxtb	r2, r3
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	701a      	strb	r2, [r3, #0]
    *lo = (uint8_t)(v & 0xFF);
 8000512:	89fb      	ldrh	r3, [r7, #14]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <combine_uint8>:

static inline uint16_t combine_uint8(uint8_t hi, uint8_t lo) {
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t)hi << 8) | (uint16_t)lo;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	b21b      	sxth	r3, r3
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	b21a      	sxth	r2, r3
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	b21b      	sxth	r3, r3
 8000542:	4313      	orrs	r3, r2
 8000544:	b21b      	sxth	r3, r3
 8000546:	b29b      	uxth	r3, r3
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t sensorVal = 10306;
uint16_t recovered = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800055c:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800055e:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000560:	2100      	movs	r1, #0
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 fe51 	bl	800120a <HAL_CAN_GetRxMessage>

	recovered = combine_uint8(RxData[0], RxData[1]);
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4a11      	ldr	r2, [pc, #68]	@ (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800056e:	7852      	ldrb	r2, [r2, #1]
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffd7 	bl	8000526 <combine_uint8>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800057e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000580:	2108      	movs	r1, #8
 8000582:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000584:	f001 fc4c 	bl	8001e20 <HAL_GPIO_TogglePin>


	TxData[7] = TEST; //set identifier
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000590:	71da      	strb	r2, [r3, #7]
    split_uint16(recovered, &TxData[0], &TxData[1]);
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000598:	490b      	ldr	r1, [pc, #44]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffac 	bl	80004f8 <split_uint16>
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80005a2:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80005a4:	490b      	ldr	r1, [pc, #44]	@ (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005a6:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80005a8:	f000 fd5f 	bl	800106a <HAL_CAN_AddTxMessage>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000011c 	.word	0x2000011c
 80005b8:	200000f8 	.word	0x200000f8
 80005bc:	20000128 	.word	0x20000128
 80005c0:	48000400 	.word	0x48000400
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000114 	.word	0x20000114
 80005cc:	20000115 	.word	0x20000115
 80005d0:	20000124 	.word	0x20000124
 80005d4:	200000e0 	.word	0x200000e0
 80005d8:	20000030 	.word	0x20000030

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fac5 	bl	8000b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f828 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f910 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8de 	bl	80007ac <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005f0:	f000 f884 	bl	80006fc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x50>)
 80005f6:	f000 fcf4 	bl	8000fe2 <HAL_CAN_Start>

    // Activate the notification
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005fa:	2102      	movs	r1, #2
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <main+0x50>)
 80005fe:	f000 ff26 	bl	800144e <HAL_CAN_ActivateNotification>


    //header to send data back to main board
    TxHeader.DLC = 8;  // data length
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0x54>)
 8000604:	2208      	movs	r2, #8
 8000606:	611a      	str	r2, [r3, #16]
    TxHeader.ExtId = 0;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <main+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <main+0x54>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = MAIN;  // ID of main board
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <main+0x58>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <main+0x54>)
 8000620:	6013      	str	r3, [r2, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000622:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <main+0x54>)
 8000624:	2200      	movs	r2, #0
 8000626:	751a      	strb	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x4c>
 800062c:	20000030 	.word	0x20000030
 8000630:	200000e0 	.word	0x200000e0
 8000634:	20000000 	.word	0x20000000

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	@ 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	@ 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fa3d 	bl	8003ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065e:	f001 fc17 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f91a 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f001 fbf2 	bl	8001e54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <SystemClock_Config+0xc0>)
 8000672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000676:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <SystemClock_Config+0xc0>)
 8000678:	f023 0318 	bic.w	r3, r3, #24
 800067c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000680:	2314      	movs	r3, #20
 8000682:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000690:	2360      	movs	r3, #96	@ 0x60
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000698:	2301      	movs	r3, #1
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fc41 	bl	8001f3c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c0:	f000 f8ee 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2303      	movs	r3, #3
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f841 	bl	8002764 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006e8:	f000 f8da 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ec:	f002 fc54 	bl	8002f98 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f0:	bf00      	nop
 80006f2:	3758      	adds	r7, #88	@ 0x58
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000702:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <MX_CAN1_Init+0xa8>)
 8000706:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 800070a:	2210      	movs	r2, #16
 800070c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800070e:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 800071c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000720:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000730:	2200      	movs	r2, #0
 8000732:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000742:	2200      	movs	r2, #0
 8000744:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000748:	2200      	movs	r2, #0
 800074a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800074c:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 800074e:	f000 fa83 	bl	8000c58 <HAL_CAN_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f8a2 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  //filter id is id of this board so that it receives the correct data
     canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
     canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000760:	230a      	movs	r3, #10
 8000762:	617b      	str	r3, [r7, #20]
     canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
     canfilterconfig.FilterIdHigh = TEST<<5;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_CAN1_Init+0xac>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	015b      	lsls	r3, r3, #5
 800076e:	603b      	str	r3, [r7, #0]
     canfilterconfig.FilterIdLow = 0x0000;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
     canfilterconfig.FilterMaskIdHigh = TEST<<5;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_CAN1_Init+0xac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	015b      	lsls	r3, r3, #5
 800077a:	60bb      	str	r3, [r7, #8]
     canfilterconfig.FilterMaskIdLow = 0x0000;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
     canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
     canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
     canfilterconfig.SlaveStartFilterBank = 13;  // 13 - 27 are Slave (CAN2) or 0 - 12 are Master (CAN1)
 8000788:	230d      	movs	r3, #13
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
     	 	 	 	 	 	 	 	 	 	 	// useless if only 1 CAN1 (which this board has)

     HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <MX_CAN1_Init+0xa4>)
 8000792:	f000 fb5c 	bl	8000e4e <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000030 	.word	0x20000030
 80007a4:	40006400 	.word	0x40006400
 80007a8:	20000004 	.word	0x20000004

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 fcd4 	bl	800319c <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f851 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000058 	.word	0x20000058
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0x90>)
 8000870:	f001 fabe 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_GPIO_Init+0x90>)
 800088c:	f001 f946 	bl	8001b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <HAL_CAN_MspInit+0xa0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d139      	bne.n	800098a <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 800091c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000920:	6593      	str	r3, [r2, #88]	@ 0x58
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_CAN_MspInit+0xa4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000946:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000958:	2309      	movs	r3, #9
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 f8d9 	bl	8001b1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2014      	movs	r0, #20
 8000970:	f001 f89d 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000974:	2014      	movs	r0, #20
 8000976:	f001 f8b6 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2015      	movs	r0, #21
 8000980:	f001 f895 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000984:	2015      	movs	r0, #21
 8000986:	f001 f8ae 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40006400 	.word	0x40006400
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09e      	sub	sp, #120	@ 0x78
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2254      	movs	r2, #84	@ 0x54
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f882 	bl	8003ac6 <memset>
  if(huart->Instance==USART2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <HAL_UART_MspInit+0xcc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d148      	bne.n	8000a5e <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 f8e7 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ff5c 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	4a1f      	ldr	r2, [pc, #124]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0xd0>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f001 f871 	bl	8001b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f001 f85f 	bl	8001b1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5e:	bf00      	nop
 8000a60:	3778      	adds	r7, #120	@ 0x78
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 f8a7 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <CAN1_RX0_IRQHandler+0x10>)
 8000ad6:	f000 fce0 	bl	800149a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000030 	.word	0x20000030

08000ae4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <CAN1_RX1_IRQHandler+0x10>)
 8000aea:	f000 fcd6 	bl	800149a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000030 	.word	0x20000030

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 ffc5 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4e:	f7ff fd45 	bl	80005dc <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b54:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b60:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 8000b64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b68:	20000130 	.word	0x20000130

08000b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_IRQHandler>

08000b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 ff8d 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f80e 	bl	8000ba0 <HAL_InitTick>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	e001      	b.n	8000b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b90:	f7ff fe8c 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d023      	beq.n	8000bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_InitTick+0x70>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 ff99 	bl	8001b02 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d809      	bhi.n	8000bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 ff63 	bl	8001aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e001      	b.n	8000c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	20000008 	.word	0x20000008
 8000c14:	2000000c 	.word	0x2000000c

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000010 	.word	0x20000010
 8000c3c:	2000012c 	.word	0x2000012c

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000012c 	.word	0x2000012c

08000c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0ed      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fe3c 	bl	80008f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c8c:	f7ff ffd8 	bl	8000c40 <HAL_GetTick>
 8000c90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c92:	e012      	b.n	8000cba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c94:	f7ff ffd4 	bl	8000c40 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d90b      	bls.n	8000cba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e0c5      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0e5      	beq.n	8000c94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0202 	bic.w	r2, r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffb2 	bl	8000c40 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffae 	bl	8000c40 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e09f      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e5      	bne.n	8000ce0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e1b      	ldrb	r3, [r3, #24]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d108      	bne.n	8000d2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e007      	b.n	8000d3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7e5b      	ldrb	r3, [r3, #25]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e9b      	ldrb	r3, [r3, #26]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d108      	bne.n	8000d82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0220 	orr.w	r2, r2, #32
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0220 	bic.w	r2, r2, #32
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7edb      	ldrb	r3, [r3, #27]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d108      	bne.n	8000dac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0210 	orr.w	r2, r2, #16
 8000dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d108      	bne.n	8000dd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0208 	orr.w	r2, r2, #8
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e007      	b.n	8000de6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0208 	bic.w	r2, r2, #8
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7f5b      	ldrb	r3, [r3, #29]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0204 	bic.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	ea42 0103 	orr.w	r1, r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b087      	sub	sp, #28
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	7cfb      	ldrb	r3, [r7, #19]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d003      	beq.n	8000e74 <HAL_CAN_ConfigFilter+0x26>
 8000e6c:	7cfb      	ldrb	r3, [r7, #19]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	f040 80aa 	bne.w	8000fc8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d123      	bne.n	8000ef6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3248      	adds	r2, #72	@ 0x48
 8000ed6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eec:	6979      	ldr	r1, [r7, #20]
 8000eee:	3348      	adds	r3, #72	@ 0x48
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d122      	bne.n	8000f44 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3248      	adds	r2, #72	@ 0x48
 8000f24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3a:	6979      	ldr	r1, [r7, #20]
 8000f3c:	3348      	adds	r3, #72	@ 0x48
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fba:	f023 0201 	bic.w	r2, r3, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e006      	b.n	8000fd6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d12e      	bne.n	8001054 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800100e:	f7ff fe17 	bl	8000c40 <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001014:	e012      	b.n	800103c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001016:	f7ff fe13 	bl	8000c40 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b0a      	cmp	r3, #10
 8001022:	d90b      	bls.n	800103c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2205      	movs	r2, #5
 8001034:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e012      	b.n	8001062 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1e5      	bne.n	8001016 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	e006      	b.n	8001062 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
  }
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800106a:	b480      	push	{r7}
 800106c:	b089      	sub	sp, #36	@ 0x24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d003      	beq.n	8001096 <HAL_CAN_AddTxMessage+0x2c>
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	2b02      	cmp	r3, #2
 8001092:	f040 80ad 	bne.w	80011f0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d105      	bne.n	80010b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8095 	beq.w	80011e0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	0e1b      	lsrs	r3, r3, #24
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010c0:	2201      	movs	r2, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	409a      	lsls	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10d      	bne.n	80010ee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	6809      	ldr	r1, [r1, #0]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3318      	adds	r3, #24
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	440b      	add	r3, r1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e00f      	b.n	800110e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010fe:	68f9      	ldr	r1, [r7, #12]
 8001100:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001102:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3318      	adds	r3, #24
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	440b      	add	r3, r1
 800110c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3318      	adds	r3, #24
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	440b      	add	r3, r1
 800111e:	3304      	adds	r3, #4
 8001120:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	7d1b      	ldrb	r3, [r3, #20]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d111      	bne.n	800114e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3318      	adds	r3, #24
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4413      	add	r3, r2
 8001136:	3304      	adds	r3, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3318      	adds	r3, #24
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3307      	adds	r3, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	061a      	lsls	r2, r3, #24
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3306      	adds	r3, #6
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3305      	adds	r3, #5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	4313      	orrs	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	3204      	adds	r2, #4
 800116e:	7812      	ldrb	r2, [r2, #0]
 8001170:	4610      	mov	r0, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	6811      	ldr	r1, [r2, #0]
 8001176:	ea43 0200 	orr.w	r2, r3, r0
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001184:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3303      	adds	r3, #3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	061a      	lsls	r2, r3, #24
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3302      	adds	r3, #2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	4313      	orrs	r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	4610      	mov	r0, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	6811      	ldr	r1, [r2, #0]
 80011ac:	ea43 0200 	orr.w	r2, r3, r0
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	440b      	add	r3, r1
 80011b6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3318      	adds	r3, #24
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3318      	adds	r3, #24
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	440b      	add	r3, r1
 80011da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e00e      	b.n	80011fe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e006      	b.n	80011fe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800120a:	b480      	push	{r7}
 800120c:	b087      	sub	sp, #28
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d003      	beq.n	800122e <HAL_CAN_GetRxMessage+0x24>
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	2b02      	cmp	r3, #2
 800122a:	f040 8103 	bne.w	8001434 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10e      	bne.n	8001252 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0f7      	b.n	8001442 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0e8      	b.n	8001442 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	331b      	adds	r3, #27
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0204 	and.w	r2, r3, #4
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0d5b      	lsrs	r3, r3, #21
 800129e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	331b      	adds	r3, #27
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	08db      	lsrs	r3, r3, #3
 80012b8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	331b      	adds	r3, #27
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0202 	and.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	331b      	adds	r3, #27
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	3304      	adds	r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2208      	movs	r2, #8
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	e00b      	b.n	800130e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	331b      	adds	r3, #27
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 020f 	and.w	r2, r3, #15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	331b      	adds	r3, #27
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	331b      	adds	r3, #27
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	0c1b      	lsrs	r3, r3, #16
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0a1a      	lsrs	r2, r3, #8
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0c1a      	lsrs	r2, r3, #16
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3302      	adds	r3, #2
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0e1a      	lsrs	r2, r3, #24
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3303      	adds	r3, #3
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	0a1a      	lsrs	r2, r3, #8
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3305      	adds	r3, #5
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0c1a      	lsrs	r2, r3, #16
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3306      	adds	r3, #6
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0e1a      	lsrs	r2, r3, #24
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3307      	adds	r3, #7
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0220 	orr.w	r2, r2, #32
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	e007      	b.n	8001430 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	e006      	b.n	8001442 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d002      	beq.n	800146c <HAL_CAN_ActivateNotification+0x1e>
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d109      	bne.n	8001480 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6959      	ldr	r1, [r3, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e006      	b.n	800148e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b08a      	sub	sp, #40	@ 0x28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d07c      	beq.n	80015da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d023      	beq.n	8001532 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f983 	bl	8001808 <HAL_CAN_TxMailbox0CompleteCallback>
 8001502:	e016      	b.n	8001532 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
 8001516:	e00c      	b.n	8001532 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
 800152a:	e002      	b.n	8001532 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f989 	bl	8001844 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d024      	beq.n	8001586 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001544:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f963 	bl	800181c <HAL_CAN_TxMailbox1CompleteCallback>
 8001556:	e016      	b.n	8001586 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	e00c      	b.n	8001586 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
 800157e:	e002      	b.n	8001586 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f969 	bl	8001858 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d024      	beq.n	80015da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001598:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f943 	bl	8001830 <HAL_CAN_TxMailbox2CompleteCallback>
 80015aa:	e016      	b.n	80015da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015be:	e00c      	b.n	80015da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d2:	e002      	b.n	80015da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f949 	bl	800186c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2210      	movs	r2, #16
 80015fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2208      	movs	r2, #8
 8001618:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f930 	bl	8001880 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7fe ff8b 	bl	8000554 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00c      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2210      	movs	r2, #16
 8001660:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2208      	movs	r2, #8
 800167c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f912 	bl	80018a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f8f9 	bl	8001894 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8fc 	bl	80018bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2208      	movs	r2, #8
 80016de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f8f5 	bl	80018d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d07b      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d072      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001754:	2b00      	cmp	r3, #0
 8001756:	d043      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03e      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001768:	2b60      	cmp	r3, #96	@ 0x60
 800176a:	d02b      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x32a>
 800176c:	2b60      	cmp	r3, #96	@ 0x60
 800176e:	d82e      	bhi.n	80017ce <HAL_CAN_IRQHandler+0x334>
 8001770:	2b50      	cmp	r3, #80	@ 0x50
 8001772:	d022      	beq.n	80017ba <HAL_CAN_IRQHandler+0x320>
 8001774:	2b50      	cmp	r3, #80	@ 0x50
 8001776:	d82a      	bhi.n	80017ce <HAL_CAN_IRQHandler+0x334>
 8001778:	2b40      	cmp	r3, #64	@ 0x40
 800177a:	d019      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x316>
 800177c:	2b40      	cmp	r3, #64	@ 0x40
 800177e:	d826      	bhi.n	80017ce <HAL_CAN_IRQHandler+0x334>
 8001780:	2b30      	cmp	r3, #48	@ 0x30
 8001782:	d010      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x30c>
 8001784:	2b30      	cmp	r3, #48	@ 0x30
 8001786:	d822      	bhi.n	80017ce <HAL_CAN_IRQHandler+0x334>
 8001788:	2b10      	cmp	r3, #16
 800178a:	d002      	beq.n	8001792 <HAL_CAN_IRQHandler+0x2f8>
 800178c:	2b20      	cmp	r3, #32
 800178e:	d005      	beq.n	800179c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001790:	e01d      	b.n	80017ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800179a:	e019      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017a4:	e014      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ae:	e00f      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017b8:	e00a      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017c2:	e005      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017cc:	e000      	b.n	80017d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80017ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80017de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2204      	movs	r2, #4
 80017e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f872 	bl	80018e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	@ (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff3e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	e148      	b.n	8001dbe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 813a 	beq.w	8001db8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d005      	beq.n	8001b5c <HAL_GPIO_Init+0x40>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d130      	bne.n	8001bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b92:	2201      	movs	r2, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 0201 	and.w	r2, r3, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d017      	beq.n	8001bfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d123      	bne.n	8001c4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	6939      	ldr	r1, [r7, #16]
 8001c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0203 	and.w	r2, r3, #3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8094 	beq.w	8001db8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c90:	4b52      	ldr	r3, [pc, #328]	@ (8001ddc <HAL_GPIO_Init+0x2c0>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c94:	4a51      	ldr	r2, [pc, #324]	@ (8001ddc <HAL_GPIO_Init+0x2c0>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <HAL_GPIO_Init+0x2c0>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_GPIO_Init+0x1d4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x1d0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a42      	ldr	r2, [pc, #264]	@ (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_GPIO_Init+0x1cc>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e004      	b.n	8001cf2 <HAL_GPIO_Init+0x1d6>
 8001ce8:	2307      	movs	r3, #7
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x1d6>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_GPIO_Init+0x1d6>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d02:	4937      	ldr	r1, [pc, #220]	@ (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d34:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d5e:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d88:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f47f aeaf 	bne.w	8001b2c <HAL_GPIO_Init+0x10>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	48000800 	.word	0x48000800
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43d9      	mvns	r1, r3
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	400b      	ands	r3, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e9e:	d130      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d038      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2232      	movs	r2, #50	@ 0x32
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed4:	e002      	b.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f2      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efc:	d110      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e00f      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d007      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f10:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f18:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000
 8001f34:	20000008 	.word	0x20000008
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f000 bc02 	b.w	8002754 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f50:	4b96      	ldr	r3, [pc, #600]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5a:	4b94      	ldr	r3, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80e4 	beq.w	800213a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4c>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	f040 808b 	bne.w	8002096 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 8087 	bne.w	8002096 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f88:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x64>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e3d9      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	4b81      	ldr	r3, [pc, #516]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_RCC_OscConfig+0x7e>
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb8:	e005      	b.n	8001fc6 <HAL_RCC_OscConfig+0x8a>
 8001fba:	4b7c      	ldr	r3, [pc, #496]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d223      	bcs.n	8002012 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fd8c 	bl	8002aec <RCC_SetFlashLatencyFromMSIRange>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e3ba      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fde:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a72      	ldr	r2, [pc, #456]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	496d      	ldr	r1, [pc, #436]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4968      	ldr	r1, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e025      	b.n	800205e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a65      	ldr	r2, [pc, #404]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4960      	ldr	r1, [pc, #384]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002030:	4b5e      	ldr	r3, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	495b      	ldr	r1, [pc, #364]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd4c 	bl	8002aec <RCC_SetFlashLatencyFromMSIRange>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e37a      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205e:	f000 fc81 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b51      	ldr	r3, [pc, #324]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	4950      	ldr	r1, [pc, #320]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a4e      	ldr	r2, [pc, #312]	@ (80021b4 <HAL_RCC_OscConfig+0x278>)
 800207c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800207e:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <HAL_RCC_OscConfig+0x27c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fd8c 	bl	8000ba0 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d052      	beq.n	8002138 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	e35e      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d032      	beq.n	8002104 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800209e:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fdc9 	bl	8000c40 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b2:	f7fe fdc5 	bl	8000c40 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e347      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c4:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	4b36      	ldr	r3, [pc, #216]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a35      	ldr	r2, [pc, #212]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4930      	ldr	r1, [pc, #192]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ee:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	492b      	ldr	r1, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e01a      	b.n	800213a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002104:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a28      	ldr	r2, [pc, #160]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002110:	f7fe fd96 	bl	8000c40 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002118:	f7fe fd92 	bl	8000c40 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e314      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800212a:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1dc>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d073      	beq.n	800222e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x21c>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d10e      	bne.n	8002170 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d063      	beq.n	800222c <HAL_RCC_OscConfig+0x2f0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d15f      	bne.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e2f1      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x24c>
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e025      	b.n	80021d4 <HAL_RCC_OscConfig+0x298>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002190:	d114      	bne.n	80021bc <HAL_RCC_OscConfig+0x280>
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a02      	ldr	r2, [pc, #8]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e013      	b.n	80021d4 <HAL_RCC_OscConfig+0x298>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08003b38 	.word	0x08003b38
 80021b4:	20000008 	.word	0x20000008
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fd30 	bl	8000c40 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fd2c 	bl	8000c40 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e2ae      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2a8>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fd1c 	bl	8000c40 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fd18 	bl	8000c40 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e29a      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x2d0>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d060      	beq.n	80022fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x310>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d119      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d116      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224c:	4b7c      	ldr	r3, [pc, #496]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x328>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e277      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	4973      	ldr	r1, [pc, #460]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002278:	e040      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7fe fcd7 	bl	8000c40 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fcd3 	bl	8000c40 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e255      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a8:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b62      	ldr	r3, [pc, #392]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	495f      	ldr	r1, [pc, #380]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fcb3 	bl	8000c40 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe fcaf 	bl	8000c40 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e231      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03c      	beq.n	8002382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002310:	4b4b      	ldr	r3, [pc, #300]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002316:	4a4a      	ldr	r2, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe fc8e 	bl	8000c40 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fc8a 	bl	8000c40 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e20c      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x3ec>
 8002348:	e01b      	b.n	8002382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002350:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fc71 	bl	8000c40 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002362:	f7fe fc6d 	bl	8000c40 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1ef      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002374:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ef      	bne.n	8002362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80a6 	beq.w	80024dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	4a26      	ldr	r2, [pc, #152]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d118      	bne.n	80023fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fc34 	bl	8000c40 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7fe fc30 	bl	8000c40 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1b2      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x4d8>
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002412:	e029      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d115      	bne.n	8002448 <HAL_RCC_OscConfig+0x50c>
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a03      	ldr	r2, [pc, #12]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	4b9a      	ldr	r3, [pc, #616]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	4a99      	ldr	r2, [pc, #612]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002458:	4b96      	ldr	r3, [pc, #600]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a95      	ldr	r2, [pc, #596]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d016      	beq.n	800249e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fbe6 	bl	8000c40 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe fbe2 	bl	8000c40 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e162      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	4b89      	ldr	r3, [pc, #548]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ed      	beq.n	8002478 <HAL_RCC_OscConfig+0x53c>
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fbcf 	bl	8000c40 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fbcb 	bl	8000c40 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e14b      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024bc:	4b7d      	ldr	r3, [pc, #500]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ed      	bne.n	80024a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d0:	4b78      	ldr	r3, [pc, #480]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	4a77      	ldr	r2, [pc, #476]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03c      	beq.n	8002562 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01c      	beq.n	800252a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024f0:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80024f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f6:	4a6f      	ldr	r2, [pc, #444]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fb9e 	bl	8000c40 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002508:	f7fe fb9a 	bl	8000c40 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e11c      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800251a:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800251c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ef      	beq.n	8002508 <HAL_RCC_OscConfig+0x5cc>
 8002528:	e01b      	b.n	8002562 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800252a:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800252c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002530:	4a60      	ldr	r2, [pc, #384]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fb81 	bl	8000c40 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002542:	f7fe fb7d 	bl	8000c40 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0ff      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002554:	4b57      	ldr	r3, [pc, #348]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ef      	bne.n	8002542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80f3 	beq.w	8002752 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	2b02      	cmp	r3, #2
 8002572:	f040 80c9 	bne.w	8002708 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002576:	4b4f      	ldr	r3, [pc, #316]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	429a      	cmp	r2, r3
 8002588:	d12c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	3b01      	subs	r3, #1
 8002596:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d123      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d11b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d113      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d06b      	beq.n	80026bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d062      	beq.n	80026b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ea:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0ac      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025fa:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2d      	ldr	r2, [pc, #180]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002606:	f7fe fb1b 	bl	8000c40 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fb17 	bl	8000c40 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e099      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262c:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <HAL_RCC_OscConfig+0x77c>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800263c:	3a01      	subs	r2, #1
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002646:	0212      	lsls	r2, r2, #8
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800265a:	0852      	lsrs	r2, r2, #1
 800265c:	3a01      	subs	r2, #1
 800265e:	0652      	lsls	r2, r2, #25
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002666:	06d2      	lsls	r2, r2, #27
 8002668:	430a      	orrs	r2, r1
 800266a:	4912      	ldr	r1, [pc, #72]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800266c:	4313      	orrs	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002670:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a0c      	ldr	r2, [pc, #48]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002688:	f7fe fada 	bl	8000c40 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fad6 	bl	8000c40 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e058      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <HAL_RCC_OscConfig+0x778>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ae:	e050      	b.n	8002752 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e04f      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
 80026b4:	40021000 	.word	0x40021000
 80026b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026bc:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d144      	bne.n	8002752 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c8:	4b24      	ldr	r3, [pc, #144]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a23      	ldr	r2, [pc, #140]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	4b21      	ldr	r3, [pc, #132]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a20      	ldr	r2, [pc, #128]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e0:	f7fe faae 	bl	8000c40 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe faaa 	bl	8000c40 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e02c      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x7ac>
 8002706:	e024      	b.n	8002752 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d01f      	beq.n	800274e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 8002714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fa91 	bl	8000c40 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe fa8d 	bl	8000c40 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	4905      	ldr	r1, [pc, #20]	@ (800275c <HAL_RCC_OscConfig+0x820>)
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_OscConfig+0x824>)
 8002748:	4013      	ands	r3, r2
 800274a:	60cb      	str	r3, [r1, #12]
 800274c:	e001      	b.n	8002752 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	feeefffc 	.word	0xfeeefffc

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0e7      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b75      	ldr	r3, [pc, #468]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4970      	ldr	r1, [pc, #448]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b6e      	ldr	r3, [pc, #440]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cf      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d908      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b63      	ldr	r3, [pc, #396]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4960      	ldr	r1, [pc, #384]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04c      	beq.n	800287c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d121      	bne.n	800283a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0a6      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	4b54      	ldr	r3, [pc, #336]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d115      	bne.n	800283a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e09a      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281a:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e08e      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e086      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4943      	ldr	r1, [pc, #268]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe f9f8 	bl	8000c40 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe f9f4 	bl	8000c40 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e06e      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	429a      	cmp	r2, r3
 8002896:	d208      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	492b      	ldr	r1, [pc, #172]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028aa:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d210      	bcs.n	80028da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b8:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 0207 	bic.w	r2, r3, #7
 80028c0:	4923      	ldr	r1, [pc, #140]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_RCC_ClockConfig+0x1ec>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e036      	b.n	8002948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4918      	ldr	r1, [pc, #96]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4910      	ldr	r1, [pc, #64]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002918:	f000 f824 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	490b      	ldr	r1, [pc, #44]	@ (8002958 <HAL_RCC_ClockConfig+0x1f4>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	4a09      	ldr	r2, [pc, #36]	@ (800295c <HAL_RCC_ClockConfig+0x1f8>)
 8002936:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x1fc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f92f 	bl	8000ba0 <HAL_InitTick>
 8002942:	4603      	mov	r3, r0
 8002944:	72fb      	strb	r3, [r7, #11]

  return status;
 8002946:	7afb      	ldrb	r3, [r7, #11]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40022000 	.word	0x40022000
 8002954:	40021000 	.word	0x40021000
 8002958:	08003b38 	.word	0x08003b38
 800295c:	20000008 	.word	0x20000008
 8002960:	2000000c 	.word	0x2000000c

08002964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800297c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x34>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d121      	bne.n	80029d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d11e      	bne.n	80029d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002998:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029a4:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e005      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029b4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029dc:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	e004      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e8:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d134      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d003      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0xac>
 8002a08:	e005      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a0c:	617b      	str	r3, [r7, #20]
      break;
 8002a0e:	e005      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a12:	617b      	str	r3, [r7, #20]
      break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	617b      	str	r3, [r7, #20]
      break;
 8002a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	3301      	adds	r3, #1
 8002a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	fb03 f202 	mul.w	r2, r3, r2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	0e5b      	lsrs	r3, r3, #25
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	@ 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	08003b50 	.word	0x08003b50
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	007a1200 	.word	0x007a1200

08002a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4904      	ldr	r1, [pc, #16]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08003b48 	.word	0x08003b48

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ac4:	f7ff ffda 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0adb      	lsrs	r3, r3, #11
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4904      	ldr	r1, [pc, #16]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08003b48 	.word	0x08003b48

08002aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b04:	f7ff f9b6 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002b08:	6178      	str	r0, [r7, #20]
 8002b0a:	e014      	b.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	4a24      	ldr	r2, [pc, #144]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b18:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b24:	f7ff f9a6 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b3c:	d10b      	bne.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	d919      	bls.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b48:	d902      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e013      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e010      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b80      	cmp	r3, #128	@ 0x80
 8002b5a:	d902      	bls.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e00a      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	d102      	bne.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b68:	2302      	movs	r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e004      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d101      	bne.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 0207 	bic.w	r2, r3, #7
 8002b80:	4909      	ldr	r1, [pc, #36]	@ (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b88:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40022000 	.word	0x40022000

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d031      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bd0:	d01a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bd6:	d814      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002be2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bee:	e00c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f9de 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	74fb      	strb	r3, [r7, #19]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c10:	4b51      	ldr	r3, [pc, #324]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	494e      	ldr	r1, [pc, #312]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809e 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3e:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b40      	ldr	r3, [pc, #256]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c60:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fd ffe0 	bl	8000c40 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fd ffdc 	bl	8000c40 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c98:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15a      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002caa:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01e      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc6:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf2:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fd ff9c 	bl	8000c40 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fd ff98 	bl	8000c40 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	74fb      	strb	r3, [r7, #19]
            break;
 8002d22:	e006      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d38:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d46:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d64:	7c7b      	ldrb	r3, [r7, #17]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	4a89      	ldr	r2, [pc, #548]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b84      	ldr	r3, [pc, #528]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4980      	ldr	r1, [pc, #512]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da4:	4b7b      	ldr	r3, [pc, #492]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	4978      	ldr	r1, [pc, #480]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc6:	4b73      	ldr	r3, [pc, #460]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	496f      	ldr	r1, [pc, #444]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	4967      	ldr	r1, [pc, #412]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e0a:	4b62      	ldr	r3, [pc, #392]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	495e      	ldr	r1, [pc, #376]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	4956      	ldr	r1, [pc, #344]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	494d      	ldr	r1, [pc, #308]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d028      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e70:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4945      	ldr	r1, [pc, #276]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b40      	ldr	r3, [pc, #256]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a3f      	ldr	r2, [pc, #252]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f882 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ece:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	492d      	ldr	r1, [pc, #180]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eec:	d106      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef8:	60d3      	str	r3, [r2, #12]
 8002efa:	e011      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f853 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3a:	4916      	ldr	r1, [pc, #88]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f830 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f80:	4904      	ldr	r1, [pc, #16]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fc6:	4b74      	ldr	r3, [pc, #464]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fd2:	4b71      	ldr	r3, [pc, #452]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0203 	and.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d10d      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fea:	4b6b      	ldr	r3, [pc, #428]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
       ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d047      	beq.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e044      	b.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d018      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x86>
 800300c:	2b03      	cmp	r3, #3
 800300e:	d825      	bhi.n	800305c <RCCEx_PLLSAI1_Config+0xa4>
 8003010:	2b01      	cmp	r3, #1
 8003012:	d002      	beq.n	800301a <RCCEx_PLLSAI1_Config+0x62>
 8003014:	2b02      	cmp	r3, #2
 8003016:	d009      	beq.n	800302c <RCCEx_PLLSAI1_Config+0x74>
 8003018:	e020      	b.n	800305c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800301a:	4b5f      	ldr	r3, [pc, #380]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11d      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e01a      	b.n	8003062 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800302c:	4b5a      	ldr	r3, [pc, #360]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800303c:	e013      	b.n	8003066 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800303e:	4b56      	ldr	r3, [pc, #344]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800304a:	4b53      	ldr	r3, [pc, #332]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800305a:	e006      	b.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e004      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800306a:	bf00      	nop
    }

    if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003072:	4b49      	ldr	r3, [pc, #292]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	430b      	orrs	r3, r1
 8003088:	4943      	ldr	r1, [pc, #268]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d17c      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003094:	4b40      	ldr	r3, [pc, #256]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3f      	ldr	r2, [pc, #252]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800309e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fd fdce 	bl	8000c40 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a8:	f7fd fdca 	bl	8000c40 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ba:	e005      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d15f      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d110      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80030dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0211      	lsls	r1, r2, #8
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	06d2      	lsls	r2, r2, #27
 80030ec:	430a      	orrs	r2, r1
 80030ee:	492a      	ldr	r1, [pc, #168]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	610b      	str	r3, [r1, #16]
 80030f4:	e027      	b.n	8003146 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d112      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fc:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003104:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	0211      	lsls	r1, r2, #8
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6912      	ldr	r2, [r2, #16]
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0552      	lsls	r2, r2, #21
 8003118:	430a      	orrs	r2, r1
 800311a:	491f      	ldr	r1, [pc, #124]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	610b      	str	r3, [r1, #16]
 8003120:	e011      	b.n	8003146 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800312a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6892      	ldr	r2, [r2, #8]
 8003132:	0211      	lsls	r1, r2, #8
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6952      	ldr	r2, [r2, #20]
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0652      	lsls	r2, r2, #25
 800313e:	430a      	orrs	r2, r1
 8003140:	4915      	ldr	r1, [pc, #84]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003150:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fd fd75 	bl	8000c40 <HAL_GetTick>
 8003156:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003158:	e009      	b.n	800316e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315a:	f7fd fd71 	bl	8000c40 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d902      	bls.n	800316e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	73fb      	strb	r3, [r7, #15]
          break;
 800316c:	e005      	b.n	800317a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ef      	beq.n	800315a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4903      	ldr	r1, [pc, #12]	@ (8003198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e040      	b.n	8003230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fbec 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa54 	bl	8003690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f825 	bl	8003238 <UART_SetConfig>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01b      	b.n	8003230 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fad3 	bl	80037d4 <UART_CheckIdleState>
 800322e:	4603      	mov	r3, r0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b08a      	sub	sp, #40	@ 0x28
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4313      	orrs	r3, r2
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4bb4      	ldr	r3, [pc, #720]	@ (8003538 <UART_SetConfig+0x300>)
 8003268:	4013      	ands	r3, r2
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003270:	430b      	orrs	r3, r1
 8003272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4aa9      	ldr	r2, [pc, #676]	@ (800353c <UART_SetConfig+0x304>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a0:	4313      	orrs	r3, r2
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4aa0      	ldr	r2, [pc, #640]	@ (8003540 <UART_SetConfig+0x308>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d126      	bne.n	8003310 <UART_SetConfig+0xd8>
 80032c2:	4ba0      	ldr	r3, [pc, #640]	@ (8003544 <UART_SetConfig+0x30c>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d81b      	bhi.n	8003308 <UART_SetConfig+0xd0>
 80032d0:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <UART_SetConfig+0xa0>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003301 	.word	0x08003301
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e080      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f6:	e07c      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80032f8:	2304      	movs	r3, #4
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032fe:	e078      	b.n	80033f2 <UART_SetConfig+0x1ba>
 8003300:	2308      	movs	r3, #8
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003306:	e074      	b.n	80033f2 <UART_SetConfig+0x1ba>
 8003308:	2310      	movs	r3, #16
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800330e:	e070      	b.n	80033f2 <UART_SetConfig+0x1ba>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8c      	ldr	r2, [pc, #560]	@ (8003548 <UART_SetConfig+0x310>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d138      	bne.n	800338c <UART_SetConfig+0x154>
 800331a:	4b8a      	ldr	r3, [pc, #552]	@ (8003544 <UART_SetConfig+0x30c>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d82d      	bhi.n	8003384 <UART_SetConfig+0x14c>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0xf8>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003365 	.word	0x08003365
 8003334:	08003385 	.word	0x08003385
 8003338:	08003385 	.word	0x08003385
 800333c:	08003385 	.word	0x08003385
 8003340:	08003375 	.word	0x08003375
 8003344:	08003385 	.word	0x08003385
 8003348:	08003385 	.word	0x08003385
 800334c:	08003385 	.word	0x08003385
 8003350:	0800336d 	.word	0x0800336d
 8003354:	08003385 	.word	0x08003385
 8003358:	08003385 	.word	0x08003385
 800335c:	08003385 	.word	0x08003385
 8003360:	0800337d 	.word	0x0800337d
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800336a:	e042      	b.n	80033f2 <UART_SetConfig+0x1ba>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003372:	e03e      	b.n	80033f2 <UART_SetConfig+0x1ba>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e03a      	b.n	80033f2 <UART_SetConfig+0x1ba>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e036      	b.n	80033f2 <UART_SetConfig+0x1ba>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338a:	e032      	b.n	80033f2 <UART_SetConfig+0x1ba>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <UART_SetConfig+0x304>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d12a      	bne.n	80033ec <UART_SetConfig+0x1b4>
 8003396:	4b6b      	ldr	r3, [pc, #428]	@ (8003544 <UART_SetConfig+0x30c>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033a4:	d01a      	beq.n	80033dc <UART_SetConfig+0x1a4>
 80033a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033aa:	d81b      	bhi.n	80033e4 <UART_SetConfig+0x1ac>
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b0:	d00c      	beq.n	80033cc <UART_SetConfig+0x194>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b6:	d815      	bhi.n	80033e4 <UART_SetConfig+0x1ac>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0x18c>
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c0:	d008      	beq.n	80033d4 <UART_SetConfig+0x19c>
 80033c2:	e00f      	b.n	80033e4 <UART_SetConfig+0x1ac>
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ca:	e012      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80033cc:	2302      	movs	r3, #2
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d2:	e00e      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80033d4:	2304      	movs	r3, #4
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033da:	e00a      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80033dc:	2308      	movs	r3, #8
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e2:	e006      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80033e4:	2310      	movs	r3, #16
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ea:	e002      	b.n	80033f2 <UART_SetConfig+0x1ba>
 80033ec:	2310      	movs	r3, #16
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a51      	ldr	r2, [pc, #324]	@ (800353c <UART_SetConfig+0x304>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d17a      	bne.n	80034f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003400:	2b08      	cmp	r3, #8
 8003402:	d824      	bhi.n	800344e <UART_SetConfig+0x216>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <UART_SetConfig+0x1d4>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003431 	.word	0x08003431
 8003410:	0800344f 	.word	0x0800344f
 8003414:	08003439 	.word	0x08003439
 8003418:	0800344f 	.word	0x0800344f
 800341c:	0800343f 	.word	0x0800343f
 8003420:	0800344f 	.word	0x0800344f
 8003424:	0800344f 	.word	0x0800344f
 8003428:	0800344f 	.word	0x0800344f
 800342c:	08003447 	.word	0x08003447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff fb30 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8003434:	61f8      	str	r0, [r7, #28]
        break;
 8003436:	e010      	b.n	800345a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003438:	4b44      	ldr	r3, [pc, #272]	@ (800354c <UART_SetConfig+0x314>)
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e00d      	b.n	800345a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343e:	f7ff fa91 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8003442:	61f8      	str	r0, [r7, #28]
        break;
 8003444:	e009      	b.n	800345a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344a:	61fb      	str	r3, [r7, #28]
        break;
 800344c:	e005      	b.n	800345a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003458:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8107 	beq.w	8003670 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	429a      	cmp	r2, r3
 8003470:	d305      	bcc.n	800347e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	429a      	cmp	r2, r3
 800347c:	d903      	bls.n	8003486 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003484:	e0f4      	b.n	8003670 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2200      	movs	r2, #0
 800348a:	461c      	mov	r4, r3
 800348c:	4615      	mov	r5, r2
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	022b      	lsls	r3, r5, #8
 8003498:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800349c:	0222      	lsls	r2, r4, #8
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	6849      	ldr	r1, [r1, #4]
 80034a2:	0849      	lsrs	r1, r1, #1
 80034a4:	2000      	movs	r0, #0
 80034a6:	4688      	mov	r8, r1
 80034a8:	4681      	mov	r9, r0
 80034aa:	eb12 0a08 	adds.w	sl, r2, r8
 80034ae:	eb43 0b09 	adc.w	fp, r3, r9
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c0:	4650      	mov	r0, sl
 80034c2:	4659      	mov	r1, fp
 80034c4:	f7fc fe82 	bl	80001cc <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034d6:	d308      	bcc.n	80034ea <UART_SetConfig+0x2b2>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034de:	d204      	bcs.n	80034ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e0c2      	b.n	8003670 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034f0:	e0be      	b.n	8003670 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fa:	d16a      	bne.n	80035d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003500:	2b08      	cmp	r3, #8
 8003502:	d834      	bhi.n	800356e <UART_SetConfig+0x336>
 8003504:	a201      	add	r2, pc, #4	@ (adr r2, 800350c <UART_SetConfig+0x2d4>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003531 	.word	0x08003531
 8003510:	08003551 	.word	0x08003551
 8003514:	08003559 	.word	0x08003559
 8003518:	0800356f 	.word	0x0800356f
 800351c:	0800355f 	.word	0x0800355f
 8003520:	0800356f 	.word	0x0800356f
 8003524:	0800356f 	.word	0x0800356f
 8003528:	0800356f 	.word	0x0800356f
 800352c:	08003567 	.word	0x08003567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7ff fab0 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8003534:	61f8      	str	r0, [r7, #28]
        break;
 8003536:	e020      	b.n	800357a <UART_SetConfig+0x342>
 8003538:	efff69f3 	.word	0xefff69f3
 800353c:	40008000 	.word	0x40008000
 8003540:	40013800 	.word	0x40013800
 8003544:	40021000 	.word	0x40021000
 8003548:	40004400 	.word	0x40004400
 800354c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7ff fab6 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8003554:	61f8      	str	r0, [r7, #28]
        break;
 8003556:	e010      	b.n	800357a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003558:	4b4c      	ldr	r3, [pc, #304]	@ (800368c <UART_SetConfig+0x454>)
 800355a:	61fb      	str	r3, [r7, #28]
        break;
 800355c:	e00d      	b.n	800357a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355e:	f7ff fa01 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8003562:	61f8      	str	r0, [r7, #28]
        break;
 8003564:	e009      	b.n	800357a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356a:	61fb      	str	r3, [r7, #28]
        break;
 800356c:	e005      	b.n	800357a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d077      	beq.n	8003670 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005a      	lsls	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	441a      	add	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d916      	bls.n	80035ca <UART_SetConfig+0x392>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a2:	d212      	bcs.n	80035ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f023 030f 	bic.w	r3, r3, #15
 80035ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	8afb      	ldrh	r3, [r7, #22]
 80035bc:	4313      	orrs	r3, r2
 80035be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	8afa      	ldrh	r2, [r7, #22]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	e052      	b.n	8003670 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035d0:	e04e      	b.n	8003670 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d827      	bhi.n	800362a <UART_SetConfig+0x3f2>
 80035da:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <UART_SetConfig+0x3a8>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	0800361b 	.word	0x0800361b
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
 8003600:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff fa46 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8003608:	61f8      	str	r0, [r7, #28]
        break;
 800360a:	e014      	b.n	8003636 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7ff fa58 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8003610:	61f8      	str	r0, [r7, #28]
        break;
 8003612:	e010      	b.n	8003636 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <UART_SetConfig+0x454>)
 8003616:	61fb      	str	r3, [r7, #28]
        break;
 8003618:	e00d      	b.n	8003636 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7ff f9a3 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 800361e:	61f8      	str	r0, [r7, #28]
        break;
 8003620:	e009      	b.n	8003636 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	e005      	b.n	8003636 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003634:	bf00      	nop
    }

    if (pclk != 0U)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	085a      	lsrs	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	d909      	bls.n	800366a <UART_SetConfig+0x432>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365c:	d205      	bcs.n	800366a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e002      	b.n	8003670 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800367c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368a:	bf00      	nop
 800368c:	00f42400 	.word	0x00f42400

08003690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378e:	d10a      	bne.n	80037a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b098      	sub	sp, #96	@ 0x60
 80037d8:	af02      	add	r7, sp, #8
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e4:	f7fd fa2c 	bl	8000c40 <HAL_GetTick>
 80037e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d12e      	bne.n	8003856 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f88c 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d021      	beq.n	8003856 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003826:	653b      	str	r3, [r7, #80]	@ 0x50
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e6      	bne.n	8003812 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e062      	b.n	800391c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d149      	bne.n	80038f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f856 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d03c      	beq.n	80038f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	623b      	str	r3, [r7, #32]
   return(result);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
 800389e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e6      	bne.n	800387e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	60fb      	str	r3, [r7, #12]
   return(result);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d0:	61fa      	str	r2, [r7, #28]
 80038d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	617b      	str	r3, [r7, #20]
   return(result);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e5      	bne.n	80038b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e011      	b.n	800391c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3758      	adds	r7, #88	@ 0x58
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003934:	e04f      	b.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d04b      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fd f97f 	bl	8000c40 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <UART_WaitOnFlagUntilTimeout+0x30>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e04e      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d037      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b80      	cmp	r3, #128	@ 0x80
 800396a:	d034      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	d031      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d110      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f838 	bl	80039fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2208      	movs	r2, #8
 8003992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e029      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b0:	d111      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f81e 	bl	80039fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e00f      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d0a0      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b095      	sub	sp, #84	@ 0x54
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a2c:	e841 2300 	strex	r3, r2, [r1]
 8003a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e6      	bne.n	8003a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d118      	bne.n	8003aa6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f023 0310 	bic.w	r3, r3, #16
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003aba:	bf00      	nop
 8003abc:	3754      	adds	r7, #84	@ 0x54
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <memset>:
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <memset+0xa>
 8003ace:	4770      	bx	lr
 8003ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad4:	e7f9      	b.n	8003aca <memset+0x4>
	...

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 f818 	bl	8003b20 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003b88 	.word	0x08003b88
 8003b14:	08003b88 	.word	0x08003b88
 8003b18:	08003b88 	.word	0x08003b88
 8003b1c:	08003b8c 	.word	0x08003b8c

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
